/*! For license information please see 29.dab82192.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[29,8],{"./dist/esm/Fields-c82e6df3.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return createField})),__webpack_require__.d(__webpack_exports__,"b",(function(){return deleteField})),__webpack_require__.d(__webpack_exports__,"c",(function(){return updateField}));__webpack_require__("./node_modules/core-js/modules/es.array.concat.js");var createField=function createField(endpoint,templateId,params){return endpoint.api.post("/templates/".concat(templateId,"/fields"),params).then((function(r){return r.data}))},updateField=function updateField(endpoint,templateId,fieldName,params){return endpoint.api.put("/templates/".concat(templateId,"/fields/").concat(fieldName),params).then((function(r){return r.data}))},deleteField=function deleteField(endpoint,templateId,fieldName){return endpoint.api.delete("/templates/".concat(templateId,"/fields/").concat(fieldName)).then((function(r){return r.data}))}},"./dist/esm/_commonjsHelpers-5ec8f9b7.js":function(module,__webpack_exports__,__webpack_require__){"use strict";(function(global){__webpack_require__.d(__webpack_exports__,"a",(function(){return commonjsGlobal})),__webpack_require__.d(__webpack_exports__,"b",(function(){return commonjsRequire})),__webpack_require__.d(__webpack_exports__,"c",(function(){return createCommonjsModule})),__webpack_require__.d(__webpack_exports__,"d",(function(){return getDefaultExportFromCjs}));__webpack_require__("./node_modules/core-js/modules/es.global-this.js");var commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==global?global:"undefined"!=typeof self?self:{};function getDefaultExportFromCjs(x){return x&&x.__esModule&&Object.prototype.hasOwnProperty.call(x,"default")?x.default:x}function createCommonjsModule(fn,basedir,module){return fn(module={path:basedir,exports:{},require:function require(path,base){return commonjsRequire()}},module.exports),module.exports}function commonjsRequire(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}}).call(this,__webpack_require__("./node_modules/@storybook/builder-webpack4/node_modules/webpack/buildin/global.js"))},"./dist/esm/popper-bfa25c7f.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return createPopper}));__webpack_require__("./node_modules/core-js/modules/es.array.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.string.replace.js"),__webpack_require__("./node_modules/core-js/modules/es.array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.map.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.every.js"),__webpack_require__("./node_modules/core-js/modules/es.array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.array.some.js"),__webpack_require__("./node_modules/core-js/modules/es.set.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js");var top="top",bottom="bottom",right="right",left="left",auto="auto",basePlacements=[top,bottom,right,left],start="start",end="end",clippingParents="clippingParents",viewport="viewport",popper="popper",reference="reference",variationPlacements=basePlacements.reduce((function(acc,placement){return acc.concat([placement+"-"+start,placement+"-"+end])}),[]),placements=[].concat(basePlacements,[auto]).reduce((function(acc,placement){return acc.concat([placement,placement+"-"+start,placement+"-"+end])}),[]),modifierPhases=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function getNodeName(element){return element?(element.nodeName||"").toLowerCase():null}function getWindow(node){if(null==node)return window;if("[object Window]"!==node.toString()){var ownerDocument=node.ownerDocument;return ownerDocument&&ownerDocument.defaultView||window}return node}function isElement(node){return node instanceof getWindow(node).Element||node instanceof Element}function isHTMLElement(node){return node instanceof getWindow(node).HTMLElement||node instanceof HTMLElement}function isShadowRoot(node){return"undefined"!=typeof ShadowRoot&&(node instanceof getWindow(node).ShadowRoot||node instanceof ShadowRoot)}var applyStyles$1={name:"applyStyles",enabled:!0,phase:"write",fn:function applyStyles(_ref){var state=_ref.state;Object.keys(state.elements).forEach((function(name){var style=state.styles[name]||{},attributes=state.attributes[name]||{},element=state.elements[name];isHTMLElement(element)&&getNodeName(element)&&(Object.assign(element.style,style),Object.keys(attributes).forEach((function(name){var value=attributes[name];!1===value?element.removeAttribute(name):element.setAttribute(name,!0===value?"":value)})))}))},effect:function effect$2(_ref2){var state=_ref2.state,initialStyles={popper:{position:state.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(state.elements.popper.style,initialStyles.popper),state.styles=initialStyles,state.elements.arrow&&Object.assign(state.elements.arrow.style,initialStyles.arrow),function(){Object.keys(state.elements).forEach((function(name){var element=state.elements[name],attributes=state.attributes[name]||{},style=Object.keys(state.styles.hasOwnProperty(name)?state.styles[name]:initialStyles[name]).reduce((function(style,property){return style[property]="",style}),{});isHTMLElement(element)&&getNodeName(element)&&(Object.assign(element.style,style),Object.keys(attributes).forEach((function(attribute){element.removeAttribute(attribute)})))}))}},requires:["computeStyles"]};function getBasePlacement(placement){return placement.split("-")[0]}var max=Math.max,min=Math.min,round=Math.round;function getUAString(){var uaData=navigator.userAgentData;return null!=uaData&&uaData.brands&&Array.isArray(uaData.brands)?uaData.brands.map((function(item){return item.brand+"/"+item.version})).join(" "):navigator.userAgent}function isLayoutViewport(){return!/^((?!chrome|android).)*safari/i.test(getUAString())}function getBoundingClientRect(element,includeScale,isFixedStrategy){void 0===includeScale&&(includeScale=!1),void 0===isFixedStrategy&&(isFixedStrategy=!1);var clientRect=element.getBoundingClientRect(),scaleX=1,scaleY=1;includeScale&&isHTMLElement(element)&&(scaleX=element.offsetWidth>0&&round(clientRect.width)/element.offsetWidth||1,scaleY=element.offsetHeight>0&&round(clientRect.height)/element.offsetHeight||1);var visualViewport=(isElement(element)?getWindow(element):window).visualViewport,addVisualOffsets=!isLayoutViewport()&&isFixedStrategy,x=(clientRect.left+(addVisualOffsets&&visualViewport?visualViewport.offsetLeft:0))/scaleX,y=(clientRect.top+(addVisualOffsets&&visualViewport?visualViewport.offsetTop:0))/scaleY,width=clientRect.width/scaleX,height=clientRect.height/scaleY;return{width:width,height:height,top:y,right:x+width,bottom:y+height,left:x,x:x,y:y}}function getLayoutRect(element){var clientRect=getBoundingClientRect(element),width=element.offsetWidth,height=element.offsetHeight;return Math.abs(clientRect.width-width)<=1&&(width=clientRect.width),Math.abs(clientRect.height-height)<=1&&(height=clientRect.height),{x:element.offsetLeft,y:element.offsetTop,width:width,height:height}}function contains(parent,child){var rootNode=child.getRootNode&&child.getRootNode();if(parent.contains(child))return!0;if(rootNode&&isShadowRoot(rootNode)){var next=child;do{if(next&&parent.isSameNode(next))return!0;next=next.parentNode||next.host}while(next)}return!1}function getComputedStyle(element){return getWindow(element).getComputedStyle(element)}function isTableElement(element){return["table","td","th"].indexOf(getNodeName(element))>=0}function getDocumentElement(element){return((isElement(element)?element.ownerDocument:element.document)||window.document).documentElement}function getParentNode(element){return"html"===getNodeName(element)?element:element.assignedSlot||element.parentNode||(isShadowRoot(element)?element.host:null)||getDocumentElement(element)}function getTrueOffsetParent(element){return isHTMLElement(element)&&"fixed"!==getComputedStyle(element).position?element.offsetParent:null}function getOffsetParent(element){for(var window=getWindow(element),offsetParent=getTrueOffsetParent(element);offsetParent&&isTableElement(offsetParent)&&"static"===getComputedStyle(offsetParent).position;)offsetParent=getTrueOffsetParent(offsetParent);return offsetParent&&("html"===getNodeName(offsetParent)||"body"===getNodeName(offsetParent)&&"static"===getComputedStyle(offsetParent).position)?window:offsetParent||function getContainingBlock(element){var isFirefox=/firefox/i.test(getUAString());if(/Trident/i.test(getUAString())&&isHTMLElement(element)&&"fixed"===getComputedStyle(element).position)return null;var currentNode=getParentNode(element);for(isShadowRoot(currentNode)&&(currentNode=currentNode.host);isHTMLElement(currentNode)&&["html","body"].indexOf(getNodeName(currentNode))<0;){var css=getComputedStyle(currentNode);if("none"!==css.transform||"none"!==css.perspective||"paint"===css.contain||-1!==["transform","perspective"].indexOf(css.willChange)||isFirefox&&"filter"===css.willChange||isFirefox&&css.filter&&"none"!==css.filter)return currentNode;currentNode=currentNode.parentNode}return null}(element)||window}function getMainAxisFromPlacement(placement){return["top","bottom"].indexOf(placement)>=0?"x":"y"}function within(min$1,value,max$1){return max(min$1,min(value,max$1))}function mergePaddingObject(paddingObject){return Object.assign({},{top:0,right:0,bottom:0,left:0},paddingObject)}function expandToHashMap(value,keys){return keys.reduce((function(hashMap,key){return hashMap[key]=value,hashMap}),{})}var toPaddingObject=function toPaddingObject(padding,state){return mergePaddingObject("number"!=typeof(padding="function"==typeof padding?padding(Object.assign({},state.rects,{placement:state.placement})):padding)?padding:expandToHashMap(padding,basePlacements))};var arrow$1={name:"arrow",enabled:!0,phase:"main",fn:function arrow(_ref){var _state$modifiersData$,state=_ref.state,name=_ref.name,options=_ref.options,arrowElement=state.elements.arrow,popperOffsets=state.modifiersData.popperOffsets,basePlacement=getBasePlacement(state.placement),axis=getMainAxisFromPlacement(basePlacement),len=[left,right].indexOf(basePlacement)>=0?"height":"width";if(arrowElement&&popperOffsets){var paddingObject=toPaddingObject(options.padding,state),arrowRect=getLayoutRect(arrowElement),minProp="y"===axis?top:left,maxProp="y"===axis?bottom:right,endDiff=state.rects.reference[len]+state.rects.reference[axis]-popperOffsets[axis]-state.rects.popper[len],startDiff=popperOffsets[axis]-state.rects.reference[axis],arrowOffsetParent=getOffsetParent(arrowElement),clientSize=arrowOffsetParent?"y"===axis?arrowOffsetParent.clientHeight||0:arrowOffsetParent.clientWidth||0:0,centerToReference=endDiff/2-startDiff/2,min=paddingObject[minProp],max=clientSize-arrowRect[len]-paddingObject[maxProp],center=clientSize/2-arrowRect[len]/2+centerToReference,offset=within(min,center,max),axisProp=axis;state.modifiersData[name]=((_state$modifiersData$={})[axisProp]=offset,_state$modifiersData$.centerOffset=offset-center,_state$modifiersData$)}},effect:function effect$1(_ref2){var state=_ref2.state,_options$element=_ref2.options.element,arrowElement=void 0===_options$element?"[data-popper-arrow]":_options$element;null!=arrowElement&&("string"!=typeof arrowElement||(arrowElement=state.elements.popper.querySelector(arrowElement)))&&contains(state.elements.popper,arrowElement)&&(state.elements.arrow=arrowElement)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function getVariation(placement){return placement.split("-")[1]}var unsetSides={top:"auto",right:"auto",bottom:"auto",left:"auto"};function mapToStyles(_ref2){var _Object$assign2,popper=_ref2.popper,popperRect=_ref2.popperRect,placement=_ref2.placement,variation=_ref2.variation,offsets=_ref2.offsets,position=_ref2.position,gpuAcceleration=_ref2.gpuAcceleration,adaptive=_ref2.adaptive,roundOffsets=_ref2.roundOffsets,isFixed=_ref2.isFixed,_offsets$x=offsets.x,x=void 0===_offsets$x?0:_offsets$x,_offsets$y=offsets.y,y=void 0===_offsets$y?0:_offsets$y,_ref3="function"==typeof roundOffsets?roundOffsets({x:x,y:y}):{x:x,y:y};x=_ref3.x,y=_ref3.y;var hasX=offsets.hasOwnProperty("x"),hasY=offsets.hasOwnProperty("y"),sideX=left,sideY=top,win=window;if(adaptive){var offsetParent=getOffsetParent(popper),heightProp="clientHeight",widthProp="clientWidth";if(offsetParent===getWindow(popper)&&"static"!==getComputedStyle(offsetParent=getDocumentElement(popper)).position&&"absolute"===position&&(heightProp="scrollHeight",widthProp="scrollWidth"),placement===top||(placement===left||placement===right)&&variation===end)sideY=bottom,y-=(isFixed&&offsetParent===win&&win.visualViewport?win.visualViewport.height:offsetParent[heightProp])-popperRect.height,y*=gpuAcceleration?1:-1;if(placement===left||(placement===top||placement===bottom)&&variation===end)sideX=right,x-=(isFixed&&offsetParent===win&&win.visualViewport?win.visualViewport.width:offsetParent[widthProp])-popperRect.width,x*=gpuAcceleration?1:-1}var _Object$assign,commonStyles=Object.assign({position:position},adaptive&&unsetSides),_ref4=!0===roundOffsets?function roundOffsetsByDPR(_ref,win){var x=_ref.x,y=_ref.y,dpr=win.devicePixelRatio||1;return{x:round(x*dpr)/dpr||0,y:round(y*dpr)/dpr||0}}({x:x,y:y},getWindow(popper)):{x:x,y:y};return x=_ref4.x,y=_ref4.y,gpuAcceleration?Object.assign({},commonStyles,((_Object$assign={})[sideY]=hasY?"0":"",_Object$assign[sideX]=hasX?"0":"",_Object$assign.transform=(win.devicePixelRatio||1)<=1?"translate("+x+"px, "+y+"px)":"translate3d("+x+"px, "+y+"px, 0)",_Object$assign)):Object.assign({},commonStyles,((_Object$assign2={})[sideY]=hasY?y+"px":"",_Object$assign2[sideX]=hasX?x+"px":"",_Object$assign2.transform="",_Object$assign2))}var passive={passive:!0};var hash$1={left:"right",right:"left",bottom:"top",top:"bottom"};function getOppositePlacement(placement){return placement.replace(/left|right|bottom|top/g,(function(matched){return hash$1[matched]}))}var hash={start:"end",end:"start"};function getOppositeVariationPlacement(placement){return placement.replace(/start|end/g,(function(matched){return hash[matched]}))}function getWindowScroll(node){var win=getWindow(node);return{scrollLeft:win.pageXOffset,scrollTop:win.pageYOffset}}function getWindowScrollBarX(element){return getBoundingClientRect(getDocumentElement(element)).left+getWindowScroll(element).scrollLeft}function isScrollParent(element){var _getComputedStyle=getComputedStyle(element),overflow=_getComputedStyle.overflow,overflowX=_getComputedStyle.overflowX,overflowY=_getComputedStyle.overflowY;return/auto|scroll|overlay|hidden/.test(overflow+overflowY+overflowX)}function getScrollParent(node){return["html","body","#document"].indexOf(getNodeName(node))>=0?node.ownerDocument.body:isHTMLElement(node)&&isScrollParent(node)?node:getScrollParent(getParentNode(node))}function listScrollParents(element,list){var _element$ownerDocumen;void 0===list&&(list=[]);var scrollParent=getScrollParent(element),isBody=scrollParent===(null==(_element$ownerDocumen=element.ownerDocument)?void 0:_element$ownerDocumen.body),win=getWindow(scrollParent),target=isBody?[win].concat(win.visualViewport||[],isScrollParent(scrollParent)?scrollParent:[]):scrollParent,updatedList=list.concat(target);return isBody?updatedList:updatedList.concat(listScrollParents(getParentNode(target)))}function rectToClientRect(rect){return Object.assign({},rect,{left:rect.x,top:rect.y,right:rect.x+rect.width,bottom:rect.y+rect.height})}function getClientRectFromMixedType(element,clippingParent,strategy){return clippingParent===viewport?rectToClientRect(function getViewportRect(element,strategy){var win=getWindow(element),html=getDocumentElement(element),visualViewport=win.visualViewport,width=html.clientWidth,height=html.clientHeight,x=0,y=0;if(visualViewport){width=visualViewport.width,height=visualViewport.height;var layoutViewport=isLayoutViewport();(layoutViewport||!layoutViewport&&"fixed"===strategy)&&(x=visualViewport.offsetLeft,y=visualViewport.offsetTop)}return{width:width,height:height,x:x+getWindowScrollBarX(element),y:y}}(element,strategy)):isElement(clippingParent)?function getInnerBoundingClientRect(element,strategy){var rect=getBoundingClientRect(element,!1,"fixed"===strategy);return rect.top=rect.top+element.clientTop,rect.left=rect.left+element.clientLeft,rect.bottom=rect.top+element.clientHeight,rect.right=rect.left+element.clientWidth,rect.width=element.clientWidth,rect.height=element.clientHeight,rect.x=rect.left,rect.y=rect.top,rect}(clippingParent,strategy):rectToClientRect(function getDocumentRect(element){var _element$ownerDocumen,html=getDocumentElement(element),winScroll=getWindowScroll(element),body=null==(_element$ownerDocumen=element.ownerDocument)?void 0:_element$ownerDocumen.body,width=max(html.scrollWidth,html.clientWidth,body?body.scrollWidth:0,body?body.clientWidth:0),height=max(html.scrollHeight,html.clientHeight,body?body.scrollHeight:0,body?body.clientHeight:0),x=-winScroll.scrollLeft+getWindowScrollBarX(element),y=-winScroll.scrollTop;return"rtl"===getComputedStyle(body||html).direction&&(x+=max(html.clientWidth,body?body.clientWidth:0)-width),{width:width,height:height,x:x,y:y}}(getDocumentElement(element)))}function getClippingRect(element,boundary,rootBoundary,strategy){var mainClippingParents="clippingParents"===boundary?function getClippingParents(element){var clippingParents=listScrollParents(getParentNode(element)),clipperElement=["absolute","fixed"].indexOf(getComputedStyle(element).position)>=0&&isHTMLElement(element)?getOffsetParent(element):element;return isElement(clipperElement)?clippingParents.filter((function(clippingParent){return isElement(clippingParent)&&contains(clippingParent,clipperElement)&&"body"!==getNodeName(clippingParent)})):[]}(element):[].concat(boundary),clippingParents=[].concat(mainClippingParents,[rootBoundary]),firstClippingParent=clippingParents[0],clippingRect=clippingParents.reduce((function(accRect,clippingParent){var rect=getClientRectFromMixedType(element,clippingParent,strategy);return accRect.top=max(rect.top,accRect.top),accRect.right=min(rect.right,accRect.right),accRect.bottom=min(rect.bottom,accRect.bottom),accRect.left=max(rect.left,accRect.left),accRect}),getClientRectFromMixedType(element,firstClippingParent,strategy));return clippingRect.width=clippingRect.right-clippingRect.left,clippingRect.height=clippingRect.bottom-clippingRect.top,clippingRect.x=clippingRect.left,clippingRect.y=clippingRect.top,clippingRect}function computeOffsets(_ref){var offsets,reference=_ref.reference,element=_ref.element,placement=_ref.placement,basePlacement=placement?getBasePlacement(placement):null,variation=placement?getVariation(placement):null,commonX=reference.x+reference.width/2-element.width/2,commonY=reference.y+reference.height/2-element.height/2;switch(basePlacement){case top:offsets={x:commonX,y:reference.y-element.height};break;case bottom:offsets={x:commonX,y:reference.y+reference.height};break;case right:offsets={x:reference.x+reference.width,y:commonY};break;case left:offsets={x:reference.x-element.width,y:commonY};break;default:offsets={x:reference.x,y:reference.y}}var mainAxis=basePlacement?getMainAxisFromPlacement(basePlacement):null;if(null!=mainAxis){var len="y"===mainAxis?"height":"width";switch(variation){case start:offsets[mainAxis]=offsets[mainAxis]-(reference[len]/2-element[len]/2);break;case end:offsets[mainAxis]=offsets[mainAxis]+(reference[len]/2-element[len]/2)}}return offsets}function detectOverflow(state,options){void 0===options&&(options={});var _options=options,_options$placement=_options.placement,placement=void 0===_options$placement?state.placement:_options$placement,_options$strategy=_options.strategy,strategy=void 0===_options$strategy?state.strategy:_options$strategy,_options$boundary=_options.boundary,boundary=void 0===_options$boundary?clippingParents:_options$boundary,_options$rootBoundary=_options.rootBoundary,rootBoundary=void 0===_options$rootBoundary?viewport:_options$rootBoundary,_options$elementConte=_options.elementContext,elementContext=void 0===_options$elementConte?popper:_options$elementConte,_options$altBoundary=_options.altBoundary,altBoundary=void 0!==_options$altBoundary&&_options$altBoundary,_options$padding=_options.padding,padding=void 0===_options$padding?0:_options$padding,paddingObject=mergePaddingObject("number"!=typeof padding?padding:expandToHashMap(padding,basePlacements)),altContext=elementContext===popper?reference:popper,popperRect=state.rects.popper,element=state.elements[altBoundary?altContext:elementContext],clippingClientRect=getClippingRect(isElement(element)?element:element.contextElement||getDocumentElement(state.elements.popper),boundary,rootBoundary,strategy),referenceClientRect=getBoundingClientRect(state.elements.reference),popperOffsets=computeOffsets({reference:referenceClientRect,element:popperRect,strategy:"absolute",placement:placement}),popperClientRect=rectToClientRect(Object.assign({},popperRect,popperOffsets)),elementClientRect=elementContext===popper?popperClientRect:referenceClientRect,overflowOffsets={top:clippingClientRect.top-elementClientRect.top+paddingObject.top,bottom:elementClientRect.bottom-clippingClientRect.bottom+paddingObject.bottom,left:clippingClientRect.left-elementClientRect.left+paddingObject.left,right:elementClientRect.right-clippingClientRect.right+paddingObject.right},offsetData=state.modifiersData.offset;if(elementContext===popper&&offsetData){var offset=offsetData[placement];Object.keys(overflowOffsets).forEach((function(key){var multiply=[right,bottom].indexOf(key)>=0?1:-1,axis=[top,bottom].indexOf(key)>=0?"y":"x";overflowOffsets[key]+=offset[axis]*multiply}))}return overflowOffsets}function computeAutoPlacement(state,options){void 0===options&&(options={});var _options=options,placement=_options.placement,boundary=_options.boundary,rootBoundary=_options.rootBoundary,padding=_options.padding,flipVariations=_options.flipVariations,_options$allowedAutoP=_options.allowedAutoPlacements,allowedAutoPlacements=void 0===_options$allowedAutoP?placements:_options$allowedAutoP,variation=getVariation(placement),placements$1=variation?flipVariations?variationPlacements:variationPlacements.filter((function(placement){return getVariation(placement)===variation})):basePlacements,allowedPlacements=placements$1.filter((function(placement){return allowedAutoPlacements.indexOf(placement)>=0}));0===allowedPlacements.length&&(allowedPlacements=placements$1);var overflows=allowedPlacements.reduce((function(acc,placement){return acc[placement]=detectOverflow(state,{placement:placement,boundary:boundary,rootBoundary:rootBoundary,padding:padding})[getBasePlacement(placement)],acc}),{});return Object.keys(overflows).sort((function(a,b){return overflows[a]-overflows[b]}))}var flip$1={name:"flip",enabled:!0,phase:"main",fn:function flip(_ref){var state=_ref.state,options=_ref.options,name=_ref.name;if(!state.modifiersData[name]._skip){for(var _options$mainAxis=options.mainAxis,checkMainAxis=void 0===_options$mainAxis||_options$mainAxis,_options$altAxis=options.altAxis,checkAltAxis=void 0===_options$altAxis||_options$altAxis,specifiedFallbackPlacements=options.fallbackPlacements,padding=options.padding,boundary=options.boundary,rootBoundary=options.rootBoundary,altBoundary=options.altBoundary,_options$flipVariatio=options.flipVariations,flipVariations=void 0===_options$flipVariatio||_options$flipVariatio,allowedAutoPlacements=options.allowedAutoPlacements,preferredPlacement=state.options.placement,basePlacement=getBasePlacement(preferredPlacement),fallbackPlacements=specifiedFallbackPlacements||(basePlacement===preferredPlacement||!flipVariations?[getOppositePlacement(preferredPlacement)]:function getExpandedFallbackPlacements(placement){if(getBasePlacement(placement)===auto)return[];var oppositePlacement=getOppositePlacement(placement);return[getOppositeVariationPlacement(placement),oppositePlacement,getOppositeVariationPlacement(oppositePlacement)]}(preferredPlacement)),placements=[preferredPlacement].concat(fallbackPlacements).reduce((function(acc,placement){return acc.concat(getBasePlacement(placement)===auto?computeAutoPlacement(state,{placement:placement,boundary:boundary,rootBoundary:rootBoundary,padding:padding,flipVariations:flipVariations,allowedAutoPlacements:allowedAutoPlacements}):placement)}),[]),referenceRect=state.rects.reference,popperRect=state.rects.popper,checksMap=new Map,makeFallbackChecks=!0,firstFittingPlacement=placements[0],i=0;i<placements.length;i++){var placement=placements[i],_basePlacement=getBasePlacement(placement),isStartVariation=getVariation(placement)===start,isVertical=[top,bottom].indexOf(_basePlacement)>=0,len=isVertical?"width":"height",overflow=detectOverflow(state,{placement:placement,boundary:boundary,rootBoundary:rootBoundary,altBoundary:altBoundary,padding:padding}),mainVariationSide=isVertical?isStartVariation?right:left:isStartVariation?bottom:top;referenceRect[len]>popperRect[len]&&(mainVariationSide=getOppositePlacement(mainVariationSide));var altVariationSide=getOppositePlacement(mainVariationSide),checks=[];if(checkMainAxis&&checks.push(overflow[_basePlacement]<=0),checkAltAxis&&checks.push(overflow[mainVariationSide]<=0,overflow[altVariationSide]<=0),checks.every((function(check){return check}))){firstFittingPlacement=placement,makeFallbackChecks=!1;break}checksMap.set(placement,checks)}if(makeFallbackChecks)for(var _loop=function _loop(_i){var fittingPlacement=placements.find((function(placement){var checks=checksMap.get(placement);if(checks)return checks.slice(0,_i).every((function(check){return check}))}));if(fittingPlacement)return firstFittingPlacement=fittingPlacement,"break"},_i=flipVariations?3:1;_i>0;_i--){if("break"===_loop(_i))break}state.placement!==firstFittingPlacement&&(state.modifiersData[name]._skip=!0,state.placement=firstFittingPlacement,state.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function getSideOffsets(overflow,rect,preventedOffsets){return void 0===preventedOffsets&&(preventedOffsets={x:0,y:0}),{top:overflow.top-rect.height-preventedOffsets.y,right:overflow.right-rect.width+preventedOffsets.x,bottom:overflow.bottom-rect.height+preventedOffsets.y,left:overflow.left-rect.width-preventedOffsets.x}}function isAnySideFullyClipped(overflow){return[top,right,bottom,left].some((function(side){return overflow[side]>=0}))}var offset$1={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function offset(_ref2){var state=_ref2.state,options=_ref2.options,name=_ref2.name,_options$offset=options.offset,offset=void 0===_options$offset?[0,0]:_options$offset,data=placements.reduce((function(acc,placement){return acc[placement]=function distanceAndSkiddingToXY(placement,rects,offset){var basePlacement=getBasePlacement(placement),invertDistance=[left,top].indexOf(basePlacement)>=0?-1:1,_ref="function"==typeof offset?offset(Object.assign({},rects,{placement:placement})):offset,skidding=_ref[0],distance=_ref[1];return skidding=skidding||0,distance=(distance||0)*invertDistance,[left,right].indexOf(basePlacement)>=0?{x:distance,y:skidding}:{x:skidding,y:distance}}(placement,state.rects,offset),acc}),{}),_data$state$placement=data[state.placement],x=_data$state$placement.x,y=_data$state$placement.y;null!=state.modifiersData.popperOffsets&&(state.modifiersData.popperOffsets.x+=x,state.modifiersData.popperOffsets.y+=y),state.modifiersData[name]=data}};var preventOverflow$1={name:"preventOverflow",enabled:!0,phase:"main",fn:function preventOverflow(_ref){var state=_ref.state,options=_ref.options,name=_ref.name,_options$mainAxis=options.mainAxis,checkMainAxis=void 0===_options$mainAxis||_options$mainAxis,_options$altAxis=options.altAxis,checkAltAxis=void 0!==_options$altAxis&&_options$altAxis,boundary=options.boundary,rootBoundary=options.rootBoundary,altBoundary=options.altBoundary,padding=options.padding,_options$tether=options.tether,tether=void 0===_options$tether||_options$tether,_options$tetherOffset=options.tetherOffset,tetherOffset=void 0===_options$tetherOffset?0:_options$tetherOffset,overflow=detectOverflow(state,{boundary:boundary,rootBoundary:rootBoundary,padding:padding,altBoundary:altBoundary}),basePlacement=getBasePlacement(state.placement),variation=getVariation(state.placement),isBasePlacement=!variation,mainAxis=getMainAxisFromPlacement(basePlacement),altAxis=function getAltAxis(axis){return"x"===axis?"y":"x"}(mainAxis),popperOffsets=state.modifiersData.popperOffsets,referenceRect=state.rects.reference,popperRect=state.rects.popper,tetherOffsetValue="function"==typeof tetherOffset?tetherOffset(Object.assign({},state.rects,{placement:state.placement})):tetherOffset,normalizedTetherOffsetValue="number"==typeof tetherOffsetValue?{mainAxis:tetherOffsetValue,altAxis:tetherOffsetValue}:Object.assign({mainAxis:0,altAxis:0},tetherOffsetValue),offsetModifierState=state.modifiersData.offset?state.modifiersData.offset[state.placement]:null,data={x:0,y:0};if(popperOffsets){if(checkMainAxis){var _offsetModifierState$,mainSide="y"===mainAxis?top:left,altSide="y"===mainAxis?bottom:right,len="y"===mainAxis?"height":"width",offset=popperOffsets[mainAxis],min$1=offset+overflow[mainSide],max$1=offset-overflow[altSide],additive=tether?-popperRect[len]/2:0,minLen=variation===start?referenceRect[len]:popperRect[len],maxLen=variation===start?-popperRect[len]:-referenceRect[len],arrowElement=state.elements.arrow,arrowRect=tether&&arrowElement?getLayoutRect(arrowElement):{width:0,height:0},arrowPaddingObject=state.modifiersData["arrow#persistent"]?state.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},arrowPaddingMin=arrowPaddingObject[mainSide],arrowPaddingMax=arrowPaddingObject[altSide],arrowLen=within(0,referenceRect[len],arrowRect[len]),minOffset=isBasePlacement?referenceRect[len]/2-additive-arrowLen-arrowPaddingMin-normalizedTetherOffsetValue.mainAxis:minLen-arrowLen-arrowPaddingMin-normalizedTetherOffsetValue.mainAxis,maxOffset=isBasePlacement?-referenceRect[len]/2+additive+arrowLen+arrowPaddingMax+normalizedTetherOffsetValue.mainAxis:maxLen+arrowLen+arrowPaddingMax+normalizedTetherOffsetValue.mainAxis,arrowOffsetParent=state.elements.arrow&&getOffsetParent(state.elements.arrow),clientOffset=arrowOffsetParent?"y"===mainAxis?arrowOffsetParent.clientTop||0:arrowOffsetParent.clientLeft||0:0,offsetModifierValue=null!=(_offsetModifierState$=null==offsetModifierState?void 0:offsetModifierState[mainAxis])?_offsetModifierState$:0,tetherMax=offset+maxOffset-offsetModifierValue,preventedOffset=within(tether?min(min$1,offset+minOffset-offsetModifierValue-clientOffset):min$1,offset,tether?max(max$1,tetherMax):max$1);popperOffsets[mainAxis]=preventedOffset,data[mainAxis]=preventedOffset-offset}if(checkAltAxis){var _offsetModifierState$2,_mainSide="x"===mainAxis?top:left,_altSide="x"===mainAxis?bottom:right,_offset=popperOffsets[altAxis],_len="y"===altAxis?"height":"width",_min=_offset+overflow[_mainSide],_max=_offset-overflow[_altSide],isOriginSide=-1!==[top,left].indexOf(basePlacement),_offsetModifierValue=null!=(_offsetModifierState$2=null==offsetModifierState?void 0:offsetModifierState[altAxis])?_offsetModifierState$2:0,_tetherMin=isOriginSide?_min:_offset-referenceRect[_len]-popperRect[_len]-_offsetModifierValue+normalizedTetherOffsetValue.altAxis,_tetherMax=isOriginSide?_offset+referenceRect[_len]+popperRect[_len]-_offsetModifierValue-normalizedTetherOffsetValue.altAxis:_max,_preventedOffset=tether&&isOriginSide?function withinMaxClamp(min,value,max){var v=within(min,value,max);return v>max?max:v}(_tetherMin,_offset,_tetherMax):within(tether?_tetherMin:_min,_offset,tether?_tetherMax:_max);popperOffsets[altAxis]=_preventedOffset,data[altAxis]=_preventedOffset-_offset}state.modifiersData[name]=data}},requiresIfExists:["offset"]};function getCompositeRect(elementOrVirtualElement,offsetParent,isFixed){void 0===isFixed&&(isFixed=!1);var isOffsetParentAnElement=isHTMLElement(offsetParent),offsetParentIsScaled=isHTMLElement(offsetParent)&&function isElementScaled(element){var rect=element.getBoundingClientRect(),scaleX=round(rect.width)/element.offsetWidth||1,scaleY=round(rect.height)/element.offsetHeight||1;return 1!==scaleX||1!==scaleY}(offsetParent),documentElement=getDocumentElement(offsetParent),rect=getBoundingClientRect(elementOrVirtualElement,offsetParentIsScaled,isFixed),scroll={scrollLeft:0,scrollTop:0},offsets={x:0,y:0};return(isOffsetParentAnElement||!isOffsetParentAnElement&&!isFixed)&&(("body"!==getNodeName(offsetParent)||isScrollParent(documentElement))&&(scroll=function getNodeScroll(node){return node!==getWindow(node)&&isHTMLElement(node)?function getHTMLElementScroll(element){return{scrollLeft:element.scrollLeft,scrollTop:element.scrollTop}}(node):getWindowScroll(node)}(offsetParent)),isHTMLElement(offsetParent)?((offsets=getBoundingClientRect(offsetParent,!0)).x+=offsetParent.clientLeft,offsets.y+=offsetParent.clientTop):documentElement&&(offsets.x=getWindowScrollBarX(documentElement))),{x:rect.left+scroll.scrollLeft-offsets.x,y:rect.top+scroll.scrollTop-offsets.y,width:rect.width,height:rect.height}}function order(modifiers){var map=new Map,visited=new Set,result=[];function sort(modifier){visited.add(modifier.name),[].concat(modifier.requires||[],modifier.requiresIfExists||[]).forEach((function(dep){if(!visited.has(dep)){var depModifier=map.get(dep);depModifier&&sort(depModifier)}})),result.push(modifier)}return modifiers.forEach((function(modifier){map.set(modifier.name,modifier)})),modifiers.forEach((function(modifier){visited.has(modifier.name)||sort(modifier)})),result}var DEFAULT_OPTIONS={placement:"bottom",modifiers:[],strategy:"absolute"};function areValidElements(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return!args.some((function(element){return!(element&&"function"==typeof element.getBoundingClientRect)}))}function popperGenerator(generatorOptions){void 0===generatorOptions&&(generatorOptions={});var _generatorOptions=generatorOptions,_generatorOptions$def=_generatorOptions.defaultModifiers,defaultModifiers=void 0===_generatorOptions$def?[]:_generatorOptions$def,_generatorOptions$def2=_generatorOptions.defaultOptions,defaultOptions=void 0===_generatorOptions$def2?DEFAULT_OPTIONS:_generatorOptions$def2;return function createPopper(reference,popper,options){void 0===options&&(options=defaultOptions);var fn,pending,state={placement:"bottom",orderedModifiers:[],options:Object.assign({},DEFAULT_OPTIONS,defaultOptions),modifiersData:{},elements:{reference:reference,popper:popper},attributes:{},styles:{}},effectCleanupFns=[],isDestroyed=!1,instance={state:state,setOptions:function setOptions(setOptionsAction){var options="function"==typeof setOptionsAction?setOptionsAction(state.options):setOptionsAction;cleanupModifierEffects(),state.options=Object.assign({},defaultOptions,state.options,options),state.scrollParents={reference:isElement(reference)?listScrollParents(reference):reference.contextElement?listScrollParents(reference.contextElement):[],popper:listScrollParents(popper)};var orderedModifiers=function orderModifiers(modifiers){var orderedModifiers=order(modifiers);return modifierPhases.reduce((function(acc,phase){return acc.concat(orderedModifiers.filter((function(modifier){return modifier.phase===phase})))}),[])}(function mergeByName(modifiers){var merged=modifiers.reduce((function(merged,current){var existing=merged[current.name];return merged[current.name]=existing?Object.assign({},existing,current,{options:Object.assign({},existing.options,current.options),data:Object.assign({},existing.data,current.data)}):current,merged}),{});return Object.keys(merged).map((function(key){return merged[key]}))}([].concat(defaultModifiers,state.options.modifiers)));return state.orderedModifiers=orderedModifiers.filter((function(m){return m.enabled})),function runModifierEffects(){state.orderedModifiers.forEach((function(_ref3){var name=_ref3.name,_ref3$options=_ref3.options,options=void 0===_ref3$options?{}:_ref3$options,effect=_ref3.effect;if("function"==typeof effect){var cleanupFn=effect({state:state,name:name,instance:instance,options:options}),noopFn=function noopFn(){};effectCleanupFns.push(cleanupFn||noopFn)}}))}(),instance.update()},forceUpdate:function forceUpdate(){if(!isDestroyed){var _state$elements=state.elements,reference=_state$elements.reference,popper=_state$elements.popper;if(areValidElements(reference,popper)){state.rects={reference:getCompositeRect(reference,getOffsetParent(popper),"fixed"===state.options.strategy),popper:getLayoutRect(popper)},state.reset=!1,state.placement=state.options.placement,state.orderedModifiers.forEach((function(modifier){return state.modifiersData[modifier.name]=Object.assign({},modifier.data)}));for(var index=0;index<state.orderedModifiers.length;index++)if(!0!==state.reset){var _state$orderedModifie=state.orderedModifiers[index],fn=_state$orderedModifie.fn,_state$orderedModifie2=_state$orderedModifie.options,_options=void 0===_state$orderedModifie2?{}:_state$orderedModifie2,name=_state$orderedModifie.name;"function"==typeof fn&&(state=fn({state:state,options:_options,name:name,instance:instance})||state)}else state.reset=!1,index=-1}}},update:(fn=function(){return new Promise((function(resolve){instance.forceUpdate(),resolve(state)}))},function(){return pending||(pending=new Promise((function(resolve){Promise.resolve().then((function(){pending=void 0,resolve(fn())}))}))),pending}),destroy:function destroy(){cleanupModifierEffects(),isDestroyed=!0}};if(!areValidElements(reference,popper))return instance;function cleanupModifierEffects(){effectCleanupFns.forEach((function(fn){return fn()})),effectCleanupFns=[]}return instance.setOptions(options).then((function(state){!isDestroyed&&options.onFirstUpdate&&options.onFirstUpdate(state)})),instance}}var createPopper=popperGenerator({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function fn(){},effect:function effect(_ref){var state=_ref.state,instance=_ref.instance,options=_ref.options,_options$scroll=options.scroll,scroll=void 0===_options$scroll||_options$scroll,_options$resize=options.resize,resize=void 0===_options$resize||_options$resize,window=getWindow(state.elements.popper),scrollParents=[].concat(state.scrollParents.reference,state.scrollParents.popper);return scroll&&scrollParents.forEach((function(scrollParent){scrollParent.addEventListener("scroll",instance.update,passive)})),resize&&window.addEventListener("resize",instance.update,passive),function(){scroll&&scrollParents.forEach((function(scrollParent){scrollParent.removeEventListener("scroll",instance.update,passive)})),resize&&window.removeEventListener("resize",instance.update,passive)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function popperOffsets(_ref){var state=_ref.state,name=_ref.name;state.modifiersData[name]=computeOffsets({reference:state.rects.reference,element:state.rects.popper,strategy:"absolute",placement:state.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function computeStyles(_ref5){var state=_ref5.state,options=_ref5.options,_options$gpuAccelerat=options.gpuAcceleration,gpuAcceleration=void 0===_options$gpuAccelerat||_options$gpuAccelerat,_options$adaptive=options.adaptive,adaptive=void 0===_options$adaptive||_options$adaptive,_options$roundOffsets=options.roundOffsets,roundOffsets=void 0===_options$roundOffsets||_options$roundOffsets,commonStyles={placement:getBasePlacement(state.placement),variation:getVariation(state.placement),popper:state.elements.popper,popperRect:state.rects.popper,gpuAcceleration:gpuAcceleration,isFixed:"fixed"===state.options.strategy};null!=state.modifiersData.popperOffsets&&(state.styles.popper=Object.assign({},state.styles.popper,mapToStyles(Object.assign({},commonStyles,{offsets:state.modifiersData.popperOffsets,position:state.options.strategy,adaptive:adaptive,roundOffsets:roundOffsets})))),null!=state.modifiersData.arrow&&(state.styles.arrow=Object.assign({},state.styles.arrow,mapToStyles(Object.assign({},commonStyles,{offsets:state.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:roundOffsets})))),state.attributes.popper=Object.assign({},state.attributes.popper,{"data-popper-placement":state.placement})},data:{}},applyStyles$1,offset$1,flip$1,preventOverflow$1,arrow$1,{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function hide(_ref){var state=_ref.state,name=_ref.name,referenceRect=state.rects.reference,popperRect=state.rects.popper,preventedOffsets=state.modifiersData.preventOverflow,referenceOverflow=detectOverflow(state,{elementContext:"reference"}),popperAltOverflow=detectOverflow(state,{altBoundary:!0}),referenceClippingOffsets=getSideOffsets(referenceOverflow,referenceRect),popperEscapeOffsets=getSideOffsets(popperAltOverflow,popperRect,preventedOffsets),isReferenceHidden=isAnySideFullyClipped(referenceClippingOffsets),hasPopperEscaped=isAnySideFullyClipped(popperEscapeOffsets);state.modifiersData[name]={referenceClippingOffsets:referenceClippingOffsets,popperEscapeOffsets:popperEscapeOffsets,isReferenceHidden:isReferenceHidden,hasPopperEscaped:hasPopperEscaped},state.attributes.popper=Object.assign({},state.attributes.popper,{"data-popper-reference-hidden":isReferenceHidden,"data-popper-escaped":hasPopperEscaped})}}]})},"./dist/esm/verdocs-button-panel_3.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_button_panel",(function(){return VerdocsButtonPanel})),__webpack_require__.d(__webpack_exports__,"verdocs_select_input",(function(){return VerdocsSelectInput})),__webpack_require__.d(__webpack_exports__,"verdocs_template_field_properties",(function(){return VerdocsTemplateFieldProperties}));__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.uint8-array.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.copy-within.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.every.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.fill.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.find-index.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.last-index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reduce-right.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.set.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.some.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.subarray.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.to-locale-string.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array-buffer.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.string.replace.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.async-iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js");var _index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__=__webpack_require__("./dist/esm/index-b18c0348.js"),_popper_bfa25c7f_js__WEBPACK_IMPORTED_MODULE_62__=__webpack_require__("./dist/esm/popper-bfa25c7f.js"),_commonjsHelpers_5ec8f9b7_js__WEBPACK_IMPORTED_MODULE_63__=__webpack_require__("./dist/esm/_commonjsHelpers-5ec8f9b7.js"),_Fields_c82e6df3_js__WEBPACK_IMPORTED_MODULE_65__=(__webpack_require__("./dist/esm/Types-5f31149e.js"),__webpack_require__("./dist/esm/Fields-c82e6df3.js")),_VerdocsEndpoint_6d7a17ce_js__WEBPACK_IMPORTED_MODULE_66__=__webpack_require__("./dist/esm/VerdocsEndpoint-6d7a17ce.js"),_TemplateStore_87c99dfc_js__WEBPACK_IMPORTED_MODULE_67__=__webpack_require__("./dist/esm/TemplateStore-87c99dfc.js"),_errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_68__=__webpack_require__("./dist/esm/errors-9b5498c8.js");__webpack_require__("./dist/esm/index-29123f30.js"),__webpack_require__("./dist/esm/Templates-67172396.js");function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function define(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(void 0===method)return context.delegate=null,"throw"===methodName&&delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}var VerdocsButtonPanel=function(){function VerdocsButtonPanel(hostRef){_classCallCheck(this,VerdocsButtonPanel),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.j)(this,hostRef),this.showing=!1,this.icon=""}var _toggle,_hidePanel,_showPanel;return _createClass(VerdocsButtonPanel,[{key:"componentDidRender",value:function componentDidRender(){document.body.appendChild(this.panelEl),this.popperInstance&&this.popperInstance.destroy(),this.popperInstance=Object(_popper_bfa25c7f_js__WEBPACK_IMPORTED_MODULE_62__.a)(this.iconEl,this.panelEl,{})}},{key:"disconnectedCallback",value:function disconnectedCallback(){this.popperInstance&&(this.popperInstance.destroy(),this.popperInstance=null),this.panelEl&&this.panelEl.remove()}},{key:"showPanel",value:(_showPanel=_asyncToGenerator(_regeneratorRuntime().mark((function _callee(){var _a,_b,_this=this;return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:null===(_a=this.panelEl)||void 0===_a||_a.setAttribute("data-show",""),null===(_b=this.popperInstance)||void 0===_b||_b.update().catch((function(){})),this.showing=!0,this.hiderEl=document.createElement("div"),this.hiderEl.id="verdocs-button-panel-hider",this.hiderEl.style.zIndex="100",this.hiderEl.style.position="absolute",this.hiderEl.style.top="0px",this.hiderEl.style.left="0px",this.hiderEl.style.right="0px",this.hiderEl.style.bottom="0px",this.hiderEl.onclick=function(e){e.stopPropagation(),_this.toggle()},document.body.appendChild(this.hiderEl);case 13:case"end":return _context.stop()}}),_callee,this)}))),function showPanel(){return _showPanel.apply(this,arguments)})},{key:"hidePanel",value:(_hidePanel=_asyncToGenerator(_regeneratorRuntime().mark((function _callee2(){var _a;return _regeneratorRuntime().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:Array.from(document.getElementsByClassName("verdocs-button-panel-content")).forEach((function(el){el.removeAttribute("data-show")})),null===(_a=document.getElementById("verdocs-button-panel-hider"))||void 0===_a||_a.remove(),this.showing=!1;case 3:case"end":return _context2.stop()}}),_callee2,this)}))),function hidePanel(){return _hidePanel.apply(this,arguments)})},{key:"toggle",value:(_toggle=_asyncToGenerator(_regeneratorRuntime().mark((function _callee3(){return _regeneratorRuntime().wrap((function _callee3$(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:if(!this.showing){_context3.next=5;break}return _context3.next=3,this.hidePanel();case 3:_context3.next=7;break;case 5:return _context3.next=7,this.showPanel();case 7:case"end":return _context3.stop()}}),_callee3,this)}))),function toggle(){return _toggle.apply(this,arguments)})},{key:"render",value:function render(){var _this2=this;return Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.b,null,Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"icon",innerHTML:this.icon,onClick:function onClick(e){return e.stopPropagation(),_this2.toggle()},ref:function ref(el){return _this2.iconEl=el}}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{role:"tooltip",class:"verdocs-button-panel-content","data-popper-placement":"bottom",ref:function ref(el){return _this2.panelEl=el}},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{"data-popper-arrow":"true",class:"arrow"}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("slot",null)))}}]),VerdocsButtonPanel}();VerdocsButtonPanel.style='verdocs-button-panel{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;display:inline-block}verdocs-button-panel .icon{display:inline-block;cursor:pointer;opacity:0.6}verdocs-button-panel .icon svg{fill:#707ae5}verdocs-button-panel .icon:hover{opacity:1}.verdocs-button-panel-content{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;-webkit-box-shadow:0 0 10px 1px #999999;box-shadow:0 0 10px 1px #999999;display:none;background:#ffffff;color:#33364b;width:320px;font-weight:bold;padding:15px;font-size:14px;position:relative;border-radius:4px;z-index:10000}.verdocs-button-panel-content .arrow,.verdocs-button-panel-content .arrow::before{position:absolute;width:8px;height:8px;background:inherit}.verdocs-button-panel-content .arrow{visibility:hidden;top:-4px}.verdocs-button-panel-content .arrow::before{visibility:visible;content:"";-webkit-transform:rotate(45deg);transform:rotate(45deg)}.verdocs-button-panel-content[data-show]{display:block}.verdocs-button-panel-content[data-popper-placement^=top]>.arrow{bottom:-4px}.verdocs-button-panel-content[data-popper-placement^=bottom]>.arrow{top:-4px}.verdocs-button-panel-content[data-popper-placement^=left]>.arrow{right:-4px}.verdocs-button-panel-content[data-popper-placement^=right]>.arrow{left:-4px}.verdocs-button-panel-content h6{font-size:16px;font-weight:bold;margin:0 0 16px 0;color:#092c4c;border-bottom:1px solid #cccccc}';var rng,VerdocsSelectInput=function(){function VerdocsSelectInput(hostRef){_classCallCheck(this,VerdocsSelectInput),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.j)(this,hostRef),this.value="",this.label="",this.options=void 0,this.disabled=!1}return _createClass(VerdocsSelectInput,[{key:"render",value:function render(){var _this3=this;return Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.b,{class:"input-field"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("label",null,this.label?Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"input-label"},this.label+":"):Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",null),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("select",{class:"input-element",disabled:this.disabled},this.options.map((function(option){return Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("option",{value:option.value,selected:option.value===_this3.value},option.label)})))))}}]),VerdocsSelectInput}();VerdocsSelectInput.style='verdocs-select-input{font-family:"Inter", "Barlow", sans-serif;-webkit-box-sizing:border-box;box-sizing:border-box;margin:0 0 10px 0;display:block}verdocs-select-input .input-element{-webkit-box-sizing:border-box;box-sizing:border-box;border:1px solid #707ae5;border-radius:4px;background:#ffffff;color:#000;width:100%;font-size:16px;height:28px;padding:4px 8px}verdocs-select-input .input-element::-webkit-input-placeholder{color:#aaaaaa;opacity:1}verdocs-select-input .input-element::-moz-placeholder{color:#aaaaaa;opacity:1}verdocs-select-input .input-element:-ms-input-placeholder{color:#aaaaaa;opacity:1}verdocs-select-input .input-element::-ms-input-placeholder{color:#aaaaaa;opacity:1}verdocs-select-input .input-element::placeholder{color:#aaaaaa;opacity:1}verdocs-select-input .input-element:focus{border:1px solid #7d88ff}verdocs-select-input .input-label{display:block;color:#555570;font-weight:700;font-size:14px;margin:0 0 4px 0}';var crypto=void 0!==_commonjsHelpers_5ec8f9b7_js__WEBPACK_IMPORTED_MODULE_63__.a&&(_commonjsHelpers_5ec8f9b7_js__WEBPACK_IMPORTED_MODULE_63__.a.crypto||_commonjsHelpers_5ec8f9b7_js__WEBPACK_IMPORTED_MODULE_63__.a.msCrypto);if(crypto&&crypto.getRandomValues){var rnds8=new Uint8Array(16);rng=function whatwgRNG(){return crypto.getRandomValues(rnds8),rnds8}}if(!rng){var rnds=new Array(16);rng=function rng(){for(var r,i=0;i<16;i++)0==(3&i)&&(r=4294967296*Math.random()),rnds[i]=r>>>((3&i)<<3)&255;return rnds}}for(var rngBrowser=rng,byteToHex=[],i=0;i<256;++i)byteToHex[i]=(i+256).toString(16).substr(1);var bytesToUuid_1=function bytesToUuid(buf,offset){var i=offset||0,bth=byteToHex;return bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]+"-"+bth[buf[i++]]+bth[buf[i++]]+"-"+bth[buf[i++]]+bth[buf[i++]]+"-"+bth[buf[i++]]+bth[buf[i++]]+"-"+bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]},_seedBytes=rngBrowser(),_nodeId=[1|_seedBytes[0],_seedBytes[1],_seedBytes[2],_seedBytes[3],_seedBytes[4],_seedBytes[5]],_clockseq=16383&(_seedBytes[6]<<8|_seedBytes[7]),_lastMSecs=0,_lastNSecs=0;var v1_1=function v1(options,buf,offset){var i=buf&&offset||0,b=buf||[],clockseq=void 0!==(options=options||{}).clockseq?options.clockseq:_clockseq,msecs=void 0!==options.msecs?options.msecs:(new Date).getTime(),nsecs=void 0!==options.nsecs?options.nsecs:_lastNSecs+1,dt=msecs-_lastMSecs+(nsecs-_lastNSecs)/1e4;if(dt<0&&void 0===options.clockseq&&(clockseq=clockseq+1&16383),(dt<0||msecs>_lastMSecs)&&void 0===options.nsecs&&(nsecs=0),nsecs>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");_lastMSecs=msecs,_lastNSecs=nsecs,_clockseq=clockseq;var tl=(1e4*(268435455&(msecs+=122192928e5))+nsecs)%4294967296;b[i++]=tl>>>24&255,b[i++]=tl>>>16&255,b[i++]=tl>>>8&255,b[i++]=255&tl;var tmh=msecs/4294967296*1e4&268435455;b[i++]=tmh>>>8&255,b[i++]=255&tmh,b[i++]=tmh>>>24&15|16,b[i++]=tmh>>>16&255,b[i++]=clockseq>>>8|128,b[i++]=255&clockseq;for(var node=options.node||_nodeId,n=0;n<6;++n)b[i+n]=node[n];return buf||bytesToUuid_1(b)};var v4_1=function v4(options,buf,offset){var i=buf&&offset||0;"string"==typeof options&&(buf="binary"==options?new Array(16):null,options=null);var rnds=(options=options||{}).random||(options.rng||rngBrowser)();if(rnds[6]=15&rnds[6]|64,rnds[8]=63&rnds[8]|128,buf)for(var ii=0;ii<16;++ii)buf[i+ii]=rnds[ii];return buf||bytesToUuid_1(rnds)},uuid=v4_1;uuid.v1=v1_1,uuid.v4=v4_1;var uuidBrowser=uuid,capitalize=function capitalize(str){return str.charAt(0).toUpperCase()+str.slice(1)},TrashIcon='<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="#a50021"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" /></svg>',HelpIcon='<svg xmlns="http://www.w3.org/2000/svg" height="24" width="24"><path d="M11.925 18q.55 0 .938-.387.387-.388.387-.938 0-.55-.387-.925-.388-.375-.938-.375-.55 0-.925.375t-.375.925q0 .55.375.938.375.387.925.387Zm-.95-3.85h1.95q0-.8.2-1.287.2-.488 1.025-1.288.65-.625 1.025-1.213.375-.587.375-1.437 0-1.425-1.025-2.175Q13.5 6 12.1 6q-1.425 0-2.35.775t-1.275 1.85l1.775.7q.125-.45.55-.975.425-.525 1.275-.525.725 0 1.1.412.375.413.375.888 0 .475-.287.9-.288.425-.713.775-1.075.95-1.325 1.475-.25.525-.25 1.875ZM12 22.2q-2.125 0-3.988-.8-1.862-.8-3.237-2.175Q3.4 17.85 2.6 15.988 1.8 14.125 1.8 12t.8-3.988q.8-1.862 2.175-3.237Q6.15 3.4 8.012 2.6 9.875 1.8 12 1.8t3.988.8q1.862.8 3.237 2.175Q20.6 6.15 21.4 8.012q.8 1.863.8 3.988t-.8 3.988q-.8 1.862-2.175 3.237Q17.85 20.6 15.988 21.4q-1.863.8-3.988.8Zm0-2.275q3.325 0 5.625-2.3t2.3-5.625q0-3.325-2.3-5.625T12 4.075q-3.325 0-5.625 2.3T4.075 12q0 3.325 2.3 5.625t5.625 2.3ZM12 12Z"/></svg>',VerdocsTemplateFieldProperties=function(){function VerdocsTemplateFieldProperties(hostRef){_classCallCheck(this,VerdocsTemplateFieldProperties),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.j)(this,hostRef),this.close=Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.e)(this,"close",7),this.delete=Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.e)(this,"delete",7),this.settingsChanged=Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.e)(this,"settingsChanged",7),this.sdkError=Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.e)(this,"sdkError",7),this.store=null,this.endpoint=_VerdocsEndpoint_6d7a17ce_js__WEBPACK_IMPORTED_MODULE_66__.b.getDefault(),this.templateId="",this.fieldName="",this.helpText="",this.dirty=!1,this.loading=!0,this.type="signature",this.setting=null,this.name="",this.roleName="",this.group="",this.fieldType="",this.required=!1,this.options=[],this.placeholder="",this.defaultValue="",this.showingHelp=!1}var _handleDelete,_componentWillLoad;return _createClass(VerdocsTemplateFieldProperties,[{key:"componentWillLoad",value:(_componentWillLoad=_asyncToGenerator(_regeneratorRuntime().mark((function _callee4(){var _a,_b,_c,_d,_e,_f,_g,field,_this4=this;return _regeneratorRuntime().wrap((function _callee4$(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:if(_context4.prev=0,this.endpoint.loadSession(),this.templateId){_context4.next=5;break}return console.log("[ROLES] Missing required template ID "+this.templateId),_context4.abrupt("return");case 5:if(this.fieldName){_context4.next=8;break}return console.error("[FIELD PROPERTIES] Missing required field name"),_context4.abrupt("return");case 8:if(this.endpoint.session){_context4.next=11;break}return console.log("[ROLES] Unable to start builder session, must be authenticated"),_context4.abrupt("return");case 11:return _context4.next=13,Object(_TemplateStore_87c99dfc_js__WEBPACK_IMPORTED_MODULE_67__.b)(this.endpoint,this.templateId,!1);case 13:this.store=_context4.sent,(field=null===(_b=null===(_a=this.store)||void 0===_a?void 0:_a.state)||void 0===_b?void 0:_b.fields.find((function(field){return field.name===_this4.fieldName})))||console.log('[FIELD PROPERTIES] Unable to find field "'+this.fieldName+'" in template'),this.type=field.type,this.name=field.name,this.group=field.name,this.roleName=field.role_name,this.required=field.required,this.fieldType=field.type,this.placeholder=field.label,this.defaultValue=(null===(_c=field.setting)||void 0===_c?void 0:_c.value)||"",this.setting=field.setting||{},this.options=(null===(_d=field.setting)||void 0===_d?void 0:_d.options)||[],this.dirty=!1,this.loading=!1,_context4.next=35;break;case 30:_context4.prev=30,_context4.t0=_context4.catch(0),console.log("[FIELD PROPERTIES] Error loading template",_context4.t0),this.loading=!1,null===(_e=this.sdkError)||void 0===_e||_e.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_68__.a(_context4.t0.message,null===(_f=_context4.t0.response)||void 0===_f?void 0:_f.status,null===(_g=_context4.t0.response)||void 0===_g?void 0:_g.data));case 35:case"end":return _context4.stop()}}),_callee4,this,[[0,30]])}))),function componentWillLoad(){return _componentWillLoad.apply(this,arguments)})},{key:"handleCancel",value:function handleCancel(e){var _a,_b,_c,_d,_this5=this;e.stopPropagation();var field=null===(_b=null===(_a=this.store)||void 0===_a?void 0:_a.state)||void 0===_b?void 0:_b.fields.find((function(field){return field.name===_this5.fieldName}));field&&(this.name=field.name,this.roleName=field.role_name,this.required=field.required,this.placeholder=field.label,this.defaultValue=(null===(_c=field.setting)||void 0===_c?void 0:_c.result)||""),this.dirty=!1,null===(_d=this.close)||void 0===_d||_d.emit()}},{key:"handleSave",value:function handleSave(e){var _this6=this;e.stopPropagation();var newProperties={name:this.name,required:this.required,role_name:this.roleName};"checkbox_group"===this.type||"radio_button_group"===this.type?(newProperties.setting=this.setting,newProperties.setting.options=this.options):"dropdown"===this.type&&(newProperties.setting={x:this.setting.x,y:this.setting.y,options:this.options}),Object(_Fields_c82e6df3_js__WEBPACK_IMPORTED_MODULE_65__.c)(this.endpoint,this.templateId,this.fieldName,newProperties).then((function(){var _a,_b;_this6.dirty=!1,_this6.updateField(),null===(_a=_this6.settingsChanged)||void 0===_a||_a.emit({fieldName:_this6.fieldName,settings:newProperties}),null===(_b=_this6.close)||void 0===_b||_b.emit()})).catch((function(){console.log("Field update failed",e)}))}},{key:"handleAddOption",value:function handleAddOption(e){var _this7=this;e.stopPropagation();var newProperties={name:this.name,required:this.required,role_name:this.roleName};this.options.push("radio_button_group"===this.type?{id:uuidBrowser(),value:"Option "+(this.options.length+1),selected:!1,x:this.options.length>0?this.options[this.options.length-1].x:20,y:this.options.length>0?this.options[this.options.length-1].y-25:20}:{id:uuidBrowser(),value:"Option "+(this.options.length+1),checked:!1,x:this.options.length>0?this.options[this.options.length-1].x:20,y:this.options.length>0?this.options[this.options.length-1].y-25:20}),newProperties.setting=Object.assign({},this.setting),delete newProperties.setting.result,newProperties.setting.options=_toConsumableArray(this.options),Object(_Fields_c82e6df3_js__WEBPACK_IMPORTED_MODULE_65__.c)(this.endpoint,this.templateId,this.fieldName,newProperties).then((function(){var _a,_b;_this7.dirty=!1,_this7.updateField(),null===(_a=_this7.settingsChanged)||void 0===_a||_a.emit({fieldName:_this7.fieldName,settings:newProperties}),null===(_b=_this7.close)||void 0===_b||_b.emit()})).catch((function(){console.log("Field update failed",e)}))}},{key:"updateField",value:function updateField(){var _this8=this,newFields=_toConsumableArray(this.store.state.fields);newFields.forEach((function(field){field.name===_this8.fieldName&&(field.name=_this8.name,field.role_name=_this8.roleName,field.required=_this8.required,field.label=_this8.placeholder,field.setting.options&&(field.setting.options=_this8.options))})),this.store.state.fields=newFields}},{key:"handleDelete",value:(_handleDelete=_asyncToGenerator(_regeneratorRuntime().mark((function _callee5(e){var _this9=this;return _regeneratorRuntime().wrap((function _callee5$(_context5){for(;;)switch(_context5.prev=_context5.next){case 0:e.stopPropagation(),window.confirm("Are you sure you wish to remove this field? This action cannot be undone.")&&Object(_Fields_c82e6df3_js__WEBPACK_IMPORTED_MODULE_65__.b)(this.endpoint,this.templateId,this.fieldName).then((function(r){var _a,_b,_c,_d,_e;console.log("Field deleted",r),_this9.store.state.fields=_toConsumableArray(null===(_b=null===(_a=_this9.store)||void 0===_a?void 0:_a.state)||void 0===_b?void 0:_b.fields.filter((function(field){return field.name!==_this9.fieldName}))),null===(_d=null===(_c=_this9.store)||void 0===_c?void 0:_c.state)||void 0===_d||_d.roles.forEach((function(role){role.fields=_toConsumableArray(role.fields.filter((function(field){return field.name!==_this9.fieldName})))})),null===(_e=_this9.delete)||void 0===_e||_e.emit({templateId:_this9.templateId,roleName:_this9.roleName})})).catch((function(e){console.log("Deletion error",e)}));case 2:case"end":return _context5.stop()}}),_callee5,this)}))),function handleDelete(_x){return _handleDelete.apply(this,arguments)})},{key:"render",value:function render(){var _a,_b,_c,_d,_this10=this;return this.endpoint.session?this.endpoint.session&&(null===(_b=null===(_a=this.store)||void 0===_a?void 0:_a.state)||void 0===_b?void 0:_b.isLoaded)?this.helpText&&this.showingHelp?Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.b,null,Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("h6",null,capitalize(this.fieldType)," Settings ",Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{style:{flex:"1"}}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"help-icon",innerHTML:HelpIcon,onClick:function onClick(){return _this10.showingHelp=!1}})),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("p",{class:"instructions",innerHTML:this.helpText})):Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.b,null,Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("h6",null,capitalize(this.fieldType.replace(/_/g," "))," Settings ",Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{style:{flex:"1"}}),this.helpText&&Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"help-icon",innerHTML:HelpIcon,onClick:function onClick(){return _this10.showingHelp=!0}})),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("form",{onSubmit:function onSubmit(e){return e.preventDefault()},onClick:function onClick(e){return e.stopPropagation()},autocomplete:"off"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"row"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("verdocs-text-input",{id:"verdocs-field-name",label:"Field Name",value:this.name,autocomplete:"off",placeholder:"Field Name...",onInput:function onInput(e){_this10.name=e.target.value,_this10.dirty=!0}})),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"row"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"input-label"},"Role:"),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("verdocs-select-input",{value:this.roleName,options:null===(_d=null===(_c=this.store)||void 0===_c?void 0:_c.state)||void 0===_d?void 0:_d.roles.map((function(role){return{label:role.name,value:role.name}})),onInput:function onInput(e){_this10.roleName=e.target.value,_this10.dirty=!0}})),["textbox","textarea"].includes(this.type)&&Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("verdocs-text-input",{id:"verdocs-field-placeholder",label:"Placeholder",value:this.name,autocomplete:"off",placeholder:"Placeholder...",onInput:function onInput(e){_this10.placeholder=e.target.value,_this10.dirty=!0}}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"row",style:{marginTop:"15px",marginBottom:"15px"}},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("label",{htmlFor:"verdocs-is-required",class:"input-label"},"Required"),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("verdocs-checkbox",{id:"verdocs-is-required",name:"is-required",checked:this.required,value:"on",onInput:function onInput(e){_this10.required=e.target.checked,_this10.dirty=!0}})),["checkbox_group","radio_button_group"].includes(this.type)&&Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("verdocs-button",{size:"small",onClick:function onClick(e){return _this10.handleAddOption(e)},label:"Add Option"}),["dropdown"].includes(this.type)&&Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"options"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"row",style:{marginTop:"15px",marginBottom:"15px",textAlign:"center",fontWeight:"700",fontSize:"14px",justifyContent:"center",backgroundColor:"#333333",padding:"5px 8px",color:"#ffffff"}},"Options"),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"row-header"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("h6",null,"ID"),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("h6",null,"Label"),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{style:{width:"34px"}})),this.options.map((function(option,index){return Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"row option-row",key:index},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("verdocs-text-input",{id:"verdocs-option-id-"+option.id,value:option.id,placeholder:"Unique ID",onInput:function onInput(e){_this10.options[index].id=e.target.value,_this10.dirty=!0}}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("verdocs-text-input",{id:"verdocs-option-value-"+option.id,value:option.value,placeholder:"Display value",onInput:function onInput(e){_this10.options[index].value=e.target.value,_this10.dirty=!0}}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("button",{innerHTML:TrashIcon,class:"remove-button",onClick:function onClick(){_this10.options=_this10.options.filter((function(opt){return opt.id!==option.id})),_this10.dirty=!0}}))})),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"row-header"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("button",{class:"add-option-button",onClick:function onClick(){_this10.options=[].concat(_toConsumableArray(_this10.options),[{id:"option-"+(_this10.options.length+1),value:"Option "+(_this10.options.length+1)}]),_this10.dirty=!0}},"Add Option"))),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{class:"buttons"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("button",{class:"delete-button",disabled:this.dirty,onClick:function onClick(e){return _this10.handleDelete(e)},innerHTML:TrashIcon}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("div",{style:{flex:"1"}}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("verdocs-button",{size:"small",variant:"outline",label:"Cancel",disabled:!this.dirty,onClick:function onClick(e){return _this10.handleCancel(e)}}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("verdocs-button",{size:"small",label:"Save",disabled:!this.dirty,onClick:function onClick(e){return _this10.handleSave(e)}})))):Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.b,{class:"empty"}):Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.b,null,Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.h)("verdocs-component-error",{message:"You must be authenticated to use this module."}))}},{key:"el",get:function get(){return Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_61__.c)(this)}}]),VerdocsTemplateFieldProperties}();VerdocsTemplateFieldProperties.style='verdocs-template-field-properties{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif}verdocs-template-field-properties .buttons{display:-ms-flexbox;display:flex;margin-top:30px;-ms-flex-align:center;align-items:center;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:end;justify-content:flex-end}verdocs-template-field-properties .buttons verdocs-button{margin-left:16px}verdocs-template-field-properties form .row{display:-ms-flexbox;display:flex;-webkit-column-gap:15px;-moz-column-gap:15px;column-gap:15px;margin:0 0 10px 0;-ms-flex-align:center;align-items:center;-ms-flex-direction:row;flex-direction:row}verdocs-template-field-properties form .row .input-label{display:block;color:#555570;font-weight:700;font-size:14px;margin:0 0 4px 0;-ms-flex:0 0 100px;flex:0 0 100px}verdocs-template-field-properties verdocs-select-input{-ms-flex:1;flex:1;margin:0}verdocs-template-field-properties verdocs-text-input{margin:0;-ms-flex:1;flex:1}verdocs-template-field-properties verdocs-text-input label{margin:0;display:-ms-flexbox;display:flex;-webkit-column-gap:15px;-moz-column-gap:15px;column-gap:15px;-ms-flex-align:center;align-items:center;-ms-flex-direction:row;flex-direction:row}verdocs-template-field-properties verdocs-text-input .input-label{-ms-flex:0 0 100px;flex:0 0 100px}verdocs-template-field-properties verdocs-text-input input{-ms-flex:1;flex:1;display:-ms-flexbox;display:flex}verdocs-template-field-properties .checkbox-wrapper{-ms-flex:1;flex:1;display:-ms-flexbox;display:flex}verdocs-template-field-properties .delete-button{height:34px;display:-ms-flexbox;display:flex;cursor:pointer;background:none;border-radius:4px;-ms-flex-align:center;align-items:center;border:1px solid #999;-ms-flex-pack:center;justify-content:center}verdocs-template-field-properties .delete-button:active{background:#f3f3f3}verdocs-template-field-properties .delete-button svg{width:24px;height:24px}verdocs-template-field-properties h6{-ms-flex:1;flex:1;display:-ms-flexbox;display:flex;font-size:16px;font-weight:bold;margin:0 0 8px 0;-ms-flex-direction:row;flex-direction:row;color:#092c4c}verdocs-template-field-properties h6 .help-icon{opacity:0.5}verdocs-template-field-properties h6 .help-icon:hover{opacity:1;cursor:pointer}verdocs-template-field-properties .row-header{gap:15px;display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}verdocs-template-field-properties .row-header h6{margin-bottom:0}verdocs-template-field-properties .row-header verdocs-help-icon{-webkit-transform:scale(0.85);transform:scale(0.85)}verdocs-template-field-properties .row-header verdocs-help-icon svg{margin-bottom:-5px}verdocs-template-field-properties .row-header .add-button{margin:0;padding:0;border:none;opacity:0.5;cursor:pointer;background:none}verdocs-template-field-properties .row-header .add-button:hover{opacity:1}verdocs-template-field-properties .row-header .add-button svg{width:32px;height:32px}verdocs-template-field-properties .option-row{margin:15px 0}verdocs-template-field-properties .option-row .remove-button{height:28px;display:-ms-flexbox;display:flex;cursor:pointer;background:none;border-radius:4px;-ms-flex-align:center;align-items:center;border:1px solid #999;-ms-flex-pack:center;justify-content:center}verdocs-template-field-properties .option-row .remove-button:active{background:#f3f3f3}verdocs-template-field-properties .option-row .remove-button:hover svg{stroke:#a50021}verdocs-template-field-properties .option-row .remove-button svg{width:20px;height:20px;stroke:#333333}verdocs-template-field-properties .options{background:#f3f3f3;padding:0 0 10px 0}verdocs-template-field-properties .options .row-header,verdocs-template-field-properties .options .option-row{padding:0 10px}verdocs-template-field-properties .options .add-option-button{border-radius:5px;border:1px solid #cccccc;background:#46497d;color:#ffffff;padding:3px 8px}verdocs-template-field-properties .options .option-row .input-element{font-size:14px}verdocs-template-field-properties .options verdocs-help-icon{opacity:1;-webkit-transform:scale(0.8);transform:scale(0.8)}verdocs-template-field-properties .options verdocs-help-icon svg{fill:#ffffff}'},"./node_modules/core-js/modules/es.array.every.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),$every=__webpack_require__("./node_modules/core-js/internals/array-iteration.js").every;$({target:"Array",proto:!0,forced:!__webpack_require__("./node_modules/core-js/internals/array-method-is-strict.js")("every")},{every:function every(callbackfn){return $every(this,callbackfn,arguments.length>1?arguments[1]:void 0)}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kaXN0L2VzbS9GaWVsZHMtYzgyZTZkZjMuanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9lc20vX2NvbW1vbmpzSGVscGVycy01ZWM4ZjliNy5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L2VzbS9wb3BwZXItYmZhMjVjN2YuanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9lc20vdmVyZG9jcy1idXR0b24tcGFuZWxfMy5lbnRyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmV2ZXJ5LmpzIl0sIm5hbWVzIjpbImNyZWF0ZUZpZWxkIiwiZW5kcG9pbnQiLCJ0ZW1wbGF0ZUlkIiwicGFyYW1zIiwiYXBpIiwicG9zdCIsImNvbmNhdCIsInRoZW4iLCJyIiwiZGF0YSIsInVwZGF0ZUZpZWxkIiwiZmllbGROYW1lIiwicHV0IiwiZGVsZXRlRmllbGQiLCJjb21tb25qc0dsb2JhbCIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwiZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMiLCJ4IiwiX19lc01vZHVsZSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwiZm4iLCJiYXNlZGlyIiwibW9kdWxlIiwicGF0aCIsImV4cG9ydHMiLCJyZXF1aXJlIiwiYmFzZSIsImNvbW1vbmpzUmVxdWlyZSIsIkVycm9yIiwidG9wIiwiYm90dG9tIiwicmlnaHQiLCJsZWZ0IiwiYXV0byIsImJhc2VQbGFjZW1lbnRzIiwic3RhcnQiLCJlbmQiLCJjbGlwcGluZ1BhcmVudHMiLCJ2aWV3cG9ydCIsInBvcHBlciIsInJlZmVyZW5jZSIsInZhcmlhdGlvblBsYWNlbWVudHMiLCJyZWR1Y2UiLCJhY2MiLCJwbGFjZW1lbnQiLCJwbGFjZW1lbnRzIiwibW9kaWZpZXJQaGFzZXMiLCJnZXROb2RlTmFtZSIsImVsZW1lbnQiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiZ2V0V2luZG93Iiwibm9kZSIsInRvU3RyaW5nIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiaXNFbGVtZW50IiwiRWxlbWVudCIsImlzSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImlzU2hhZG93Um9vdCIsIlNoYWRvd1Jvb3QiLCJhcHBseVN0eWxlcyQxIiwibmFtZSIsImVuYWJsZWQiLCJwaGFzZSIsImFwcGx5U3R5bGVzIiwiX3JlZiIsInN0YXRlIiwia2V5cyIsImVsZW1lbnRzIiwiZm9yRWFjaCIsInN0eWxlIiwic3R5bGVzIiwiYXR0cmlidXRlcyIsImFzc2lnbiIsInZhbHVlIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiZWZmZWN0IiwiZWZmZWN0JDIiLCJfcmVmMiIsImluaXRpYWxTdHlsZXMiLCJwb3NpdGlvbiIsIm9wdGlvbnMiLCJzdHJhdGVneSIsIm1hcmdpbiIsImFycm93IiwicHJvcGVydHkiLCJhdHRyaWJ1dGUiLCJyZXF1aXJlcyIsImdldEJhc2VQbGFjZW1lbnQiLCJzcGxpdCIsIm1heCIsIk1hdGgiLCJtaW4iLCJyb3VuZCIsImdldFVBU3RyaW5nIiwidWFEYXRhIiwibmF2aWdhdG9yIiwidXNlckFnZW50RGF0YSIsImJyYW5kcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIml0ZW0iLCJicmFuZCIsInZlcnNpb24iLCJqb2luIiwidXNlckFnZW50IiwiaXNMYXlvdXRWaWV3cG9ydCIsInRlc3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpbmNsdWRlU2NhbGUiLCJpc0ZpeGVkU3RyYXRlZ3kiLCJjbGllbnRSZWN0Iiwic2NhbGVYIiwic2NhbGVZIiwib2Zmc2V0V2lkdGgiLCJ3aWR0aCIsIm9mZnNldEhlaWdodCIsImhlaWdodCIsInZpc3VhbFZpZXdwb3J0IiwiYWRkVmlzdWFsT2Zmc2V0cyIsIm9mZnNldExlZnQiLCJ5Iiwib2Zmc2V0VG9wIiwiZ2V0TGF5b3V0UmVjdCIsImFicyIsImNvbnRhaW5zIiwicGFyZW50IiwiY2hpbGQiLCJyb290Tm9kZSIsImdldFJvb3ROb2RlIiwibmV4dCIsImlzU2FtZU5vZGUiLCJwYXJlbnROb2RlIiwiaG9zdCIsImdldENvbXB1dGVkU3R5bGUiLCJpc1RhYmxlRWxlbWVudCIsImluZGV4T2YiLCJnZXREb2N1bWVudEVsZW1lbnQiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImdldFBhcmVudE5vZGUiLCJhc3NpZ25lZFNsb3QiLCJnZXRUcnVlT2Zmc2V0UGFyZW50Iiwib2Zmc2V0UGFyZW50IiwiZ2V0T2Zmc2V0UGFyZW50IiwiZ2V0Q29udGFpbmluZ0Jsb2NrIiwiaXNGaXJlZm94IiwiY3VycmVudE5vZGUiLCJjc3MiLCJ0cmFuc2Zvcm0iLCJwZXJzcGVjdGl2ZSIsImNvbnRhaW4iLCJ3aWxsQ2hhbmdlIiwiZmlsdGVyIiwiZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50Iiwid2l0aGluIiwibWluJDEiLCJtYXgkMSIsIm1lcmdlUGFkZGluZ09iamVjdCIsInBhZGRpbmdPYmplY3QiLCJleHBhbmRUb0hhc2hNYXAiLCJoYXNoTWFwIiwia2V5IiwidG9QYWRkaW5nT2JqZWN0IiwicGFkZGluZyIsInJlY3RzIiwiYXJyb3ckMSIsIl9zdGF0ZSRtb2RpZmllcnNEYXRhJCIsImFycm93RWxlbWVudCIsInBvcHBlck9mZnNldHMiLCJtb2RpZmllcnNEYXRhIiwiYmFzZVBsYWNlbWVudCIsImF4aXMiLCJsZW4iLCJhcnJvd1JlY3QiLCJtaW5Qcm9wIiwibWF4UHJvcCIsImVuZERpZmYiLCJzdGFydERpZmYiLCJhcnJvd09mZnNldFBhcmVudCIsImNsaWVudFNpemUiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsImNlbnRlclRvUmVmZXJlbmNlIiwiY2VudGVyIiwib2Zmc2V0IiwiYXhpc1Byb3AiLCJjZW50ZXJPZmZzZXQiLCJlZmZlY3QkMSIsIl9vcHRpb25zJGVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicmVxdWlyZXNJZkV4aXN0cyIsImdldFZhcmlhdGlvbiIsInVuc2V0U2lkZXMiLCJtYXBUb1N0eWxlcyIsIl9PYmplY3QkYXNzaWduMiIsInBvcHBlclJlY3QiLCJ2YXJpYXRpb24iLCJvZmZzZXRzIiwiZ3B1QWNjZWxlcmF0aW9uIiwiYWRhcHRpdmUiLCJyb3VuZE9mZnNldHMiLCJpc0ZpeGVkIiwiX29mZnNldHMkeCIsIl9vZmZzZXRzJHkiLCJfcmVmMyIsImhhc1giLCJoYXNZIiwic2lkZVgiLCJzaWRlWSIsIndpbiIsImhlaWdodFByb3AiLCJ3aWR0aFByb3AiLCJfT2JqZWN0JGFzc2lnbiIsImNvbW1vblN0eWxlcyIsIl9yZWY0Iiwicm91bmRPZmZzZXRzQnlEUFIiLCJkcHIiLCJkZXZpY2VQaXhlbFJhdGlvIiwicGFzc2l2ZSIsImhhc2gkMSIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwicmVwbGFjZSIsIm1hdGNoZWQiLCJoYXNoIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQiLCJnZXRXaW5kb3dTY3JvbGwiLCJzY3JvbGxMZWZ0IiwicGFnZVhPZmZzZXQiLCJzY3JvbGxUb3AiLCJwYWdlWU9mZnNldCIsImdldFdpbmRvd1Njcm9sbEJhclgiLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJnZXRTY3JvbGxQYXJlbnQiLCJib2R5IiwibGlzdFNjcm9sbFBhcmVudHMiLCJsaXN0IiwiX2VsZW1lbnQkb3duZXJEb2N1bWVuIiwic2Nyb2xsUGFyZW50IiwiaXNCb2R5IiwidGFyZ2V0IiwidXBkYXRlZExpc3QiLCJyZWN0VG9DbGllbnRSZWN0IiwicmVjdCIsImdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlIiwiY2xpcHBpbmdQYXJlbnQiLCJnZXRWaWV3cG9ydFJlY3QiLCJodG1sIiwibGF5b3V0Vmlld3BvcnQiLCJnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJnZXREb2N1bWVudFJlY3QiLCJ3aW5TY3JvbGwiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImRpcmVjdGlvbiIsImdldENsaXBwaW5nUmVjdCIsImJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwibWFpbkNsaXBwaW5nUGFyZW50cyIsImdldENsaXBwaW5nUGFyZW50cyIsImNsaXBwZXJFbGVtZW50IiwiZmlyc3RDbGlwcGluZ1BhcmVudCIsImNsaXBwaW5nUmVjdCIsImFjY1JlY3QiLCJjb21wdXRlT2Zmc2V0cyIsImNvbW1vblgiLCJjb21tb25ZIiwibWFpbkF4aXMiLCJkZXRlY3RPdmVyZmxvdyIsIl9vcHRpb25zIiwiX29wdGlvbnMkcGxhY2VtZW50IiwiX29wdGlvbnMkc3RyYXRlZ3kiLCJfb3B0aW9ucyRib3VuZGFyeSIsIl9vcHRpb25zJHJvb3RCb3VuZGFyeSIsIl9vcHRpb25zJGVsZW1lbnRDb250ZSIsImVsZW1lbnRDb250ZXh0IiwiX29wdGlvbnMkYWx0Qm91bmRhcnkiLCJhbHRCb3VuZGFyeSIsIl9vcHRpb25zJHBhZGRpbmciLCJhbHRDb250ZXh0IiwiY2xpcHBpbmdDbGllbnRSZWN0IiwiY29udGV4dEVsZW1lbnQiLCJyZWZlcmVuY2VDbGllbnRSZWN0IiwicG9wcGVyQ2xpZW50UmVjdCIsImVsZW1lbnRDbGllbnRSZWN0Iiwib3ZlcmZsb3dPZmZzZXRzIiwib2Zmc2V0RGF0YSIsIm11bHRpcGx5IiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJmbGlwVmFyaWF0aW9ucyIsIl9vcHRpb25zJGFsbG93ZWRBdXRvUCIsImFsbG93ZWRBdXRvUGxhY2VtZW50cyIsInBsYWNlbWVudHMkMSIsImFsbG93ZWRQbGFjZW1lbnRzIiwibGVuZ3RoIiwib3ZlcmZsb3dzIiwic29ydCIsImEiLCJiIiwiZmxpcCQxIiwiZmxpcCIsIl9za2lwIiwiX29wdGlvbnMkbWFpbkF4aXMiLCJjaGVja01haW5BeGlzIiwiX29wdGlvbnMkYWx0QXhpcyIsImFsdEF4aXMiLCJjaGVja0FsdEF4aXMiLCJzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJfb3B0aW9ucyRmbGlwVmFyaWF0aW8iLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyIsIm9wcG9zaXRlUGxhY2VtZW50IiwicmVmZXJlbmNlUmVjdCIsImNoZWNrc01hcCIsIk1hcCIsIm1ha2VGYWxsYmFja0NoZWNrcyIsImZpcnN0Rml0dGluZ1BsYWNlbWVudCIsImkiLCJfYmFzZVBsYWNlbWVudCIsImlzU3RhcnRWYXJpYXRpb24iLCJpc1ZlcnRpY2FsIiwibWFpblZhcmlhdGlvblNpZGUiLCJhbHRWYXJpYXRpb25TaWRlIiwiY2hlY2tzIiwicHVzaCIsImV2ZXJ5IiwiY2hlY2siLCJzZXQiLCJfbG9vcCIsIl9pIiwiZml0dGluZ1BsYWNlbWVudCIsImZpbmQiLCJnZXQiLCJzbGljZSIsInJlc2V0IiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic29tZSIsInNpZGUiLCJvZmZzZXQkMSIsIl9vcHRpb25zJG9mZnNldCIsImRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZIiwiaW52ZXJ0RGlzdGFuY2UiLCJza2lkZGluZyIsImRpc3RhbmNlIiwiX2RhdGEkc3RhdGUkcGxhY2VtZW50IiwicHJldmVudE92ZXJmbG93JDEiLCJwcmV2ZW50T3ZlcmZsb3ciLCJfb3B0aW9ucyR0ZXRoZXIiLCJ0ZXRoZXIiLCJfb3B0aW9ucyR0ZXRoZXJPZmZzZXQiLCJ0ZXRoZXJPZmZzZXQiLCJpc0Jhc2VQbGFjZW1lbnQiLCJnZXRBbHRBeGlzIiwidGV0aGVyT2Zmc2V0VmFsdWUiLCJub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUiLCJvZmZzZXRNb2RpZmllclN0YXRlIiwiX29mZnNldE1vZGlmaWVyU3RhdGUkIiwibWFpblNpZGUiLCJhbHRTaWRlIiwiYWRkaXRpdmUiLCJtaW5MZW4iLCJtYXhMZW4iLCJhcnJvd1BhZGRpbmdPYmplY3QiLCJhcnJvd1BhZGRpbmdNaW4iLCJhcnJvd1BhZGRpbmdNYXgiLCJhcnJvd0xlbiIsIm1pbk9mZnNldCIsIm1heE9mZnNldCIsImNsaWVudE9mZnNldCIsIm9mZnNldE1vZGlmaWVyVmFsdWUiLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyIiwiX21haW5TaWRlIiwiX2FsdFNpZGUiLCJfb2Zmc2V0IiwiX2xlbiIsIl9taW4iLCJfbWF4IiwiaXNPcmlnaW5TaWRlIiwiX29mZnNldE1vZGlmaWVyVmFsdWUiLCJfdGV0aGVyTWluIiwiX3RldGhlck1heCIsIl9wcmV2ZW50ZWRPZmZzZXQiLCJ3aXRoaW5NYXhDbGFtcCIsInYiLCJnZXRDb21wb3NpdGVSZWN0IiwiZWxlbWVudE9yVmlydHVhbEVsZW1lbnQiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsIm9mZnNldFBhcmVudElzU2NhbGVkIiwiaXNFbGVtZW50U2NhbGVkIiwic2Nyb2xsIiwiZ2V0Tm9kZVNjcm9sbCIsImdldEhUTUxFbGVtZW50U2Nyb2xsIiwib3JkZXIiLCJtb2RpZmllcnMiLCJ2aXNpdGVkIiwiU2V0IiwicmVzdWx0IiwibW9kaWZpZXIiLCJhZGQiLCJkZXAiLCJoYXMiLCJkZXBNb2RpZmllciIsIkRFRkFVTFRfT1BUSU9OUyIsImFyZVZhbGlkRWxlbWVudHMiLCJhcmd1bWVudHMiLCJhcmdzIiwiX2tleSIsInBvcHBlckdlbmVyYXRvciIsImdlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyIsIl9nZW5lcmF0b3JPcHRpb25zJGRlZiIsImRlZmF1bHRNb2RpZmllcnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyIiwiZGVmYXVsdE9wdGlvbnMiLCJjcmVhdGVQb3BwZXIiLCJwZW5kaW5nIiwib3JkZXJlZE1vZGlmaWVycyIsImVmZmVjdENsZWFudXBGbnMiLCJpc0Rlc3Ryb3llZCIsImluc3RhbmNlIiwic2V0T3B0aW9ucyIsInNldE9wdGlvbnNBY3Rpb24iLCJjbGVhbnVwTW9kaWZpZXJFZmZlY3RzIiwic2Nyb2xsUGFyZW50cyIsIm9yZGVyTW9kaWZpZXJzIiwibWVyZ2VCeU5hbWUiLCJtZXJnZWQiLCJjdXJyZW50IiwiZXhpc3RpbmciLCJtIiwicnVuTW9kaWZpZXJFZmZlY3RzIiwiX3JlZjMkb3B0aW9ucyIsImNsZWFudXBGbiIsIm5vb3BGbiIsInVwZGF0ZSIsImZvcmNlVXBkYXRlIiwiX3N0YXRlJGVsZW1lbnRzIiwiaW5kZXgiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ1bmRlZmluZWQiLCJkZXN0cm95Iiwib25GaXJzdFVwZGF0ZSIsIl9vcHRpb25zJHNjcm9sbCIsIl9vcHRpb25zJHJlc2l6ZSIsInJlc2l6ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29tcHV0ZVN0eWxlcyIsIl9yZWY1IiwiX29wdGlvbnMkZ3B1QWNjZWxlcmF0IiwiX29wdGlvbnMkYWRhcHRpdmUiLCJfb3B0aW9ucyRyb3VuZE9mZnNldHMiLCJoaWRlIiwicmVmZXJlbmNlT3ZlcmZsb3ciLCJwb3BwZXJBbHRPdmVyZmxvdyIsInJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyIsInBvcHBlckVzY2FwZU9mZnNldHMiLCJpc1JlZmVyZW5jZUhpZGRlbiIsImhhc1BvcHBlckVzY2FwZWQiLCJWZXJkb2NzQnV0dG9uUGFuZWwiLCJob3N0UmVmIiwicmVnaXN0ZXJJbnN0YW5jZSIsInRoaXMiLCJzaG93aW5nIiwiaWNvbiIsImNvbXBvbmVudERpZFJlbmRlciIsImFwcGVuZENoaWxkIiwicGFuZWxFbCIsInBvcHBlckluc3RhbmNlIiwiaWNvbkVsIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJyZW1vdmUiLCJfYSIsIl9iIiwiaGlkZXJFbCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsInpJbmRleCIsIm9uY2xpY2siLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwidG9nZ2xlIiwiZnJvbSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJlbCIsImdldEVsZW1lbnRCeUlkIiwiaGlkZVBhbmVsIiwic2hvd1BhbmVsIiwicmVuZGVyIiwiaCIsIkhvc3QiLCJjbGFzcyIsImlubmVySFRNTCIsIm9uQ2xpY2siLCJyZWYiLCJyb2xlIiwicm5nIiwiVmVyZG9jc1NlbGVjdElucHV0IiwibGFiZWwiLCJkaXNhYmxlZCIsIm9wdGlvbiIsInNlbGVjdGVkIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJybmRzOCIsIlVpbnQ4QXJyYXkiLCJ3aGF0d2dSTkciLCJybmRzIiwicmFuZG9tIiwicm5nQnJvd3NlciIsImJ5dGVUb0hleCIsInN1YnN0ciIsImJ5dGVzVG9VdWlkXzEiLCJieXRlc1RvVXVpZCIsImJ1ZiIsImJ0aCIsIl9zZWVkQnl0ZXMiLCJfbm9kZUlkIiwiX2Nsb2Nrc2VxIiwiX2xhc3RNU2VjcyIsIl9sYXN0TlNlY3MiLCJ2MV8xIiwidjEiLCJjbG9ja3NlcSIsIm1zZWNzIiwiRGF0ZSIsImdldFRpbWUiLCJuc2VjcyIsImR0IiwidGwiLCJ0bWgiLCJuIiwidjRfMSIsInY0IiwiaWkiLCJ1dWlkIiwidXVpZEJyb3dzZXIiLCJjYXBpdGFsaXplIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJUcmFzaEljb24iLCJIZWxwSWNvbiIsIlZlcmRvY3NUZW1wbGF0ZUZpZWxkUHJvcGVydGllcyIsImNsb3NlIiwiY3JlYXRlRXZlbnQiLCJzZXR0aW5nc0NoYW5nZWQiLCJzZGtFcnJvciIsInN0b3JlIiwiVmVyZG9jc0VuZHBvaW50IiwiZ2V0RGVmYXVsdCIsImhlbHBUZXh0IiwiZGlydHkiLCJsb2FkaW5nIiwidHlwZSIsInNldHRpbmciLCJyb2xlTmFtZSIsImdyb3VwIiwiZmllbGRUeXBlIiwicmVxdWlyZWQiLCJwbGFjZWhvbGRlciIsImRlZmF1bHRWYWx1ZSIsInNob3dpbmdIZWxwIiwibG9hZFNlc3Npb24iLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJzZXNzaW9uIiwiZ2V0VGVtcGxhdGVTdG9yZSIsImZpZWxkIiwiZmllbGRzIiwicm9sZV9uYW1lIiwiX2MiLCJfZCIsIl9lIiwiZW1pdCIsIlNES0Vycm9yIiwibWVzc2FnZSIsIl9mIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJfZyIsImhhbmRsZUNhbmNlbCIsImhhbmRsZVNhdmUiLCJuZXdQcm9wZXJ0aWVzIiwic2V0dGluZ3MiLCJoYW5kbGVBZGRPcHRpb24iLCJjaGVja2VkIiwibmV3RmllbGRzIiwiY29uZmlybSIsInJvbGVzIiwiaXNMb2FkZWQiLCJmbGV4Iiwib25TdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsImF1dG9jb21wbGV0ZSIsIm9uSW5wdXQiLCJpbmNsdWRlcyIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImh0bWxGb3IiLCJzaXplIiwidGV4dEFsaWduIiwiZm9udFdlaWdodCIsImZvbnRTaXplIiwianVzdGlmeUNvbnRlbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvciIsIm9wdCIsImhhbmRsZURlbGV0ZSIsInZhcmlhbnQiLCJnZXRFbGVtZW50IiwiJCIsIiRldmVyeSIsInByb3RvIiwiZm9yY2VkIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsImNhbGxiYWNrZm4iXSwibWFwcGluZ3MiOiI7K2RBR0lBLFlBQWMsU0FBZEEsWUFBd0JDLFNBQVVDLFdBQVlDLFFBQzlDLE9BQU9GLFNBQVNHLElBQ1hDLEtBQUssY0FBY0MsT0FBT0osV0FBWSxXQUFZQyxRQUNsREksTUFBSyxTQUFVQyxHQUFLLE9BQU9BLEVBQUVDLElBQU0sR0FDNUMsRUFJSUMsWUFBYyxTQUFkQSxZQUF3QlQsU0FBVUMsV0FBWVMsVUFBV1IsUUFDekQsT0FBT0YsU0FBU0csSUFDWFEsSUFBSSxjQUFjTixPQUFPSixXQUFZLFlBQVlJLE9BQU9LLFdBQVlSLFFBQ3BFSSxNQUFLLFNBQVVDLEdBQUssT0FBT0EsRUFBRUMsSUFBTSxHQUM1QyxFQUlJSSxZQUFjLFNBQWRBLFlBQXdCWixTQUFVQyxXQUFZUyxXQUM5QyxPQUFPVixTQUFTRyxJ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SSxRQUFLbUksYUFBYW5JLEVBQUUsRUFBRWEsVUFBV2tELFlBQWNyRCwyREFBRSxNQUFPLENBQUVuYixNQUFPLENBQUUyaEIsS0FBTSxPQUFVeEcsMkRBQUUsaUJBQWtCLENBQUVpSCxLQUFNLFFBQVNTLFFBQVMsVUFBV2pILE1BQU8sU0FBVUMsVUFBV3JDLEtBQUsyRixNQUFPNUQsUUFBUyxpQkFBQWQsR0FBQyxPQUFJLFFBQUt3RyxhQUFheEcsRUFBRSxJQUFLVSwyREFBRSxpQkFBa0IsQ0FBRWlILEtBQU0sUUFBU3hHLE1BQU8sT0FBUUMsVUFBV3JDLEtBQUsyRixNQUFPNUQsUUFBUyxpQkFBQWQsR0FBQyxPQUFJLFFBQUt5RyxXQUFXekcsRUFBRSxPQTNDL2JVLDJEQUFFQyxtREFBTSxDQUFFQyxNQUFPLFVBSmhCRiwyREFBRUMsbURBQU0sS0FBTUQsMkRBQUUsMEJBQTJCLENBQUV5RixRQUFTLGtEQWdEbEUsR0FBQyxjQUNELFNBQUE3UCxNQUFXLE9BQU8rUiwyREFBV3RKLEtBQU8sS0FBQywrQkEzT0gsR0E2T3BDa0YsK0JBQStCMWUsTUFsUFcsOG1JLCtHQy9SMUMsSUFBSStpQixFQUFJLG9CQUFRLDhDQUNaQyxPQUFTLG9CQUFRLHVEQUFnQ3hTLE1BT3JEdVMsRUFBRSxDQUFFL1gsT0FBUSxRQUFTaVksT0FBTyxFQUFNQyxRQU5SLG9CQUFRLDZEQUVkQyxDQUFvQixVQUlvQixDQUMxRDNTLE1BQU8sU0FBU0EsTUFBTTRTLFlBQ3BCLE9BQU9KLE9BQU94SixLQUFNNEosV0FBWXpOLFVBQVVuSCxPQUFTLEVBQUltSCxVQUFVLFFBQUtzQyxFQUN4RSxHIiwiZmlsZSI6IjI5LmRhYjgyMTkyLmlmcmFtZS5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFkZCBhIGZpZWxkIHRvIGEgdGVtcGxhdGUuXG4gKi9cbnZhciBjcmVhdGVGaWVsZCA9IGZ1bmN0aW9uIChlbmRwb2ludCwgdGVtcGxhdGVJZCwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGVuZHBvaW50LmFwaSAvL1xuICAgICAgICAucG9zdChcIi90ZW1wbGF0ZXMvXCIuY29uY2F0KHRlbXBsYXRlSWQsIFwiL2ZpZWxkc1wiKSwgcGFyYW1zKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KTtcbn07XG4vKipcbiAqIFVwZGF0ZSBhIHRlbXBsYXRlIGZpZWxkLlxuICovXG52YXIgdXBkYXRlRmllbGQgPSBmdW5jdGlvbiAoZW5kcG9pbnQsIHRlbXBsYXRlSWQsIGZpZWxkTmFtZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGVuZHBvaW50LmFwaSAvL1xuICAgICAgICAucHV0KFwiL3RlbXBsYXRlcy9cIi5jb25jYXQodGVtcGxhdGVJZCwgXCIvZmllbGRzL1wiKS5jb25jYXQoZmllbGROYW1lKSwgcGFyYW1zKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KTtcbn07XG4vKipcbiAqIFJFbW92ZSBhIGZpZWxkIGZyb20gYSB0ZW1wbGF0ZS5cbiAqL1xudmFyIGRlbGV0ZUZpZWxkID0gZnVuY3Rpb24gKGVuZHBvaW50LCB0ZW1wbGF0ZUlkLCBmaWVsZE5hbWUpIHtcbiAgICByZXR1cm4gZW5kcG9pbnQuYXBpIC8vXG4gICAgICAgIC5kZWxldGUoXCIvdGVtcGxhdGVzL1wiLmNvbmNhdCh0ZW1wbGF0ZUlkLCBcIi9maWVsZHMvXCIpLmNvbmNhdChmaWVsZE5hbWUpKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZUZpZWxkIGFzIGMsIGRlbGV0ZUZpZWxkIGFzIGQsIHVwZGF0ZUZpZWxkIGFzIHUgfTtcbiIsInZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyAoeCkge1xuXHRyZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdkZWZhdWx0JykgPyB4WydkZWZhdWx0J10gOiB4O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgYmFzZWRpciwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7XG5cdFx0cGF0aDogYmFzZWRpcixcblx0XHRleHBvcnRzOiB7fSxcblx0XHRyZXF1aXJlOiBmdW5jdGlvbiAocGF0aCwgYmFzZSkge1xuXHRcdFx0cmV0dXJuIGNvbW1vbmpzUmVxdWlyZSgpO1xuXHRcdH1cblx0fSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG5mdW5jdGlvbiBjb21tb25qc1JlcXVpcmUgKCkge1xuXHR0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IEByb2xsdXAvcGx1Z2luLWNvbW1vbmpzJyk7XG59XG5cbmV4cG9ydCB7IGNvbW1vbmpzR2xvYmFsIGFzIGEsIGNvbW1vbmpzUmVxdWlyZSBhcyBiLCBjcmVhdGVDb21tb25qc01vZHVsZSBhcyBjLCBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyBhcyBnIH07XG4iLCJ2YXIgdG9wID0gJ3RvcCc7XG52YXIgYm90dG9tID0gJ2JvdHRvbSc7XG52YXIgcmlnaHQgPSAncmlnaHQnO1xudmFyIGxlZnQgPSAnbGVmdCc7XG52YXIgYXV0byA9ICdhdXRvJztcbnZhciBiYXNlUGxhY2VtZW50cyA9IFt0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnRdO1xudmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbnZhciBlbmQgPSAnZW5kJztcbnZhciBjbGlwcGluZ1BhcmVudHMgPSAnY2xpcHBpbmdQYXJlbnRzJztcbnZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG52YXIgcG9wcGVyID0gJ3BvcHBlcic7XG52YXIgcmVmZXJlbmNlID0gJ3JlZmVyZW5jZSc7XG52YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xudmFyIHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovW10uY29uY2F0KGJhc2VQbGFjZW1lbnRzLCBbYXV0b10pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCwgcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTsgLy8gbW9kaWZpZXJzIHRoYXQgbmVlZCB0byByZWFkIHRoZSBET01cblxudmFyIGJlZm9yZVJlYWQgPSAnYmVmb3JlUmVhZCc7XG52YXIgcmVhZCA9ICdyZWFkJztcbnZhciBhZnRlclJlYWQgPSAnYWZ0ZXJSZWFkJzsgLy8gcHVyZS1sb2dpYyBtb2RpZmllcnNcblxudmFyIGJlZm9yZU1haW4gPSAnYmVmb3JlTWFpbic7XG52YXIgbWFpbiA9ICdtYWluJztcbnZhciBhZnRlck1haW4gPSAnYWZ0ZXJNYWluJzsgLy8gbW9kaWZpZXIgd2l0aCB0aGUgcHVycG9zZSB0byB3cml0ZSB0byB0aGUgRE9NIChvciB3cml0ZSBpbnRvIGEgZnJhbWV3b3JrIHN0YXRlKVxuXG52YXIgYmVmb3JlV3JpdGUgPSAnYmVmb3JlV3JpdGUnO1xudmFyIHdyaXRlID0gJ3dyaXRlJztcbnZhciBhZnRlcldyaXRlID0gJ2FmdGVyV3JpdGUnO1xudmFyIG1vZGlmaWVyUGhhc2VzID0gW2JlZm9yZVJlYWQsIHJlYWQsIGFmdGVyUmVhZCwgYmVmb3JlTWFpbiwgbWFpbiwgYWZ0ZXJNYWluLCBiZWZvcmVXcml0ZSwgd3JpdGUsIGFmdGVyV3JpdGVdO1xuXG5mdW5jdGlvbiBnZXROb2RlTmFtZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ID8gKGVsZW1lbnQubm9kZU5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmIChub2RlLnRvU3RyaW5nKCkgIT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdyA6IHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5FbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5IVE1MRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNTaGFkb3dSb290KG5vZGUpIHtcbiAgLy8gSUUgMTEgaGFzIG5vIFNoYWRvd1Jvb3RcbiAgaWYgKHR5cGVvZiBTaGFkb3dSb290ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLlNoYWRvd1Jvb3Q7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgU2hhZG93Um9vdDtcbn1cblxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUuc3R5bGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgIC8vIGVmZmVjdGl2ZSB3YXkgdG8gYXBwbHkgc3R5bGVzIHRvIGFuIEhUTUxFbGVtZW50XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0JDIoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGU7XG4gIHZhciBpbml0aWFsU3R5bGVzID0ge1xuICAgIHBvcHBlcjoge1xuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBsZWZ0OiAnMCcsXG4gICAgICB0b3A6ICcwJyxcbiAgICAgIG1hcmdpbjogJzAnXG4gICAgfSxcbiAgICBhcnJvdzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIHJlZmVyZW5jZToge31cbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsIGluaXRpYWxTdHlsZXMucG9wcGVyKTtcbiAgc3RhdGUuc3R5bGVzID0gaW5pdGlhbFN0eWxlcztcblxuICBpZiAoc3RhdGUuZWxlbWVudHMuYXJyb3cpIHtcbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLmFycm93LnN0eWxlLCBpbml0aWFsU3R5bGVzLmFycm93KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgICB2YXIgc3R5bGVQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoc3RhdGUuc3R5bGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gc3RhdGUuc3R5bGVzW25hbWVdIDogaW5pdGlhbFN0eWxlc1tuYW1lXSk7IC8vIFNldCBhbGwgdmFsdWVzIHRvIGFuIGVtcHR5IHN0cmluZyB0byB1bnNldCB0aGVtXG5cbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlLCBwcm9wZXJ0eSkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfSwge30pOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmNvbnN0IGFwcGx5U3R5bGVzJDEgPSB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0JDIsXG4gIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXVxufTtcblxuZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufVxuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuXG5mdW5jdGlvbiBnZXRVQVN0cmluZygpIHtcbiAgdmFyIHVhRGF0YSA9IG5hdmlnYXRvci51c2VyQWdlbnREYXRhO1xuXG4gIGlmICh1YURhdGEgIT0gbnVsbCAmJiB1YURhdGEuYnJhbmRzICYmIEFycmF5LmlzQXJyYXkodWFEYXRhLmJyYW5kcykpIHtcbiAgICByZXR1cm4gdWFEYXRhLmJyYW5kcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmJyYW5kICsgXCIvXCIgKyBpdGVtLnZlcnNpb247XG4gICAgfSkuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQ7XG59XG5cbmZ1bmN0aW9uIGlzTGF5b3V0Vmlld3BvcnQoKSB7XG4gIHJldHVybiAhL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChnZXRVQVN0cmluZygpKTtcbn1cblxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGluY2x1ZGVTY2FsZSwgaXNGaXhlZFN0cmF0ZWd5KSB7XG4gIGlmIChpbmNsdWRlU2NhbGUgPT09IHZvaWQgMCkge1xuICAgIGluY2x1ZGVTY2FsZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzRml4ZWRTdHJhdGVneSA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZFN0cmF0ZWd5ID0gZmFsc2U7XG4gIH1cblxuICB2YXIgY2xpZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSAxO1xuICB2YXIgc2NhbGVZID0gMTtcblxuICBpZiAoaW5jbHVkZVNjYWxlICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICBzY2FsZVggPSBlbGVtZW50Lm9mZnNldFdpZHRoID4gMCA/IHJvdW5kKGNsaWVudFJlY3Qud2lkdGgpIC8gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAxIDogMTtcbiAgICBzY2FsZVkgPSBlbGVtZW50Lm9mZnNldEhlaWdodCA+IDAgPyByb3VuZChjbGllbnRSZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxIDogMTtcbiAgfVxuXG4gIHZhciBfcmVmID0gaXNFbGVtZW50KGVsZW1lbnQpID8gZ2V0V2luZG93KGVsZW1lbnQpIDogd2luZG93LFxuICAgICAgdmlzdWFsVmlld3BvcnQgPSBfcmVmLnZpc3VhbFZpZXdwb3J0O1xuXG4gIHZhciBhZGRWaXN1YWxPZmZzZXRzID0gIWlzTGF5b3V0Vmlld3BvcnQoKSAmJiBpc0ZpeGVkU3RyYXRlZ3k7XG4gIHZhciB4ID0gKGNsaWVudFJlY3QubGVmdCArIChhZGRWaXN1YWxPZmZzZXRzICYmIHZpc3VhbFZpZXdwb3J0ID8gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdCA6IDApKSAvIHNjYWxlWDtcbiAgdmFyIHkgPSAoY2xpZW50UmVjdC50b3AgKyAoYWRkVmlzdWFsT2Zmc2V0cyAmJiB2aXN1YWxWaWV3cG9ydCA/IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcCA6IDApKSAvIHNjYWxlWTtcbiAgdmFyIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aCAvIHNjYWxlWDtcbiAgdmFyIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0IC8gc2NhbGVZO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB0b3A6IHksXG4gICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICBib3R0b206IHkgKyBoZWlnaHQsXG4gICAgbGVmdDogeCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn1cblxuLy8gbWVhbnMgaXQgZG9lc24ndCB0YWtlIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zLlxuXG5mdW5jdGlvbiBnZXRMYXlvdXRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIGNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7IC8vIFVzZSB0aGUgY2xpZW50UmVjdCBzaXplcyBpZiBpdCdzIG5vdCBiZWVuIHRyYW5zZm9ybWVkLlxuICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEyMjNcblxuICB2YXIgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3Qud2lkdGggLSB3aWR0aCkgPD0gMSkge1xuICAgIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aDtcbiAgfVxuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LmhlaWdodCAtIGhlaWdodCkgPD0gMSkge1xuICAgIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgeTogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIHJvb3ROb2RlID0gY2hpbGQuZ2V0Um9vdE5vZGUgJiYgY2hpbGQuZ2V0Um9vdE5vZGUoKTsgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuXG4gIGlmIChwYXJlbnQuY29udGFpbnMoY2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gdGhlbiBmYWxsYmFjayB0byBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBTaGFkb3cgRE9NIHN1cHBvcnRcbiAgZWxzZSBpZiAocm9vdE5vZGUgJiYgaXNTaGFkb3dSb290KHJvb3ROb2RlKSkge1xuICAgICAgdmFyIG5leHQgPSBjaGlsZDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAobmV4dCAmJiBwYXJlbnQuaXNTYW1lTm9kZShuZXh0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cblxuXG4gICAgICAgIG5leHQgPSBuZXh0LnBhcmVudE5vZGUgfHwgbmV4dC5ob3N0O1xuICAgICAgfSB3aGlsZSAobmV4dCk7XG4gICAgfSAvLyBHaXZlIHVwLCB0aGUgcmVzdWx0IGlzIGZhbHNlXG5cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufVxuXG5mdW5jdGlvbiBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gIHJldHVybiAoKGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQub3duZXJEb2N1bWVudCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICBlbGVtZW50LmRvY3VtZW50KSB8fCB3aW5kb3cuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8ICggLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICBpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xufSAvLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgdmFyIGlzRmlyZWZveCA9IC9maXJlZm94L2kudGVzdChnZXRVQVN0cmluZygpKTtcbiAgdmFyIGlzSUUgPSAvVHJpZGVudC9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG5cbiAgaWYgKGlzSUUgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIC8vIEluIElFIDksIDEwIGFuZCAxMSBmaXhlZCBlbGVtZW50cyBjb250YWluaW5nIGJsb2NrIGlzIGFsd2F5cyBlc3RhYmxpc2hlZCBieSB0aGUgdmlld3BvcnRcbiAgICB2YXIgZWxlbWVudENzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudENzcy5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcblxuICBpZiAoaXNTaGFkb3dSb290KGN1cnJlbnROb2RlKSkge1xuICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuaG9zdDtcbiAgfVxuXG4gIHdoaWxlIChpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJiBbJ2h0bWwnLCAnYm9keSddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoY3VycmVudE5vZGUpKSA8IDApIHtcbiAgICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSk7IC8vIFRoaXMgaXMgbm9uLWV4aGF1c3RpdmUgYnV0IGNvdmVycyB0aGUgbW9zdCBjb21tb24gQ1NTIHByb3BlcnRpZXMgdGhhdFxuICAgIC8vIGNyZWF0ZSBhIGNvbnRhaW5pbmcgYmxvY2suXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NvbnRhaW5pbmdfYmxvY2sjaWRlbnRpZnlpbmdfdGhlX2NvbnRhaW5pbmdfYmxvY2tcblxuICAgIGlmIChjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgY3NzLmNvbnRhaW4gPT09ICdwYWludCcgfHwgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnXS5pbmRleE9mKGNzcy53aWxsQ2hhbmdlKSAhPT0gLTEgfHwgaXNGaXJlZm94ICYmIGNzcy53aWxsQ2hhbmdlID09PSAnZmlsdGVyJyB8fCBpc0ZpcmVmb3ggJiYgY3NzLmZpbHRlciAmJiBjc3MuZmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSAvLyBHZXRzIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHBvc2l0aW9uZWQgZWxlbWVudC4gSGFuZGxlcyBzb21lIGVkZ2UgY2FzZXMsXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxuXG5cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpO1xuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgaWYgKG9mZnNldFBhcmVudCAmJiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2h0bWwnIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB8fCB3aW5kb3c7XG59XG5cbmZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufVxuXG5mdW5jdGlvbiB3aXRoaW4obWluJDEsIHZhbHVlLCBtYXgkMSkge1xuICByZXR1cm4gbWF4KG1pbiQxLCBtaW4odmFsdWUsIG1heCQxKSk7XG59XG5mdW5jdGlvbiB3aXRoaW5NYXhDbGFtcChtaW4sIHZhbHVlLCBtYXgpIHtcbiAgdmFyIHYgPSB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KTtcbiAgcmV0dXJuIHYgPiBtYXggPyBtYXggOiB2O1xufVxuXG5mdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlUGFkZGluZ09iamVjdChwYWRkaW5nT2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnZXRGcmVzaFNpZGVPYmplY3QoKSwgcGFkZGluZ09iamVjdCk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59XG5cbnZhciB0b1BhZGRpbmdPYmplY3QgPSBmdW5jdGlvbiB0b1BhZGRpbmdPYmplY3QocGFkZGluZywgc3RhdGUpIHtcbiAgcGFkZGluZyA9IHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nID8gcGFkZGluZyhPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHBhZGRpbmc7XG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xufTtcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdCQxKF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRlbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50LFxuICAgICAgYXJyb3dFbGVtZW50ID0gX29wdGlvbnMkZWxlbWVudCA9PT0gdm9pZCAwID8gJ1tkYXRhLXBvcHBlci1hcnJvd10nIDogX29wdGlvbnMkZWxlbWVudDtcblxuICBpZiAoYXJyb3dFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ1NTIHNlbGVjdG9yXG5cblxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRhaW5zKHN0YXRlLmVsZW1lbnRzLnBvcHBlciwgYXJyb3dFbGVtZW50KSkge1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5jb25zdCBhcnJvdyQxID0ge1xuICBuYW1lOiAnYXJyb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogYXJyb3csXG4gIGVmZmVjdDogZWZmZWN0JDEsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTtcblxuZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59XG5cbnZhciB1bnNldFNpZGVzID0ge1xuICB0b3A6ICdhdXRvJyxcbiAgcmlnaHQ6ICdhdXRvJyxcbiAgYm90dG9tOiAnYXV0bycsXG4gIGxlZnQ6ICdhdXRvJ1xufTsgLy8gUm91bmQgdGhlIG9mZnNldHMgdG8gdGhlIG5lYXJlc3Qgc3VpdGFibGUgc3VicGl4ZWwgYmFzZWQgb24gdGhlIERQUi5cbi8vIFpvb21pbmcgY2FuIGNoYW5nZSB0aGUgRFBSLCBidXQgaXQgc2VlbXMgdG8gcmVwb3J0IGEgdmFsdWUgdGhhdCB3aWxsXG4vLyBjbGVhbmx5IGRpdmlkZSB0aGUgdmFsdWVzIGludG8gdGhlIGFwcHJvcHJpYXRlIHN1YnBpeGVscy5cblxuZnVuY3Rpb24gcm91bmRPZmZzZXRzQnlEUFIoX3JlZiwgd2luKSB7XG4gIHZhciB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueTtcbiAgdmFyIGRwciA9IHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gIHJldHVybiB7XG4gICAgeDogcm91bmQoeCAqIGRwcikgLyBkcHIgfHwgMCxcbiAgICB5OiByb3VuZCh5ICogZHByKSAvIGRwciB8fCAwXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcFRvU3R5bGVzKF9yZWYyKSB7XG4gIHZhciBfT2JqZWN0JGFzc2lnbjI7XG5cbiAgdmFyIHBvcHBlciA9IF9yZWYyLnBvcHBlcixcbiAgICAgIHBvcHBlclJlY3QgPSBfcmVmMi5wb3BwZXJSZWN0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZjIucGxhY2VtZW50LFxuICAgICAgdmFyaWF0aW9uID0gX3JlZjIudmFyaWF0aW9uLFxuICAgICAgb2Zmc2V0cyA9IF9yZWYyLm9mZnNldHMsXG4gICAgICBwb3NpdGlvbiA9IF9yZWYyLnBvc2l0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX3JlZjIuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgYWRhcHRpdmUgPSBfcmVmMi5hZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9yZWYyLnJvdW5kT2Zmc2V0cyxcbiAgICAgIGlzRml4ZWQgPSBfcmVmMi5pc0ZpeGVkO1xuICB2YXIgX29mZnNldHMkeCA9IG9mZnNldHMueCxcbiAgICAgIHggPSBfb2Zmc2V0cyR4ID09PSB2b2lkIDAgPyAwIDogX29mZnNldHMkeCxcbiAgICAgIF9vZmZzZXRzJHkgPSBvZmZzZXRzLnksXG4gICAgICB5ID0gX29mZnNldHMkeSA9PT0gdm9pZCAwID8gMCA6IF9vZmZzZXRzJHk7XG5cbiAgdmFyIF9yZWYzID0gdHlwZW9mIHJvdW5kT2Zmc2V0cyA9PT0gJ2Z1bmN0aW9uJyA/IHJvdW5kT2Zmc2V0cyh7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmMy54O1xuICB5ID0gX3JlZjMueTtcbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIHZhciBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgdmFyIHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnICYmIHBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG5cbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3AgfHwgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCBwbGFjZW1lbnQgPT09IHJpZ2h0KSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVkgPSBib3R0b207XG4gICAgICB2YXIgb2Zmc2V0WSA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LmhlaWdodCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgb2Zmc2V0UGFyZW50W2hlaWdodFByb3BdO1xuICAgICAgeSAtPSBvZmZzZXRZIC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0IHx8IChwbGFjZW1lbnQgPT09IHRvcCB8fCBwbGFjZW1lbnQgPT09IGJvdHRvbSkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LndpZHRoIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXTtcbiAgICAgIHggLT0gb2Zmc2V0WCAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIHZhciBfcmVmNCA9IHJvdW5kT2Zmc2V0cyA9PT0gdHJ1ZSA/IHJvdW5kT2Zmc2V0c0J5RFBSKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSwgZ2V0V2luZG93KHBvcHBlcikpIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmNC54O1xuICB5ID0gX3JlZjQueTtcblxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uKSB7XG4gICAgdmFyIF9PYmplY3QkYXNzaWduO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduID0ge30sIF9PYmplY3QkYXNzaWduW3NpZGVZXSA9IGhhc1kgPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ25bc2lkZVhdID0gaGFzWCA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbi50cmFuc2Zvcm0gPSAod2luLmRldmljZVBpeGVsUmF0aW8gfHwgMSkgPD0gMSA/IFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIDApXCIsIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24yID0ge30sIF9PYmplY3QkYXNzaWduMltzaWRlWV0gPSBoYXNZID8geSArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjJbc2lkZVhdID0gaGFzWCA/IHggKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yLnRyYW5zZm9ybSA9ICcnLCBfT2JqZWN0JGFzc2lnbjIpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlcyhfcmVmNSkge1xuICB2YXIgc3RhdGUgPSBfcmVmNS5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmNS5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID0gb3B0aW9ucy5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRncHVBY2NlbGVyYXQsXG4gICAgICBfb3B0aW9ucyRhZGFwdGl2ZSA9IG9wdGlvbnMuYWRhcHRpdmUsXG4gICAgICBhZGFwdGl2ZSA9IF9vcHRpb25zJGFkYXB0aXZlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWRhcHRpdmUsXG4gICAgICBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPSBvcHRpb25zLnJvdW5kT2Zmc2V0cyxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJvdW5kT2Zmc2V0cztcblxuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHZhcmlhdGlvbjogZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uLFxuICAgIGlzRml4ZWQ6IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCdcbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMuYXJyb3csIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5jb25zdCBjb21wdXRlU3R5bGVzJDEgPSB7XG4gIG5hbWU6ICdjb21wdXRlU3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gIGZuOiBjb21wdXRlU3R5bGVzLFxuICBkYXRhOiB7fVxufTtcblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSB7XG4gIG5hbWU6ICdldmVudExpc3RlbmVycycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogZnVuY3Rpb24gZm4oKSB7fSxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIGRhdGE6IHt9XG59O1xuXG52YXIgaGFzaCQxID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICBib3R0b206ICd0b3AnLFxuICB0b3A6ICdib3R0b20nXG59O1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2gkMVttYXRjaGVkXTtcbiAgfSk7XG59XG5cbnZhciBoYXNoID0ge1xuICBzdGFydDogJ2VuZCcsXG4gIGVuZDogJ3N0YXJ0J1xufTtcbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsKG5vZGUpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhub2RlKTtcbiAgdmFyIHNjcm9sbExlZnQgPSB3aW4ucGFnZVhPZmZzZXQ7XG4gIHZhciBzY3JvbGxUb3AgPSB3aW4ucGFnZVlPZmZzZXQ7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0UmVjdChlbGVtZW50LCBzdHJhdGVneSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICB2YXIgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gMDtcbiAgdmFyIHkgPSAwO1xuXG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0O1xuICAgIHZhciBsYXlvdXRWaWV3cG9ydCA9IGlzTGF5b3V0Vmlld3BvcnQoKTtcblxuICAgIGlmIChsYXlvdXRWaWV3cG9ydCB8fCAhbGF5b3V0Vmlld3BvcnQgJiYgc3RyYXRlZ3kgPT09ICdmaXhlZCcpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSxcbiAgICB5OiB5XG4gIH07XG59XG5cbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcblxuZnVuY3Rpb24gZ2V0RG9jdW1lbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHdpblNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSAoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHk7XG4gIHZhciB3aWR0aCA9IG1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCk7XG4gIHZhciBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLCBib2R5ID8gYm9keS5jbGllbnRIZWlnaHQgOiAwKTtcbiAgdmFyIHggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQgKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpO1xuICB2YXIgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufVxuXG5mdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIEZpcmVmb3ggd2FudHMgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1k7XG5cbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIGlmIChbJ2h0bWwnLCAnYm9keScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGdldE5vZGVOYW1lKG5vZGUpKSA+PSAwKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KG5vZGUpICYmIGlzU2Nyb2xsUGFyZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUobm9kZSkpO1xufVxuXG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cblxuZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50ID09PSAoKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5KTtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn1cblxuZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGZhbHNlLCBzdHJhdGVneSA9PT0gJ2ZpeGVkJyk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpKSA6IGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpIDogcmVjdFRvQ2xpZW50UmVjdChnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKSk7XG59IC8vIEEgXCJjbGlwcGluZyBwYXJlbnRcIiBpcyBhbiBvdmVyZmxvd2FibGUgY29udGFpbmVyIHdpdGggdGhlIGNoYXJhY3RlcmlzdGljIG9mXG4vLyBjbGlwcGluZyAob3IgaGlkaW5nKSBvdmVyZmxvd2luZyBlbGVtZW50cyB3aXRoIGEgcG9zaXRpb24gZGlmZmVyZW50IGZyb21cbi8vIGBpbml0aWFsYFxuXG5cbmZ1bmN0aW9uIGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSB7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbiAgdmFyIGNhbkVzY2FwZUNsaXBwaW5nID0gWydhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbikgPj0gMDtcbiAgdmFyIGNsaXBwZXJFbGVtZW50ID0gY2FuRXNjYXBlQ2xpcHBpbmcgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSA/IGdldE9mZnNldFBhcmVudChlbGVtZW50KSA6IGVsZW1lbnQ7XG5cbiAgaWYgKCFpc0VsZW1lbnQoY2xpcHBlckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8xNDE0XG5cblxuICByZXR1cm4gY2xpcHBpbmdQYXJlbnRzLmZpbHRlcihmdW5jdGlvbiAoY2xpcHBpbmdQYXJlbnQpIHtcbiAgICByZXR1cm4gaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSAmJiBjb250YWlucyhjbGlwcGluZ1BhcmVudCwgY2xpcHBlckVsZW1lbnQpICYmIGdldE5vZGVOYW1lKGNsaXBwaW5nUGFyZW50KSAhPT0gJ2JvZHknO1xuICB9KTtcbn0gLy8gR2V0cyB0aGUgbWF4aW11bSBhcmVhIHRoYXQgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiBkdWUgdG8gYW55IG51bWJlciBvZlxuLy8gY2xpcHBpbmcgcGFyZW50c1xuXG5cbmZ1bmN0aW9uIGdldENsaXBwaW5nUmVjdChlbGVtZW50LCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5LCBzdHJhdGVneSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGZpcnN0Q2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSAtIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdICsgKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IHN0YXRlLnBsYWNlbWVudCA6IF9vcHRpb25zJHBsYWNlbWVudCxcbiAgICAgIF9vcHRpb25zJHN0cmF0ZWd5ID0gX29wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBzdHJhdGVneSA9IF9vcHRpb25zJHN0cmF0ZWd5ID09PSB2b2lkIDAgPyBzdGF0ZS5zdHJhdGVneSA6IF9vcHRpb25zJHN0cmF0ZWd5LFxuICAgICAgX29wdGlvbnMkYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMkYm91bmRhcnkgPT09IHZvaWQgMCA/IGNsaXBwaW5nUGFyZW50cyA6IF9vcHRpb25zJGJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyB2aWV3cG9ydCA6IF9vcHRpb25zJHJvb3RCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGVsZW1lbnRDb250ZSA9IF9vcHRpb25zLmVsZW1lbnRDb250ZXh0LFxuICAgICAgZWxlbWVudENvbnRleHQgPSBfb3B0aW9ucyRlbGVtZW50Q29udGUgPT09IHZvaWQgMCA/IHBvcHBlciA6IF9vcHRpb25zJGVsZW1lbnRDb250ZSxcbiAgICAgIF9vcHRpb25zJGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IF9vcHRpb25zJGFsdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMkcGFkZGluZyA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHBhZGRpbmc7XG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbiAgdmFyIGFsdENvbnRleHQgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcmVmZXJlbmNlIDogcG9wcGVyO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1thbHRCb3VuZGFyeSA/IGFsdENvbnRleHQgOiBlbGVtZW50Q29udGV4dF07XG4gIHZhciBjbGlwcGluZ0NsaWVudFJlY3QgPSBnZXRDbGlwcGluZ1JlY3QoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudCA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgZ2V0RG9jdW1lbnRFbGVtZW50KHN0YXRlLmVsZW1lbnRzLnBvcHBlciksIGJvdW5kYXJ5LCByb290Qm91bmRhcnksIHN0cmF0ZWd5KTtcbiAgdmFyIHJlZmVyZW5jZUNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qoc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgIGVsZW1lbnQ6IHBvcHBlclJlY3QsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSk7XG4gIHZhciBwb3BwZXJDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJSZWN0LCBwb3BwZXJPZmZzZXRzKSk7XG4gIHZhciBlbGVtZW50Q2xpZW50UmVjdCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDsgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG5cbiAgdmFyIG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206IGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6IGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodFxuICB9O1xuICB2YXIgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0OyAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG5cbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIHZhciBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgX29wdGlvbnMkYWxsb3dlZEF1dG9QID0gX29wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gX29wdGlvbnMkYWxsb3dlZEF1dG9QID09PSB2b2lkIDAgPyBwbGFjZW1lbnRzIDogX29wdGlvbnMkYWxsb3dlZEF1dG9QO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCk7XG4gIHZhciBwbGFjZW1lbnRzJDEgPSB2YXJpYXRpb24gPyBmbGlwVmFyaWF0aW9ucyA/IHZhcmlhdGlvblBsYWNlbWVudHMgOiB2YXJpYXRpb25QbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb247XG4gIH0pIDogYmFzZVBsYWNlbWVudHM7XG4gIHZhciBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMkMS5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDA7XG4gIH0pO1xuXG4gIGlmIChhbGxvd2VkUGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMkMTtcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG5cbiAgdmFyIG92ZXJmbG93cyA9IGFsbG93ZWRQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93c1thXSAtIG92ZXJmbG93c1tiXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cblxuZnVuY3Rpb24gZmxpcChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyA9IG9wdGlvbnMuZmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZmxpcFZhcmlhdGlvID0gb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMkZmxpcFZhcmlhdGlvID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZmxpcFZhcmlhdGlvLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHM7XG4gIHZhciBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSBiYXNlUGxhY2VtZW50ID09PSBwcmVmZXJyZWRQbGFjZW1lbnQ7XG4gIHZhciBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnMgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwcmVmZXJyZWRQbGFjZW1lbnQpKTtcbiAgdmFyIHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50XS5jb25jYXQoZmFsbGJhY2tQbGFjZW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvID8gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnM6IGZsaXBWYXJpYXRpb25zLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBhbGxvd2VkQXV0b1BsYWNlbWVudHNcbiAgICB9KSA6IHBsYWNlbWVudCk7XG4gIH0sIFtdKTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICB2YXIgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgdmFyIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNbaV07XG5cbiAgICB2YXIgX2Jhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgaXNTdGFydFZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSBzdGFydDtcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihfYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KTtcbiAgICB2YXIgbWFpblZhcmlhdGlvblNpZGUgPSBpc1ZlcnRpY2FsID8gaXNTdGFydFZhcmlhdGlvbiA/IHJpZ2h0IDogbGVmdCA6IGlzU3RhcnRWYXJpYXRpb24gPyBib3R0b20gOiB0b3A7XG5cbiAgICBpZiAocmVmZXJlbmNlUmVjdFtsZW5dID4gcG9wcGVyUmVjdFtsZW5dKSB7XG4gICAgICBtYWluVmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB9XG5cbiAgICB2YXIgYWx0VmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB2YXIgY2hlY2tzID0gW107XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbX2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W21haW5WYXJpYXRpb25TaWRlXSA8PSAwLCBvdmVyZmxvd1thbHRWYXJpYXRpb25TaWRlXSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgcmV0dXJuIGNoZWNrO1xuICAgIH0pKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIOKAkyByZXNlYXJjaCBsYXRlclxuICAgIHZhciBudW1iZXJPZkNoZWNrcyA9IGZsaXBWYXJpYXRpb25zID8gMyA6IDE7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaSkge1xuICAgICAgdmFyIGZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzLmZpbmQoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgICAgICB2YXIgY2hlY2tzID0gY2hlY2tzTWFwLmdldChwbGFjZW1lbnQpO1xuXG4gICAgICAgIGlmIChjaGVja3MpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2tzLnNsaWNlKDAsIF9pKS5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVjaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IGZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIF9pID0gbnVtYmVyT2ZDaGVja3M7IF9pID4gMDsgX2ktLSkge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChfaSk7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImJyZWFrXCIpIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5wbGFjZW1lbnQgIT09IGZpcnN0Rml0dGluZ1BsYWNlbWVudCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXAgPSB0cnVlO1xuICAgIHN0YXRlLnBsYWNlbWVudCA9IGZpcnN0Rml0dGluZ1BsYWNlbWVudDtcbiAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmNvbnN0IGZsaXAkMSA9IHtcbiAgbmFtZTogJ2ZsaXAnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogZmxpcCxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbiAgZGF0YToge1xuICAgIF9za2lwOiBmYWxzZVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdCwgcHJldmVudGVkT2Zmc2V0cykge1xuICBpZiAocHJldmVudGVkT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgcHJldmVudGVkT2Zmc2V0cyA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBvdmVyZmxvdy50b3AgLSByZWN0LmhlaWdodCAtIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICByaWdodDogb3ZlcmZsb3cucmlnaHQgLSByZWN0LndpZHRoICsgcHJldmVudGVkT2Zmc2V0cy54LFxuICAgIGJvdHRvbTogb3ZlcmZsb3cuYm90dG9tIC0gcmVjdC5oZWlnaHQgKyBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgbGVmdDogb3ZlcmZsb3cubGVmdCAtIHJlY3Qud2lkdGggLSBwcmV2ZW50ZWRPZmZzZXRzLnhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5zb21lKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93W3NpZGVdID49IDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoaWRlKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHByZXZlbnRlZE9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdztcbiAgdmFyIHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZSdcbiAgfSk7XG4gIHZhciBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWVcbiAgfSk7XG4gIHZhciByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhyZWZlcmVuY2VPdmVyZmxvdywgcmVmZXJlbmNlUmVjdCk7XG4gIHZhciBwb3BwZXJFc2NhcGVPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocG9wcGVyQWx0T3ZlcmZsb3csIHBvcHBlclJlY3QsIHByZXZlbnRlZE9mZnNldHMpO1xuICB2YXIgaXNSZWZlcmVuY2VIaWRkZW4gPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzKTtcbiAgdmFyIGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOiByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0czogcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbjogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgaGFzUG9wcGVyRXNjYXBlZDogaGFzUG9wcGVyRXNjYXBlZFxuICB9O1xuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW4nOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICAnZGF0YS1wb3BwZXItZXNjYXBlZCc6IGhhc1BvcHBlckVzY2FwZWRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5jb25zdCBoaWRlJDEgPSB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07XG5cbmZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKHt9LCByZWN0cywge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pKSA6IG9mZnNldCxcbiAgICAgIHNraWRkaW5nID0gX3JlZlswXSxcbiAgICAgIGRpc3RhbmNlID0gX3JlZlsxXTtcblxuICBza2lkZGluZyA9IHNraWRkaW5nIHx8IDA7XG4gIGRpc3RhbmNlID0gKGRpc3RhbmNlIHx8IDApICogaW52ZXJ0RGlzdGFuY2U7XG4gIHJldHVybiBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IHtcbiAgICB4OiBkaXN0YW5jZSxcbiAgICB5OiBza2lkZGluZ1xuICB9IDoge1xuICAgIHg6IHNraWRkaW5nLFxuICAgIHk6IGRpc3RhbmNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRvZmZzZXQgPSBvcHRpb25zLm9mZnNldCxcbiAgICAgIG9mZnNldCA9IF9vcHRpb25zJG9mZnNldCA9PT0gdm9pZCAwID8gWzAsIDBdIDogX29wdGlvbnMkb2Zmc2V0O1xuICB2YXIgZGF0YSA9IHBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCBzdGF0ZS5yZWN0cywgb2Zmc2V0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHZhciBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQgPSBkYXRhW3N0YXRlLnBsYWNlbWVudF0sXG4gICAgICB4ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50LngsXG4gICAgICB5ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50Lnk7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnggKz0geDtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSArPSB5O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5jb25zdCBvZmZzZXQkMSA9IHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldFxufTtcblxuZnVuY3Rpb24gcG9wcGVyT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICAvLyBPZmZzZXRzIGFyZSB0aGUgYWN0dWFsIHBvc2l0aW9uIHRoZSBwb3BwZXIgbmVlZHMgdG8gaGF2ZSB0byBiZVxuICAvLyBwcm9wZXJseSBwb3NpdGlvbmVkIG5lYXIgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgcGxhY2VtZW50LCBhbmQgd2lsbCBiZSBhZGp1c3RlZCBieVxuICAvLyB0aGUgbW9kaWZpZXJzIGluIHRoZSBuZXh0IHN0ZXBcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHN0YXRlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICBlbGVtZW50OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5jb25zdCBwb3BwZXJPZmZzZXRzJDEgPSB7XG4gIG5hbWU6ICdwb3BwZXJPZmZzZXRzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdyZWFkJyxcbiAgZm46IHBvcHBlck9mZnNldHMsXG4gIGRhdGE6IHt9XG59O1xuXG5mdW5jdGlvbiBnZXRBbHRBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn1cblxuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgX29wdGlvbnMkdGV0aGVyID0gb3B0aW9ucy50ZXRoZXIsXG4gICAgICB0ZXRoZXIgPSBfb3B0aW9ucyR0ZXRoZXIgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyR0ZXRoZXIsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPSBvcHRpb25zLnRldGhlck9mZnNldCxcbiAgICAgIHRldGhlck9mZnNldCA9IF9vcHRpb25zJHRldGhlck9mZnNldCA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHRldGhlck9mZnNldDtcbiAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgcGFkZGluZzogcGFkZGluZyxcbiAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnlcbiAgfSk7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSAhdmFyaWF0aW9uO1xuICB2YXIgbWFpbkF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIHZhciBhbHRBeGlzID0gZ2V0QWx0QXhpcyhtYWluQXhpcyk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciB0ZXRoZXJPZmZzZXRWYWx1ZSA9IHR5cGVvZiB0ZXRoZXJPZmZzZXQgPT09ICdmdW5jdGlvbicgPyB0ZXRoZXJPZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiB0ZXRoZXJPZmZzZXQ7XG4gIHZhciBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0VmFsdWUgPT09ICdudW1iZXInID8ge1xuICAgIG1haW5BeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZSxcbiAgICBhbHRBeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZVxuICB9IDogT2JqZWN0LmFzc2lnbih7XG4gICAgbWFpbkF4aXM6IDAsXG4gICAgYWx0QXhpczogMFxuICB9LCB0ZXRoZXJPZmZzZXRWYWx1ZSk7XG4gIHZhciBvZmZzZXRNb2RpZmllclN0YXRlID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQgPyBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldFtzdGF0ZS5wbGFjZW1lbnRdIDogbnVsbDtcbiAgdmFyIGRhdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICB2YXIgX29mZnNldE1vZGlmaWVyU3RhdGUkO1xuXG4gICAgdmFyIG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gICAgdmFyIGFsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG9mZnNldCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdO1xuICAgIHZhciBtaW4kMSA9IG9mZnNldCArIG92ZXJmbG93W21haW5TaWRlXTtcbiAgICB2YXIgbWF4JDEgPSBvZmZzZXQgLSBvdmVyZmxvd1thbHRTaWRlXTtcbiAgICB2YXIgYWRkaXRpdmUgPSB0ZXRoZXIgPyAtcG9wcGVyUmVjdFtsZW5dIC8gMiA6IDA7XG4gICAgdmFyIG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgdmFyIG1heExlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyAtcG9wcGVyUmVjdFtsZW5dIDogLXJlZmVyZW5jZVJlY3RbbGVuXTsgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG5cbiAgICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgdmFyIGFycm93UmVjdCA9IHRldGhlciAmJiBhcnJvd0VsZW1lbnQgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgdmFyIGFycm93UGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXSA/IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXS5wYWRkaW5nIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgdmFyIGFycm93UGFkZGluZ01pbiA9IGFycm93UGFkZGluZ09iamVjdFttYWluU2lkZV07XG4gICAgdmFyIGFycm93UGFkZGluZ01heCA9IGFycm93UGFkZGluZ09iamVjdFthbHRTaWRlXTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBsZW5ndGggaXMgc21hbGxlciB0aGFuIHRoZSBhcnJvdyBsZW5ndGgsIHdlIGRvbid0IHdhbnRcbiAgICAvLyB0byBpbmNsdWRlIGl0cyBmdWxsIHNpemUgaW4gdGhlIGNhbGN1bGF0aW9uLiBJZiB0aGUgcmVmZXJlbmNlIGlzIHNtYWxsXG4gICAgLy8gYW5kIG5lYXIgdGhlIGVkZ2Ugb2YgYSBib3VuZGFyeSwgdGhlIHBvcHBlciBjYW4gb3ZlcmZsb3cgZXZlbiBpZiB0aGVcbiAgICAvLyByZWZlcmVuY2UgaXMgbm90IG92ZXJmbG93aW5nIGFzIHdlbGwgKGUuZy4gdmlydHVhbCBlbGVtZW50cyB3aXRoIG5vXG4gICAgLy8gd2lkdGggb3IgaGVpZ2h0KVxuXG4gICAgdmFyIGFycm93TGVuID0gd2l0aGluKDAsIHJlZmVyZW5jZVJlY3RbbGVuXSwgYXJyb3dSZWN0W2xlbl0pO1xuICAgIHZhciBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gLyAyIC0gYWRkaXRpdmUgLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcyA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzO1xuICAgIHZhciBtYXhPZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyAtcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiArIGFkZGl0aXZlICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXMgOiBtYXhMZW4gKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSAoX29mZnNldE1vZGlmaWVyU3RhdGUkID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2Zmc2V0TW9kaWZpZXJTdGF0ZVttYWluQXhpc10pICE9IG51bGwgPyBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQgOiAwO1xuICAgIHZhciB0ZXRoZXJNaW4gPSBvZmZzZXQgKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBvZmZzZXQgKyBtYXhPZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlO1xuICAgIHZhciBwcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gbWluKG1pbiQxLCB0ZXRoZXJNaW4pIDogbWluJDEsIG9mZnNldCwgdGV0aGVyID8gbWF4KG1heCQxLCB0ZXRoZXJNYXgpIDogbWF4JDEpO1xuICAgIHBvcHBlck9mZnNldHNbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICB9XG5cbiAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyO1xuXG4gICAgdmFyIF9tYWluU2lkZSA9IG1haW5BeGlzID09PSAneCcgPyB0b3AgOiBsZWZ0O1xuXG4gICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgdmFyIF9vZmZzZXQgPSBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdO1xuXG4gICAgdmFyIF9sZW4gPSBhbHRBeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICB2YXIgX21pbiA9IF9vZmZzZXQgKyBvdmVyZmxvd1tfbWFpblNpZGVdO1xuXG4gICAgdmFyIF9tYXggPSBfb2Zmc2V0IC0gb3ZlcmZsb3dbX2FsdFNpZGVdO1xuXG4gICAgdmFyIGlzT3JpZ2luU2lkZSA9IFt0b3AsIGxlZnRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclZhbHVlID0gKF9vZmZzZXRNb2RpZmllclN0YXRlJDIgPSBvZmZzZXRNb2RpZmllclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvZmZzZXRNb2RpZmllclN0YXRlW2FsdEF4aXNdKSAhPSBudWxsID8gX29mZnNldE1vZGlmaWVyU3RhdGUkMiA6IDA7XG5cbiAgICB2YXIgX3RldGhlck1pbiA9IGlzT3JpZ2luU2lkZSA/IF9taW4gOiBfb2Zmc2V0IC0gcmVmZXJlbmNlUmVjdFtfbGVuXSAtIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzO1xuXG4gICAgdmFyIF90ZXRoZXJNYXggPSBpc09yaWdpblNpZGUgPyBfb2Zmc2V0ICsgcmVmZXJlbmNlUmVjdFtfbGVuXSArIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzIDogX21heDtcblxuICAgIHZhciBfcHJldmVudGVkT2Zmc2V0ID0gdGV0aGVyICYmIGlzT3JpZ2luU2lkZSA/IHdpdGhpbk1heENsYW1wKF90ZXRoZXJNaW4sIF9vZmZzZXQsIF90ZXRoZXJNYXgpIDogd2l0aGluKHRldGhlciA/IF90ZXRoZXJNaW4gOiBfbWluLCBfb2Zmc2V0LCB0ZXRoZXIgPyBfdGV0aGVyTWF4IDogX21heCk7XG5cbiAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldCAtIF9vZmZzZXQ7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmNvbnN0IHByZXZlbnRPdmVyZmxvdyQxID0ge1xuICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXVxufTtcblxuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50U2NhbGVkKGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gcm91bmQocmVjdC53aWR0aCkgLyBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDE7XG4gIHZhciBzY2FsZVkgPSByb3VuZChyZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxO1xuICByZXR1cm4gc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMTtcbn0gLy8gUmV0dXJucyB0aGUgY29tcG9zaXRlIHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LlxuLy8gQ29tcG9zaXRlIG1lYW5zIGl0IHRha2VzIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zIGFzIHdlbGwgYXMgbGF5b3V0LlxuXG5cbmZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50SXNTY2FsZWQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgaXNFbGVtZW50U2NhbGVkKG9mZnNldFBhcmVudCk7XG4gIHZhciBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudElzU2NhbGVkLCBpc0ZpeGVkKTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9yZGVyKG1vZGlmaWVycykge1xuICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICB2YXIgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBtYXAuc2V0KG1vZGlmaWVyLm5hbWUsIG1vZGlmaWVyKTtcbiAgfSk7IC8vIE9uIHZpc2l0aW5nIG9iamVjdCwgY2hlY2sgZm9yIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHZpc2l0IHRoZW0gcmVjdXJzaXZlbHlcblxuICBmdW5jdGlvbiBzb3J0KG1vZGlmaWVyKSB7XG4gICAgdmlzaXRlZC5hZGQobW9kaWZpZXIubmFtZSk7XG4gICAgdmFyIHJlcXVpcmVzID0gW10uY29uY2F0KG1vZGlmaWVyLnJlcXVpcmVzIHx8IFtdLCBtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzIHx8IFtdKTtcbiAgICByZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIGlmICghdmlzaXRlZC5oYXMoZGVwKSkge1xuICAgICAgICB2YXIgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHQucHVzaChtb2RpZmllcik7XG4gIH1cblxuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG9yZGVyTW9kaWZpZXJzKG1vZGlmaWVycykge1xuICAvLyBvcmRlciBiYXNlZCBvbiBkZXBlbmRlbmNpZXNcbiAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcihtb2RpZmllcnMpOyAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuXG4gIHJldHVybiBtb2RpZmllclBoYXNlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGhhc2UpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2U7XG4gICAgfSkpO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciBwZW5kaW5nO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVuZGluZztcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59XG5cbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwb3BwZXJHZW5lcmF0b3IoZ2VuZXJhdG9yT3B0aW9ucykge1xuICBpZiAoZ2VuZXJhdG9yT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgZ2VuZXJhdG9yT3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9nZW5lcmF0b3JPcHRpb25zID0gZ2VuZXJhdG9yT3B0aW9ucyxcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRNb2RpZmllcnMsXG4gICAgICBkZWZhdWx0TW9kaWZpZXJzID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmID09PSB2b2lkIDAgPyBbXSA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZixcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIGRlZmF1bHRPcHRpb25zID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9PT0gdm9pZCAwID8gREVGQVVMVF9PUFRJT05TIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmMjtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlcihyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIGRlZmF1bHRPcHRpb25zKSxcbiAgICAgIG1vZGlmaWVyc0RhdGE6IHt9LFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlcjogcG9wcGVyXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBzdHlsZXM6IHt9XG4gICAgfTtcbiAgICB2YXIgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIHZhciBpc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHZhciBpbnN0YW5jZSA9IHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIHNldE9wdGlvbnMoc2V0T3B0aW9uc0FjdGlvbikge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzZXRPcHRpb25zQWN0aW9uID09PSAnZnVuY3Rpb24nID8gc2V0T3B0aW9uc0FjdGlvbihzdGF0ZS5vcHRpb25zKSA6IHNldE9wdGlvbnNBY3Rpb247XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBzdGF0ZS5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGlzRWxlbWVudChyZWZlcmVuY2UpID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlKSA6IHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCkgOiBbXSxcbiAgICAgICAgICBwb3BwZXI6IGxpc3RTY3JvbGxQYXJlbnRzKHBvcHBlcilcbiAgICAgICAgfTsgLy8gT3JkZXJzIHRoZSBtb2RpZmllcnMgYmFzZWQgb24gdGhlaXIgZGVwZW5kZW5jaWVzIGFuZCBgcGhhc2VgXG4gICAgICAgIC8vIHByb3BlcnRpZXNcblxuICAgICAgICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyTW9kaWZpZXJzKG1lcmdlQnlOYW1lKFtdLmNvbmNhdChkZWZhdWx0TW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycykpKTsgLy8gU3RyaXAgb3V0IGRpc2FibGVkIG1vZGlmaWVyc1xuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLmVuYWJsZWQ7XG4gICAgICAgIH0pOyAvLyBWYWxpZGF0ZSB0aGUgcHJvdmlkZWQgbW9kaWZpZXJzIHNvIHRoYXQgdGhlIGNvbnN1bWVyIHdpbGwgZ2V0IHdhcm5lZFxuXG4gICAgICAgIHJ1bk1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgLy8gU3luYyB1cGRhdGUg4oCTIGl0IHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkLCBldmVuIGlmIG5vdCBuZWNlc3NhcnkuIFRoaXNcbiAgICAgIC8vIGlzIHVzZWZ1bCBmb3IgbG93IGZyZXF1ZW5jeSB1cGRhdGVzIHdoZXJlIHN5bmMgYmVoYXZpb3Igc2ltcGxpZmllcyB0aGVcbiAgICAgIC8vIGxvZ2ljLlxuICAgICAgLy8gRm9yIGhpZ2ggZnJlcXVlbmN5IHVwZGF0ZXMgKGUuZy4gYHJlc2l6ZWAgYW5kIGBzY3JvbGxgIGV2ZW50cyksIGFsd2F5c1xuICAgICAgLy8gcHJlZmVyIHRoZSBhc3luYyBQb3BwZXIjdXBkYXRlIG1ldGhvZFxuICAgICAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uIGZvcmNlVXBkYXRlKCkge1xuICAgICAgICBpZiAoaXNEZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3N0YXRlJGVsZW1lbnRzID0gc3RhdGUuZWxlbWVudHMsXG4gICAgICAgICAgICByZWZlcmVuY2UgPSBfc3RhdGUkZWxlbWVudHMucmVmZXJlbmNlLFxuICAgICAgICAgICAgcG9wcGVyID0gX3N0YXRlJGVsZW1lbnRzLnBvcHBlcjsgLy8gRG9uJ3QgcHJvY2VlZCBpZiBgcmVmZXJlbmNlYCBvciBgcG9wcGVyYCBhcmUgbm90IHZhbGlkIGVsZW1lbnRzXG4gICAgICAgIC8vIGFueW1vcmVcblxuICAgICAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgdGhlIHJlZmVyZW5jZSBhbmQgcG9wcGVyIHJlY3RzIHRvIGJlIHJlYWQgYnkgbW9kaWZpZXJzXG5cblxuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QocmVmZXJlbmNlLCBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSwgc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyksXG4gICAgICAgICAgcG9wcGVyOiBnZXRMYXlvdXRSZWN0KHBvcHBlcilcbiAgICAgICAgfTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVzZXQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlLiBUaGVcbiAgICAgICAgLy8gbW9zdCBjb21tb24gdXNlIGNhc2UgZm9yIHRoaXMgaXMgdGhlIGBmbGlwYCBtb2RpZmllciBjaGFuZ2luZyB0aGVcbiAgICAgICAgLy8gcGxhY2VtZW50LCB3aGljaCB0aGVuIG5lZWRzIHRvIHJlLXJ1biBhbGwgdGhlIG1vZGlmaWVycywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gbG9naWMgd2FzIHByZXZpb3VzbHkgcmFuIGZvciB0aGUgcHJldmlvdXMgcGxhY2VtZW50IGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgICAgLy8gc3RhbGUvaW5jb3JyZWN0XG5cbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7IC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1vZGlmaWVyc0RhdGFbbW9kaWZpZXIubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllci5kYXRhKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG5cbiAgICAgICAgICBpZiAoc3RhdGUucmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZSA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnNbaW5kZXhdLFxuICAgICAgICAgICAgICBmbiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5mbixcbiAgICAgICAgICAgICAgX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5vcHRpb25zLFxuICAgICAgICAgICAgICBfb3B0aW9ucyA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPT09IHZvaWQgMCA/IHt9IDogX3N0YXRlJG9yZGVyZWRNb2RpZmllMixcbiAgICAgICAgICAgICAgbmFtZSA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5uYW1lO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RhdGUgPSBmbih7XG4gICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgICAgb3B0aW9uczogX29wdGlvbnMsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSkgfHwgc3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQXN5bmMgYW5kIG9wdGltaXN0aWNhbGx5IG9wdGltaXplZCB1cGRhdGUg4oCTIGl0IHdpbGwgbm90IGJlIGV4ZWN1dGVkIGlmXG4gICAgICAvLyBub3QgbmVjZXNzYXJ5IChkZWJvdW5jZWQgdG8gcnVuIGF0IG1vc3Qgb25jZS1wZXItdGljaylcbiAgICAgIHVwZGF0ZTogZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBpc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnNldE9wdGlvbnMob3B0aW9ucykudGhlbihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIGlmICghaXNEZXN0cm95ZWQgJiYgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKSB7XG4gICAgICAgIG9wdGlvbnMub25GaXJzdFVwZGF0ZShzdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHVwZGF0ZSBjeWNsZSBydW5zLiBUaGV5IHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHVwZGF0ZVxuICAgIC8vIGN5Y2xlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgbW9kaWZpZXIgYWRkcyBzb21lIHBlcnNpc3RlbnQgZGF0YSB0aGF0XG4gICAgLy8gb3RoZXIgbW9kaWZpZXJzIG5lZWQgdG8gdXNlLCBidXQgdGhlIG1vZGlmaWVyIGlzIHJ1biBhZnRlciB0aGUgZGVwZW5kZW50XG4gICAgLy8gb25lLlxuXG4gICAgZnVuY3Rpb24gcnVuTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgICAgICBfcmVmMyRvcHRpb25zID0gX3JlZjMub3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMyRvcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9yZWYzJG9wdGlvbnMsXG4gICAgICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3Q7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgY2xlYW51cEZuID0gZWZmZWN0KHtcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgbm9vcEZuID0gZnVuY3Rpb24gbm9vcEZuKCkge307XG5cbiAgICAgICAgICBlZmZlY3RDbGVhbnVwRm5zLnB1c2goY2xlYW51cEZuIHx8IG5vb3BGbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufVxuXG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cyQxLCBjb21wdXRlU3R5bGVzJDEsIGFwcGx5U3R5bGVzJDEsIG9mZnNldCQxLCBmbGlwJDEsIHByZXZlbnRPdmVyZmxvdyQxLCBhcnJvdyQxLCBoaWRlJDFdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgYXMgYyB9O1xuIiwiaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBoLCBIIGFzIEhvc3QsIGMgYXMgY3JlYXRlRXZlbnQsIGEgYXMgZ2V0RWxlbWVudCB9IGZyb20gJy4vaW5kZXgtYjE4YzAzNDguanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVQb3BwZXIgfSBmcm9tICcuL3BvcHBlci1iZmEyNWM3Zi5qcyc7XG5pbXBvcnQgeyBhIGFzIGNvbW1vbmpzR2xvYmFsIH0gZnJvbSAnLi9fY29tbW9uanNIZWxwZXJzLTVlYzhmOWI3LmpzJztcbmltcG9ydCAnLi9UeXBlcy01ZjMxMTQ5ZS5qcyc7XG5pbXBvcnQgeyB1IGFzIHVwZGF0ZUZpZWxkLCBkIGFzIGRlbGV0ZUZpZWxkIH0gZnJvbSAnLi9GaWVsZHMtYzgyZTZkZjMuanMnO1xuaW1wb3J0IHsgViBhcyBWZXJkb2NzRW5kcG9pbnQgfSBmcm9tICcuL1ZlcmRvY3NFbmRwb2ludC02ZDdhMTdjZS5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldFRlbXBsYXRlU3RvcmUgfSBmcm9tICcuL1RlbXBsYXRlU3RvcmUtODdjOTlkZmMuanMnO1xuaW1wb3J0IHsgUyBhcyBTREtFcnJvciB9IGZyb20gJy4vZXJyb3JzLTliNTQ5OGM4LmpzJztcbmltcG9ydCAnLi9pbmRleC0yOTEyM2YzMC5qcyc7XG5pbXBvcnQgJy4vVGVtcGxhdGVzLTY3MTcyMzk2LmpzJztcblxuY29uc3QgdmVyZG9jc0J1dHRvblBhbmVsQ3NzID0gXCJ2ZXJkb2NzLWJ1dHRvbi1wYW5lbHtmb250LWZhbWlseTpcXFwiSW50ZXJcXFwiLCAtYXBwbGUtc3lzdGVtLCBcXFwiU2Vnb2UgVUlcXFwiLCBcXFwiUm9ib3RvXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgc2Fucy1zZXJpZjtkaXNwbGF5OmlubGluZS1ibG9ja312ZXJkb2NzLWJ1dHRvbi1wYW5lbCAuaWNvbntkaXNwbGF5OmlubGluZS1ibG9jaztjdXJzb3I6cG9pbnRlcjtvcGFjaXR5OjAuNn12ZXJkb2NzLWJ1dHRvbi1wYW5lbCAuaWNvbiBzdmd7ZmlsbDojNzA3YWU1fXZlcmRvY3MtYnV0dG9uLXBhbmVsIC5pY29uOmhvdmVye29wYWNpdHk6MX0udmVyZG9jcy1idXR0b24tcGFuZWwtY29udGVudHtmb250LWZhbWlseTpcXFwiSW50ZXJcXFwiLCAtYXBwbGUtc3lzdGVtLCBcXFwiU2Vnb2UgVUlcXFwiLCBcXFwiUm9ib3RvXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgc2Fucy1zZXJpZjstd2Via2l0LWJveC1zaGFkb3c6MCAwIDEwcHggMXB4ICM5OTk5OTk7Ym94LXNoYWRvdzowIDAgMTBweCAxcHggIzk5OTk5OTtkaXNwbGF5Om5vbmU7YmFja2dyb3VuZDojZmZmZmZmO2NvbG9yOiMzMzM2NGI7d2lkdGg6MzIwcHg7Zm9udC13ZWlnaHQ6Ym9sZDtwYWRkaW5nOjE1cHg7Zm9udC1zaXplOjE0cHg7cG9zaXRpb246cmVsYXRpdmU7Ym9yZGVyLXJhZGl1czo0cHg7ei1pbmRleDoxMDAwMH0udmVyZG9jcy1idXR0b24tcGFuZWwtY29udGVudCAuYXJyb3csLnZlcmRvY3MtYnV0dG9uLXBhbmVsLWNvbnRlbnQgLmFycm93OjpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6OHB4O2hlaWdodDo4cHg7YmFja2dyb3VuZDppbmhlcml0fS52ZXJkb2NzLWJ1dHRvbi1wYW5lbC1jb250ZW50IC5hcnJvd3t2aXNpYmlsaXR5OmhpZGRlbjt0b3A6LTRweH0udmVyZG9jcy1idXR0b24tcGFuZWwtY29udGVudCAuYXJyb3c6OmJlZm9yZXt2aXNpYmlsaXR5OnZpc2libGU7Y29udGVudDpcXFwiXFxcIjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpfS52ZXJkb2NzLWJ1dHRvbi1wYW5lbC1jb250ZW50W2RhdGEtc2hvd117ZGlzcGxheTpibG9ja30udmVyZG9jcy1idXR0b24tcGFuZWwtY29udGVudFtkYXRhLXBvcHBlci1wbGFjZW1lbnRePXRvcF0+LmFycm93e2JvdHRvbTotNHB4fS52ZXJkb2NzLWJ1dHRvbi1wYW5lbC1jb250ZW50W2RhdGEtcG9wcGVyLXBsYWNlbWVudF49Ym90dG9tXT4uYXJyb3d7dG9wOi00cHh9LnZlcmRvY3MtYnV0dG9uLXBhbmVsLWNvbnRlbnRbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj1sZWZ0XT4uYXJyb3d7cmlnaHQ6LTRweH0udmVyZG9jcy1idXR0b24tcGFuZWwtY29udGVudFtkYXRhLXBvcHBlci1wbGFjZW1lbnRePXJpZ2h0XT4uYXJyb3d7bGVmdDotNHB4fS52ZXJkb2NzLWJ1dHRvbi1wYW5lbC1jb250ZW50IGg2e2ZvbnQtc2l6ZToxNnB4O2ZvbnQtd2VpZ2h0OmJvbGQ7bWFyZ2luOjAgMCAxNnB4IDA7Y29sb3I6IzA5MmM0Yztib3JkZXItYm90dG9tOjFweCBzb2xpZCAjY2NjY2NjfVwiO1xuXG5jb25zdCBWZXJkb2NzQnV0dG9uUGFuZWwgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIC8vIE5vdCBtYXJrZWQgYXMgQFN0YXRlIGJlY2F1c2UgaXQncyBub3QgdGhlIHRoaW5nIHRoYXQgY29udHJvbHMgb3VyIHJlbmRlcmluZ1xuICAgIHRoaXMuc2hvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuaWNvbiA9ICcnO1xuICB9XG4gIGNvbXBvbmVudERpZFJlbmRlcigpIHtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMucGFuZWxFbCk7XG4gICAgaWYgKHRoaXMucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIHRoaXMucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLnBvcHBlckluc3RhbmNlID0gY3JlYXRlUG9wcGVyKHRoaXMuaWNvbkVsLCB0aGlzLnBhbmVsRWwsIHtcbiAgICAvLyBwbGFjZW1lbnQ6ICd0b3AtZW5kJyxcbiAgICAvLyBtb2RpZmllcnM6IFt7bmFtZTogJ29mZnNldCcsIG9wdGlvbnM6IHtvZmZzZXQ6IFswLCAxMF19fV0sXG4gICAgfSk7XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIHRoaXMucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgdGhpcy5wb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLnBhbmVsRWwpIHtcbiAgICAgIHRoaXMucGFuZWxFbC5yZW1vdmUoKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgc2hvd1BhbmVsKCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgKF9hID0gdGhpcy5wYW5lbEVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QXR0cmlidXRlKCdkYXRhLXNob3cnLCAnJyk7XG4gICAgKF9iID0gdGhpcy5wb3BwZXJJbnN0YW5jZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnVwZGF0ZSgpLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgdGhpcy5zaG93aW5nID0gdHJ1ZTtcbiAgICB0aGlzLmhpZGVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmhpZGVyRWwuaWQgPSAndmVyZG9jcy1idXR0b24tcGFuZWwtaGlkZXInO1xuICAgIHRoaXMuaGlkZXJFbC5zdHlsZS56SW5kZXggPSAnMTAwJztcbiAgICB0aGlzLmhpZGVyRWwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIHRoaXMuaGlkZXJFbC5zdHlsZS50b3AgPSAnMHB4JztcbiAgICB0aGlzLmhpZGVyRWwuc3R5bGUubGVmdCA9ICcwcHgnO1xuICAgIHRoaXMuaGlkZXJFbC5zdHlsZS5yaWdodCA9ICcwcHgnO1xuICAgIHRoaXMuaGlkZXJFbC5zdHlsZS5ib3R0b20gPSAnMHB4JztcbiAgICB0aGlzLmhpZGVyRWwub25jbGljayA9IChlKSA9PiB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICB9O1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5oaWRlckVsKTtcbiAgfVxuICBhc3luYyBoaWRlUGFuZWwoKSB7XG4gICAgdmFyIF9hO1xuICAgIEFycmF5LmZyb20oZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndmVyZG9jcy1idXR0b24tcGFuZWwtY29udGVudCcpKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zaG93Jyk7XG4gICAgfSk7XG4gICAgKF9hID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZlcmRvY3MtYnV0dG9uLXBhbmVsLWhpZGVyJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmUoKTtcbiAgICB0aGlzLnNob3dpbmcgPSBmYWxzZTtcbiAgfVxuICBhc3luYyB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuc2hvd2luZykge1xuICAgICAgYXdhaXQgdGhpcy5oaWRlUGFuZWwoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLnNob3dQYW5lbCgpO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChoKEhvc3QsIG51bGwsIGgoXCJkaXZcIiwgeyBjbGFzczogXCJpY29uXCIsIGlubmVySFRNTDogdGhpcy5pY29uLCBvbkNsaWNrOiAoZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICByZXR1cm4gdGhpcy50b2dnbGUoKTtcbiAgICAgIH0sIHJlZjogZWwgPT4gKHRoaXMuaWNvbkVsID0gZWwpIH0pLCBoKFwiZGl2XCIsIHsgcm9sZTogXCJ0b29sdGlwXCIsIGNsYXNzOiBcInZlcmRvY3MtYnV0dG9uLXBhbmVsLWNvbnRlbnRcIiwgXCJkYXRhLXBvcHBlci1wbGFjZW1lbnRcIjogXCJib3R0b21cIiwgcmVmOiBlbCA9PiAodGhpcy5wYW5lbEVsID0gZWwpIH0sIGgoXCJkaXZcIiwgeyBcImRhdGEtcG9wcGVyLWFycm93XCI6IFwidHJ1ZVwiLCBjbGFzczogXCJhcnJvd1wiIH0pLCBoKFwic2xvdFwiLCBudWxsKSkpKTtcbiAgfVxufTtcblZlcmRvY3NCdXR0b25QYW5lbC5zdHlsZSA9IHZlcmRvY3NCdXR0b25QYW5lbENzcztcblxuY29uc3QgdmVyZG9jc1NlbGVjdElucHV0Q3NzID0gXCJ2ZXJkb2NzLXNlbGVjdC1pbnB1dHtmb250LWZhbWlseTpcXFwiSW50ZXJcXFwiLCBcXFwiQmFybG93XFxcIiwgc2Fucy1zZXJpZjstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7bWFyZ2luOjAgMCAxMHB4IDA7ZGlzcGxheTpibG9ja312ZXJkb2NzLXNlbGVjdC1pbnB1dCAuaW5wdXQtZWxlbWVudHstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOjFweCBzb2xpZCAjNzA3YWU1O2JvcmRlci1yYWRpdXM6NHB4O2JhY2tncm91bmQ6I2ZmZmZmZjtjb2xvcjojMDAwO3dpZHRoOjEwMCU7Zm9udC1zaXplOjE2cHg7aGVpZ2h0OjI4cHg7cGFkZGluZzo0cHggOHB4fXZlcmRvY3Mtc2VsZWN0LWlucHV0IC5pbnB1dC1lbGVtZW50Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiNhYWFhYWE7b3BhY2l0eToxfXZlcmRvY3Mtc2VsZWN0LWlucHV0IC5pbnB1dC1lbGVtZW50OjotbW96LXBsYWNlaG9sZGVye2NvbG9yOiNhYWFhYWE7b3BhY2l0eToxfXZlcmRvY3Mtc2VsZWN0LWlucHV0IC5pbnB1dC1lbGVtZW50Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojYWFhYWFhO29wYWNpdHk6MX12ZXJkb2NzLXNlbGVjdC1pbnB1dCAuaW5wdXQtZWxlbWVudDo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiNhYWFhYWE7b3BhY2l0eToxfXZlcmRvY3Mtc2VsZWN0LWlucHV0IC5pbnB1dC1lbGVtZW50OjpwbGFjZWhvbGRlcntjb2xvcjojYWFhYWFhO29wYWNpdHk6MX12ZXJkb2NzLXNlbGVjdC1pbnB1dCAuaW5wdXQtZWxlbWVudDpmb2N1c3tib3JkZXI6MXB4IHNvbGlkICM3ZDg4ZmZ9dmVyZG9jcy1zZWxlY3QtaW5wdXQgLmlucHV0LWxhYmVse2Rpc3BsYXk6YmxvY2s7Y29sb3I6IzU1NTU3MDtmb250LXdlaWdodDo3MDA7Zm9udC1zaXplOjE0cHg7bWFyZ2luOjAgMCA0cHggMH1cIjtcblxuY29uc3QgVmVyZG9jc1NlbGVjdElucHV0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLnZhbHVlID0gJyc7XG4gICAgdGhpcy5sYWJlbCA9ICcnO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoaChIb3N0LCB7IGNsYXNzOiBcImlucHV0LWZpZWxkXCIgfSwgaChcImxhYmVsXCIsIG51bGwsIHRoaXMubGFiZWwgPyBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaW5wdXQtbGFiZWxcIiB9LCB0aGlzLmxhYmVsICsgJzonKSA6IGgoXCJkaXZcIiwgbnVsbCksIGgoXCJzZWxlY3RcIiwgeyBjbGFzczogXCJpbnB1dC1lbGVtZW50XCIsIGRpc2FibGVkOiB0aGlzLmRpc2FibGVkIH0sIHRoaXMub3B0aW9ucy5tYXAob3B0aW9uID0+IChoKFwib3B0aW9uXCIsIHsgdmFsdWU6IG9wdGlvbi52YWx1ZSwgc2VsZWN0ZWQ6IG9wdGlvbi52YWx1ZSA9PT0gdGhpcy52YWx1ZSB9LCBvcHRpb24ubGFiZWwpKSkpKSkpO1xuICB9XG59O1xuVmVyZG9jc1NlbGVjdElucHV0LnN0eWxlID0gdmVyZG9jc1NlbGVjdElucHV0Q3NzO1xuXG4vLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiAgSW4gdGhlXG4vLyBicm93c2VyIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQgZHVlIHRvIHVua25vd24gcXVhbGl0eSBvZiBNYXRoLnJhbmRvbSgpXG4vLyBhbmQgaW5jb25zaXN0ZW50IHN1cHBvcnQgZm9yIHRoZSBgY3J5cHRvYCBBUEkuICBXZSBkbyB0aGUgYmVzdCB3ZSBjYW4gdmlhXG4vLyBmZWF0dXJlLWRldGVjdGlvblxudmFyIHJuZztcblxudmFyIGNyeXB0byA9IHR5cGVvZiBjb21tb25qc0dsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgKGNvbW1vbmpzR2xvYmFsLmNyeXB0byB8fCBjb21tb25qc0dsb2JhbC5tc0NyeXB0byk7IC8vIGZvciBJRSAxMVxuaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIC8vIFdIQVRXRyBjcnlwdG8gUk5HIC0gaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0NyeXB0b1xuICB2YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgcm5nID0gZnVuY3Rpb24gd2hhdHdnUk5HKCkge1xuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocm5kczgpO1xuICAgIHJldHVybiBybmRzODtcbiAgfTtcbn1cblxuaWYgKCFybmcpIHtcbiAgLy8gTWF0aC5yYW5kb20oKS1iYXNlZCAoUk5HKVxuICAvL1xuICAvLyBJZiBhbGwgZWxzZSBmYWlscywgdXNlIE1hdGgucmFuZG9tKCkuICBJdCdzIGZhc3QsIGJ1dCBpcyBvZiB1bnNwZWNpZmllZFxuICAvLyBxdWFsaXR5LlxuICB2YXIgcm5kcyA9IG5ldyBBcnJheSgxNik7XG4gIHJuZyA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCByOyBpIDwgMTY7IGkrKykge1xuICAgICAgaWYgKChpICYgMHgwMykgPT09IDApIHIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDA7XG4gICAgICBybmRzW2ldID0gciA+Pj4gKChpICYgMHgwMykgPDwgMykgJiAweGZmO1xuICAgIH1cblxuICAgIHJldHVybiBybmRzO1xuICB9O1xufVxuXG52YXIgcm5nQnJvd3NlciA9IHJuZztcblxuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIHJldHVybiBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV07XG59XG5cbnZhciBieXRlc1RvVXVpZF8xID0gYnl0ZXNUb1V1aWQ7XG5cbi8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxuLy8gcmFuZG9tICMncyB3ZSBuZWVkIHRvIGluaXQgbm9kZSBhbmQgY2xvY2tzZXFcbnZhciBfc2VlZEJ5dGVzID0gcm5nQnJvd3NlcigpO1xuXG4vLyBQZXIgNC41LCBjcmVhdGUgYW5kIDQ4LWJpdCBub2RlIGlkLCAoNDcgcmFuZG9tIGJpdHMgKyBtdWx0aWNhc3QgYml0ID0gMSlcbnZhciBfbm9kZUlkID0gW1xuICBfc2VlZEJ5dGVzWzBdIHwgMHgwMSxcbiAgX3NlZWRCeXRlc1sxXSwgX3NlZWRCeXRlc1syXSwgX3NlZWRCeXRlc1szXSwgX3NlZWRCeXRlc1s0XSwgX3NlZWRCeXRlc1s1XVxuXTtcblxuLy8gUGVyIDQuMi4yLCByYW5kb21pemUgKDE0IGJpdCkgY2xvY2tzZXFcbnZhciBfY2xvY2tzZXEgPSAoX3NlZWRCeXRlc1s2XSA8PCA4IHwgX3NlZWRCeXRlc1s3XSkgJiAweDNmZmY7XG5cbi8vIFByZXZpb3VzIHV1aWQgY3JlYXRpb24gdGltZVxudmFyIF9sYXN0TVNlY3MgPSAwLCBfbGFzdE5TZWNzID0gMDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9icm9vZmEvbm9kZS11dWlkIGZvciBBUEkgZGV0YWlsc1xuZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG4gIHZhciBiID0gYnVmIHx8IFtdO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBjbG9ja3NlcSA9IG9wdGlvbnMuY2xvY2tzZXEgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuY2xvY2tzZXEgOiBfY2xvY2tzZXE7XG5cbiAgLy8gVVVJRCB0aW1lc3RhbXBzIGFyZSAxMDAgbmFuby1zZWNvbmQgdW5pdHMgc2luY2UgdGhlIEdyZWdvcmlhbiBlcG9jaCxcbiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc29cbiAgLy8gdGltZSBpcyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnXG4gIC8vICgxMDAtbmFub3NlY29uZHMgb2Zmc2V0IGZyb20gbXNlY3MpIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDAuXG4gIHZhciBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAvLyBQZXIgNC4yLjEuMiwgdXNlIGNvdW50IG9mIHV1aWQncyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBjdXJyZW50IGNsb2NrXG4gIC8vIGN5Y2xlIHRvIHNpbXVsYXRlIGhpZ2hlciByZXNvbHV0aW9uIGNsb2NrXG4gIHZhciBuc2VjcyA9IG9wdGlvbnMubnNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubnNlY3MgOiBfbGFzdE5TZWNzICsgMTtcblxuICAvLyBUaW1lIHNpbmNlIGxhc3QgdXVpZCBjcmVhdGlvbiAoaW4gbXNlY3MpXG4gIHZhciBkdCA9IChtc2VjcyAtIF9sYXN0TVNlY3MpICsgKG5zZWNzIC0gX2xhc3ROU2VjcykvMTAwMDA7XG5cbiAgLy8gUGVyIDQuMi4xLjIsIEJ1bXAgY2xvY2tzZXEgb24gY2xvY2sgcmVncmVzc2lvblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9XG5cbiAgLy8gUmVzZXQgbnNlY3MgaWYgY2xvY2sgcmVncmVzc2VzIChuZXcgY2xvY2tzZXEpIG9yIHdlJ3ZlIG1vdmVkIG9udG8gYSBuZXdcbiAgLy8gdGltZSBpbnRlcnZhbFxuICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG5zZWNzID0gMDtcbiAgfVxuXG4gIC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcbiAgaWYgKG5zZWNzID49IDEwMDAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1dWlkLnYxKCk6IENhblxcJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjJyk7XG4gIH1cblxuICBfbGFzdE1TZWNzID0gbXNlY3M7XG4gIF9sYXN0TlNlY3MgPSBuc2VjcztcbiAgX2Nsb2Nrc2VxID0gY2xvY2tzZXE7XG5cbiAgLy8gUGVyIDQuMS40IC0gQ29udmVydCBmcm9tIHVuaXggZXBvY2ggdG8gR3JlZ29yaWFuIGVwb2NoXG4gIG1zZWNzICs9IDEyMjE5MjkyODAwMDAwO1xuXG4gIC8vIGB0aW1lX2xvd2BcbiAgdmFyIHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICBiW2krK10gPSB0bCA+Pj4gMjQgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gMTYgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsICYgMHhmZjtcblxuICAvLyBgdGltZV9taWRgXG4gIHZhciB0bWggPSAobXNlY3MgLyAweDEwMDAwMDAwMCAqIDEwMDAwKSAmIDB4ZmZmZmZmZjtcbiAgYltpKytdID0gdG1oID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdG1oICYgMHhmZjtcblxuICAvLyBgdGltZV9oaWdoX2FuZF92ZXJzaW9uYFxuICBiW2krK10gPSB0bWggPj4+IDI0ICYgMHhmIHwgMHgxMDsgLy8gaW5jbHVkZSB2ZXJzaW9uXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMTYgJiAweGZmO1xuXG4gIC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQuMi4yIC0gaW5jbHVkZSB2YXJpYW50KVxuICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7XG5cbiAgLy8gYGNsb2NrX3NlcV9sb3dgXG4gIGJbaSsrXSA9IGNsb2Nrc2VxICYgMHhmZjtcblxuICAvLyBgbm9kZWBcbiAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgZm9yICh2YXIgbiA9IDA7IG4gPCA2OyArK24pIHtcbiAgICBiW2kgKyBuXSA9IG5vZGVbbl07XG4gIH1cblxuICByZXR1cm4gYnVmID8gYnVmIDogYnl0ZXNUb1V1aWRfMShiKTtcbn1cblxudmFyIHYxXzEgPSB2MTtcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG5cbiAgaWYgKHR5cGVvZihvcHRpb25zKSA9PSAnc3RyaW5nJykge1xuICAgIGJ1ZiA9IG9wdGlvbnMgPT0gJ2JpbmFyeScgPyBuZXcgQXJyYXkoMTYpIDogbnVsbDtcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmdCcm93c2VyKSgpO1xuXG4gIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcbiAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG4gIGlmIChidWYpIHtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgMTY7ICsraWkpIHtcbiAgICAgIGJ1ZltpICsgaWldID0gcm5kc1tpaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBieXRlc1RvVXVpZF8xKHJuZHMpO1xufVxuXG52YXIgdjRfMSA9IHY0O1xuXG52YXIgdXVpZCA9IHY0XzE7XG51dWlkLnYxID0gdjFfMTtcbnV1aWQudjQgPSB2NF8xO1xuXG52YXIgdXVpZEJyb3dzZXIgPSB1dWlkO1xuXG5jb25zdCB2ZXJkb2NzVGVtcGxhdGVGaWVsZFByb3BlcnRpZXNDc3MgPSBcInZlcmRvY3MtdGVtcGxhdGUtZmllbGQtcHJvcGVydGllc3tmb250LWZhbWlseTpcXFwiSW50ZXJcXFwiLCAtYXBwbGUtc3lzdGVtLCBcXFwiU2Vnb2UgVUlcXFwiLCBcXFwiUm9ib3RvXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgc2Fucy1zZXJpZn12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgLmJ1dHRvbnN7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7bWFyZ2luLXRvcDozMHB4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtcGFjazplbmQ7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kfXZlcmRvY3MtdGVtcGxhdGUtZmllbGQtcHJvcGVydGllcyAuYnV0dG9ucyB2ZXJkb2NzLWJ1dHRvbnttYXJnaW4tbGVmdDoxNnB4fXZlcmRvY3MtdGVtcGxhdGUtZmllbGQtcHJvcGVydGllcyBmb3JtIC5yb3d7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1jb2x1bW4tZ2FwOjE1cHg7LW1vei1jb2x1bW4tZ2FwOjE1cHg7Y29sdW1uLWdhcDoxNXB4O21hcmdpbjowIDAgMTBweCAwOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIGZvcm0gLnJvdyAuaW5wdXQtbGFiZWx7ZGlzcGxheTpibG9jaztjb2xvcjojNTU1NTcwO2ZvbnQtd2VpZ2h0OjcwMDtmb250LXNpemU6MTRweDttYXJnaW46MCAwIDRweCAwOy1tcy1mbGV4OjAgMCAxMDBweDtmbGV4OjAgMCAxMDBweH12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgdmVyZG9jcy1zZWxlY3QtaW5wdXR7LW1zLWZsZXg6MTtmbGV4OjE7bWFyZ2luOjB9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIHZlcmRvY3MtdGV4dC1pbnB1dHttYXJnaW46MDstbXMtZmxleDoxO2ZsZXg6MX12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgdmVyZG9jcy10ZXh0LWlucHV0IGxhYmVse21hcmdpbjowO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtY29sdW1uLWdhcDoxNXB4Oy1tb3otY29sdW1uLWdhcDoxNXB4O2NvbHVtbi1nYXA6MTVweDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93fXZlcmRvY3MtdGVtcGxhdGUtZmllbGQtcHJvcGVydGllcyB2ZXJkb2NzLXRleHQtaW5wdXQgLmlucHV0LWxhYmVsey1tcy1mbGV4OjAgMCAxMDBweDtmbGV4OjAgMCAxMDBweH12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgdmVyZG9jcy10ZXh0LWlucHV0IGlucHV0ey1tcy1mbGV4OjE7ZmxleDoxO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4fXZlcmRvY3MtdGVtcGxhdGUtZmllbGQtcHJvcGVydGllcyAuY2hlY2tib3gtd3JhcHBlcnstbXMtZmxleDoxO2ZsZXg6MTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgLmRlbGV0ZS1idXR0b257aGVpZ2h0OjM0cHg7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZDpub25lO2JvcmRlci1yYWRpdXM6NHB4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Ym9yZGVyOjFweCBzb2xpZCAjOTk5Oy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIC5kZWxldGUtYnV0dG9uOmFjdGl2ZXtiYWNrZ3JvdW5kOiNmM2YzZjN9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIC5kZWxldGUtYnV0dG9uIHN2Z3t3aWR0aDoyNHB4O2hlaWdodDoyNHB4fXZlcmRvY3MtdGVtcGxhdGUtZmllbGQtcHJvcGVydGllcyBoNnstbXMtZmxleDoxO2ZsZXg6MTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtmb250LXNpemU6MTZweDtmb250LXdlaWdodDpib2xkO21hcmdpbjowIDAgOHB4IDA7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3c7Y29sb3I6IzA5MmM0Y312ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgaDYgLmhlbHAtaWNvbntvcGFjaXR5OjAuNX12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgaDYgLmhlbHAtaWNvbjpob3ZlcntvcGFjaXR5OjE7Y3Vyc29yOnBvaW50ZXJ9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIC5yb3ctaGVhZGVye2dhcDoxNXB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93fXZlcmRvY3MtdGVtcGxhdGUtZmllbGQtcHJvcGVydGllcyAucm93LWhlYWRlciBoNnttYXJnaW4tYm90dG9tOjB9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIC5yb3ctaGVhZGVyIHZlcmRvY3MtaGVscC1pY29uey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuODUpO3RyYW5zZm9ybTpzY2FsZSgwLjg1KX12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgLnJvdy1oZWFkZXIgdmVyZG9jcy1oZWxwLWljb24gc3Zne21hcmdpbi1ib3R0b206LTVweH12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgLnJvdy1oZWFkZXIgLmFkZC1idXR0b257bWFyZ2luOjA7cGFkZGluZzowO2JvcmRlcjpub25lO29wYWNpdHk6MC41O2N1cnNvcjpwb2ludGVyO2JhY2tncm91bmQ6bm9uZX12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgLnJvdy1oZWFkZXIgLmFkZC1idXR0b246aG92ZXJ7b3BhY2l0eToxfXZlcmRvY3MtdGVtcGxhdGUtZmllbGQtcHJvcGVydGllcyAucm93LWhlYWRlciAuYWRkLWJ1dHRvbiBzdmd7d2lkdGg6MzJweDtoZWlnaHQ6MzJweH12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgLm9wdGlvbi1yb3d7bWFyZ2luOjE1cHggMH12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgLm9wdGlvbi1yb3cgLnJlbW92ZS1idXR0b257aGVpZ2h0OjI4cHg7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZDpub25lO2JvcmRlci1yYWRpdXM6NHB4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Ym9yZGVyOjFweCBzb2xpZCAjOTk5Oy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIC5vcHRpb24tcm93IC5yZW1vdmUtYnV0dG9uOmFjdGl2ZXtiYWNrZ3JvdW5kOiNmM2YzZjN9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIC5vcHRpb24tcm93IC5yZW1vdmUtYnV0dG9uOmhvdmVyIHN2Z3tzdHJva2U6I2E1MDAyMX12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgLm9wdGlvbi1yb3cgLnJlbW92ZS1idXR0b24gc3Zne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7c3Ryb2tlOiMzMzMzMzN9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIC5vcHRpb25ze2JhY2tncm91bmQ6I2YzZjNmMztwYWRkaW5nOjAgMCAxMHB4IDB9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIC5vcHRpb25zIC5yb3ctaGVhZGVyLHZlcmRvY3MtdGVtcGxhdGUtZmllbGQtcHJvcGVydGllcyAub3B0aW9ucyAub3B0aW9uLXJvd3twYWRkaW5nOjAgMTBweH12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgLm9wdGlvbnMgLmFkZC1vcHRpb24tYnV0dG9ue2JvcmRlci1yYWRpdXM6NXB4O2JvcmRlcjoxcHggc29saWQgI2NjY2NjYztiYWNrZ3JvdW5kOiM0NjQ5N2Q7Y29sb3I6I2ZmZmZmZjtwYWRkaW5nOjNweCA4cHh9dmVyZG9jcy10ZW1wbGF0ZS1maWVsZC1wcm9wZXJ0aWVzIC5vcHRpb25zIC5vcHRpb24tcm93IC5pbnB1dC1lbGVtZW50e2ZvbnQtc2l6ZToxNHB4fXZlcmRvY3MtdGVtcGxhdGUtZmllbGQtcHJvcGVydGllcyAub3B0aW9ucyB2ZXJkb2NzLWhlbHAtaWNvbntvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC44KTt0cmFuc2Zvcm06c2NhbGUoMC44KX12ZXJkb2NzLXRlbXBsYXRlLWZpZWxkLXByb3BlcnRpZXMgLm9wdGlvbnMgdmVyZG9jcy1oZWxwLWljb24gc3Zne2ZpbGw6I2ZmZmZmZn1cIjtcblxuY29uc3QgY2FwaXRhbGl6ZSA9IChzdHIpID0+IHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbmNvbnN0IFRyYXNoSWNvbiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHJva2Utd2lkdGg9XCIxLjVcIiBzdHJva2U9XCIjYTUwMDIxXCI+PHBhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgZD1cIk0xNC43NCA5bC0uMzQ2IDltLTQuNzg4IDBMOS4yNiA5bTkuOTY4LTMuMjFjLjM0Mi4wNTIuNjgyLjEwNyAxLjAyMi4xNjZtLTEuMDIyLS4xNjVMMTguMTYgMTkuNjczYTIuMjUgMi4yNSAwIDAxLTIuMjQ0IDIuMDc3SDguMDg0YTIuMjUgMi4yNSAwIDAxLTIuMjQ0LTIuMDc3TDQuNzcyIDUuNzltMTQuNDU2IDBhNDguMTA4IDQ4LjEwOCAwIDAwLTMuNDc4LS4zOTdtLTEyIC41NjJjLjM0LS4wNTkuNjgtLjExNCAxLjAyMi0uMTY1bTAgMGE0OC4xMSA0OC4xMSAwIDAxMy40NzgtLjM5N203LjUgMHYtLjkxNmMwLTEuMTgtLjkxLTIuMTY0LTIuMDktMi4yMDFhNTEuOTY0IDUxLjk2NCAwIDAwLTMuMzIgMGMtMS4xOC4wMzctMi4wOSAxLjAyMi0yLjA5IDIuMjAxdi45MTZtNy41IDBhNDguNjY3IDQ4LjY2NyAwIDAwLTcuNSAwXCIgLz48L3N2Zz5gO1xuY29uc3QgSGVscEljb24gPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCI+PHBhdGggZD1cIk0xMS45MjUgMThxLjU1IDAgLjkzOC0uMzg3LjM4Ny0uMzg4LjM4Ny0uOTM4IDAtLjU1LS4zODctLjkyNS0uMzg4LS4zNzUtLjkzOC0uMzc1LS41NSAwLS45MjUuMzc1dC0uMzc1LjkyNXEwIC41NS4zNzUuOTM4LjM3NS4zODcuOTI1LjM4N1ptLS45NS0zLjg1aDEuOTVxMC0uOC4yLTEuMjg3LjItLjQ4OCAxLjAyNS0xLjI4OC42NS0uNjI1IDEuMDI1LTEuMjEzLjM3NS0uNTg3LjM3NS0xLjQzNyAwLTEuNDI1LTEuMDI1LTIuMTc1UTEzLjUgNiAxMi4xIDZxLTEuNDI1IDAtMi4zNS43NzV0LTEuMjc1IDEuODVsMS43NzUuN3EuMTI1LS40NS41NS0uOTc1LjQyNS0uNTI1IDEuMjc1LS41MjUuNzI1IDAgMS4xLjQxMi4zNzUuNDEzLjM3NS44ODggMCAuNDc1LS4yODcuOS0uMjg4LjQyNS0uNzEzLjc3NS0xLjA3NS45NS0xLjMyNSAxLjQ3NS0uMjUuNTI1LS4yNSAxLjg3NVpNMTIgMjIuMnEtMi4xMjUgMC0zLjk4OC0uOC0xLjg2Mi0uOC0zLjIzNy0yLjE3NVEzLjQgMTcuODUgMi42IDE1Ljk4OCAxLjggMTQuMTI1IDEuOCAxMnQuOC0zLjk4OHEuOC0xLjg2MiAyLjE3NS0zLjIzN1E2LjE1IDMuNCA4LjAxMiAyLjYgOS44NzUgMS44IDEyIDEuOHQzLjk4OC44cTEuODYyLjggMy4yMzcgMi4xNzVRMjAuNiA2LjE1IDIxLjQgOC4wMTJxLjggMS44NjMuOCAzLjk4OHQtLjggMy45ODhxLS44IDEuODYyLTIuMTc1IDMuMjM3UTE3Ljg1IDIwLjYgMTUuOTg4IDIxLjRxLTEuODYzLjgtMy45ODguOFptMC0yLjI3NXEzLjMyNSAwIDUuNjI1LTIuM3QyLjMtNS42MjVxMC0zLjMyNS0yLjMtNS42MjVUMTIgNC4wNzVxLTMuMzI1IDAtNS42MjUgMi4zVDQuMDc1IDEycTAgMy4zMjUgMi4zIDUuNjI1dDUuNjI1IDIuM1pNMTIgMTJaXCIvPjwvc3ZnPic7XG5jb25zdCBWZXJkb2NzVGVtcGxhdGVGaWVsZFByb3BlcnRpZXMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuY2xvc2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImNsb3NlXCIsIDcpO1xuICAgIHRoaXMuZGVsZXRlID0gY3JlYXRlRXZlbnQodGhpcywgXCJkZWxldGVcIiwgNyk7XG4gICAgdGhpcy5zZXR0aW5nc0NoYW5nZWQgPSBjcmVhdGVFdmVudCh0aGlzLCBcInNldHRpbmdzQ2hhbmdlZFwiLCA3KTtcbiAgICB0aGlzLnNka0Vycm9yID0gY3JlYXRlRXZlbnQodGhpcywgXCJzZGtFcnJvclwiLCA3KTtcbiAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICB0aGlzLmVuZHBvaW50ID0gVmVyZG9jc0VuZHBvaW50LmdldERlZmF1bHQoKTtcbiAgICB0aGlzLnRlbXBsYXRlSWQgPSAnJztcbiAgICB0aGlzLmZpZWxkTmFtZSA9ICcnO1xuICAgIHRoaXMuaGVscFRleHQgPSAnJztcbiAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnR5cGUgPSAnc2lnbmF0dXJlJztcbiAgICB0aGlzLnNldHRpbmcgPSBudWxsO1xuICAgIHRoaXMubmFtZSA9ICcnO1xuICAgIHRoaXMucm9sZU5hbWUgPSAnJztcbiAgICB0aGlzLmdyb3VwID0gJyc7XG4gICAgdGhpcy5maWVsZFR5cGUgPSAnJztcbiAgICB0aGlzLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zID0gW107XG4gICAgdGhpcy5wbGFjZWhvbGRlciA9ICcnO1xuICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gJyc7XG4gICAgdGhpcy5zaG93aW5nSGVscCA9IGZhbHNlO1xuICB9XG4gIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcbiAgICB0cnkge1xuICAgICAgdGhpcy5lbmRwb2ludC5sb2FkU2Vzc2lvbigpO1xuICAgICAgaWYgKCF0aGlzLnRlbXBsYXRlSWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coYFtST0xFU10gTWlzc2luZyByZXF1aXJlZCB0ZW1wbGF0ZSBJRCAke3RoaXMudGVtcGxhdGVJZH1gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmZpZWxkTmFtZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBbRklFTEQgUFJPUEVSVElFU10gTWlzc2luZyByZXF1aXJlZCBmaWVsZCBuYW1lYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5lbmRwb2ludC5zZXNzaW9uKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbUk9MRVNdIFVuYWJsZSB0byBzdGFydCBidWlsZGVyIHNlc3Npb24sIG11c3QgYmUgYXV0aGVudGljYXRlZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnN0b3JlID0gYXdhaXQgZ2V0VGVtcGxhdGVTdG9yZSh0aGlzLmVuZHBvaW50LCB0aGlzLnRlbXBsYXRlSWQsIGZhbHNlKTtcbiAgICAgIGNvbnN0IGZpZWxkID0gKF9iID0gKF9hID0gdGhpcy5zdG9yZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0YXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZmllbGRzLmZpbmQoZmllbGQgPT4gZmllbGQubmFtZSA9PT0gdGhpcy5maWVsZE5hbWUpO1xuICAgICAgaWYgKCFmaWVsZCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgW0ZJRUxEIFBST1BFUlRJRVNdIFVuYWJsZSB0byBmaW5kIGZpZWxkIFwiJHt0aGlzLmZpZWxkTmFtZX1cIiBpbiB0ZW1wbGF0ZWApO1xuICAgICAgfVxuICAgICAgdGhpcy50eXBlID0gZmllbGQudHlwZTtcbiAgICAgIHRoaXMubmFtZSA9IGZpZWxkLm5hbWU7XG4gICAgICB0aGlzLmdyb3VwID0gZmllbGQubmFtZTtcbiAgICAgIHRoaXMucm9sZU5hbWUgPSBmaWVsZC5yb2xlX25hbWU7XG4gICAgICB0aGlzLnJlcXVpcmVkID0gZmllbGQucmVxdWlyZWQ7XG4gICAgICB0aGlzLmZpZWxkVHlwZSA9IGZpZWxkLnR5cGU7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVyID0gZmllbGQubGFiZWw7IC8vIFRPRE86IFRhbGsgYWJvdXQgaG93IHdlIHdhbnQgdG8gaGFuZGxlIGxhYmVscy9wbGFjZWhvbGRlcnNcbiAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gKChfYyA9IGZpZWxkLnNldHRpbmcpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy52YWx1ZSkgfHwgJyc7XG4gICAgICB0aGlzLnNldHRpbmcgPSBmaWVsZC5zZXR0aW5nIHx8IHt9O1xuICAgICAgdGhpcy5vcHRpb25zID0gKChfZCA9IGZpZWxkLnNldHRpbmcpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5vcHRpb25zKSB8fCBbXTtcbiAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5sb2coJ1tGSUVMRCBQUk9QRVJUSUVTXSBFcnJvciBsb2FkaW5nIHRlbXBsYXRlJywgZSk7XG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIChfZSA9IHRoaXMuc2RrRXJyb3IpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5lbWl0KG5ldyBTREtFcnJvcihlLm1lc3NhZ2UsIChfZiA9IGUucmVzcG9uc2UpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5zdGF0dXMsIChfZyA9IGUucmVzcG9uc2UpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5kYXRhKSk7XG4gICAgfVxuICB9XG4gIGhhbmRsZUNhbmNlbChlKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgY29uc3QgZmllbGQgPSAoX2IgPSAoX2EgPSB0aGlzLnN0b3JlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhdGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5maWVsZHMuZmluZChmaWVsZCA9PiBmaWVsZC5uYW1lID09PSB0aGlzLmZpZWxkTmFtZSk7XG4gICAgaWYgKGZpZWxkKSB7XG4gICAgICB0aGlzLm5hbWUgPSBmaWVsZC5uYW1lO1xuICAgICAgdGhpcy5yb2xlTmFtZSA9IGZpZWxkLnJvbGVfbmFtZTtcbiAgICAgIHRoaXMucmVxdWlyZWQgPSBmaWVsZC5yZXF1aXJlZDtcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBmaWVsZC5sYWJlbDsgLy8gVE9ETzogVGFsayBhYm91dCBob3cgd2Ugd2FudCB0byBoYW5kbGUgbGFiZWxzL3BsYWNlaG9sZGVyc1xuICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSAoKF9jID0gZmllbGQuc2V0dGluZykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnJlc3VsdCkgfHwgJyc7XG4gICAgfVxuICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAoX2QgPSB0aGlzLmNsb3NlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZW1pdCgpO1xuICB9XG4gIGhhbmRsZVNhdmUoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgY29uc3QgbmV3UHJvcGVydGllcyA9IHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHJlcXVpcmVkOiB0aGlzLnJlcXVpcmVkLFxuICAgICAgcm9sZV9uYW1lOiB0aGlzLnJvbGVOYW1lLFxuICAgICAgLy8gVE9ETzogRGVmYXVsdCB2YWx1ZSBpbiBzZXR0aW5nP1xuICAgIH07XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gJ2NoZWNrYm94X2dyb3VwJyB8fCB0aGlzLnR5cGUgPT09ICdyYWRpb19idXR0b25fZ3JvdXAnKSB7XG4gICAgICBuZXdQcm9wZXJ0aWVzLnNldHRpbmcgPSB0aGlzLnNldHRpbmc7XG4gICAgICBuZXdQcm9wZXJ0aWVzLnNldHRpbmcub3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy50eXBlID09PSAnZHJvcGRvd24nKSB7XG4gICAgICBuZXdQcm9wZXJ0aWVzLnNldHRpbmcgPSB7XG4gICAgICAgIHg6IHRoaXMuc2V0dGluZy54LFxuICAgICAgICB5OiB0aGlzLnNldHRpbmcueSxcbiAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlRmllbGQodGhpcy5lbmRwb2ludCwgdGhpcy50ZW1wbGF0ZUlkLCB0aGlzLmZpZWxkTmFtZSwgbmV3UHJvcGVydGllcylcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICB0aGlzLnVwZGF0ZUZpZWxkKCk7XG4gICAgICAoX2EgPSB0aGlzLnNldHRpbmdzQ2hhbmdlZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVtaXQoeyBmaWVsZE5hbWU6IHRoaXMuZmllbGROYW1lLCBzZXR0aW5nczogbmV3UHJvcGVydGllcyB9KTtcbiAgICAgIChfYiA9IHRoaXMuY2xvc2UpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5lbWl0KCk7XG4gICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnRmllbGQgdXBkYXRlIGZhaWxlZCcsIGUpO1xuICAgIH0pO1xuICB9XG4gIGhhbmRsZUFkZE9wdGlvbihlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBjb25zdCBuZXdQcm9wZXJ0aWVzID0ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgcmVxdWlyZWQ6IHRoaXMucmVxdWlyZWQsXG4gICAgICByb2xlX25hbWU6IHRoaXMucm9sZU5hbWUsXG4gICAgICAvLyBUT0RPOiBEZWZhdWx0IHZhbHVlIGluIHNldHRpbmc/XG4gICAgfTtcbiAgICB0aGlzLm9wdGlvbnMucHVzaCh0aGlzLnR5cGUgPT09ICdyYWRpb19idXR0b25fZ3JvdXAnXG4gICAgICA/IHtcbiAgICAgICAgaWQ6IHV1aWRCcm93c2VyKCksXG4gICAgICAgIHZhbHVlOiBgT3B0aW9uICR7dGhpcy5vcHRpb25zLmxlbmd0aCArIDF9YCxcbiAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgICB4OiB0aGlzLm9wdGlvbnMubGVuZ3RoID4gMCA/IHRoaXMub3B0aW9uc1t0aGlzLm9wdGlvbnMubGVuZ3RoIC0gMV0ueCA6IDIwLFxuICAgICAgICB5OiB0aGlzLm9wdGlvbnMubGVuZ3RoID4gMCA/IHRoaXMub3B0aW9uc1t0aGlzLm9wdGlvbnMubGVuZ3RoIC0gMV0ueSAtIDI1IDogMjAsXG4gICAgICB9XG4gICAgICA6IHtcbiAgICAgICAgaWQ6IHV1aWRCcm93c2VyKCksXG4gICAgICAgIHZhbHVlOiBgT3B0aW9uICR7dGhpcy5vcHRpb25zLmxlbmd0aCArIDF9YCxcbiAgICAgICAgY2hlY2tlZDogZmFsc2UsXG4gICAgICAgIHg6IHRoaXMub3B0aW9ucy5sZW5ndGggPiAwID8gdGhpcy5vcHRpb25zW3RoaXMub3B0aW9ucy5sZW5ndGggLSAxXS54IDogMjAsXG4gICAgICAgIHk6IHRoaXMub3B0aW9ucy5sZW5ndGggPiAwID8gdGhpcy5vcHRpb25zW3RoaXMub3B0aW9ucy5sZW5ndGggLSAxXS55IC0gMjUgOiAyMCxcbiAgICAgIH0pO1xuICAgIG5ld1Byb3BlcnRpZXMuc2V0dGluZyA9IHsgLi4udGhpcy5zZXR0aW5nIH07XG4gICAgZGVsZXRlIG5ld1Byb3BlcnRpZXMuc2V0dGluZy5yZXN1bHQ7XG4gICAgbmV3UHJvcGVydGllcy5zZXR0aW5nLm9wdGlvbnMgPSBbLi4udGhpcy5vcHRpb25zXTtcbiAgICB1cGRhdGVGaWVsZCh0aGlzLmVuZHBvaW50LCB0aGlzLnRlbXBsYXRlSWQsIHRoaXMuZmllbGROYW1lLCBuZXdQcm9wZXJ0aWVzKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgIHRoaXMudXBkYXRlRmllbGQoKTtcbiAgICAgIChfYSA9IHRoaXMuc2V0dGluZ3NDaGFuZ2VkKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZW1pdCh7IGZpZWxkTmFtZTogdGhpcy5maWVsZE5hbWUsIHNldHRpbmdzOiBuZXdQcm9wZXJ0aWVzIH0pO1xuICAgICAgKF9iID0gdGhpcy5jbG9zZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmVtaXQoKTtcbiAgICB9KVxuICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdGaWVsZCB1cGRhdGUgZmFpbGVkJywgZSk7XG4gICAgfSk7XG4gIH1cbiAgdXBkYXRlRmllbGQoKSB7XG4gICAgY29uc3QgbmV3RmllbGRzID0gWy4uLnRoaXMuc3RvcmUuc3RhdGUuZmllbGRzXTtcbiAgICBuZXdGaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICBpZiAoZmllbGQubmFtZSA9PT0gdGhpcy5maWVsZE5hbWUpIHtcbiAgICAgICAgZmllbGQubmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgZmllbGQucm9sZV9uYW1lID0gdGhpcy5yb2xlTmFtZTtcbiAgICAgICAgZmllbGQucmVxdWlyZWQgPSB0aGlzLnJlcXVpcmVkO1xuICAgICAgICBmaWVsZC5sYWJlbCA9IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgICAgIC8vIGZpZWxkLnNldHRpbmcucmVzdWx0ID0gdGhpcy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIGlmIChmaWVsZC5zZXR0aW5nLm9wdGlvbnMpIHtcbiAgICAgICAgICBmaWVsZC5zZXR0aW5nLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnN0b3JlLnN0YXRlLmZpZWxkcyA9IG5ld0ZpZWxkcztcbiAgfVxuICBhc3luYyBoYW5kbGVEZWxldGUoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKHdpbmRvdy5jb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdpc2ggdG8gcmVtb3ZlIHRoaXMgZmllbGQ/IFRoaXMgYWN0aW9uIGNhbm5vdCBiZSB1bmRvbmUuJykpIHtcbiAgICAgIGRlbGV0ZUZpZWxkKHRoaXMuZW5kcG9pbnQsIHRoaXMudGVtcGxhdGVJZCwgdGhpcy5maWVsZE5hbWUpXG4gICAgICAgIC50aGVuKHIgPT4ge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICBjb25zb2xlLmxvZygnRmllbGQgZGVsZXRlZCcsIHIpO1xuICAgICAgICB0aGlzLnN0b3JlLnN0YXRlLmZpZWxkcyA9IFsuLi4oX2IgPSAoX2EgPSB0aGlzLnN0b3JlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhdGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5maWVsZHMuZmlsdGVyKGZpZWxkID0+IGZpZWxkLm5hbWUgIT09IHRoaXMuZmllbGROYW1lKV07XG4gICAgICAgIChfZCA9IChfYyA9IHRoaXMuc3RvcmUpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zdGF0ZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnJvbGVzLmZvckVhY2gocm9sZSA9PiB7XG4gICAgICAgICAgcm9sZS5maWVsZHMgPSBbLi4ucm9sZS5maWVsZHMuZmlsdGVyKGZpZWxkID0+IGZpZWxkLm5hbWUgIT09IHRoaXMuZmllbGROYW1lKV07XG4gICAgICAgIH0pO1xuICAgICAgICAoX2UgPSB0aGlzLmRlbGV0ZSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmVtaXQoeyB0ZW1wbGF0ZUlkOiB0aGlzLnRlbXBsYXRlSWQsIHJvbGVOYW1lOiB0aGlzLnJvbGVOYW1lIH0pO1xuICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnRGVsZXRpb24gZXJyb3InLCBlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIGlmICghdGhpcy5lbmRwb2ludC5zZXNzaW9uKSB7XG4gICAgICByZXR1cm4gKGgoSG9zdCwgbnVsbCwgaChcInZlcmRvY3MtY29tcG9uZW50LWVycm9yXCIsIHsgbWVzc2FnZTogXCJZb3UgbXVzdCBiZSBhdXRoZW50aWNhdGVkIHRvIHVzZSB0aGlzIG1vZHVsZS5cIiB9KSkpO1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIG1lYW50IHRvIGJlIGEgY29tcGFuaW9uIGZvciBsYXJnZXIgdmlzdWFsIGV4cGVyaWVuY2VzIHNvIHdlIGp1c3QgZ28gYmxhbmsgb24gZXJyb3JzIGZvciBub3cuXG4gICAgaWYgKCF0aGlzLmVuZHBvaW50LnNlc3Npb24gfHwgISgoX2IgPSAoX2EgPSB0aGlzLnN0b3JlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhdGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pc0xvYWRlZCkpIHtcbiAgICAgIHJldHVybiBoKEhvc3QsIHsgY2xhc3M6IFwiZW1wdHlcIiB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGVscFRleHQgJiYgdGhpcy5zaG93aW5nSGVscCkge1xuICAgICAgcmV0dXJuIChoKEhvc3QsIG51bGwsIGgoXCJoNlwiLCBudWxsLCBjYXBpdGFsaXplKHRoaXMuZmllbGRUeXBlKSwgXCIgU2V0dGluZ3MgXCIsIGgoXCJkaXZcIiwgeyBzdHlsZTogeyBmbGV4OiAnMScgfSB9KSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhlbHAtaWNvblwiLCBpbm5lckhUTUw6IEhlbHBJY29uLCBvbkNsaWNrOiAoKSA9PiAodGhpcy5zaG93aW5nSGVscCA9IGZhbHNlKSB9KSksIGgoXCJwXCIsIHsgY2xhc3M6IFwiaW5zdHJ1Y3Rpb25zXCIsIGlubmVySFRNTDogdGhpcy5oZWxwVGV4dCB9KSkpO1xuICAgIH1cbiAgICByZXR1cm4gKGgoSG9zdCwgbnVsbCwgaChcImg2XCIsIG51bGwsIGNhcGl0YWxpemUodGhpcy5maWVsZFR5cGUucmVwbGFjZSgvXy9nLCAnICcpKSwgXCIgU2V0dGluZ3MgXCIsIGgoXCJkaXZcIiwgeyBzdHlsZTogeyBmbGV4OiAnMScgfSB9KSwgdGhpcy5oZWxwVGV4dCAmJiBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaGVscC1pY29uXCIsIGlubmVySFRNTDogSGVscEljb24sIG9uQ2xpY2s6ICgpID0+ICh0aGlzLnNob3dpbmdIZWxwID0gdHJ1ZSkgfSkpLCBoKFwiZm9ybVwiLCB7IG9uU3VibWl0OiBlID0+IGUucHJldmVudERlZmF1bHQoKSwgb25DbGljazogZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpLCBhdXRvY29tcGxldGU6IFwib2ZmXCIgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInJvd1wiIH0sIGgoXCJ2ZXJkb2NzLXRleHQtaW5wdXRcIiwgeyBpZDogXCJ2ZXJkb2NzLWZpZWxkLW5hbWVcIiwgbGFiZWw6IFwiRmllbGQgTmFtZVwiLCB2YWx1ZTogdGhpcy5uYW1lLCBhdXRvY29tcGxldGU6IFwib2ZmXCIsXG4gICAgICAvLyAgICAgICAgICAgICAgaGVscFRleHQ9XCJUaGUgaW50ZXJuYWwgbmFtZSBvZiB0aGUgZmllbGQuIE11c3QgYmUgdW5pcXVlLCBhbmQgY29udGFpbiBvbmx5IGxldHRlcnMsIG51bWJlcnMsIGFuZCBkYXNoZXMuIEFmdGVyIGFuIGVudmVsb3BlIGlzIGNvbXBsZXRlZCwgdGhlIHZhbHVlIGVudGVyZWQgYnkgdGhlIHNpZ25lciB3aWxsIGJlIHRhZ2dlZCB3aXRoIHRoaXMga2V5LlwiXG4gICAgICBwbGFjZWhvbGRlcjogXCJGaWVsZCBOYW1lLi4uXCIsIG9uSW5wdXQ6IChlKSA9PiB7XG4gICAgICAgIHRoaXMubmFtZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIH0gfSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwicm93XCIgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImlucHV0LWxhYmVsXCIgfSwgXCJSb2xlOlwiKSwgaChcInZlcmRvY3Mtc2VsZWN0LWlucHV0XCIsIHsgdmFsdWU6IHRoaXMucm9sZU5hbWUsIG9wdGlvbnM6IChfZCA9IChfYyA9IHRoaXMuc3RvcmUpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zdGF0ZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnJvbGVzLm1hcChyb2xlID0+ICh7IGxhYmVsOiByb2xlLm5hbWUsIHZhbHVlOiByb2xlLm5hbWUgfSkpLCBvbklucHV0OiAoZSkgPT4ge1xuICAgICAgICB0aGlzLnJvbGVOYW1lID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgfSB9KSksIFsndGV4dGJveCcsICd0ZXh0YXJlYSddLmluY2x1ZGVzKHRoaXMudHlwZSkgJiYgKGgoXCJ2ZXJkb2NzLXRleHQtaW5wdXRcIiwgeyBpZDogXCJ2ZXJkb2NzLWZpZWxkLXBsYWNlaG9sZGVyXCIsIGxhYmVsOiBcIlBsYWNlaG9sZGVyXCIsIHZhbHVlOiB0aGlzLm5hbWUsIGF1dG9jb21wbGV0ZTogXCJvZmZcIixcbiAgICAgIC8vIGhlbHBUZXh0PVwiUGxhY2Vob2xkZXIgdG8gZGlzcGxheSBpZiB0aGUgZmllbGQgaXMgZW1wdHkuXCJcbiAgICAgIHBsYWNlaG9sZGVyOiBcIlBsYWNlaG9sZGVyLi4uXCIsIG9uSW5wdXQ6IChlKSA9PiB7XG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICB9IH0pKSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInJvd1wiLCBzdHlsZTogeyBtYXJnaW5Ub3A6ICcxNXB4JywgbWFyZ2luQm90dG9tOiAnMTVweCcgfSB9LCBoKFwibGFiZWxcIiwgeyBodG1sRm9yOiBcInZlcmRvY3MtaXMtcmVxdWlyZWRcIiwgY2xhc3M6IFwiaW5wdXQtbGFiZWxcIiB9LCBcIlJlcXVpcmVkXCIpLCBoKFwidmVyZG9jcy1jaGVja2JveFwiLCB7IGlkOiBcInZlcmRvY3MtaXMtcmVxdWlyZWRcIiwgbmFtZTogXCJpcy1yZXF1aXJlZFwiLCBjaGVja2VkOiB0aGlzLnJlcXVpcmVkLCB2YWx1ZTogXCJvblwiLCBvbklucHV0OiAoZSkgPT4ge1xuICAgICAgICB0aGlzLnJlcXVpcmVkID0gZS50YXJnZXQuY2hlY2tlZDtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICB9IH0pKSwgWydjaGVja2JveF9ncm91cCcsICdyYWRpb19idXR0b25fZ3JvdXAnXS5pbmNsdWRlcyh0aGlzLnR5cGUpICYmIGgoXCJ2ZXJkb2NzLWJ1dHRvblwiLCB7IHNpemU6IFwic21hbGxcIiwgb25DbGljazogZSA9PiB0aGlzLmhhbmRsZUFkZE9wdGlvbihlKSwgbGFiZWw6IFwiQWRkIE9wdGlvblwiIH0pLCBbJ2Ryb3Bkb3duJ10uaW5jbHVkZXModGhpcy50eXBlKSAmJiAoaChcImRpdlwiLCB7IGNsYXNzOiBcIm9wdGlvbnNcIiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwicm93XCIsIHN0eWxlOiB7XG4gICAgICAgIG1hcmdpblRvcDogJzE1cHgnLFxuICAgICAgICBtYXJnaW5Cb3R0b206ICcxNXB4JyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZm9udFdlaWdodDogJzcwMCcsXG4gICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzMzMzMzMycsXG4gICAgICAgIHBhZGRpbmc6ICc1cHggOHB4JyxcbiAgICAgICAgY29sb3I6ICcjZmZmZmZmJyxcbiAgICAgIH0gfSwgXCJPcHRpb25zXCIpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwicm93LWhlYWRlclwiIH0sIGgoXCJoNlwiLCBudWxsLCBcIklEXCIpLCBoKFwiaDZcIiwgbnVsbCwgXCJMYWJlbFwiKSwgaChcImRpdlwiLCB7IHN0eWxlOiB7IHdpZHRoOiAnMzRweCcgfSB9KSksIHRoaXMub3B0aW9ucy5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IChoKFwiZGl2XCIsIHsgY2xhc3M6IFwicm93IG9wdGlvbi1yb3dcIiwga2V5OiBpbmRleCB9LCBoKFwidmVyZG9jcy10ZXh0LWlucHV0XCIsIHsgaWQ6IGB2ZXJkb2NzLW9wdGlvbi1pZC0ke29wdGlvbi5pZH1gLCB2YWx1ZTogb3B0aW9uLmlkLCBwbGFjZWhvbGRlcjogXCJVbmlxdWUgSURcIiwgb25JbnB1dDogKGUpID0+IHtcbiAgICAgICAgdGhpcy5vcHRpb25zW2luZGV4XS5pZCA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIH0gfSksIGgoXCJ2ZXJkb2NzLXRleHQtaW5wdXRcIiwgeyBpZDogYHZlcmRvY3Mtb3B0aW9uLXZhbHVlLSR7b3B0aW9uLmlkfWAsIHZhbHVlOiBvcHRpb24udmFsdWUsIHBsYWNlaG9sZGVyOiBcIkRpc3BsYXkgdmFsdWVcIiwgb25JbnB1dDogKGUpID0+IHtcbiAgICAgICAgdGhpcy5vcHRpb25zW2luZGV4XS52YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIH0gfSksIGgoXCJidXR0b25cIiwgeyBpbm5lckhUTUw6IFRyYXNoSWNvbiwgY2xhc3M6IFwicmVtb3ZlLWJ1dHRvblwiLCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMub3B0aW9ucy5maWx0ZXIob3B0ID0+IG9wdC5pZCAhPT0gb3B0aW9uLmlkKTtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICB9IH0pKSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwicm93LWhlYWRlclwiIH0sIGgoXCJidXR0b25cIiwgeyBjbGFzczogXCJhZGQtb3B0aW9uLWJ1dHRvblwiLCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IFsuLi50aGlzLm9wdGlvbnMsIHsgaWQ6IGBvcHRpb24tJHt0aGlzLm9wdGlvbnMubGVuZ3RoICsgMX1gLCB2YWx1ZTogYE9wdGlvbiAke3RoaXMub3B0aW9ucy5sZW5ndGggKyAxfWAgfV07XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgfSB9LCBcIkFkZCBPcHRpb25cIikpKSksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJidXR0b25zXCIgfSwgaChcImJ1dHRvblwiLCB7IGNsYXNzOiBcImRlbGV0ZS1idXR0b25cIiwgZGlzYWJsZWQ6IHRoaXMuZGlydHksIG9uQ2xpY2s6IGUgPT4gdGhpcy5oYW5kbGVEZWxldGUoZSksIGlubmVySFRNTDogVHJhc2hJY29uIH0pLCBoKFwiZGl2XCIsIHsgc3R5bGU6IHsgZmxleDogJzEnIH0gfSksIGgoXCJ2ZXJkb2NzLWJ1dHRvblwiLCB7IHNpemU6IFwic21hbGxcIiwgdmFyaWFudDogXCJvdXRsaW5lXCIsIGxhYmVsOiBcIkNhbmNlbFwiLCBkaXNhYmxlZDogIXRoaXMuZGlydHksIG9uQ2xpY2s6IGUgPT4gdGhpcy5oYW5kbGVDYW5jZWwoZSkgfSksIGgoXCJ2ZXJkb2NzLWJ1dHRvblwiLCB7IHNpemU6IFwic21hbGxcIiwgbGFiZWw6IFwiU2F2ZVwiLCBkaXNhYmxlZDogIXRoaXMuZGlydHksIG9uQ2xpY2s6IGUgPT4gdGhpcy5oYW5kbGVTYXZlKGUpIH0pKSkpKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuVmVyZG9jc1RlbXBsYXRlRmllbGRQcm9wZXJ0aWVzLnN0eWxlID0gdmVyZG9jc1RlbXBsYXRlRmllbGRQcm9wZXJ0aWVzQ3NzO1xuXG5leHBvcnQgeyBWZXJkb2NzQnV0dG9uUGFuZWwgYXMgdmVyZG9jc19idXR0b25fcGFuZWwsIFZlcmRvY3NTZWxlY3RJbnB1dCBhcyB2ZXJkb2NzX3NlbGVjdF9pbnB1dCwgVmVyZG9jc1RlbXBsYXRlRmllbGRQcm9wZXJ0aWVzIGFzIHZlcmRvY3NfdGVtcGxhdGVfZmllbGRfcHJvcGVydGllcyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmV2ZXJ5O1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2V2ZXJ5Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==