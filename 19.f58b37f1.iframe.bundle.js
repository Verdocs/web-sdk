/*! For license information please see 19.f58b37f1.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"./dist/esm/Envelopes-df05b3c7.js":function(module,__webpack_exports__,__webpack_require__){"use strict";(function(Buffer){__webpack_require__.d(__webpack_exports__,"a",(function(){return getEnvelope})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getEnvelopeFile})),__webpack_require__.d(__webpack_exports__,"c",(function(){return getEnvelopeDocument})),__webpack_require__.d(__webpack_exports__,"d",(function(){return getSigningSession})),__webpack_require__.d(__webpack_exports__,"e",(function(){return updateEnvelopeField}));__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js");var _VerdocsEndpoint_82f4600d_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./dist/esm/VerdocsEndpoint-82f4600d.js"),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=function(thisArg,body){var f,y,t,g,_={label:0,sent:function sent(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},getSigningSession=function getSigningSession(endpoint,params){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.get("/envelopes/".concat(params.envelopeId,"/recipients/").concat(encodeURIComponent(params.roleId),"/invitation/").concat(params.inviteCode)).then((function(r){var _a,_b,signerToken=(null===(_a=r.headers)||void 0===_a?void 0:_a.signer_token)||"",session=Object(_VerdocsEndpoint_82f4600d_js__WEBPACK_IMPORTED_MODULE_11__.b)(signerToken);return endpoint.setToken(null===(_b=r.headers)||void 0===_b?void 0:_b.signer_token),{recipient:r.data,session:session,signerToken:signerToken}}))]}))}))},getEnvelope=function getEnvelope(endpoint,envelopeId){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.get("/envelopes/".concat(envelopeId)).then((function(r){return r.data}))]}))}))},getEnvelopeDocument=function getEnvelopeDocument(endpoint,envelopeId,documentId){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.get("/envelopes/".concat(envelopeId,"/envelope_documents/").concat(documentId)).then((function(r){return r.data}))]}))}))},getEnvelopeFile=function getEnvelopeFile(endpoint,envelopeId,documentId){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.get("/envelopes/".concat(envelopeId,"/envelope_documents/").concat(documentId,"?file=true"),{responseType:"arraybuffer"}).then((function(r){return Buffer.from(r.data,"binary").toString("base64")}))]}))}))},updateEnvelopeField=function updateEnvelopeField(endpoint,envelopeId,fieldName,value){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.put("/envelopes/".concat(envelopeId,"/fields/").concat(fieldName),value).then((function(r){return r.data}))]}))}))}}).call(this,__webpack_require__("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer)},"./dist/esm/TemplateDocuments-89ba2276.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return createTemplateDocument})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getTemplateDocument}));__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js");var getTemplateDocument=function getTemplateDocument(endpoint,templateId,documentId){return endpoint.api.get("/templates/".concat(templateId,"/documents/").concat(documentId)).then((function(r){return r.data}))},createTemplateDocument=function createTemplateDocument(endpoint,templateId,file,_onUploadProgress){var formData=new FormData;return formData.append("document",file,file.name),endpoint.api.post("/templates/".concat(templateId,"/documents"),formData,{timeout:1e4,onUploadProgress:function onUploadProgress(event){return null==_onUploadProgress?void 0:_onUploadProgress(Math.floor(100*event.loaded/event.total),event.loaded,event.total)}}).then((function(r){return r.data}))}},"./dist/esm/Templates-f7c590c0.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getTemplates})),__webpack_require__.d(__webpack_exports__,"b",(function(){return createTemplate})),__webpack_require__.d(__webpack_exports__,"c",(function(){return getTemplate}));var getTemplates=function getTemplates(endpoint,params){return endpoint.api.post("/templates",{params:params}).then((function(r){return r.data}))},getTemplate=function getTemplate(endpoint,templateId){return endpoint.api.get("/templates/".concat(templateId)).then((function(r){return r.data}))},createTemplate=function createTemplate(endpoint,params){return endpoint.api.post("/templates/",params).then((function(r){return r.data}))}},"./dist/esm/errors-9b5498c8.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return SDKError}));__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.reflect.construct.js"),__webpack_require__("./node_modules/core-js/modules/es.map.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}function _possibleConstructorReturn(self,call){if(call&&("object"==typeof call||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(self)}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _wrapNativeSuper(Class){var _cache="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function _wrapNativeSuper(Class){if(null===Class||!function _isNativeFunction(fn){return-1!==Function.toString.call(fn).indexOf("[native code]")}(Class))return Class;if("function"!=typeof Class)throw new TypeError("Super expression must either be null or a function");if(void 0!==_cache){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper)}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper,Class)},_wrapNativeSuper(Class)}function _construct(Parent,args,Class){return _construct=_isNativeReflectConstruct()?Reflect.construct.bind():function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var instance=new(Function.bind.apply(Parent,a));return Class&&_setPrototypeOf(instance,Class.prototype),instance},_construct.apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)},_getPrototypeOf(o)}var SDKError=function(_Error){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}(SDKError,_Error);var _super=function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}(SDKError);function SDKError(message,statusCode,response){var _this;return function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,SDKError),(_this=_super.call(this,message||"SDK Error")).response=response,_this.statusCode=statusCode,Object.setPrototypeOf(_assertThisInitialized(_this),(this instanceof SDKError?this.constructor:void 0).prototype),_this}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(SDKError)}(_wrapNativeSuper(Error))},"./dist/esm/verdocs-loader_4.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_loader",(function(){return VerdocsLoader})),__webpack_require__.d(__webpack_exports__,"verdocs_view",(function(){return VerdocsView})),__webpack_require__.d(__webpack_exports__,"verdocs_view_envelope_document",(function(){return VerdocsViewEnvelopeDocument})),__webpack_require__.d(__webpack_exports__,"verdocs_view_template_document",(function(){return VerdocsViewTemplateDocument}));__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.async-iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js");var _index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__=__webpack_require__("./dist/esm/index-f78d163d.js"),_Envelopes_df05b3c7_js__WEBPACK_IMPORTED_MODULE_29__=__webpack_require__("./dist/esm/Envelopes-df05b3c7.js"),_Templates_f7c590c0_js__WEBPACK_IMPORTED_MODULE_30__=__webpack_require__("./dist/esm/Templates-f7c590c0.js"),_VerdocsEndpoint_82f4600d_js__WEBPACK_IMPORTED_MODULE_32__=(__webpack_require__("./dist/esm/Types-ab9f6af8.js"),__webpack_require__("./dist/esm/VerdocsEndpoint-82f4600d.js")),_errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_33__=__webpack_require__("./dist/esm/errors-9b5498c8.js"),_TemplateDocuments_89ba2276_js__WEBPACK_IMPORTED_MODULE_34__=__webpack_require__("./dist/esm/TemplateDocuments-89ba2276.js");function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function define(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(void 0===method)return context.delegate=null,"throw"===methodName&&delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}var VerdocsLoader=function(){function VerdocsLoader(hostRef){_classCallCheck(this,VerdocsLoader),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.j)(this,hostRef)}return _createClass(VerdocsLoader,[{key:"render",value:function render(){return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.b,null)}}]),VerdocsLoader}();VerdocsLoader.style="verdocs-loader{display:block;position:absolute;top:50%;left:50%;margin-left:-20px;margin-top:-20px;font-size:24px;width:24px;height:24px;border-radius:50%;text-indent:-9999em;-webkit-animation:load5 1.1s infinite ease;animation:verdocs-loader-kf 1.1s infinite ease;-webkit-transform:translateZ(0);-ms-transform:translateZ(0);transform:translateZ(0)}@-webkit-keyframes verdocs-loader-kf{0%,100%{-webkit-box-shadow:0em -2.6em 0em 0em #aaaaaa, 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.3), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.4);box-shadow:0em -2.6em 0em 0em #aaaaaa, 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.3), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.4)}12.5%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.4), 1.8em -1.8em 0 0em #aaaaaa, 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.3);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.4), 1.8em -1.8em 0 0em #aaaaaa, 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.3)}25%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.3), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.4), 2.5em 0em 0 0em #aaaaaa, 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.3), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.4), 2.5em 0em 0 0em #aaaaaa, 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2)}37.5%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.3), 2.5em 0em 0 0em rgba(0, 0, 0, 0.4), 1.75em 1.75em 0 0em #aaaaaa, 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.3), 2.5em 0em 0 0em rgba(0, 0, 0, 0.4), 1.75em 1.75em 0 0em #aaaaaa, 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2)}50%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.3), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.4), 0em 2.5em 0 0em #aaaaaa, -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.3), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.4), 0em 2.5em 0 0em #aaaaaa, -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2)}62.5%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.3), 0em 2.5em 0 0em rgba(0, 0, 0, 0.4), -1.8em 1.8em 0 0em #aaaaaa, -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.3), 0em 2.5em 0 0em rgba(0, 0, 0, 0.4), -1.8em 1.8em 0 0em #aaaaaa, -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2)}75%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.3), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.4), -2.6em 0em 0 0em #aaaaaa, -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.3), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.4), -2.6em 0em 0 0em #aaaaaa, -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2)}87.5%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.3), -2.6em 0em 0 0em rgba(0, 0, 0, 0.4), -1.8em -1.8em 0 0em #aaaaaa;box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.3), -2.6em 0em 0 0em rgba(0, 0, 0, 0.4), -1.8em -1.8em 0 0em #aaaaaa}}@keyframes verdocs-loader-kf{0%,100%{-webkit-box-shadow:0em -2.6em 0em 0em #aaaaaa, 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.3), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.4);box-shadow:0em -2.6em 0em 0em #aaaaaa, 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.3), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.4)}12.5%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.4), 1.8em -1.8em 0 0em #aaaaaa, 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.3);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.4), 1.8em -1.8em 0 0em #aaaaaa, 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.3)}25%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.3), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.4), 2.5em 0em 0 0em #aaaaaa, 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.3), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.4), 2.5em 0em 0 0em #aaaaaa, 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2)}37.5%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.3), 2.5em 0em 0 0em rgba(0, 0, 0, 0.4), 1.75em 1.75em 0 0em #aaaaaa, 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.3), 2.5em 0em 0 0em rgba(0, 0, 0, 0.4), 1.75em 1.75em 0 0em #aaaaaa, 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2)}50%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.3), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.4), 0em 2.5em 0 0em #aaaaaa, -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.3), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.4), 0em 2.5em 0 0em #aaaaaa, -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.2), -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2)}62.5%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.3), 0em 2.5em 0 0em rgba(0, 0, 0, 0.4), -1.8em 1.8em 0 0em #aaaaaa, -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.3), 0em 2.5em 0 0em rgba(0, 0, 0, 0.4), -1.8em 1.8em 0 0em #aaaaaa, -2.6em 0em 0 0em rgba(0, 0, 0, 0.2), -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2)}75%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.3), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.4), -2.6em 0em 0 0em #aaaaaa, -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2);box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.3), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.4), -2.6em 0em 0 0em #aaaaaa, -1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2)}87.5%{-webkit-box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.3), -2.6em 0em 0 0em rgba(0, 0, 0, 0.4), -1.8em -1.8em 0 0em #aaaaaa;box-shadow:0em -2.6em 0em 0em rgba(0, 0, 0, 0.2), 1.8em -1.8em 0 0em rgba(0, 0, 0, 0.2), 2.5em 0em 0 0em rgba(0, 0, 0, 0.2), 1.75em 1.75em 0 0em rgba(0, 0, 0, 0.2), 0em 2.5em 0 0em rgba(0, 0, 0, 0.2), -1.8em 1.8em 0 0em rgba(0, 0, 0, 0.3), -2.6em 0em 0 0em rgba(0, 0, 0, 0.4), -1.8em -1.8em 0 0em #aaaaaa}}";var VerdocsView=function(){function VerdocsView(hostRef){_classCallCheck(this,VerdocsView),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.j)(this,hostRef),this.pageRendered=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageRendered",7),this.pageLoaded=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageLoaded",7),this.pageChange=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageChange",7),this.pageInit=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageInit",7),this.scaleChange=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"scaleChange",7),this.sdkError=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"sdkError",7),this.endpoint=_VerdocsEndpoint_82f4600d_js__WEBPACK_IMPORTED_MODULE_32__.a.getDefault(),this.templateId="",this.envelopeId="",this.rotation=0,this.pageLayers=[{name:"page",type:"canvas"},{name:"controls",type:"div"}],this.template=null,this.envelope=null}var _componentDidLoad;return _createClass(VerdocsView,[{key:"componentWillLoad",value:function componentWillLoad(){this.endpoint.loadSession()}},{key:"componentDidLoad",value:(_componentDidLoad=_asyncToGenerator(_regeneratorRuntime().mark((function _callee(){var _a,_b,_c;return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:if(this.templateId||this.envelopeId){_context.next=3;break}return console.error("[VIEW] Must specify one of templateId or envelopeId"),_context.abrupt("return");case 3:if(this.templateId&&this.envelopeId&&console.warn("[VIEW] Both templateId and envelopeId specified, using templateId"),_context.prev=4,!this.templateId){_context.next=13;break}return console.log("[VIEW] Loading template",this.templateId),_context.next=9,Object(_Templates_f7c590c0_js__WEBPACK_IMPORTED_MODULE_30__.c)(this.endpoint,this.templateId);case 9:this.template=_context.sent,console.log("[VIEW] Loaded template",this.template),_context.next=19;break;case 13:if(!this.envelopeId){_context.next=19;break}return console.log("[VIEW] Loading envelope",this.envelopeId),_context.next=17,Object(_Envelopes_df05b3c7_js__WEBPACK_IMPORTED_MODULE_29__.a)(this.endpoint,this.envelopeId);case 17:this.envelope=_context.sent,console.log("[VIEW] Loaded envelope",this.envelope);case 19:_context.next=25;break;case 21:_context.prev=21,_context.t0=_context.catch(4),console.log("[VIEW] Error loading data",_context.t0),null===(_a=this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_33__.a(_context.t0.message,null===(_b=_context.t0.response)||void 0===_b?void 0:_b.status,null===(_c=_context.t0.response)||void 0===_c?void 0:_c.data));case 25:case"end":return _context.stop()}}),_callee,this,[[4,21]])}))),function componentDidLoad(){return _componentDidLoad.apply(this,arguments)})},{key:"render",value:function render(){var _a,_this=this;return console.log("[VIEW] Rendering",this.templateId,this.envelopeId),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.b,null,this.template&&Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.h)("verdocs-view-template-document",{endpoint:this.endpoint,templateId:this.templateId,documentId:null===(_a=this.template.template_document)||void 0===_a?void 0:_a.id,onPageRendered:function onPageRendered(p){var _a;return null===(_a=_this.pageRendered)||void 0===_a?void 0:_a.emit(p.detail)}}),this.envelope&&Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.h)("verdocs-view-envelope-document",{endpoint:this.endpoint,envelopeId:this.envelopeId,documentId:this.envelope.envelope_document_id,onPageRendered:function onPageRendered(p){var _a;return null===(_a=_this.pageRendered)||void 0===_a?void 0:_a.emit(p.detail)}}))}},{key:"component",get:function get(){return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.c)(this)}}]),VerdocsView}();VerdocsView.style='verdocs-view{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;display:-ms-flexbox;display:flex;padding:15px;row-gap:15px;min-height:200px;position:relative;-ms-flex-align:center;align-items:center;-webkit-box-sizing:border-box;box-sizing:border-box;-ms-flex-direction:column;flex-direction:column}verdocs-view div,verdocs-view canvas{-webkit-box-sizing:border-box;box-sizing:border-box}';var VerdocsViewEnvelopeDocument=function(){function VerdocsViewEnvelopeDocument(hostRef){_classCallCheck(this,VerdocsViewEnvelopeDocument),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.j)(this,hostRef),this.pageRendered=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageRendered",7),this.pageLoaded=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageLoaded",7),this.pageChange=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageChange",7),this.pageInit=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageInit",7),this.scaleChange=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"scaleChange",7),this.sdkError=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"sdkError",7),this.domPages={},this.sourcePageMetrics={},this.endpoint=_VerdocsEndpoint_82f4600d_js__WEBPACK_IMPORTED_MODULE_32__.a.getDefault(),this.envelopeId="",this.documentId="",this.rotation=0,this.pageLayers=[{name:"page",type:"canvas"},{name:"controls",type:"div"}],this.envelopeDocument=null}var _handlePageRendered,_renderPage,_componentDidLoad2;return _createClass(VerdocsViewEnvelopeDocument,[{key:"componentWillLoad",value:function componentWillLoad(){this.endpoint.loadSession()}},{key:"componentDidLoad",value:(_componentDidLoad2=_asyncToGenerator(_regeneratorRuntime().mark((function _callee2(){var _a,_b,_c;return _regeneratorRuntime().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:if(this.envelopeId&&this.documentId){_context2.next=3;break}return console.log("[VIEW-ENVELOPE] Missing required envelope ID "+this.envelopeId),_context2.abrupt("return");case 3:return _context2.prev=3,console.log("[VIEW-ENVELOPE] Loading envelope "+this.envelopeId),_context2.next=7,Object(_Envelopes_df05b3c7_js__WEBPACK_IMPORTED_MODULE_29__.c)(this.endpoint,this.envelopeId,this.documentId);case 7:this.envelopeDocument=_context2.sent,this.envelopeDocument||console.error("[VIEW-ENVELOPE] Unable to load envelope document",this.envelopeId,this.documentId),console.log("[VIEW-ENVELOPE] Got envelope document",this.envelopeDocument),_context2.next=16;break;case 12:_context2.prev=12,_context2.t0=_context2.catch(3),console.log("[VIEW-ENVELOPE] Error loading envelope",_context2.t0),null===(_a=this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_33__.a(_context2.t0.message,null===(_b=_context2.t0.response)||void 0===_b?void 0:_b.status,null===(_c=_context2.t0.response)||void 0===_c?void 0:_c.data));case 16:case"end":return _context2.stop()}}),_callee2,this,[[3,12]])}))),function componentDidLoad(){return _componentDidLoad2.apply(this,arguments)})},{key:"renderPage",value:(_renderPage=_asyncToGenerator(_regeneratorRuntime().mark((function _callee3(pageNumber){var _a,_b,_c,domPage,pageMetrics;return _regeneratorRuntime().wrap((function _callee3$(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:if(domPage=this.domPages[pageNumber]){_context3.next=4;break}return console.log("[VIEW-ENVELOPE] Skipping rendering page not yet in DOM",{pageNumber:pageNumber}),_context3.abrupt("return");case 4:pageMetrics=this.sourcePageMetrics[pageNumber],console.log("[VIEW-ENVELOPE] Rendering page",{pageNumber:pageNumber,pageMetrics:pageMetrics,domPage:domPage});try{this.pageRendered.emit({renderedPage:domPage,sourcePageMetrics:pageMetrics,pages:this.domPages})}catch(e){null===(_a=this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_33__.a(e.message,null===(_b=e.response)||void 0===_b?void 0:_b.status,null===(_c=e.response)||void 0===_c?void 0:_c.data)),console.warn("[VIEW-ENVELOPE] Error rendering page",e)}case 7:case"end":return _context3.stop()}}),_callee3,this)}))),function renderPage(_x){return _renderPage.apply(this,arguments)})},{key:"handlePageRendered",value:(_handlePageRendered=_asyncToGenerator(_regeneratorRuntime().mark((function _callee4(e){var domPage;return _regeneratorRuntime().wrap((function _callee4$(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:return e.stopPropagation(),domPage=e.detail,this.domPages[domPage.pageNumber]=domPage,_context4.next=5,this.renderPage(domPage.pageNumber);case 5:case"end":return _context4.stop()}}),_callee4,this)}))),function handlePageRendered(_x2){return _handlePageRendered.apply(this,arguments)})},{key:"render",value:function render(){var _a,_b,_this2=this;console.log("[VIEW-ENVELOPE] Rendering pages",null===(_a=this.envelopeDocument)||void 0===_a?void 0:_a.pages);var pages=_toConsumableArray((null===(_b=this.envelopeDocument)||void 0===_b?void 0:_b.pages)||[]);return pages.sort((function(a,b){return a.sequence-b.sequence})),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.b,null,pages.map((function(page){return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.h)("verdocs-document-page",{pageImageUri:page.display_uri,virtualWidth:612,virtualHeight:792,pageNumber:page.sequence,layers:_this2.pageLayers,onPageRendered:function onPageRendered(p){return _this2.handlePageRendered(p)}})})))}},{key:"component",get:function get(){return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.c)(this)}}]),VerdocsViewEnvelopeDocument}();VerdocsViewEnvelopeDocument.style='verdocs-view-envelope-document{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;display:-ms-flexbox;display:flex;padding:15px;row-gap:15px;min-height:200px;position:relative;-ms-flex-align:center;align-items:center;-webkit-box-sizing:border-box;box-sizing:border-box;-ms-flex-direction:column;flex-direction:column;width:100%}verdocs-view-envelope-document div,verdocs-view-envelope-document canvas{-webkit-box-sizing:border-box;box-sizing:border-box}';var VerdocsViewTemplateDocument=function(){function VerdocsViewTemplateDocument(hostRef){_classCallCheck(this,VerdocsViewTemplateDocument),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.j)(this,hostRef),this.pageRendered=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageRendered",7),this.pageLoaded=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageLoaded",7),this.pageChange=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageChange",7),this.pageInit=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"pageInit",7),this.scaleChange=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"scaleChange",7),this.sdkError=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.e)(this,"sdkError",7),this.domPages={},this.sourcePageMetrics={},this.endpoint=_VerdocsEndpoint_82f4600d_js__WEBPACK_IMPORTED_MODULE_32__.a.getDefault(),this.templateId="",this.documentId="",this.rotation=0,this.pageLayers=[{name:"page",type:"canvas"},{name:"controls",type:"div"}],this.templateDocument=null}var _handlePageRendered2,_renderPage2,_componentDidLoad3;return _createClass(VerdocsViewTemplateDocument,[{key:"componentWillLoad",value:function componentWillLoad(){this.endpoint.loadSession()}},{key:"componentDidLoad",value:(_componentDidLoad3=_asyncToGenerator(_regeneratorRuntime().mark((function _callee5(){var _a,_b,_c;return _regeneratorRuntime().wrap((function _callee5$(_context5){for(;;)switch(_context5.prev=_context5.next){case 0:if(this.templateId&&this.documentId){_context5.next=3;break}return console.log("[VIEW-TEMPLATE] Missing required template ID "+this.templateId),_context5.abrupt("return");case 3:return _context5.prev=3,console.log("[VIEW-TEMPLATE] Loading template "+this.templateId),_context5.next=7,Object(_TemplateDocuments_89ba2276_js__WEBPACK_IMPORTED_MODULE_34__.b)(this.endpoint,this.templateId,this.documentId);case 7:this.templateDocument=_context5.sent,this.templateDocument||console.error("[VIEW-TEMPLATE] Unable to load template document",this.templateId,this.documentId),console.log("[VIEW-TEMPLATE] Got template",this.templateDocument),_context5.next=16;break;case 12:_context5.prev=12,_context5.t0=_context5.catch(3),console.log("[VIEW-TEMPLATE] Error loading template",_context5.t0),null===(_a=this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_33__.a(_context5.t0.message,null===(_b=_context5.t0.response)||void 0===_b?void 0:_b.status,null===(_c=_context5.t0.response)||void 0===_c?void 0:_c.data));case 16:case"end":return _context5.stop()}}),_callee5,this,[[3,12]])}))),function componentDidLoad(){return _componentDidLoad3.apply(this,arguments)})},{key:"renderPage",value:(_renderPage2=_asyncToGenerator(_regeneratorRuntime().mark((function _callee6(pageNumber){var _a,_b,_c,domPage,pageMetrics;return _regeneratorRuntime().wrap((function _callee6$(_context6){for(;;)switch(_context6.prev=_context6.next){case 0:if(domPage=this.domPages[pageNumber]){_context6.next=4;break}return console.log("[VIEW-TEMPLATE] Skipping rendering page not yet in DOM",{pageNumber:pageNumber}),_context6.abrupt("return");case 4:pageMetrics=this.sourcePageMetrics[pageNumber];try{this.pageRendered.emit({renderedPage:domPage,sourcePageMetrics:pageMetrics,pages:this.domPages})}catch(e){null===(_a=this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_33__.a(e.message,null===(_b=e.response)||void 0===_b?void 0:_b.status,null===(_c=e.response)||void 0===_c?void 0:_c.data)),console.warn("[VIEW-TEMPLATE] Error rendering page",e)}case 6:case"end":return _context6.stop()}}),_callee6,this)}))),function renderPage(_x3){return _renderPage2.apply(this,arguments)})},{key:"handlePageRendered",value:(_handlePageRendered2=_asyncToGenerator(_regeneratorRuntime().mark((function _callee7(e){var domPage;return _regeneratorRuntime().wrap((function _callee7$(_context7){for(;;)switch(_context7.prev=_context7.next){case 0:return e.stopPropagation(),domPage=e.detail,this.domPages[domPage.pageNumber]=domPage,_context7.next=5,this.renderPage(domPage.pageNumber);case 5:case"end":return _context7.stop()}}),_callee7,this)}))),function handlePageRendered(_x4){return _handlePageRendered2.apply(this,arguments)})},{key:"render",value:function render(){var _a,_b,_this3=this;console.log("[VIEW-TEMPLATE] Rendering pages",null===(_a=this.templateDocument)||void 0===_a?void 0:_a.pages);var pages=_toConsumableArray((null===(_b=this.templateDocument)||void 0===_b?void 0:_b.pages)||[]);return pages.sort((function(a,b){return a.sequence-b.sequence})),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.b,null,pages.map((function(page){return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.h)("verdocs-document-page",{pageImageUri:page.display_uri,virtualWidth:612,virtualHeight:792,pageNumber:page.sequence,layers:_this3.pageLayers,onPageRendered:function onPageRendered(p){return _this3.handlePageRendered(p)}})})))}},{key:"component",get:function get(){return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_28__.c)(this)}}]),VerdocsViewTemplateDocument}();VerdocsViewTemplateDocument.style='verdocs-view-template-document{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;display:-ms-flexbox;display:flex;padding:15px;row-gap:15px;min-height:200px;position:relative;-ms-flex-align:center;align-items:center;-webkit-box-sizing:border-box;box-sizing:border-box;-ms-flex-direction:column;flex-direction:column;width:100%}verdocs-view-template-document div,verdocs-view-template-document canvas{-webkit-box-sizing:border-box;box-sizing:border-box}'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,