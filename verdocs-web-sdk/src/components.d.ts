/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { VerdocsEndpoint } from "@verdocs/js-sdk";
import { SDKError } from "./utils/errors";
import { IActivityEntry, ICreateEnvelopeRole, IEnvelope, IEnvelopeSummary, TEnvelopeStatus, TRecipientStatus } from "@verdocs/js-sdk/Envelopes/Types";
import { IAuthStatus } from "./components/embeds/verdocs-auth/verdocs-auth";
import { TVerdocsBuildStep } from "./components/embeds/verdocs-build/verdocs-build";
import { IRole, ITemplate, ITemplateField, ITemplateFieldSetting, TTemplateSender } from "@verdocs/js-sdk/Templates/Types";
import { IContactSearchEvent, IContactSelectEvent, IEmailContact, IPhoneContact } from "./components/envelopes/verdocs-contact-picker/verdocs-contact-picker";
import { IMenuOption } from "./components/controls/verdocs-dropdown/verdocs-dropdown";
import { IDocumentPageInfo, IPageLayer } from "./utils/Types";
import { IOption } from "./components/controls/verdocs-floating-menu/verdocs-floating-menu";
import { IOrganization } from "@verdocs/js-sdk/Organizations/Types";
import { IFilterOption } from "./components/controls/verdocs-quick-filter/verdocs-quick-filter";
import { ISearchEvent, TContentType } from "./components/elements/verdocs-search-box/verdocs-search-box";
import { IContactSearchEvent as IContactSearchEvent1 } from "./components/envelopes/verdocs-contact-picker/verdocs-contact-picker";
import { IProfile } from "@verdocs/js-sdk/Users/Types";
import { IColumn } from "./components/controls/verdocs-table/verdocs-table";
import { ITab } from "./components/controls/verdocs-tabs/verdocs-tabs";
import { TVerdocsBuildStep as TVerdocsBuildStep1 } from "./components/templates/verdocs-template-build-tabs/verdocs-template-build-tabs";
import { IGetTemplateSummarySortBy } from "@verdocs/js-sdk/Templates/Templates";
import { TAllowedTemplateAction } from "./components/templates/verdocs-templates-list/verdocs-templates-list";
import { IToggleIconButtons } from "./components/controls/verdocs-toggle/verdocs-toggle";
import { Placement } from "@popperjs/core/lib/enums";
import { FileWithData } from "@verdocs/js-sdk/Utils/Files";
export namespace Components {
    interface IpcTest {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsActivityBox {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The title to display on the box ("title" is a reserved word). This is optional, and if not set, the title will be derived from the view. Set this to an empty string to hide the header.
         */
        "header"?: string | undefined;
        /**
          * The number of items to display.
         */
        "items": number;
        /**
          * The filtered view to display. "completed" will show envelopes that have been submitted. "action" will show envelopes where the user is a recipient and the envelope is not completed. "waiting" will show only envelopes where the user is the sender and the envelope is not completed.
         */
        "view"?: 'completed' | 'action' | 'waiting';
    }
    interface VerdocsAuth {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * By default, a Verdocs logo will be displayed above the login/signup forms. This may be used to override its source. (Alternatively, you may simply hide it via CSS overrides.) Logos should be in SVG format for best results.
         */
        "logo": string;
        /**
          * Normally, if the user has a valid session, this embed will be invisible, otherwise it will display login / signup forms. If this is set to false, this embed will be invisible in both cases. Apps may use this to verify if a user has a valid session without needing a separate call to Verdocs JS SDK.
         */
        "visible": boolean;
    }
    interface VerdocsBuild {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The step in the creation process to display.
         */
        "step": TVerdocsBuildStep;
        /**
          * The ID of the template to create the document from. Unlike most other components, this is an optional parameter here. If the template ID is known, `step` may also be specified to force displaying a specific step in the creation process. If it is not specified, `step` will be ignored and the create step will be shown.
         */
        "templateId": string | null;
    }
    interface VerdocsButton {
        /**
          * Whether the button should be disabled.
         */
        "disabled": boolean;
        /**
          * If desired, a suffix icon for the button.
         */
        "endIcon": string | null;
        /**
          * The label for the button.
         */
        "label": string;
        /**
          * The size (height) of the button.
         */
        "size": 'small' | 'normal' | 'medium' | 'large';
        /**
          * If desired, a prefix icon for the button.
         */
        "startIcon": string | null;
        /**
          * The type of the button.
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * The display variant of the button.
         */
        "variant": 'standard' | 'text' | 'outline';
    }
    interface VerdocsButtonPanel {
        "hidePanel": () => Promise<void>;
        /**
          * SVG icon to display
         */
        "icon": string;
        "showPanel": () => Promise<void>;
        "toggle": () => Promise<void>;
    }
    interface VerdocsCheckbox {
        /**
          * Whether the radio button is currently selected.
         */
        "checked": boolean;
        /**
          * If set, the button will still be displayed but not selectable.
         */
        "disabled"?: boolean;
        /**
          * Label to display. Leave blank for no label. The label will be displayed to the right of the checkbox, but may be repositioned with CSS.
         */
        "label": string;
        /**
          * HTML form field name for the input.
         */
        "name": string;
        /**
          * Style of checkbox to render. Use 'dark' when rendering on a dark background.
         */
        "theme": 'light' | 'dark';
        /**
          * Value to track with the input. Value is not used internally by this component but is sometimes useful to set because it can be retrieved in event handlers via e.target.value. This can be used to identify which checkbox was clicked in a checkbox group.
         */
        "value": string;
    }
    interface VerdocsComponentError {
        /**
          * The message to display.
         */
        "message": string;
    }
    interface VerdocsContactPicker {
        /**
          * If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number of suggestions be limited to the 5 best matching records.
         */
        "contactSuggestions": (IEmailContact | IPhoneContact)[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The role that this contact will be assigned to.
         */
        "templateRole": IRole | null;
    }
    interface VerdocsDialog {
    }
    interface VerdocsDropdown {
        /**
          * The menu options to display.
         */
        "options": IMenuOption[];
    }
    interface VerdocsEnvelopeDocumentPage {
        /**
          * The ID of the document to display.
         */
        "documentId": string;
        /**
          * The endpoint to load from.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The ID of the envelope the document is for.
         */
        "envelopeId": string;
        /**
          * The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer. The parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g. if `pages` was ['page', 'fields'] the structure will be:  ```     <div id="verdocs-envelope-document-page-ker2fr1p9">       <div id="verdocs-envelope-document-page-ker2fr1p9-page"></div>       <div id="verdocs-envelope-document-page-ker2fr1p9-fields"></div>     </div> ```
         */
        "layers": IPageLayer[];
        /**
          * The page number being rendered. (Reminder: page numbers are 1-based.)
         */
        "pageNumber": number;
        "type": 'original' | 'filled' | 'certificate';
        /**
          * The "virtual" height of the page canvas.  Defaults to 792 which at 72dpi is 11" tall. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualHeight": number;
        /**
          * The "virtual" width of the page canvas. Defaults to 612 which at 72dpi is 8.5" wide. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualWidth": number;
    }
    interface VerdocsEnvelopeRecipientLink {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The envelope ID to edit.
         */
        "envelopeId": string;
        /**
          * The role to load.
         */
        "roleName": string;
    }
    interface VerdocsEnvelopeRecipientSummary {
        /**
          * Enable or disable the Done button.
         */
        "canDone": boolean;
        /**
          * Enable or disable the Send Another button.
         */
        "canSendAnother": boolean;
        /**
          * Enable or disable the View button.
         */
        "canView": boolean;
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The envelope ID to edit.
         */
        "envelopeId": string;
    }
    interface VerdocsEnvelopeSidebar {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The envelope ID to render. Set ONE OF templateId or envelopeId. If both are set, envelopeId will be ignored.
         */
        "envelopeId": string;
    }
    interface VerdocsEnvelopesList {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * If set, filter envelopes by the specified string.
         */
        "match": string;
        /**
          * The number of rows to display per page.
         */
        "rowsPerPage": number;
        /**
          * The initial page number to select. Pagination is internally controlled but may be overriden by the host applicaiton.
         */
        "selectedPage": number;
        /**
          * Whether or not pagination should be enabled.
         */
        "showPagination": boolean;
        /**
          * The sort field to use
         */
        "sort": 'name' | 'created_at' | 'updated_at' | 'canceled_at' | 'status';
        /**
          * The status value to filter by
         */
        "status": TEnvelopeStatus | 'all';
        /**
          * The filtered view to display. "completed" will show envelopes that have been submitted. "action" will show envelopes where the user is a recipient and the envelope is not completed. "waiting" will show only envelopes where the user is the sender and the envelope is not completed.
         */
        "view"?: 'all' | 'inbox' | 'sent' | 'completed' | 'action' | 'waiting';
    }
    interface VerdocsFieldAttachment {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        "showSettingsPanel": () => Promise<void>;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldCheckbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option": number;
        "showSettingsPanel": () => Promise<void>;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldDate {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        "showSettingsPanel": () => Promise<void>;
        /**
          * The template the field is for/from. Only required for the field builder, passed down to the properties component.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldDropdown {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        "showSettingsPanel": () => Promise<void>;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldInitial {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * The document or template field to display.
         */
        "initials": string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        "showSettingsPanel": () => Promise<void>;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldPayment {
        "currentInitial": string;
        "currentInitialId": string;
        "currentSignature": string;
        "currentSignatureId": string;
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        "fieldId": string;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "fields": any[];
        "focused": boolean;
        "hideSettingsPanel": () => Promise<void>;
        "pageNum": number;
        "pdfPages": any[];
        "recipients": any;
        "roleName": string;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "selectedRoleName": string;
        "showSettingsPanel": () => Promise<void>;
        "signed": boolean;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldRadioButton {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option": number;
        "showSettingsPanel": () => Promise<void>;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldSignature {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * If set, the signature creation dialog will be initialized with this text.
         */
        "name"?: string;
        "showSettingsPanel": () => Promise<void>;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldTextarea {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used. This component self-manages its resize (width) behavior when in edit-template mode, and uses this endpoint to save changes.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        "showSettingsPanel": () => Promise<void>;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldTextbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used. This component self-manages its resize (width) behavior when in edit-template mode, and uses this endpoint to save changes.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        "showSettingsPanel": () => Promise<void>;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldTimestamp {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname": string;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        "showSettingsPanel": () => Promise<void>;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid": string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFileChooser {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsFloatingMenu {
        /**
          * The role that this contact will be assigned to.
         */
        "options": IOption[];
    }
    interface VerdocsHelpIcon {
        /**
          * Optional icon to display. If not supplied, a standard help icon will be shown.
         */
        "icon": string;
        /**
          * Help text to display on hover/focus
         */
        "text": string;
    }
    interface VerdocsInitialDialog {
        /**
          * Initial signature text
         */
        "initials": string;
    }
    interface VerdocsKbaDialog {
        /**
          * For choice challenges, a set of choices to choose from. 6 choices is recommended to fit most screen sizes.
         */
        "choices": string[];
        /**
          * If set, a help/instructions box will be displayed with this text
         */
        "helptext": string;
        /**
          * If set, a help/instructions box will be displayed with this title
         */
        "helptitle": string;
        /**
          * For text input challenges, the label to display next to the input field.
         */
        "label": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "mode": 'text' | 'choice';
        /**
          * For text input challenges, the placeholder to display inside the input field.
         */
        "placeholder": string;
        /**
          * Which step this confirmation is for, in a multi-step process. Ignored if `steps` is < 2.
         */
        "step": number;
        /**
          * How many steps exist in a multi-step process. Set to 1 for a single-step process (hides the indicator).
         */
        "steps": number;
    }
    interface VerdocsLoader {
    }
    interface VerdocsOkDialog {
        /**
          * Override the "OK" button's label
         */
        "buttonLabel": string;
        /**
          * The title of the dialog. "title" is a reserved word, so we use heading.
         */
        "heading": string;
        /**
          * The message content to display.
         */
        "message": string;
        /**
          * If set, a cancel button will also be displayed. Note that the dialog is always cancelable by clicking the background overlay to dismiss it.
         */
        "showCancel": boolean;
    }
    interface VerdocsOrganizationCard {
        /**
          * The organization to display
         */
        "organization": IOrganization;
    }
    interface VerdocsPagination {
        /**
          * The total number of items.
         */
        "itemCount": number;
        /**
          * The number of displayed per page.
         */
        "perPage": number;
        /**
          * The currently selected page.
         */
        "selectedPage": number;
    }
    interface VerdocsPortal {
        /**
          * Horizontal alignment.
         */
        "align": 'left' | 'center' | 'right';
        /**
          * Unique ID of the parent element to anchor to.
         */
        "anchor": string;
        /**
          * Vertical offset from the parent.
         */
        "voffset": number;
    }
    interface VerdocsPreview {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
    }
    interface VerdocsProgressBar {
        /**
          * Optional label to display above the bar
         */
        "label": string;
        /**
          * The current progress value (0-100)
         */
        "percent": number;
        /**
          * If true, the progress percentage will be displayed above the bar.
         */
        "showPercent": boolean;
    }
    interface VerdocsQuickFilter {
        "label": string;
        /**
          * The menu options to display.
         */
        "options": IFilterOption[];
        "placeholder": string;
        "value": string;
    }
    interface VerdocsQuickFunctions {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsRadioButton {
        /**
          * Whether the radio button is currently selected.
         */
        "checked": boolean;
        /**
          * If set, the button will still be displayed but not selectable.
         */
        "disabled"?: boolean;
        /**
          * HTML form field name for the input.
         */
        "name": string;
        /**
          * Value to track with the input.
         */
        "value": string;
    }
    interface VerdocsSearch {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsSearchBox {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        "focusField": () => Promise<void>;
        /**
          * If set, the input field will attempt to "grab" focus after being rendered.
         */
        "grabsFocus": boolean;
        /**
          * The placeholder to display in the input field.
         */
        "placeholder": string;
        /**
          * The text search string entered by the user.
         */
        "query": string;
        /**
          * If set to a value other than 'all', a removeable filter indicator will be displayed.
         */
        "type": TContentType;
    }
    interface VerdocsSearchTabs {
    }
    interface VerdocsSelectInput {
        /**
          * Should the field be disabled?
         */
        "disabled": boolean;
        /**
          * The label for the field.
         */
        "label": string;
        /**
          * The options to list.
         */
        "options": {label: string; value: string}[];
        /**
          * The initial value for the input field.
         */
        "value": string;
    }
    interface VerdocsSend {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The environment the control is being called from, e.g. 'web'. This has an impact on how certain operations such as email communications are handled to ensure users receive the correct URLs for their invitations. Setting this to unknown values may produce unexpected/incorrect behaviors. If environment is not known, do this set this property.
         */
        "environment": string;
        "reset": () => Promise<void>;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
    }
    interface VerdocsSettings {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsSettingsApiKeys {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsSettingsMembers {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsSettingsOrganization {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsSettingsProfile {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsSign {
        /**
          * The ID of the envelope to sign.
         */
        "envelopeId": string | null;
        /**
          * If set, (recommended), the host application should create a <DIV> element with a unique ID. When this component renders, the header will be removed from its default location and placed in the target element. This allows the parent application to more easily control its placement and scroll effects (e.g. "fixed").  The movement of the header to the target container is not dynamic - it is performed only on the initial render. Host applications should not conditionally render this container. If the header's visibility must be externally controlled, use CSS display options to hide/show it instead.
         */
        "headerTargetId": string | null;
        /**
          * The invite code for the signer.
         */
        "inviteCode": string | null;
        /**
          * The ID of the role that will be signing e.g. 'Recipient 1'
         */
        "roleId": string | null;
    }
    interface VerdocsSignatureDialog {
        /**
          * Initial signature text
         */
        "name": string;
    }
    interface VerdocsSpinner {
        "mode": 'light' | 'dark';
        "size": number;
    }
    interface VerdocsStatusIndicator {
        /**
          * The document to display status for. Ignored if `status` is set directly.
         */
        "envelope"?: IEnvelope | IEnvelopeSummary;
        /**
          * The size (height) of the indicator. The small variant is suitable for use in densely populated components such as table rows.
         */
        "size": 'small' | 'normal';
        /**
          * The status to display.
         */
        "status"?: TEnvelopeStatus | TRecipientStatus | 'accepted';
        /**
          * The theme to use for diplay.
         */
        "theme"?: 'dark' | 'light';
    }
    interface VerdocsTable {
        /**
          * The columns to display
         */
        "columns": IColumn[];
        /**
          * The rows to display
         */
        "data": any[];
    }
    interface VerdocsTabs {
        /**
          * The index of the tab to show selected.
         */
        "selectedTab": number;
        /**
          * The tabs to display
         */
        "tabs": ITab[];
    }
    interface VerdocsTemplateAttachments {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateBuildTabs {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The step in the creation process to display.
         */
        "step": TVerdocsBuildStep;
        /**
          * The ID of the template to create the document from. Unlike most other components, this is an optional parameter here. If the template ID is known, `step` may also be specified to force displaying a specific step in the creation process. If it is not specified, `step` will be ignored and the create step will be shown.
         */
        "templateId": string | null;
    }
    interface VerdocsTemplateCard {
        /**
          * The template for which the card will be rendered.
         */
        "template": ITemplate;
    }
    interface VerdocsTemplateCreate {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsTemplateDocumentPage {
        /**
          * The ID of the document to display.
         */
        "documentId": string;
        /**
          * The endpoint to load from.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer. The parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g. if `pages` was ['page', 'fields'] the structure will be:  ```     <div id="verdocs-document-page-ker2fr1p9">       <div id="verdocs-document-page-ker2fr1p9-page"></div>       <div id="verdocs-document-page-ker2fr1p9-fields"></div>     </div> ```
         */
        "layers": IPageLayer[];
        /**
          * The page number being rendered. (Reminder: page numbers are 1-based.)
         */
        "pageNumber": number;
        /**
          * The ID of the template the document is for.
         */
        "templateId": string;
        /**
          * The "virtual" height of the page canvas.  Defaults to 792 which at 72dpi is 11" tall. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualHeight": number;
        /**
          * The "virtual" width of the page canvas. Defaults to 612 which at 72dpi is 8.5" wide. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualWidth": number;
    }
    interface VerdocsTemplateFieldProperties {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The field to configure.
         */
        "fieldName": string;
        /**
          * If specified, the properties card will have a "back" side with the help text as its content.
         */
        "helpText"?: string;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateFields {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
        /**
          * If set, (recommended), the host application should create a <DIV> element with a unique ID. When this component renders, the toolbar will be removed from its default location and placed in the target element. This allows the parent application to more easily control its placement and scroll effects.  The movement of the toolbar to the target container is not dynamic - it is performed only on the initial render. Host applications should not conditionally render this container. If the toolbar's visibility must be externally controlled, use CSS display options to hide/show it instead.
         */
        "toolbarTargetId": string | null;
    }
    interface VerdocsTemplateName {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateReminders {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateRoleProperties {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The role name to edit.
         */
        "roleName": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "sender": TTemplateSender;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateRoles {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateSender {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "sender": TTemplateSender;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateStar {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template to display the star for.
         */
        "template": ITemplate;
    }
    interface VerdocsTemplateTags {
        /**
          * The tags to display
         */
        "tags": any[];
    }
    interface VerdocsTemplateVisibility {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplatesList {
        /**
          * Override the If set, filter templates by the specified name.
         */
        "allowedActions": TAllowedTemplateAction[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * If set, filter templates by the specified name.
         */
        "name": string;
        /**
          * The number of rows to display per page.
         */
        "rowsPerPage": number;
        /**
          * The initial page number to select. Pagination is internally controlled but may be overriden by the host applicaiton.
         */
        "selectedPage": number;
        /**
          * The sharing settings to filter by.
         */
        "sharing"?: 'all' | 'personal' | 'shared' | 'public';
        /**
          * Whether or not pagination should be enabled.
         */
        "showPagination": boolean;
        /**
          * The sort order to display.
         */
        "sort": IGetTemplateSummarySortBy;
        /**
          * The starred settings to filter by.
         */
        "starred": 'all' | 'starred' | 'unstarred';
    }
    interface VerdocsTextInput {
        /**
          * If desired, the autocomplete attribute to set.
         */
        "autocomplete": string;
        /**
          * If set, a clear button will be displayed.
         */
        "clearable": boolean;
        /**
          * If set, a copy-to-clipboard button will be displayed. NOTE: A field may not be both clearable and copyable. If both properties are set to true, copyable will be ignored.
         */
        "copyable": boolean;
        /**
          * Should the field be disabled?
         */
        "disabled": boolean;
        /**
          * If supplied, a help icon will be displayed to provide the user more information.
         */
        "helpText": string;
        /**
          * The label for the field.
         */
        "label": string;
        /**
          * The placeholder for the field.
         */
        "placeholder": string;
        /**
          * Should the field be required?
         */
        "required": boolean;
        /**
          * The type of field to render. Only text-type fields are allowed here for the current styling. Additional types (e.g. a date picker) will be supported by other controls in the future.
         */
        "type": 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url';
        /**
          * The initial value for the input field.
         */
        "value": string;
    }
    interface VerdocsToggle {
        /**
          * The tags to display
         */
        "options": IToggleIconButtons;
        /**
          * The "theme" to be used
         */
        "theme": 'light' | 'dark';
    }
    interface VerdocsToggleButton {
        "active": boolean;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "icon"?: string | null;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "label"?: string | null;
        /**
          * How large the button should be. Small buttons are intended for dialog boxes and other smaller scale UI regions.
         */
        "size"?: 'small' | 'normal';
    }
    interface VerdocsToolbarIcon {
        /**
          * SVG icon to display
         */
        "icon": string;
        /**
          * Override the Popper "placement" setting
         */
        "placement": Placement;
        /**
          * Help text to display on hover/focus
         */
        "text": string;
    }
    interface VerdocsUploadDialog {
    }
    interface VerdocsView {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The envelope ID to render. Set ONE OF templateId or envelopeId. If both are set, envelopeId will be ignored.
         */
        "envelopeId": string;
        /**
          * If set, (recommended), the host application should create a <DIV> element with a unique ID. When this component renders, the header will be removed from its default location and placed in the target element. This allows the parent application to more easily control its placement and scroll effects (e.g. "fixed").  The movement of the header to the target container is not dynamic - it is performed only on the initial render. Host applications should not conditionally render this container. If the header's visibility must be externally controlled, use CSS display options to hide/show it instead.
         */
        "headerTargetId": string | null;
    }
}
export interface VerdocsActivityBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsActivityBoxElement;
}
export interface VerdocsAuthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsAuthElement;
}
export interface VerdocsBuildCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsBuildElement;
}
export interface VerdocsContactPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsContactPickerElement;
}
export interface VerdocsDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsDialogElement;
}
export interface VerdocsDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsDropdownElement;
}
export interface VerdocsEnvelopeDocumentPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsEnvelopeDocumentPageElement;
}
export interface VerdocsEnvelopeRecipientLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsEnvelopeRecipientLinkElement;
}
export interface VerdocsEnvelopeRecipientSummaryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsEnvelopeRecipientSummaryElement;
}
export interface VerdocsEnvelopeSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsEnvelopeSidebarElement;
}
export interface VerdocsEnvelopesListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsEnvelopesListElement;
}
export interface VerdocsFieldAttachmentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldAttachmentElement;
}
export interface VerdocsFieldCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldCheckboxElement;
}
export interface VerdocsFieldDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldDateElement;
}
export interface VerdocsFieldDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldDropdownElement;
}
export interface VerdocsFieldInitialCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldInitialElement;
}
export interface VerdocsFieldPaymentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldPaymentElement;
}
export interface VerdocsFieldRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldRadioButtonElement;
}
export interface VerdocsFieldSignatureCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldSignatureElement;
}
export interface VerdocsFieldTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldTextareaElement;
}
export interface VerdocsFieldTextboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldTextboxElement;
}
export interface VerdocsFieldTimestampCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldTimestampElement;
}
export interface VerdocsFileChooserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFileChooserElement;
}
export interface VerdocsFloatingMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFloatingMenuElement;
}
export interface VerdocsInitialDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsInitialDialogElement;
}
export interface VerdocsKbaDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsKbaDialogElement;
}
export interface VerdocsOkDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsOkDialogElement;
}
export interface VerdocsPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsPaginationElement;
}
export interface VerdocsPortalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsPortalElement;
}
export interface VerdocsPreviewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsPreviewElement;
}
export interface VerdocsQuickFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsQuickFilterElement;
}
export interface VerdocsQuickFunctionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsQuickFunctionsElement;
}
export interface VerdocsSearchBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSearchBoxElement;
}
export interface VerdocsSendCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSendElement;
}
export interface VerdocsSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSettingsElement;
}
export interface VerdocsSettingsApiKeysCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSettingsApiKeysElement;
}
export interface VerdocsSettingsMembersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSettingsMembersElement;
}
export interface VerdocsSettingsOrganizationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSettingsOrganizationElement;
}
export interface VerdocsSettingsProfileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSettingsProfileElement;
}
export interface VerdocsSignCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSignElement;
}
export interface VerdocsSignatureDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSignatureDialogElement;
}
export interface VerdocsTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTableElement;
}
export interface VerdocsTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTabsElement;
}
export interface VerdocsTemplateAttachmentsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateAttachmentsElement;
}
export interface VerdocsTemplateBuildTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateBuildTabsElement;
}
export interface VerdocsTemplateCreateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateCreateElement;
}
export interface VerdocsTemplateDocumentPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateDocumentPageElement;
}
export interface VerdocsTemplateFieldPropertiesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateFieldPropertiesElement;
}
export interface VerdocsTemplateFieldsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateFieldsElement;
}
export interface VerdocsTemplateNameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateNameElement;
}
export interface VerdocsTemplateRemindersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateRemindersElement;
}
export interface VerdocsTemplateRolePropertiesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateRolePropertiesElement;
}
export interface VerdocsTemplateRolesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateRolesElement;
}
export interface VerdocsTemplateSenderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateSenderElement;
}
export interface VerdocsTemplateStarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateStarElement;
}
export interface VerdocsTemplateVisibilityCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateVisibilityElement;
}
export interface VerdocsTemplatesListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplatesListElement;
}
export interface VerdocsToggleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsToggleButtonElement;
}
export interface VerdocsUploadDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsUploadDialogElement;
}
export interface VerdocsViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsViewElement;
}
declare global {
    interface HTMLIpcTestElement extends Components.IpcTest, HTMLStencilElement {
    }
    var HTMLIpcTestElement: {
        prototype: HTMLIpcTestElement;
        new (): HTMLIpcTestElement;
    };
    interface HTMLVerdocsActivityBoxElement extends Components.VerdocsActivityBox, HTMLStencilElement {
    }
    var HTMLVerdocsActivityBoxElement: {
        prototype: HTMLVerdocsActivityBoxElement;
        new (): HTMLVerdocsActivityBoxElement;
    };
    interface HTMLVerdocsAuthElement extends Components.VerdocsAuth, HTMLStencilElement {
    }
    var HTMLVerdocsAuthElement: {
        prototype: HTMLVerdocsAuthElement;
        new (): HTMLVerdocsAuthElement;
    };
    interface HTMLVerdocsBuildElement extends Components.VerdocsBuild, HTMLStencilElement {
    }
    var HTMLVerdocsBuildElement: {
        prototype: HTMLVerdocsBuildElement;
        new (): HTMLVerdocsBuildElement;
    };
    interface HTMLVerdocsButtonElement extends Components.VerdocsButton, HTMLStencilElement {
    }
    var HTMLVerdocsButtonElement: {
        prototype: HTMLVerdocsButtonElement;
        new (): HTMLVerdocsButtonElement;
    };
    interface HTMLVerdocsButtonPanelElement extends Components.VerdocsButtonPanel, HTMLStencilElement {
    }
    var HTMLVerdocsButtonPanelElement: {
        prototype: HTMLVerdocsButtonPanelElement;
        new (): HTMLVerdocsButtonPanelElement;
    };
    interface HTMLVerdocsCheckboxElement extends Components.VerdocsCheckbox, HTMLStencilElement {
    }
    var HTMLVerdocsCheckboxElement: {
        prototype: HTMLVerdocsCheckboxElement;
        new (): HTMLVerdocsCheckboxElement;
    };
    interface HTMLVerdocsComponentErrorElement extends Components.VerdocsComponentError, HTMLStencilElement {
    }
    var HTMLVerdocsComponentErrorElement: {
        prototype: HTMLVerdocsComponentErrorElement;
        new (): HTMLVerdocsComponentErrorElement;
    };
    interface HTMLVerdocsContactPickerElement extends Components.VerdocsContactPicker, HTMLStencilElement {
    }
    var HTMLVerdocsContactPickerElement: {
        prototype: HTMLVerdocsContactPickerElement;
        new (): HTMLVerdocsContactPickerElement;
    };
    interface HTMLVerdocsDialogElement extends Components.VerdocsDialog, HTMLStencilElement {
    }
    var HTMLVerdocsDialogElement: {
        prototype: HTMLVerdocsDialogElement;
        new (): HTMLVerdocsDialogElement;
    };
    interface HTMLVerdocsDropdownElement extends Components.VerdocsDropdown, HTMLStencilElement {
    }
    var HTMLVerdocsDropdownElement: {
        prototype: HTMLVerdocsDropdownElement;
        new (): HTMLVerdocsDropdownElement;
    };
    interface HTMLVerdocsEnvelopeDocumentPageElement extends Components.VerdocsEnvelopeDocumentPage, HTMLStencilElement {
    }
    var HTMLVerdocsEnvelopeDocumentPageElement: {
        prototype: HTMLVerdocsEnvelopeDocumentPageElement;
        new (): HTMLVerdocsEnvelopeDocumentPageElement;
    };
    interface HTMLVerdocsEnvelopeRecipientLinkElement extends Components.VerdocsEnvelopeRecipientLink, HTMLStencilElement {
    }
    var HTMLVerdocsEnvelopeRecipientLinkElement: {
        prototype: HTMLVerdocsEnvelopeRecipientLinkElement;
        new (): HTMLVerdocsEnvelopeRecipientLinkElement;
    };
    interface HTMLVerdocsEnvelopeRecipientSummaryElement extends Components.VerdocsEnvelopeRecipientSummary, HTMLStencilElement {
    }
    var HTMLVerdocsEnvelopeRecipientSummaryElement: {
        prototype: HTMLVerdocsEnvelopeRecipientSummaryElement;
        new (): HTMLVerdocsEnvelopeRecipientSummaryElement;
    };
    interface HTMLVerdocsEnvelopeSidebarElement extends Components.VerdocsEnvelopeSidebar, HTMLStencilElement {
    }
    var HTMLVerdocsEnvelopeSidebarElement: {
        prototype: HTMLVerdocsEnvelopeSidebarElement;
        new (): HTMLVerdocsEnvelopeSidebarElement;
    };
    interface HTMLVerdocsEnvelopesListElement extends Components.VerdocsEnvelopesList, HTMLStencilElement {
    }
    var HTMLVerdocsEnvelopesListElement: {
        prototype: HTMLVerdocsEnvelopesListElement;
        new (): HTMLVerdocsEnvelopesListElement;
    };
    interface HTMLVerdocsFieldAttachmentElement extends Components.VerdocsFieldAttachment, HTMLStencilElement {
    }
    var HTMLVerdocsFieldAttachmentElement: {
        prototype: HTMLVerdocsFieldAttachmentElement;
        new (): HTMLVerdocsFieldAttachmentElement;
    };
    interface HTMLVerdocsFieldCheckboxElement extends Components.VerdocsFieldCheckbox, HTMLStencilElement {
    }
    var HTMLVerdocsFieldCheckboxElement: {
        prototype: HTMLVerdocsFieldCheckboxElement;
        new (): HTMLVerdocsFieldCheckboxElement;
    };
    interface HTMLVerdocsFieldDateElement extends Components.VerdocsFieldDate, HTMLStencilElement {
    }
    var HTMLVerdocsFieldDateElement: {
        prototype: HTMLVerdocsFieldDateElement;
        new (): HTMLVerdocsFieldDateElement;
    };
    interface HTMLVerdocsFieldDropdownElement extends Components.VerdocsFieldDropdown, HTMLStencilElement {
    }
    var HTMLVerdocsFieldDropdownElement: {
        prototype: HTMLVerdocsFieldDropdownElement;
        new (): HTMLVerdocsFieldDropdownElement;
    };
    interface HTMLVerdocsFieldInitialElement extends Components.VerdocsFieldInitial, HTMLStencilElement {
    }
    var HTMLVerdocsFieldInitialElement: {
        prototype: HTMLVerdocsFieldInitialElement;
        new (): HTMLVerdocsFieldInitialElement;
    };
    interface HTMLVerdocsFieldPaymentElement extends Components.VerdocsFieldPayment, HTMLStencilElement {
    }
    var HTMLVerdocsFieldPaymentElement: {
        prototype: HTMLVerdocsFieldPaymentElement;
        new (): HTMLVerdocsFieldPaymentElement;
    };
    interface HTMLVerdocsFieldRadioButtonElement extends Components.VerdocsFieldRadioButton, HTMLStencilElement {
    }
    var HTMLVerdocsFieldRadioButtonElement: {
        prototype: HTMLVerdocsFieldRadioButtonElement;
        new (): HTMLVerdocsFieldRadioButtonElement;
    };
    interface HTMLVerdocsFieldSignatureElement extends Components.VerdocsFieldSignature, HTMLStencilElement {
    }
    var HTMLVerdocsFieldSignatureElement: {
        prototype: HTMLVerdocsFieldSignatureElement;
        new (): HTMLVerdocsFieldSignatureElement;
    };
    interface HTMLVerdocsFieldTextareaElement extends Components.VerdocsFieldTextarea, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTextareaElement: {
        prototype: HTMLVerdocsFieldTextareaElement;
        new (): HTMLVerdocsFieldTextareaElement;
    };
    interface HTMLVerdocsFieldTextboxElement extends Components.VerdocsFieldTextbox, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTextboxElement: {
        prototype: HTMLVerdocsFieldTextboxElement;
        new (): HTMLVerdocsFieldTextboxElement;
    };
    interface HTMLVerdocsFieldTimestampElement extends Components.VerdocsFieldTimestamp, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTimestampElement: {
        prototype: HTMLVerdocsFieldTimestampElement;
        new (): HTMLVerdocsFieldTimestampElement;
    };
    interface HTMLVerdocsFileChooserElement extends Components.VerdocsFileChooser, HTMLStencilElement {
    }
    var HTMLVerdocsFileChooserElement: {
        prototype: HTMLVerdocsFileChooserElement;
        new (): HTMLVerdocsFileChooserElement;
    };
    interface HTMLVerdocsFloatingMenuElement extends Components.VerdocsFloatingMenu, HTMLStencilElement {
    }
    var HTMLVerdocsFloatingMenuElement: {
        prototype: HTMLVerdocsFloatingMenuElement;
        new (): HTMLVerdocsFloatingMenuElement;
    };
    interface HTMLVerdocsHelpIconElement extends Components.VerdocsHelpIcon, HTMLStencilElement {
    }
    var HTMLVerdocsHelpIconElement: {
        prototype: HTMLVerdocsHelpIconElement;
        new (): HTMLVerdocsHelpIconElement;
    };
    interface HTMLVerdocsInitialDialogElement extends Components.VerdocsInitialDialog, HTMLStencilElement {
    }
    var HTMLVerdocsInitialDialogElement: {
        prototype: HTMLVerdocsInitialDialogElement;
        new (): HTMLVerdocsInitialDialogElement;
    };
    interface HTMLVerdocsKbaDialogElement extends Components.VerdocsKbaDialog, HTMLStencilElement {
    }
    var HTMLVerdocsKbaDialogElement: {
        prototype: HTMLVerdocsKbaDialogElement;
        new (): HTMLVerdocsKbaDialogElement;
    };
    interface HTMLVerdocsLoaderElement extends Components.VerdocsLoader, HTMLStencilElement {
    }
    var HTMLVerdocsLoaderElement: {
        prototype: HTMLVerdocsLoaderElement;
        new (): HTMLVerdocsLoaderElement;
    };
    interface HTMLVerdocsOkDialogElement extends Components.VerdocsOkDialog, HTMLStencilElement {
    }
    var HTMLVerdocsOkDialogElement: {
        prototype: HTMLVerdocsOkDialogElement;
        new (): HTMLVerdocsOkDialogElement;
    };
    interface HTMLVerdocsOrganizationCardElement extends Components.VerdocsOrganizationCard, HTMLStencilElement {
    }
    var HTMLVerdocsOrganizationCardElement: {
        prototype: HTMLVerdocsOrganizationCardElement;
        new (): HTMLVerdocsOrganizationCardElement;
    };
    interface HTMLVerdocsPaginationElement extends Components.VerdocsPagination, HTMLStencilElement {
    }
    var HTMLVerdocsPaginationElement: {
        prototype: HTMLVerdocsPaginationElement;
        new (): HTMLVerdocsPaginationElement;
    };
    interface HTMLVerdocsPortalElement extends Components.VerdocsPortal, HTMLStencilElement {
    }
    var HTMLVerdocsPortalElement: {
        prototype: HTMLVerdocsPortalElement;
        new (): HTMLVerdocsPortalElement;
    };
    interface HTMLVerdocsPreviewElement extends Components.VerdocsPreview, HTMLStencilElement {
    }
    var HTMLVerdocsPreviewElement: {
        prototype: HTMLVerdocsPreviewElement;
        new (): HTMLVerdocsPreviewElement;
    };
    interface HTMLVerdocsProgressBarElement extends Components.VerdocsProgressBar, HTMLStencilElement {
    }
    var HTMLVerdocsProgressBarElement: {
        prototype: HTMLVerdocsProgressBarElement;
        new (): HTMLVerdocsProgressBarElement;
    };
    interface HTMLVerdocsQuickFilterElement extends Components.VerdocsQuickFilter, HTMLStencilElement {
    }
    var HTMLVerdocsQuickFilterElement: {
        prototype: HTMLVerdocsQuickFilterElement;
        new (): HTMLVerdocsQuickFilterElement;
    };
    interface HTMLVerdocsQuickFunctionsElement extends Components.VerdocsQuickFunctions, HTMLStencilElement {
    }
    var HTMLVerdocsQuickFunctionsElement: {
        prototype: HTMLVerdocsQuickFunctionsElement;
        new (): HTMLVerdocsQuickFunctionsElement;
    };
    interface HTMLVerdocsRadioButtonElement extends Components.VerdocsRadioButton, HTMLStencilElement {
    }
    var HTMLVerdocsRadioButtonElement: {
        prototype: HTMLVerdocsRadioButtonElement;
        new (): HTMLVerdocsRadioButtonElement;
    };
    interface HTMLVerdocsSearchElement extends Components.VerdocsSearch, HTMLStencilElement {
    }
    var HTMLVerdocsSearchElement: {
        prototype: HTMLVerdocsSearchElement;
        new (): HTMLVerdocsSearchElement;
    };
    interface HTMLVerdocsSearchBoxElement extends Components.VerdocsSearchBox, HTMLStencilElement {
    }
    var HTMLVerdocsSearchBoxElement: {
        prototype: HTMLVerdocsSearchBoxElement;
        new (): HTMLVerdocsSearchBoxElement;
    };
    interface HTMLVerdocsSearchTabsElement extends Components.VerdocsSearchTabs, HTMLStencilElement {
    }
    var HTMLVerdocsSearchTabsElement: {
        prototype: HTMLVerdocsSearchTabsElement;
        new (): HTMLVerdocsSearchTabsElement;
    };
    interface HTMLVerdocsSelectInputElement extends Components.VerdocsSelectInput, HTMLStencilElement {
    }
    var HTMLVerdocsSelectInputElement: {
        prototype: HTMLVerdocsSelectInputElement;
        new (): HTMLVerdocsSelectInputElement;
    };
    interface HTMLVerdocsSendElement extends Components.VerdocsSend, HTMLStencilElement {
    }
    var HTMLVerdocsSendElement: {
        prototype: HTMLVerdocsSendElement;
        new (): HTMLVerdocsSendElement;
    };
    interface HTMLVerdocsSettingsElement extends Components.VerdocsSettings, HTMLStencilElement {
    }
    var HTMLVerdocsSettingsElement: {
        prototype: HTMLVerdocsSettingsElement;
        new (): HTMLVerdocsSettingsElement;
    };
    interface HTMLVerdocsSettingsApiKeysElement extends Components.VerdocsSettingsApiKeys, HTMLStencilElement {
    }
    var HTMLVerdocsSettingsApiKeysElement: {
        prototype: HTMLVerdocsSettingsApiKeysElement;
        new (): HTMLVerdocsSettingsApiKeysElement;
    };
    interface HTMLVerdocsSettingsMembersElement extends Components.VerdocsSettingsMembers, HTMLStencilElement {
    }
    var HTMLVerdocsSettingsMembersElement: {
        prototype: HTMLVerdocsSettingsMembersElement;
        new (): HTMLVerdocsSettingsMembersElement;
    };
    interface HTMLVerdocsSettingsOrganizationElement extends Components.VerdocsSettingsOrganization, HTMLStencilElement {
    }
    var HTMLVerdocsSettingsOrganizationElement: {
        prototype: HTMLVerdocsSettingsOrganizationElement;
        new (): HTMLVerdocsSettingsOrganizationElement;
    };
    interface HTMLVerdocsSettingsProfileElement extends Components.VerdocsSettingsProfile, HTMLStencilElement {
    }
    var HTMLVerdocsSettingsProfileElement: {
        prototype: HTMLVerdocsSettingsProfileElement;
        new (): HTMLVerdocsSettingsProfileElement;
    };
    interface HTMLVerdocsSignElement extends Components.VerdocsSign, HTMLStencilElement {
    }
    var HTMLVerdocsSignElement: {
        prototype: HTMLVerdocsSignElement;
        new (): HTMLVerdocsSignElement;
    };
    interface HTMLVerdocsSignatureDialogElement extends Components.VerdocsSignatureDialog, HTMLStencilElement {
    }
    var HTMLVerdocsSignatureDialogElement: {
        prototype: HTMLVerdocsSignatureDialogElement;
        new (): HTMLVerdocsSignatureDialogElement;
    };
    interface HTMLVerdocsSpinnerElement extends Components.VerdocsSpinner, HTMLStencilElement {
    }
    var HTMLVerdocsSpinnerElement: {
        prototype: HTMLVerdocsSpinnerElement;
        new (): HTMLVerdocsSpinnerElement;
    };
    interface HTMLVerdocsStatusIndicatorElement extends Components.VerdocsStatusIndicator, HTMLStencilElement {
    }
    var HTMLVerdocsStatusIndicatorElement: {
        prototype: HTMLVerdocsStatusIndicatorElement;
        new (): HTMLVerdocsStatusIndicatorElement;
    };
    interface HTMLVerdocsTableElement extends Components.VerdocsTable, HTMLStencilElement {
    }
    var HTMLVerdocsTableElement: {
        prototype: HTMLVerdocsTableElement;
        new (): HTMLVerdocsTableElement;
    };
    interface HTMLVerdocsTabsElement extends Components.VerdocsTabs, HTMLStencilElement {
    }
    var HTMLVerdocsTabsElement: {
        prototype: HTMLVerdocsTabsElement;
        new (): HTMLVerdocsTabsElement;
    };
    interface HTMLVerdocsTemplateAttachmentsElement extends Components.VerdocsTemplateAttachments, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateAttachmentsElement: {
        prototype: HTMLVerdocsTemplateAttachmentsElement;
        new (): HTMLVerdocsTemplateAttachmentsElement;
    };
    interface HTMLVerdocsTemplateBuildTabsElement extends Components.VerdocsTemplateBuildTabs, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateBuildTabsElement: {
        prototype: HTMLVerdocsTemplateBuildTabsElement;
        new (): HTMLVerdocsTemplateBuildTabsElement;
    };
    interface HTMLVerdocsTemplateCardElement extends Components.VerdocsTemplateCard, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateCardElement: {
        prototype: HTMLVerdocsTemplateCardElement;
        new (): HTMLVerdocsTemplateCardElement;
    };
    interface HTMLVerdocsTemplateCreateElement extends Components.VerdocsTemplateCreate, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateCreateElement: {
        prototype: HTMLVerdocsTemplateCreateElement;
        new (): HTMLVerdocsTemplateCreateElement;
    };
    interface HTMLVerdocsTemplateDocumentPageElement extends Components.VerdocsTemplateDocumentPage, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateDocumentPageElement: {
        prototype: HTMLVerdocsTemplateDocumentPageElement;
        new (): HTMLVerdocsTemplateDocumentPageElement;
    };
    interface HTMLVerdocsTemplateFieldPropertiesElement extends Components.VerdocsTemplateFieldProperties, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateFieldPropertiesElement: {
        prototype: HTMLVerdocsTemplateFieldPropertiesElement;
        new (): HTMLVerdocsTemplateFieldPropertiesElement;
    };
    interface HTMLVerdocsTemplateFieldsElement extends Components.VerdocsTemplateFields, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateFieldsElement: {
        prototype: HTMLVerdocsTemplateFieldsElement;
        new (): HTMLVerdocsTemplateFieldsElement;
    };
    interface HTMLVerdocsTemplateNameElement extends Components.VerdocsTemplateName, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateNameElement: {
        prototype: HTMLVerdocsTemplateNameElement;
        new (): HTMLVerdocsTemplateNameElement;
    };
    interface HTMLVerdocsTemplateRemindersElement extends Components.VerdocsTemplateReminders, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateRemindersElement: {
        prototype: HTMLVerdocsTemplateRemindersElement;
        new (): HTMLVerdocsTemplateRemindersElement;
    };
    interface HTMLVerdocsTemplateRolePropertiesElement extends Components.VerdocsTemplateRoleProperties, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateRolePropertiesElement: {
        prototype: HTMLVerdocsTemplateRolePropertiesElement;
        new (): HTMLVerdocsTemplateRolePropertiesElement;
    };
    interface HTMLVerdocsTemplateRolesElement extends Components.VerdocsTemplateRoles, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateRolesElement: {
        prototype: HTMLVerdocsTemplateRolesElement;
        new (): HTMLVerdocsTemplateRolesElement;
    };
    interface HTMLVerdocsTemplateSenderElement extends Components.VerdocsTemplateSender, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateSenderElement: {
        prototype: HTMLVerdocsTemplateSenderElement;
        new (): HTMLVerdocsTemplateSenderElement;
    };
    interface HTMLVerdocsTemplateStarElement extends Components.VerdocsTemplateStar, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateStarElement: {
        prototype: HTMLVerdocsTemplateStarElement;
        new (): HTMLVerdocsTemplateStarElement;
    };
    interface HTMLVerdocsTemplateTagsElement extends Components.VerdocsTemplateTags, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateTagsElement: {
        prototype: HTMLVerdocsTemplateTagsElement;
        new (): HTMLVerdocsTemplateTagsElement;
    };
    interface HTMLVerdocsTemplateVisibilityElement extends Components.VerdocsTemplateVisibility, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateVisibilityElement: {
        prototype: HTMLVerdocsTemplateVisibilityElement;
        new (): HTMLVerdocsTemplateVisibilityElement;
    };
    interface HTMLVerdocsTemplatesListElement extends Components.VerdocsTemplatesList, HTMLStencilElement {
    }
    var HTMLVerdocsTemplatesListElement: {
        prototype: HTMLVerdocsTemplatesListElement;
        new (): HTMLVerdocsTemplatesListElement;
    };
    interface HTMLVerdocsTextInputElement extends Components.VerdocsTextInput, HTMLStencilElement {
    }
    var HTMLVerdocsTextInputElement: {
        prototype: HTMLVerdocsTextInputElement;
        new (): HTMLVerdocsTextInputElement;
    };
    interface HTMLVerdocsToggleElement extends Components.VerdocsToggle, HTMLStencilElement {
    }
    var HTMLVerdocsToggleElement: {
        prototype: HTMLVerdocsToggleElement;
        new (): HTMLVerdocsToggleElement;
    };
    interface HTMLVerdocsToggleButtonElement extends Components.VerdocsToggleButton, HTMLStencilElement {
    }
    var HTMLVerdocsToggleButtonElement: {
        prototype: HTMLVerdocsToggleButtonElement;
        new (): HTMLVerdocsToggleButtonElement;
    };
    interface HTMLVerdocsToolbarIconElement extends Components.VerdocsToolbarIcon, HTMLStencilElement {
    }
    var HTMLVerdocsToolbarIconElement: {
        prototype: HTMLVerdocsToolbarIconElement;
        new (): HTMLVerdocsToolbarIconElement;
    };
    interface HTMLVerdocsUploadDialogElement extends Components.VerdocsUploadDialog, HTMLStencilElement {
    }
    var HTMLVerdocsUploadDialogElement: {
        prototype: HTMLVerdocsUploadDialogElement;
        new (): HTMLVerdocsUploadDialogElement;
    };
    interface HTMLVerdocsViewElement extends Components.VerdocsView, HTMLStencilElement {
    }
    var HTMLVerdocsViewElement: {
        prototype: HTMLVerdocsViewElement;
        new (): HTMLVerdocsViewElement;
    };
    interface HTMLElementTagNameMap {
        "ipc-test": HTMLIpcTestElement;
        "verdocs-activity-box": HTMLVerdocsActivityBoxElement;
        "verdocs-auth": HTMLVerdocsAuthElement;
        "verdocs-build": HTMLVerdocsBuildElement;
        "verdocs-button": HTMLVerdocsButtonElement;
        "verdocs-button-panel": HTMLVerdocsButtonPanelElement;
        "verdocs-checkbox": HTMLVerdocsCheckboxElement;
        "verdocs-component-error": HTMLVerdocsComponentErrorElement;
        "verdocs-contact-picker": HTMLVerdocsContactPickerElement;
        "verdocs-dialog": HTMLVerdocsDialogElement;
        "verdocs-dropdown": HTMLVerdocsDropdownElement;
        "verdocs-envelope-document-page": HTMLVerdocsEnvelopeDocumentPageElement;
        "verdocs-envelope-recipient-link": HTMLVerdocsEnvelopeRecipientLinkElement;
        "verdocs-envelope-recipient-summary": HTMLVerdocsEnvelopeRecipientSummaryElement;
        "verdocs-envelope-sidebar": HTMLVerdocsEnvelopeSidebarElement;
        "verdocs-envelopes-list": HTMLVerdocsEnvelopesListElement;
        "verdocs-field-attachment": HTMLVerdocsFieldAttachmentElement;
        "verdocs-field-checkbox": HTMLVerdocsFieldCheckboxElement;
        "verdocs-field-date": HTMLVerdocsFieldDateElement;
        "verdocs-field-dropdown": HTMLVerdocsFieldDropdownElement;
        "verdocs-field-initial": HTMLVerdocsFieldInitialElement;
        "verdocs-field-payment": HTMLVerdocsFieldPaymentElement;
        "verdocs-field-radio-button": HTMLVerdocsFieldRadioButtonElement;
        "verdocs-field-signature": HTMLVerdocsFieldSignatureElement;
        "verdocs-field-textarea": HTMLVerdocsFieldTextareaElement;
        "verdocs-field-textbox": HTMLVerdocsFieldTextboxElement;
        "verdocs-field-timestamp": HTMLVerdocsFieldTimestampElement;
        "verdocs-file-chooser": HTMLVerdocsFileChooserElement;
        "verdocs-floating-menu": HTMLVerdocsFloatingMenuElement;
        "verdocs-help-icon": HTMLVerdocsHelpIconElement;
        "verdocs-initial-dialog": HTMLVerdocsInitialDialogElement;
        "verdocs-kba-dialog": HTMLVerdocsKbaDialogElement;
        "verdocs-loader": HTMLVerdocsLoaderElement;
        "verdocs-ok-dialog": HTMLVerdocsOkDialogElement;
        "verdocs-organization-card": HTMLVerdocsOrganizationCardElement;
        "verdocs-pagination": HTMLVerdocsPaginationElement;
        "verdocs-portal": HTMLVerdocsPortalElement;
        "verdocs-preview": HTMLVerdocsPreviewElement;
        "verdocs-progress-bar": HTMLVerdocsProgressBarElement;
        "verdocs-quick-filter": HTMLVerdocsQuickFilterElement;
        "verdocs-quick-functions": HTMLVerdocsQuickFunctionsElement;
        "verdocs-radio-button": HTMLVerdocsRadioButtonElement;
        "verdocs-search": HTMLVerdocsSearchElement;
        "verdocs-search-box": HTMLVerdocsSearchBoxElement;
        "verdocs-search-tabs": HTMLVerdocsSearchTabsElement;
        "verdocs-select-input": HTMLVerdocsSelectInputElement;
        "verdocs-send": HTMLVerdocsSendElement;
        "verdocs-settings": HTMLVerdocsSettingsElement;
        "verdocs-settings-api-keys": HTMLVerdocsSettingsApiKeysElement;
        "verdocs-settings-members": HTMLVerdocsSettingsMembersElement;
        "verdocs-settings-organization": HTMLVerdocsSettingsOrganizationElement;
        "verdocs-settings-profile": HTMLVerdocsSettingsProfileElement;
        "verdocs-sign": HTMLVerdocsSignElement;
        "verdocs-signature-dialog": HTMLVerdocsSignatureDialogElement;
        "verdocs-spinner": HTMLVerdocsSpinnerElement;
        "verdocs-status-indicator": HTMLVerdocsStatusIndicatorElement;
        "verdocs-table": HTMLVerdocsTableElement;
        "verdocs-tabs": HTMLVerdocsTabsElement;
        "verdocs-template-attachments": HTMLVerdocsTemplateAttachmentsElement;
        "verdocs-template-build-tabs": HTMLVerdocsTemplateBuildTabsElement;
        "verdocs-template-card": HTMLVerdocsTemplateCardElement;
        "verdocs-template-create": HTMLVerdocsTemplateCreateElement;
        "verdocs-template-document-page": HTMLVerdocsTemplateDocumentPageElement;
        "verdocs-template-field-properties": HTMLVerdocsTemplateFieldPropertiesElement;
        "verdocs-template-fields": HTMLVerdocsTemplateFieldsElement;
        "verdocs-template-name": HTMLVerdocsTemplateNameElement;
        "verdocs-template-reminders": HTMLVerdocsTemplateRemindersElement;
        "verdocs-template-role-properties": HTMLVerdocsTemplateRolePropertiesElement;
        "verdocs-template-roles": HTMLVerdocsTemplateRolesElement;
        "verdocs-template-sender": HTMLVerdocsTemplateSenderElement;
        "verdocs-template-star": HTMLVerdocsTemplateStarElement;
        "verdocs-template-tags": HTMLVerdocsTemplateTagsElement;
        "verdocs-template-visibility": HTMLVerdocsTemplateVisibilityElement;
        "verdocs-templates-list": HTMLVerdocsTemplatesListElement;
        "verdocs-text-input": HTMLVerdocsTextInputElement;
        "verdocs-toggle": HTMLVerdocsToggleElement;
        "verdocs-toggle-button": HTMLVerdocsToggleButtonElement;
        "verdocs-toolbar-icon": HTMLVerdocsToolbarIconElement;
        "verdocs-upload-dialog": HTMLVerdocsUploadDialogElement;
        "verdocs-view": HTMLVerdocsViewElement;
    }
}
declare namespace LocalJSX {
    interface IpcTest {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsActivityBox {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The title to display on the box ("title" is a reserved word). This is optional, and if not set, the title will be derived from the view. Set this to an empty string to hide the header.
         */
        "header"?: string | undefined;
        /**
          * The number of items to display.
         */
        "items"?: number;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsActivityBoxCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user clicks View All in the title bar. The current view will be included in the event details to help the host application navigate the user to the appropriate screen for the request. Note that the verdocs-envelopes-list control uses the same "view" parameter, so host applications can typically pass this value through directly. This button is not visible if the header is hidden.
         */
        "onViewAll"?: (event: VerdocsActivityBoxCustomEvent<{endpoint: VerdocsEndpoint; view: string}>) => void;
        /**
          * Event fired when the user clicks an activity entry. Typically the host application will use this to navigate to the envelope detail view.
         */
        "onViewEnvelope"?: (event: VerdocsActivityBoxCustomEvent<{endpoint: VerdocsEndpoint; entry: IActivityEntry}>) => void;
        /**
          * The filtered view to display. "completed" will show envelopes that have been submitted. "action" will show envelopes where the user is a recipient and the envelope is not completed. "waiting" will show only envelopes where the user is the sender and the envelope is not completed.
         */
        "view"?: 'completed' | 'action' | 'waiting';
    }
    interface VerdocsAuth {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * By default, a Verdocs logo will be displayed above the login/signup forms. This may be used to override its source. (Alternatively, you may simply hide it via CSS overrides.) Logos should be in SVG format for best results.
         */
        "logo"?: string;
        /**
          * Event fired when session authentication process has completed. Check the event contents for completion status.
         */
        "onAuthenticated"?: (event: VerdocsAuthCustomEvent<IAuthStatus>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsAuthCustomEvent<SDKError>) => void;
        /**
          * Normally, if the user has a valid session, this embed will be invisible, otherwise it will display login / signup forms. If this is set to false, this embed will be invisible in both cases. Apps may use this to verify if a user has a valid session without needing a separate call to Verdocs JS SDK.
         */
        "visible"?: boolean;
    }
    interface VerdocsBuild {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when roles are updated in the roles step.
         */
        "onRolesUpdated"?: (event: VerdocsBuildCustomEvent<{endpoint: VerdocsEndpoint; templateId: string; event: 'added' | 'deleted' | 'updated'; roles: IRole[]}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsBuildCustomEvent<SDKError>) => void;
        /**
          * The user completed the Send form and clicked send.
         */
        "onSend"?: (event: VerdocsBuildCustomEvent<{roles: ICreateEnvelopeRole[]; name: string; template_id: string}>) => void;
        /**
          * Event fired when the user selects a different step.
         */
        "onStepChanged"?: (event: VerdocsBuildCustomEvent<TVerdocsBuildStep>) => void;
        /**
          * Event fired when the template is created by the upload step.
         */
        "onTemplateCreated"?: (event: VerdocsBuildCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate; event: string}>) => void;
        /**
          * Event fired when the template is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onTemplateUpdated"?: (event: VerdocsBuildCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate; event: string}>) => void;
        /**
          * The step in the creation process to display.
         */
        "step"?: TVerdocsBuildStep;
        /**
          * The ID of the template to create the document from. Unlike most other components, this is an optional parameter here. If the template ID is known, `step` may also be specified to force displaying a specific step in the creation process. If it is not specified, `step` will be ignored and the create step will be shown.
         */
        "templateId"?: string | null;
    }
    interface VerdocsButton {
        /**
          * Whether the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * If desired, a suffix icon for the button.
         */
        "endIcon"?: string | null;
        /**
          * The label for the button.
         */
        "label": string;
        /**
          * The size (height) of the button.
         */
        "size"?: 'small' | 'normal' | 'medium' | 'large';
        /**
          * If desired, a prefix icon for the button.
         */
        "startIcon"?: string | null;
        /**
          * The type of the button.
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The display variant of the button.
         */
        "variant"?: 'standard' | 'text' | 'outline';
    }
    interface VerdocsButtonPanel {
        /**
          * SVG icon to display
         */
        "icon"?: string;
    }
    interface VerdocsCheckbox {
        /**
          * Whether the radio button is currently selected.
         */
        "checked"?: boolean;
        /**
          * If set, the button will still be displayed but not selectable.
         */
        "disabled"?: boolean;
        /**
          * Label to display. Leave blank for no label. The label will be displayed to the right of the checkbox, but may be repositioned with CSS.
         */
        "label"?: string;
        /**
          * HTML form field name for the input.
         */
        "name"?: string;
        /**
          * Style of checkbox to render. Use 'dark' when rendering on a dark background.
         */
        "theme"?: 'light' | 'dark';
        /**
          * Value to track with the input. Value is not used internally by this component but is sometimes useful to set because it can be retrieved in event handlers via e.target.value. This can be used to identify which checkbox was clicked in a checkbox group.
         */
        "value"?: string;
    }
    interface VerdocsComponentError {
        /**
          * The message to display.
         */
        "message"?: string;
    }
    interface VerdocsContactPicker {
        /**
          * If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number of suggestions be limited to the 5 best matching records.
         */
        "contactSuggestions"?: (IEmailContact | IPhoneContact)[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsContactPickerCustomEvent<any>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onNext"?: (event: VerdocsContactPickerCustomEvent<IContactSelectEvent>) => void;
        /**
          * Event fired when the user enters text in the search field. The calling application may use this to update the `contactSuggestions` property.
         */
        "onSearchContacts"?: (event: VerdocsContactPickerCustomEvent<IContactSearchEvent>) => void;
        /**
          * The role that this contact will be assigned to.
         */
        "templateRole"?: IRole | null;
    }
    interface VerdocsDialog {
        /**
          * Event fired when the dialog is dismissed by clicking the background overlay.
         */
        "onExit"?: (event: VerdocsDialogCustomEvent<any>) => void;
    }
    interface VerdocsDropdown {
        /**
          * Event fired when a menu option is clicked. Web Component events need to be "composed" to cross the Shadow DOM and be received by parent frameworks.
         */
        "onOptionSelected"?: (event: VerdocsDropdownCustomEvent<IMenuOption>) => void;
        /**
          * The menu options to display.
         */
        "options"?: IMenuOption[];
    }
    interface VerdocsEnvelopeDocumentPage {
        /**
          * The ID of the document to display.
         */
        "documentId"?: string;
        /**
          * The endpoint to load from.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The ID of the envelope the document is for.
         */
        "envelopeId"?: string;
        /**
          * The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer. The parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g. if `pages` was ['page', 'fields'] the structure will be:  ```     <div id="verdocs-envelope-document-page-ker2fr1p9">       <div id="verdocs-envelope-document-page-ker2fr1p9-page"></div>       <div id="verdocs-envelope-document-page-ker2fr1p9-fields"></div>     </div> ```
         */
        "layers"?: IPageLayer[];
        /**
          * Fired when a page has been rendered. This is also fired when the page is resized.
         */
        "onPageRendered"?: (event: VerdocsEnvelopeDocumentPageCustomEvent<IDocumentPageInfo>) => void;
        /**
          * The page number being rendered. (Reminder: page numbers are 1-based.)
         */
        "pageNumber"?: number;
        "type"?: 'original' | 'filled' | 'certificate';
        /**
          * The "virtual" height of the page canvas.  Defaults to 792 which at 72dpi is 11" tall. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualHeight"?: number;
        /**
          * The "virtual" width of the page canvas. Defaults to 612 which at 72dpi is 8.5" wide. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualWidth"?: number;
    }
    interface VerdocsEnvelopeRecipientLink {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The envelope ID to edit.
         */
        "envelopeId"?: string;
        /**
          * Event fired when the user clicks Done to proceed. It is up to the host application to redirect the user to the appropriate next workflow step.
         */
        "onNext"?: (event: VerdocsEnvelopeRecipientLinkCustomEvent<{envelope: IEnvelope}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsEnvelopeRecipientLinkCustomEvent<SDKError>) => void;
        /**
          * The role to load.
         */
        "roleName"?: string;
    }
    interface VerdocsEnvelopeRecipientSummary {
        /**
          * Enable or disable the Done button.
         */
        "canDone"?: boolean;
        /**
          * Enable or disable the Send Another button.
         */
        "canSendAnother"?: boolean;
        /**
          * Enable or disable the View button.
         */
        "canView"?: boolean;
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The envelope ID to edit.
         */
        "envelopeId"?: string;
        /**
          * Event fired when the user clicks Send Another to proceed. It is up to the host application to redirect the user to the appropriate next workflow step.
         */
        "onAnother"?: (event: VerdocsEnvelopeRecipientSummaryCustomEvent<{envelope: IEnvelope}>) => void;
        /**
          * Event fired when the user clicks Done to proceed. It is up to the host application to redirect the user to the appropriate next workflow step.
         */
        "onNext"?: (event: VerdocsEnvelopeRecipientSummaryCustomEvent<{envelope: IEnvelope}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsEnvelopeRecipientSummaryCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user clicks Send Another to proceed. It is up to the host application to redirect the user to the appropriate next workflow step.
         */
        "onView"?: (event: VerdocsEnvelopeRecipientSummaryCustomEvent<{envelope: IEnvelope}>) => void;
    }
    interface VerdocsEnvelopeSidebar {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The envelope ID to render. Set ONE OF templateId or envelopeId. If both are set, envelopeId will be ignored.
         */
        "envelopeId"?: string;
        /**
          * Event fired when the user clicks Send Another in the Manage Recipients dialog. It is up to the host application to redirect the user to the appropriate next workflow step.
         */
        "onAnother"?: (event: VerdocsEnvelopeSidebarCustomEvent<{envelope: IEnvelope}>) => void;
        /**
          * Event fired when the envelope is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onEnvelopeUpdated"?: (event: VerdocsEnvelopeSidebarCustomEvent<{endpoint: VerdocsEndpoint; envelope: IEnvelope; event: string}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsEnvelopeSidebarCustomEvent<SDKError>) => void;
        /**
          * Event fired when the sidebar is opened or closed.
         */
        "onToggle"?: (event: VerdocsEnvelopeSidebarCustomEvent<{open: boolean}>) => void;
    }
    interface VerdocsEnvelopesList {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * If set, filter envelopes by the specified string.
         */
        "match"?: string;
        /**
          * Event fired when the user changes the match filter. This is fired for every inputChange event (every character typed). This event is provided for balance with the other events, but host applications should generally not save this value. Users might appreciate applications remembering their sorting or filtering preferences, but probably not their search terms.
         */
        "onChangeMatch"?: (event: VerdocsEnvelopesListCustomEvent<string>) => void;
        /**
          * Event fired when the user changes their sort order. Host applications can use this to save the user's preferences.
         */
        "onChangeSort"?: (event: VerdocsEnvelopesListCustomEvent<'name' | 'created_at' | 'updated_at' | 'canceled_at' | 'status'>) => void;
        /**
          * Event fired when the user changes their status filter. Host applications can use this to save the user's preferences.
         */
        "onChangeStatus"?: (event: VerdocsEnvelopesListCustomEvent<TEnvelopeStatus | 'all'>) => void;
        /**
          * Event fired when the user changes their view. Host applications can use this to save the user's preferences.
         */
        "onChangeView"?: (event: VerdocsEnvelopesListCustomEvent<'all' | 'inbox' | 'sent' | 'completed' | 'action' | 'waiting'>) => void;
        /**
          * Event fired when the user clicks to finish the envelope.
         */
        "onFinishEnvelope"?: (event: VerdocsEnvelopesListCustomEvent<{endpoint: VerdocsEndpoint; envelope: IEnvelope}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsEnvelopesListCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user clicks an activity entry. Typically the host application will use this to navigate to the envelope detail view.
         */
        "onViewEnvelope"?: (event: VerdocsEnvelopesListCustomEvent<{endpoint: VerdocsEndpoint; envelope: IEnvelope}>) => void;
        /**
          * The number of rows to display per page.
         */
        "rowsPerPage"?: number;
        /**
          * The initial page number to select. Pagination is internally controlled but may be overriden by the host applicaiton.
         */
        "selectedPage"?: number;
        /**
          * Whether or not pagination should be enabled.
         */
        "showPagination"?: boolean;
        /**
          * The sort field to use
         */
        "sort"?: 'name' | 'created_at' | 'updated_at' | 'canceled_at' | 'status';
        /**
          * The status value to filter by
         */
        "status"?: TEnvelopeStatus | 'all';
        /**
          * The filtered view to display. "completed" will show envelopes that have been submitted. "action" will show envelopes where the user is a recipient and the envelope is not completed. "waiting" will show only envelopes where the user is the sender and the envelope is not completed.
         */
        "view"?: 'all' | 'inbox' | 'sent' | 'completed' | 'action' | 'waiting';
    }
    interface VerdocsFieldAttachment {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onAttached"?: (event: VerdocsFieldAttachmentCustomEvent<{data: string; lastModified: number; name: string; size: number; type: string}>) => void;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldAttachmentCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldAttachmentCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldCheckbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldCheckboxCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldCheckboxCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option"?: number;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldDate {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldDateCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldDateCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onSettingsPress"?: (event: VerdocsFieldDateCustomEvent<any>) => void;
        /**
          * The template the field is for/from. Only required for the field builder, passed down to the properties component.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldDropdown {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldDropdownCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldDropdownCustomEvent<string>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldDropdownCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldInitial {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        /**
          * The document or template field to display.
         */
        "initials"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event emitted when an initial block is adopted by the user. The event detail will contain the base64 string of the initial image.
         */
        "onAdopt"?: (event: VerdocsFieldInitialCustomEvent<string>) => void;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldInitialCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsFieldInitialCustomEvent<any>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldInitialCustomEvent<string>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldInitialCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onSettingsPress"?: (event: VerdocsFieldInitialCustomEvent<any>) => void;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldPayment {
        "currentInitial"?: string;
        "currentInitialId"?: string;
        "currentSignature"?: string;
        "currentSignatureId"?: string;
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        "fieldId"?: string;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        "fields"?: any[];
        "focused"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldPaymentCustomEvent<{fieldName: string}>) => void;
        "onInitialComplete"?: (event: VerdocsFieldPaymentCustomEvent<string>) => void;
        "onSettingsChanged"?: (event: VerdocsFieldPaymentCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        "onSignatureComplete"?: (event: VerdocsFieldPaymentCustomEvent<string>) => void;
        "pageNum"?: number;
        "pdfPages"?: any[];
        "recipients"?: any;
        "roleName"?: string;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "selectedRoleName"?: string;
        "signed"?: boolean;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldRadioButton {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldRadioButtonCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldRadioButtonCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option"?: number;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldSignature {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * If set, the signature creation dialog will be initialized with this text.
         */
        "name"?: string;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldSignatureCustomEvent<{fieldName: string}>) => void;
        /**
          * Event emitted when the field has changed.
         */
        "onFieldChange"?: (event: VerdocsFieldSignatureCustomEvent<string>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldSignatureCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onSettingsPress"?: (event: VerdocsFieldSignatureCustomEvent<any>) => void;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldTextarea {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used. This component self-manages its resize (width) behavior when in edit-template mode, and uses this endpoint to save changes.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldTextareaCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldTextareaCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldTextbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used. This component self-manages its resize (width) behavior when in edit-template mode, and uses this endpoint to save changes.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldTextboxCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldTextboxCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFieldTimestamp {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The name of the field to display.
         */
        "fieldname"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldTimestampCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldTimestampCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * The template the field is for/from. Only required in Builder mode, to support the Field Properties dialog.
         */
        "templateid"?: string;
        /**
          * If set, the field will be be scaled horizontally by this factor.
         */
        "xscale"?: number;
        /**
          * If set, the field will be be scaled vertically by this factor.
         */
        "yscale"?: number;
    }
    interface VerdocsFileChooser {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when a file has been selected. Note that the file may be null if the user is choosing a different file. Host applications should use this event to enable/disable buttons to upload or otherwise process the selected file.
         */
        "onFileSelected"?: (event: VerdocsFileChooserCustomEvent<{file: File | null}>) => void;
    }
    interface VerdocsFloatingMenu {
        /**
          * Event fired when a menu option is clicked. Web Component events need to be "composed" to cross the Shadow DOM and be received by parent frameworks.
         */
        "onOptionSelected"?: (event: VerdocsFloatingMenuCustomEvent<IOption>) => void;
        /**
          * The role that this contact will be assigned to.
         */
        "options"?: IOption[];
    }
    interface VerdocsHelpIcon {
        /**
          * Optional icon to display. If not supplied, a standard help icon will be shown.
         */
        "icon"?: string;
        /**
          * Help text to display on hover/focus
         */
        "text"?: string;
    }
    interface VerdocsInitialDialog {
        /**
          * Initial signature text
         */
        "initials"?: string;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsInitialDialogCustomEvent<any>) => void;
        /**
          * Event fired when the initials are adopted.
         */
        "onNext"?: (event: VerdocsInitialDialogCustomEvent<string>) => void;
    }
    interface VerdocsKbaDialog {
        /**
          * For choice challenges, a set of choices to choose from. 6 choices is recommended to fit most screen sizes.
         */
        "choices"?: string[];
        /**
          * If set, a help/instructions box will be displayed with this text
         */
        "helptext"?: string;
        /**
          * If set, a help/instructions box will be displayed with this title
         */
        "helptitle"?: string;
        /**
          * For text input challenges, the label to display next to the input field.
         */
        "label"?: string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "mode"?: 'text' | 'choice';
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsKbaDialogCustomEvent<any>) => void;
        /**
          * Event fired when the dialog is closed. The event data will contain the value selected.
         */
        "onNext"?: (event: VerdocsKbaDialogCustomEvent<string>) => void;
        /**
          * For text input challenges, the placeholder to display inside the input field.
         */
        "placeholder"?: string;
        /**
          * Which step this confirmation is for, in a multi-step process. Ignored if `steps` is < 2.
         */
        "step"?: number;
        /**
          * How many steps exist in a multi-step process. Set to 1 for a single-step process (hides the indicator).
         */
        "steps"?: number;
    }
    interface VerdocsLoader {
    }
    interface VerdocsOkDialog {
        /**
          * Override the "OK" button's label
         */
        "buttonLabel"?: string;
        /**
          * The title of the dialog. "title" is a reserved word, so we use heading.
         */
        "heading"?: string;
        /**
          * The message content to display.
         */
        "message"?: string;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsOkDialogCustomEvent<any>) => void;
        /**
          * Event fired when the user clicks the OK button.
         */
        "onNext"?: (event: VerdocsOkDialogCustomEvent<any>) => void;
        /**
          * If set, a cancel button will also be displayed. Note that the dialog is always cancelable by clicking the background overlay to dismiss it.
         */
        "showCancel"?: boolean;
    }
    interface VerdocsOrganizationCard {
        /**
          * The organization to display
         */
        "organization"?: IOrganization;
    }
    interface VerdocsPagination {
        /**
          * The total number of items.
         */
        "itemCount"?: number;
        /**
          * Event fired when the selected page changes. The new page number is included in the event.
         */
        "onSelectPage"?: (event: VerdocsPaginationCustomEvent<{selectedPage: number}>) => void;
        /**
          * The number of displayed per page.
         */
        "perPage"?: number;
        /**
          * The currently selected page.
         */
        "selectedPage"?: number;
    }
    interface VerdocsPortal {
        /**
          * Horizontal alignment.
         */
        "align"?: 'left' | 'center' | 'right';
        /**
          * Unique ID of the parent element to anchor to.
         */
        "anchor"?: string;
        "onClickAway"?: (event: VerdocsPortalCustomEvent<void>) => void;
        /**
          * Vertical offset from the parent.
         */
        "voffset"?: number;
    }
    interface VerdocsPreview {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsPreviewCustomEvent<SDKError>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
    }
    interface VerdocsProgressBar {
        /**
          * Optional label to display above the bar
         */
        "label"?: string;
        /**
          * The current progress value (0-100)
         */
        "percent"?: number;
        /**
          * If true, the progress percentage will be displayed above the bar.
         */
        "showPercent"?: boolean;
    }
    interface VerdocsQuickFilter {
        "label"?: string;
        /**
          * Event fired when a menu option is clicked. Web Component events need to be "composed" to cross the Shadow DOM and be received by parent frameworks.
         */
        "onOptionSelected"?: (event: VerdocsQuickFilterCustomEvent<IFilterOption>) => void;
        /**
          * The menu options to display.
         */
        "options"?: IFilterOption[];
        "placeholder"?: string;
        "value"?: string;
    }
    interface VerdocsQuickFunctions {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when an entry is clicked.
         */
        "onCreateDocument"?: (event: VerdocsQuickFunctionsCustomEvent<any>) => void;
        /**
          * Event fired when an entry is clicked.
         */
        "onCreateTemplate"?: (event: VerdocsQuickFunctionsCustomEvent<any>) => void;
    }
    interface VerdocsRadioButton {
        /**
          * Whether the radio button is currently selected.
         */
        "checked"?: boolean;
        /**
          * If set, the button will still be displayed but not selectable.
         */
        "disabled"?: boolean;
        /**
          * HTML form field name for the input.
         */
        "name"?: string;
        /**
          * Value to track with the input.
         */
        "value"?: string;
    }
    interface VerdocsSearch {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
    }
    interface VerdocsSearchBox {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * If set, the input field will attempt to "grab" focus after being rendered.
         */
        "grabsFocus"?: boolean;
        /**
          * Event fired when the user changes the query string.
         */
        "onQueryChanged"?: (event: VerdocsSearchBoxCustomEvent<string>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onSearchClicked"?: (event: VerdocsSearchBoxCustomEvent<ISearchEvent>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onTypeChanged"?: (event: VerdocsSearchBoxCustomEvent<TContentType>) => void;
        /**
          * The placeholder to display in the input field.
         */
        "placeholder"?: string;
        /**
          * The text search string entered by the user.
         */
        "query"?: string;
        /**
          * If set to a value other than 'all', a removeable filter indicator will be displayed.
         */
        "type"?: TContentType;
    }
    interface VerdocsSearchTabs {
    }
    interface VerdocsSelectInput {
        /**
          * Should the field be disabled?
         */
        "disabled"?: boolean;
        /**
          * The label for the field.
         */
        "label"?: string;
        /**
          * The options to list.
         */
        "options"?: {label: string; value: string}[];
        /**
          * The initial value for the input field.
         */
        "value"?: string;
    }
    interface VerdocsSend {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The environment the control is being called from, e.g. 'web'. This has an impact on how certain operations such as email communications are handled to ensure users receive the correct URLs for their invitations. Setting this to unknown values may produce unexpected/incorrect behaviors. If environment is not known, do this set this property.
         */
        "environment"?: string;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsSendCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSendCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user enters text in a search field. The parent application may use this to update the `contactSuggestions` property.
         */
        "onSearchContacts"?: (event: VerdocsSendCustomEvent<IContactSearchEvent1>) => void;
        /**
          * The user completed the form and clicked send.
         */
        "onSend"?: (event: VerdocsSendCustomEvent<{roles: ICreateEnvelopeRole[]; name: string; template_id: string; envelope_id: string; envelope: IEnvelope}>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
    }
    interface VerdocsSettings {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSettingsCustomEvent<SDKError>) => void;
    }
    interface VerdocsSettingsApiKeys {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user chooses to invite a new member.
         */
        "onMemberInvited"?: (event: VerdocsSettingsApiKeysCustomEvent<{endpoint: VerdocsEndpoint; member: IProfile}>) => void;
        /**
          * Event fired when the user chooses to invite a new member.
         */
        "onMemberRemoved"?: (event: VerdocsSettingsApiKeysCustomEvent<{endpoint: VerdocsEndpoint; member: IProfile}>) => void;
        /**
          * Event fired when the user chooses to invite a new member.
         */
        "onMemberUpdated"?: (event: VerdocsSettingsApiKeysCustomEvent<{endpoint: VerdocsEndpoint; member: IProfile}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSettingsApiKeysCustomEvent<SDKError>) => void;
    }
    interface VerdocsSettingsMembers {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user chooses to invite a new member.
         */
        "onMemberInvited"?: (event: VerdocsSettingsMembersCustomEvent<{endpoint: VerdocsEndpoint; member: IProfile}>) => void;
        /**
          * Event fired when the user chooses to invite a new member.
         */
        "onMemberRemoved"?: (event: VerdocsSettingsMembersCustomEvent<{endpoint: VerdocsEndpoint; member: IProfile}>) => void;
        /**
          * Event fired when the user chooses to invite a new member.
         */
        "onMemberUpdated"?: (event: VerdocsSettingsMembersCustomEvent<{endpoint: VerdocsEndpoint; member: IProfile}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSettingsMembersCustomEvent<SDKError>) => void;
    }
    interface VerdocsSettingsOrganization {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user chooses the Edit option from the dropdown menu.
         */
        "onOrganizationUpdated"?: (event: VerdocsSettingsOrganizationCustomEvent<{endpoint: VerdocsEndpoint; organization: IOrganization}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSettingsOrganizationCustomEvent<SDKError>) => void;
    }
    interface VerdocsSettingsProfile {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user chooses the Edit option from the dropdown menu.
         */
        "onProfileUpdated"?: (event: VerdocsSettingsProfileCustomEvent<{endpoint: VerdocsEndpoint; profile: IProfile}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSettingsProfileCustomEvent<SDKError>) => void;
    }
    interface VerdocsSign {
        /**
          * The ID of the envelope to sign.
         */
        "envelopeId"?: string | null;
        /**
          * If set, (recommended), the host application should create a <DIV> element with a unique ID. When this component renders, the header will be removed from its default location and placed in the target element. This allows the parent application to more easily control its placement and scroll effects (e.g. "fixed").  The movement of the header to the target container is not dynamic - it is performed only on the initial render. Host applications should not conditionally render this container. If the header's visibility must be externally controlled, use CSS display options to hide/show it instead.
         */
        "headerTargetId"?: string | null;
        /**
          * The invite code for the signer.
         */
        "inviteCode"?: string | null;
        /**
          * Event fired when the envelope is updated in any way.
         */
        "onEnvelopeLoaded"?: (event: VerdocsSignCustomEvent<{endpoint: VerdocsEndpoint; envelope: IEnvelope}>) => void;
        /**
          * Event fired when the envelope is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onEnvelopeUpdated"?: (event: VerdocsSignCustomEvent<{endpoint: VerdocsEndpoint; envelope: IEnvelope; event: string}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSignCustomEvent<SDKError>) => void;
        /**
          * The ID of the role that will be signing e.g. 'Recipient 1'
         */
        "roleId"?: string | null;
    }
    interface VerdocsSignatureDialog {
        /**
          * Initial signature text
         */
        "name"?: string;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsSignatureDialogCustomEvent<any>) => void;
        /**
          * Fired when the user completes the dialog and clicks Adopt. The event detail will contain a base64-encoded string representation of the signature adopted.
         */
        "onNext"?: (event: VerdocsSignatureDialogCustomEvent<string>) => void;
    }
    interface VerdocsSpinner {
        "mode"?: 'light' | 'dark';
        "size"?: number;
    }
    interface VerdocsStatusIndicator {
        /**
          * The document to display status for. Ignored if `status` is set directly.
         */
        "envelope"?: IEnvelope | IEnvelopeSummary;
        /**
          * The size (height) of the indicator. The small variant is suitable for use in densely populated components such as table rows.
         */
        "size"?: 'small' | 'normal';
        /**
          * The status to display.
         */
        "status"?: TEnvelopeStatus | TRecipientStatus | 'accepted';
        /**
          * The theme to use for diplay.
         */
        "theme"?: 'dark' | 'light';
    }
    interface VerdocsTable {
        /**
          * The columns to display
         */
        "columns"?: IColumn[];
        /**
          * The rows to display
         */
        "data"?: any[];
        /**
          * Event fired when the user clicks a column header. This may be used to manage sorting options.
         */
        "onColHeaderClick"?: (event: VerdocsTableCustomEvent<{col: IColumn}>) => void;
        /**
          * Event fired when the user clicks a row.
         */
        "onRowClick"?: (event: VerdocsTableCustomEvent<{row: any}>) => void;
    }
    interface VerdocsTabs {
        /**
          * Event fired when the user clicks a template to view it. Typically the host application will use this to navigate to the template preview. This is also fired when the user selects "Preview/Send" fropm the dropdown menu.
         */
        "onSelectTab"?: (event: VerdocsTabsCustomEvent<{tab: ITab; index: number}>) => void;
        /**
          * The index of the tab to show selected.
         */
        "selectedTab"?: number;
        /**
          * The tabs to display
         */
        "tabs"?: ITab[];
    }
    interface VerdocsTemplateAttachments {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsTemplateAttachmentsCustomEvent<any>) => void;
        /**
          * Event fired when the user clicks the next button.
         */
        "onNext"?: (event: VerdocsTemplateAttachmentsCustomEvent<{template: ITemplate}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateAttachmentsCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user updates the template.
         */
        "onTemplateUpdated"?: (event: VerdocsTemplateAttachmentsCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate; event: string}>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateBuildTabs {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateBuildTabsCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user selects a different step.
         */
        "onStepChanged"?: (event: VerdocsTemplateBuildTabsCustomEvent<TVerdocsBuildStep>) => void;
        /**
          * The step in the creation process to display.
         */
        "step"?: TVerdocsBuildStep;
        /**
          * The ID of the template to create the document from. Unlike most other components, this is an optional parameter here. If the template ID is known, `step` may also be specified to force displaying a specific step in the creation process. If it is not specified, `step` will be ignored and the create step will be shown.
         */
        "templateId"?: string | null;
    }
    interface VerdocsTemplateCard {
        /**
          * The template for which the card will be rendered.
         */
        "template"?: ITemplate;
    }
    interface VerdocsTemplateCreate {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsTemplateCreateCustomEvent<any>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onNext"?: (event: VerdocsTemplateCreateCustomEvent<ITemplate>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateCreateCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user updates the template.
         */
        "onTemplateCreated"?: (event: VerdocsTemplateCreateCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate; templateId: string}>) => void;
    }
    interface VerdocsTemplateDocumentPage {
        /**
          * The ID of the document to display.
         */
        "documentId"?: string;
        /**
          * The endpoint to load from.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer. The parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g. if `pages` was ['page', 'fields'] the structure will be:  ```     <div id="verdocs-document-page-ker2fr1p9">       <div id="verdocs-document-page-ker2fr1p9-page"></div>       <div id="verdocs-document-page-ker2fr1p9-fields"></div>     </div> ```
         */
        "layers"?: IPageLayer[];
        /**
          * Fired when a page has been rendered. This is also fired when the page is resized.
         */
        "onPageRendered"?: (event: VerdocsTemplateDocumentPageCustomEvent<IDocumentPageInfo>) => void;
        /**
          * The page number being rendered. (Reminder: page numbers are 1-based.)
         */
        "pageNumber"?: number;
        /**
          * The ID of the template the document is for.
         */
        "templateId"?: string;
        /**
          * The "virtual" height of the page canvas.  Defaults to 792 which at 72dpi is 11" tall. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualHeight"?: number;
        /**
          * The "virtual" width of the page canvas. Defaults to 612 which at 72dpi is 8.5" wide. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualWidth"?: number;
    }
    interface VerdocsTemplateFieldProperties {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The field to configure.
         */
        "fieldName"?: string;
        /**
          * If specified, the properties card will have a "back" side with the help text as its content.
         */
        "helpText"?: string;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateFieldPropertiesCustomEvent<any>) => void;
        /**
          * Event fired when the user deletes the role. The parent should update its UI to reflect the removal. When this event is emitted, the role will have already been deleted server-side.
         */
        "onDelete"?: (event: VerdocsTemplateFieldPropertiesCustomEvent<{templateId: string; roleName: string}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateFieldPropertiesCustomEvent<SDKError>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsTemplateFieldPropertiesCustomEvent<{fieldName: string; settings: ITemplateFieldSetting; field: ITemplateField}>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateFields {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateFieldsCustomEvent<SDKError>) => void;
        /**
          * Event fired when the template is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onTemplateUpdated"?: (event: VerdocsTemplateFieldsCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate; event: string}>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
        /**
          * If set, (recommended), the host application should create a <DIV> element with a unique ID. When this component renders, the toolbar will be removed from its default location and placed in the target element. This allows the parent application to more easily control its placement and scroll effects.  The movement of the toolbar to the target container is not dynamic - it is performed only on the initial render. Host applications should not conditionally render this container. If the toolbar's visibility must be externally controlled, use CSS display options to hide/show it instead.
         */
        "toolbarTargetId"?: string | null;
    }
    interface VerdocsTemplateName {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateNameCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateNameCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user updates the template.
         */
        "onTemplateUpdated"?: (event: VerdocsTemplateNameCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate; event: string}>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateReminders {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateRemindersCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateRemindersCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user updates the template.
         */
        "onTemplateUpdated"?: (event: VerdocsTemplateRemindersCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate; event: string}>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateRoleProperties {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateRolePropertiesCustomEvent<any>) => void;
        /**
          * Event fired when the user deletes the role. The parent should update its UI to reflect the removal. When this event is emitted, the role will have already been deleted server-side.
         */
        "onDelete"?: (event: VerdocsTemplateRolePropertiesCustomEvent<{templateId: string; roleName: string}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateRolePropertiesCustomEvent<SDKError>) => void;
        /**
          * The role name to edit.
         */
        "roleName"?: string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "sender"?: TTemplateSender;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateRoles {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsTemplateRolesCustomEvent<any>) => void;
        /**
          * Event fired when the user clicks to proceed.
         */
        "onNext"?: (event: VerdocsTemplateRolesCustomEvent<any>) => void;
        /**
          * Event fired when the template is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onRolesUpdated"?: (event: VerdocsTemplateRolesCustomEvent<{endpoint: VerdocsEndpoint; templateId: string; event: 'added' | 'deleted' | 'updated'; roles: IRole[]}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateRolesCustomEvent<SDKError>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateSender {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateSenderCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateSenderCustomEvent<SDKError>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "sender"?: TTemplateSender;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateStar {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateStarCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user toggles the star on or off. The event detail will contain the new "starred" status and count.
         */
        "onStarChange"?: (event: VerdocsTemplateStarCustomEvent<{templateId: string; starred: boolean; count: number}>) => void;
        /**
          * The template to display the star for.
         */
        "template"?: ITemplate;
    }
    interface VerdocsTemplateTags {
        /**
          * The tags to display
         */
        "tags"?: any[];
    }
    interface VerdocsTemplateVisibility {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateVisibilityCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateVisibilityCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user updates the template.
         */
        "onTemplateUpdated"?: (event: VerdocsTemplateVisibilityCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate; event: string}>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplatesList {
        /**
          * Override the If set, filter templates by the specified name.
         */
        "allowedActions"?: TAllowedTemplateAction[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * If set, filter templates by the specified name.
         */
        "name"?: string;
        /**
          * Event fired when the user changes the name filter. This is fired for every inputChange event (every character typed). This event is provided for balance with the other events, but host applications should generally not save this value. Users might appreciate applications remembering their sorting or filtering preferences, but probably not their search terms.
         */
        "onChangeName"?: (event: VerdocsTemplatesListCustomEvent<string>) => void;
        /**
          * Event fired when the user changes their sort order. Host applications can use this to save the user's preferences.
         */
        "onChangeSharing"?: (event: VerdocsTemplatesListCustomEvent<'all' | 'personal' | 'shared' | 'public'>) => void;
        /**
          * Event fired when the user changes their sort order. Host applications can use this to save the user's preferences.
         */
        "onChangeSort"?: (event: VerdocsTemplatesListCustomEvent<IGetTemplateSummarySortBy>) => void;
        /**
          * Event fired when the user changes their sort order. Host applications can use this to save the user's preferences.
         */
        "onChangeStarred"?: (event: VerdocsTemplatesListCustomEvent<'all' | 'starred' | 'unstarred'>) => void;
        /**
          * Event fired when the user chooses the Edit option from the dropdown menu.
         */
        "onEditTemplate"?: (event: VerdocsTemplatesListCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplatesListCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user clicks to sign a template now.
         */
        "onSignNow"?: (event: VerdocsTemplatesListCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate}>) => void;
        /**
          * Event fired when the user clicks to sign a template now.
         */
        "onSubmittedData"?: (event: VerdocsTemplatesListCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate}>) => void;
        /**
          * Event fired when the user chooses the Delete option from the dropdown menu. When this is fired, the template will already have been deleted. The host application should remove it from the list or refresh the list.
         */
        "onTemplateDeleted"?: (event: VerdocsTemplatesListCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate}>) => void;
        /**
          * Event fired when the user clicks a template to view it. Typically the host application will use this to navigate to the template preview. This is also fired when the user selects "Preview/Send" fropm the dropdown menu.
         */
        "onViewTemplate"?: (event: VerdocsTemplatesListCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate}>) => void;
        /**
          * The number of rows to display per page.
         */
        "rowsPerPage"?: number;
        /**
          * The initial page number to select. Pagination is internally controlled but may be overriden by the host applicaiton.
         */
        "selectedPage"?: number;
        /**
          * The sharing settings to filter by.
         */
        "sharing"?: 'all' | 'personal' | 'shared' | 'public';
        /**
          * Whether or not pagination should be enabled.
         */
        "showPagination"?: boolean;
        /**
          * The sort order to display.
         */
        "sort"?: IGetTemplateSummarySortBy;
        /**
          * The starred settings to filter by.
         */
        "starred"?: 'all' | 'starred' | 'unstarred';
    }
    interface VerdocsTextInput {
        /**
          * If desired, the autocomplete attribute to set.
         */
        "autocomplete"?: string;
        /**
          * If set, a clear button will be displayed.
         */
        "clearable"?: boolean;
        /**
          * If set, a copy-to-clipboard button will be displayed. NOTE: A field may not be both clearable and copyable. If both properties are set to true, copyable will be ignored.
         */
        "copyable"?: boolean;
        /**
          * Should the field be disabled?
         */
        "disabled"?: boolean;
        /**
          * If supplied, a help icon will be displayed to provide the user more information.
         */
        "helpText"?: string;
        /**
          * The label for the field.
         */
        "label"?: string;
        /**
          * The placeholder for the field.
         */
        "placeholder"?: string;
        /**
          * Should the field be required?
         */
        "required"?: boolean;
        /**
          * The type of field to render. Only text-type fields are allowed here for the current styling. Additional types (e.g. a date picker) will be supported by other controls in the future.
         */
        "type"?: 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url';
        /**
          * The initial value for the input field.
         */
        "value"?: string;
    }
    interface VerdocsToggle {
        /**
          * The tags to display
         */
        "options"?: IToggleIconButtons;
        /**
          * The "theme" to be used
         */
        "theme"?: 'light' | 'dark';
    }
    interface VerdocsToggleButton {
        "active"?: boolean;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "icon"?: string | null;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "label"?: string | null;
        /**
          * Event fired when the button is pressed.
         */
        "onToggle"?: (event: VerdocsToggleButtonCustomEvent<{active: boolean}>) => void;
        /**
          * How large the button should be. Small buttons are intended for dialog boxes and other smaller scale UI regions.
         */
        "size"?: 'small' | 'normal';
    }
    interface VerdocsToolbarIcon {
        /**
          * SVG icon to display
         */
        "icon"?: string;
        /**
          * Override the Popper "placement" setting
         */
        "placement"?: Placement;
        /**
          * Help text to display on hover/focus
         */
        "text"?: string;
    }
    interface VerdocsUploadDialog {
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsUploadDialogCustomEvent<any>) => void;
        /**
          * Event fired when the dialog is closed. The event data will contain the file selected.
         */
        "onNext"?: (event: VerdocsUploadDialogCustomEvent<FileWithData[]>) => void;
    }
    interface VerdocsView {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The envelope ID to render. Set ONE OF templateId or envelopeId. If both are set, envelopeId will be ignored.
         */
        "envelopeId"?: string;
        /**
          * If set, (recommended), the host application should create a <DIV> element with a unique ID. When this component renders, the header will be removed from its default location and placed in the target element. This allows the parent application to more easily control its placement and scroll effects (e.g. "fixed").  The movement of the header to the target container is not dynamic - it is performed only on the initial render. Host applications should not conditionally render this container. If the header's visibility must be externally controlled, use CSS display options to hide/show it instead.
         */
        "headerTargetId"?: string | null;
        /**
          * Event fired when the user clicks Send Another to proceed. It is up to the host application to redirect the user to the appropriate next workflow step.
         */
        "onAnother"?: (event: VerdocsViewCustomEvent<any>) => void;
        /**
          * Event fired when the envelope is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onEnvelopeUpdated"?: (event: VerdocsViewCustomEvent<{endpoint: VerdocsEndpoint; envelope: IEnvelope; event: string}>) => void;
        /**
          * Event fired when the user clicks Done to proceed. It is up to the host application to redirect the user to the appropriate next workflow step.
         */
        "onNext"?: (event: VerdocsViewCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsViewCustomEvent<SDKError>) => void;
        /**
          * Event fired when the user clicks Send Another to proceed. It is up to the host application to redirect the user to the appropriate next workflow step.
         */
        "onView"?: (event: VerdocsViewCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "ipc-test": IpcTest;
        "verdocs-activity-box": VerdocsActivityBox;
        "verdocs-auth": VerdocsAuth;
        "verdocs-build": VerdocsBuild;
        "verdocs-button": VerdocsButton;
        "verdocs-button-panel": VerdocsButtonPanel;
        "verdocs-checkbox": VerdocsCheckbox;
        "verdocs-component-error": VerdocsComponentError;
        "verdocs-contact-picker": VerdocsContactPicker;
        "verdocs-dialog": VerdocsDialog;
        "verdocs-dropdown": VerdocsDropdown;
        "verdocs-envelope-document-page": VerdocsEnvelopeDocumentPage;
        "verdocs-envelope-recipient-link": VerdocsEnvelopeRecipientLink;
        "verdocs-envelope-recipient-summary": VerdocsEnvelopeRecipientSummary;
        "verdocs-envelope-sidebar": VerdocsEnvelopeSidebar;
        "verdocs-envelopes-list": VerdocsEnvelopesList;
        "verdocs-field-attachment": VerdocsFieldAttachment;
        "verdocs-field-checkbox": VerdocsFieldCheckbox;
        "verdocs-field-date": VerdocsFieldDate;
        "verdocs-field-dropdown": VerdocsFieldDropdown;
        "verdocs-field-initial": VerdocsFieldInitial;
        "verdocs-field-payment": VerdocsFieldPayment;
        "verdocs-field-radio-button": VerdocsFieldRadioButton;
        "verdocs-field-signature": VerdocsFieldSignature;
        "verdocs-field-textarea": VerdocsFieldTextarea;
        "verdocs-field-textbox": VerdocsFieldTextbox;
        "verdocs-field-timestamp": VerdocsFieldTimestamp;
        "verdocs-file-chooser": VerdocsFileChooser;
        "verdocs-floating-menu": VerdocsFloatingMenu;
        "verdocs-help-icon": VerdocsHelpIcon;
        "verdocs-initial-dialog": VerdocsInitialDialog;
        "verdocs-kba-dialog": VerdocsKbaDialog;
        "verdocs-loader": VerdocsLoader;
        "verdocs-ok-dialog": VerdocsOkDialog;
        "verdocs-organization-card": VerdocsOrganizationCard;
        "verdocs-pagination": VerdocsPagination;
        "verdocs-portal": VerdocsPortal;
        "verdocs-preview": VerdocsPreview;
        "verdocs-progress-bar": VerdocsProgressBar;
        "verdocs-quick-filter": VerdocsQuickFilter;
        "verdocs-quick-functions": VerdocsQuickFunctions;
        "verdocs-radio-button": VerdocsRadioButton;
        "verdocs-search": VerdocsSearch;
        "verdocs-search-box": VerdocsSearchBox;
        "verdocs-search-tabs": VerdocsSearchTabs;
        "verdocs-select-input": VerdocsSelectInput;
        "verdocs-send": VerdocsSend;
        "verdocs-settings": VerdocsSettings;
        "verdocs-settings-api-keys": VerdocsSettingsApiKeys;
        "verdocs-settings-members": VerdocsSettingsMembers;
        "verdocs-settings-organization": VerdocsSettingsOrganization;
        "verdocs-settings-profile": VerdocsSettingsProfile;
        "verdocs-sign": VerdocsSign;
        "verdocs-signature-dialog": VerdocsSignatureDialog;
        "verdocs-spinner": VerdocsSpinner;
        "verdocs-status-indicator": VerdocsStatusIndicator;
        "verdocs-table": VerdocsTable;
        "verdocs-tabs": VerdocsTabs;
        "verdocs-template-attachments": VerdocsTemplateAttachments;
        "verdocs-template-build-tabs": VerdocsTemplateBuildTabs;
        "verdocs-template-card": VerdocsTemplateCard;
        "verdocs-template-create": VerdocsTemplateCreate;
        "verdocs-template-document-page": VerdocsTemplateDocumentPage;
        "verdocs-template-field-properties": VerdocsTemplateFieldProperties;
        "verdocs-template-fields": VerdocsTemplateFields;
        "verdocs-template-name": VerdocsTemplateName;
        "verdocs-template-reminders": VerdocsTemplateReminders;
        "verdocs-template-role-properties": VerdocsTemplateRoleProperties;
        "verdocs-template-roles": VerdocsTemplateRoles;
        "verdocs-template-sender": VerdocsTemplateSender;
        "verdocs-template-star": VerdocsTemplateStar;
        "verdocs-template-tags": VerdocsTemplateTags;
        "verdocs-template-visibility": VerdocsTemplateVisibility;
        "verdocs-templates-list": VerdocsTemplatesList;
        "verdocs-text-input": VerdocsTextInput;
        "verdocs-toggle": VerdocsToggle;
        "verdocs-toggle-button": VerdocsToggleButton;
        "verdocs-toolbar-icon": VerdocsToolbarIcon;
        "verdocs-upload-dialog": VerdocsUploadDialog;
        "verdocs-view": VerdocsView;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ipc-test": LocalJSX.IpcTest & JSXBase.HTMLAttributes<HTMLIpcTestElement>;
            "verdocs-activity-box": LocalJSX.VerdocsActivityBox & JSXBase.HTMLAttributes<HTMLVerdocsActivityBoxElement>;
            "verdocs-auth": LocalJSX.VerdocsAuth & JSXBase.HTMLAttributes<HTMLVerdocsAuthElement>;
            "verdocs-build": LocalJSX.VerdocsBuild & JSXBase.HTMLAttributes<HTMLVerdocsBuildElement>;
            "verdocs-button": LocalJSX.VerdocsButton & JSXBase.HTMLAttributes<HTMLVerdocsButtonElement>;
            "verdocs-button-panel": LocalJSX.VerdocsButtonPanel & JSXBase.HTMLAttributes<HTMLVerdocsButtonPanelElement>;
            "verdocs-checkbox": LocalJSX.VerdocsCheckbox & JSXBase.HTMLAttributes<HTMLVerdocsCheckboxElement>;
            "verdocs-component-error": LocalJSX.VerdocsComponentError & JSXBase.HTMLAttributes<HTMLVerdocsComponentErrorElement>;
            "verdocs-contact-picker": LocalJSX.VerdocsContactPicker & JSXBase.HTMLAttributes<HTMLVerdocsContactPickerElement>;
            "verdocs-dialog": LocalJSX.VerdocsDialog & JSXBase.HTMLAttributes<HTMLVerdocsDialogElement>;
            "verdocs-dropdown": LocalJSX.VerdocsDropdown & JSXBase.HTMLAttributes<HTMLVerdocsDropdownElement>;
            "verdocs-envelope-document-page": LocalJSX.VerdocsEnvelopeDocumentPage & JSXBase.HTMLAttributes<HTMLVerdocsEnvelopeDocumentPageElement>;
            "verdocs-envelope-recipient-link": LocalJSX.VerdocsEnvelopeRecipientLink & JSXBase.HTMLAttributes<HTMLVerdocsEnvelopeRecipientLinkElement>;
            "verdocs-envelope-recipient-summary": LocalJSX.VerdocsEnvelopeRecipientSummary & JSXBase.HTMLAttributes<HTMLVerdocsEnvelopeRecipientSummaryElement>;
            "verdocs-envelope-sidebar": LocalJSX.VerdocsEnvelopeSidebar & JSXBase.HTMLAttributes<HTMLVerdocsEnvelopeSidebarElement>;
            "verdocs-envelopes-list": LocalJSX.VerdocsEnvelopesList & JSXBase.HTMLAttributes<HTMLVerdocsEnvelopesListElement>;
            "verdocs-field-attachment": LocalJSX.VerdocsFieldAttachment & JSXBase.HTMLAttributes<HTMLVerdocsFieldAttachmentElement>;
            "verdocs-field-checkbox": LocalJSX.VerdocsFieldCheckbox & JSXBase.HTMLAttributes<HTMLVerdocsFieldCheckboxElement>;
            "verdocs-field-date": LocalJSX.VerdocsFieldDate & JSXBase.HTMLAttributes<HTMLVerdocsFieldDateElement>;
            "verdocs-field-dropdown": LocalJSX.VerdocsFieldDropdown & JSXBase.HTMLAttributes<HTMLVerdocsFieldDropdownElement>;
            "verdocs-field-initial": LocalJSX.VerdocsFieldInitial & JSXBase.HTMLAttributes<HTMLVerdocsFieldInitialElement>;
            "verdocs-field-payment": LocalJSX.VerdocsFieldPayment & JSXBase.HTMLAttributes<HTMLVerdocsFieldPaymentElement>;
            "verdocs-field-radio-button": LocalJSX.VerdocsFieldRadioButton & JSXBase.HTMLAttributes<HTMLVerdocsFieldRadioButtonElement>;
            "verdocs-field-signature": LocalJSX.VerdocsFieldSignature & JSXBase.HTMLAttributes<HTMLVerdocsFieldSignatureElement>;
            "verdocs-field-textarea": LocalJSX.VerdocsFieldTextarea & JSXBase.HTMLAttributes<HTMLVerdocsFieldTextareaElement>;
            "verdocs-field-textbox": LocalJSX.VerdocsFieldTextbox & JSXBase.HTMLAttributes<HTMLVerdocsFieldTextboxElement>;
            "verdocs-field-timestamp": LocalJSX.VerdocsFieldTimestamp & JSXBase.HTMLAttributes<HTMLVerdocsFieldTimestampElement>;
            "verdocs-file-chooser": LocalJSX.VerdocsFileChooser & JSXBase.HTMLAttributes<HTMLVerdocsFileChooserElement>;
            "verdocs-floating-menu": LocalJSX.VerdocsFloatingMenu & JSXBase.HTMLAttributes<HTMLVerdocsFloatingMenuElement>;
            "verdocs-help-icon": LocalJSX.VerdocsHelpIcon & JSXBase.HTMLAttributes<HTMLVerdocsHelpIconElement>;
            "verdocs-initial-dialog": LocalJSX.VerdocsInitialDialog & JSXBase.HTMLAttributes<HTMLVerdocsInitialDialogElement>;
            "verdocs-kba-dialog": LocalJSX.VerdocsKbaDialog & JSXBase.HTMLAttributes<HTMLVerdocsKbaDialogElement>;
            "verdocs-loader": LocalJSX.VerdocsLoader & JSXBase.HTMLAttributes<HTMLVerdocsLoaderElement>;
            "verdocs-ok-dialog": LocalJSX.VerdocsOkDialog & JSXBase.HTMLAttributes<HTMLVerdocsOkDialogElement>;
            "verdocs-organization-card": LocalJSX.VerdocsOrganizationCard & JSXBase.HTMLAttributes<HTMLVerdocsOrganizationCardElement>;
            "verdocs-pagination": LocalJSX.VerdocsPagination & JSXBase.HTMLAttributes<HTMLVerdocsPaginationElement>;
            "verdocs-portal": LocalJSX.VerdocsPortal & JSXBase.HTMLAttributes<HTMLVerdocsPortalElement>;
            "verdocs-preview": LocalJSX.VerdocsPreview & JSXBase.HTMLAttributes<HTMLVerdocsPreviewElement>;
            "verdocs-progress-bar": LocalJSX.VerdocsProgressBar & JSXBase.HTMLAttributes<HTMLVerdocsProgressBarElement>;
            "verdocs-quick-filter": LocalJSX.VerdocsQuickFilter & JSXBase.HTMLAttributes<HTMLVerdocsQuickFilterElement>;
            "verdocs-quick-functions": LocalJSX.VerdocsQuickFunctions & JSXBase.HTMLAttributes<HTMLVerdocsQuickFunctionsElement>;
            "verdocs-radio-button": LocalJSX.VerdocsRadioButton & JSXBase.HTMLAttributes<HTMLVerdocsRadioButtonElement>;
            "verdocs-search": LocalJSX.VerdocsSearch & JSXBase.HTMLAttributes<HTMLVerdocsSearchElement>;
            "verdocs-search-box": LocalJSX.VerdocsSearchBox & JSXBase.HTMLAttributes<HTMLVerdocsSearchBoxElement>;
            "verdocs-search-tabs": LocalJSX.VerdocsSearchTabs & JSXBase.HTMLAttributes<HTMLVerdocsSearchTabsElement>;
            "verdocs-select-input": LocalJSX.VerdocsSelectInput & JSXBase.HTMLAttributes<HTMLVerdocsSelectInputElement>;
            "verdocs-send": LocalJSX.VerdocsSend & JSXBase.HTMLAttributes<HTMLVerdocsSendElement>;
            "verdocs-settings": LocalJSX.VerdocsSettings & JSXBase.HTMLAttributes<HTMLVerdocsSettingsElement>;
            "verdocs-settings-api-keys": LocalJSX.VerdocsSettingsApiKeys & JSXBase.HTMLAttributes<HTMLVerdocsSettingsApiKeysElement>;
            "verdocs-settings-members": LocalJSX.VerdocsSettingsMembers & JSXBase.HTMLAttributes<HTMLVerdocsSettingsMembersElement>;
            "verdocs-settings-organization": LocalJSX.VerdocsSettingsOrganization & JSXBase.HTMLAttributes<HTMLVerdocsSettingsOrganizationElement>;
            "verdocs-settings-profile": LocalJSX.VerdocsSettingsProfile & JSXBase.HTMLAttributes<HTMLVerdocsSettingsProfileElement>;
            "verdocs-sign": LocalJSX.VerdocsSign & JSXBase.HTMLAttributes<HTMLVerdocsSignElement>;
            "verdocs-signature-dialog": LocalJSX.VerdocsSignatureDialog & JSXBase.HTMLAttributes<HTMLVerdocsSignatureDialogElement>;
            "verdocs-spinner": LocalJSX.VerdocsSpinner & JSXBase.HTMLAttributes<HTMLVerdocsSpinnerElement>;
            "verdocs-status-indicator": LocalJSX.VerdocsStatusIndicator & JSXBase.HTMLAttributes<HTMLVerdocsStatusIndicatorElement>;
            "verdocs-table": LocalJSX.VerdocsTable & JSXBase.HTMLAttributes<HTMLVerdocsTableElement>;
            "verdocs-tabs": LocalJSX.VerdocsTabs & JSXBase.HTMLAttributes<HTMLVerdocsTabsElement>;
            "verdocs-template-attachments": LocalJSX.VerdocsTemplateAttachments & JSXBase.HTMLAttributes<HTMLVerdocsTemplateAttachmentsElement>;
            "verdocs-template-build-tabs": LocalJSX.VerdocsTemplateBuildTabs & JSXBase.HTMLAttributes<HTMLVerdocsTemplateBuildTabsElement>;
            "verdocs-template-card": LocalJSX.VerdocsTemplateCard & JSXBase.HTMLAttributes<HTMLVerdocsTemplateCardElement>;
            "verdocs-template-create": LocalJSX.VerdocsTemplateCreate & JSXBase.HTMLAttributes<HTMLVerdocsTemplateCreateElement>;
            "verdocs-template-document-page": LocalJSX.VerdocsTemplateDocumentPage & JSXBase.HTMLAttributes<HTMLVerdocsTemplateDocumentPageElement>;
            "verdocs-template-field-properties": LocalJSX.VerdocsTemplateFieldProperties & JSXBase.HTMLAttributes<HTMLVerdocsTemplateFieldPropertiesElement>;
            "verdocs-template-fields": LocalJSX.VerdocsTemplateFields & JSXBase.HTMLAttributes<HTMLVerdocsTemplateFieldsElement>;
            "verdocs-template-name": LocalJSX.VerdocsTemplateName & JSXBase.HTMLAttributes<HTMLVerdocsTemplateNameElement>;
            "verdocs-template-reminders": LocalJSX.VerdocsTemplateReminders & JSXBase.HTMLAttributes<HTMLVerdocsTemplateRemindersElement>;
            "verdocs-template-role-properties": LocalJSX.VerdocsTemplateRoleProperties & JSXBase.HTMLAttributes<HTMLVerdocsTemplateRolePropertiesElement>;
            "verdocs-template-roles": LocalJSX.VerdocsTemplateRoles & JSXBase.HTMLAttributes<HTMLVerdocsTemplateRolesElement>;
            "verdocs-template-sender": LocalJSX.VerdocsTemplateSender & JSXBase.HTMLAttributes<HTMLVerdocsTemplateSenderElement>;
            "verdocs-template-star": LocalJSX.VerdocsTemplateStar & JSXBase.HTMLAttributes<HTMLVerdocsTemplateStarElement>;
            "verdocs-template-tags": LocalJSX.VerdocsTemplateTags & JSXBase.HTMLAttributes<HTMLVerdocsTemplateTagsElement>;
            "verdocs-template-visibility": LocalJSX.VerdocsTemplateVisibility & JSXBase.HTMLAttributes<HTMLVerdocsTemplateVisibilityElement>;
            "verdocs-templates-list": LocalJSX.VerdocsTemplatesList & JSXBase.HTMLAttributes<HTMLVerdocsTemplatesListElement>;
            "verdocs-text-input": LocalJSX.VerdocsTextInput & JSXBase.HTMLAttributes<HTMLVerdocsTextInputElement>;
            "verdocs-toggle": LocalJSX.VerdocsToggle & JSXBase.HTMLAttributes<HTMLVerdocsToggleElement>;
            "verdocs-toggle-button": LocalJSX.VerdocsToggleButton & JSXBase.HTMLAttributes<HTMLVerdocsToggleButtonElement>;
            "verdocs-toolbar-icon": LocalJSX.VerdocsToolbarIcon & JSXBase.HTMLAttributes<HTMLVerdocsToolbarIconElement>;
            "verdocs-upload-dialog": LocalJSX.VerdocsUploadDialog & JSXBase.HTMLAttributes<HTMLVerdocsUploadDialogElement>;
            "verdocs-view": LocalJSX.VerdocsView & JSXBase.HTMLAttributes<HTMLVerdocsViewElement>;
        }
    }
}
