/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { VerdocsEndpoint } from "@verdocs/js-sdk";
import { IAuthStatus } from "./components/embeds/verdocs-auth/verdocs-auth";
import { SDKError } from "./utils/errors";
import { IRole, ITemplate, ITemplateField, TemplateSenderTypes } from "@verdocs/js-sdk/Templates/Types";
import { IContactSearchEvent, IContactSelectEvent, IEmailContact, IPhoneContact } from "./components/elements/verdocs-contact-picker/verdocs-contact-picker";
import { IDocumentPageInfo, IPageLayer } from "./utils/Types";
import { IMenuOption } from "./components/controls/verdocs-dropdown/verdocs-dropdown";
import { IDocument, IDocumentField, IRecipient, TDocumentStatus, TRecipientStatus } from "@verdocs/js-sdk/Documents/Types";
import { IOrganization } from "@verdocs/js-sdk/Organizations/Types";
import { IRecentSearch } from "@verdocs/js-sdk/Search/Types";
import { ISearchEvent, TContentType } from "./components/elements/verdocs-search-box/verdocs-search-box";
import { IContactSearchEvent as IContactSearchEvent1, IContactSelectEvent as IContactSelectEvent1, IEmailContact as IEmailContact1, IPhoneContact as IPhoneContact1 } from "./components/elements/verdocs-template-properties/verdocs-template-properties";
import { IContactSearchEvent as IContactSearchEvent2, IContactSelectEvent as IContactSelectEvent2, IEmailContact as IEmailContact2, IPhoneContact as IPhoneContact2 } from "./components/elements/verdocs-template-recipients/verdocs-template-recipients";
import { IToggleIconButtons } from "./components/controls/verdocs-toggle/verdocs-toggle";
import { FileWithData } from "@verdocs/js-sdk/Utils/Files";
import { IPageRenderEvent } from "./components/embeds/verdocs-view/verdocs-view";
export namespace Components {
    interface VerdocsAuth {
        /**
          * If the user is authenticated, this embed will normally render invisibly. If debug is set true, a summary if the user's session details will be displayed instead. This may be useful while debugging authentication flows in new applications.
         */
        "debug": boolean;
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * By default, a Verdocs logo will be displayed above the login/signup forms. This may be used to override its source. (Alternatively, you may simply hide it via CSS overrides.) Logos should be in SVG format for best results.
         */
        "logo": string;
        /**
          * Normally, if the user has a valid session, this embed will be invisible, otherwise it will display login / signup forms. If this is set to false, this embed will be invisible in both cases. Apps may use this to verify if a user has a valid session without needing a separate call to Verdocs JS SDK.
         */
        "visible": boolean;
    }
    interface VerdocsBuild {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
    }
    interface VerdocsButton {
        /**
          * Whether the button should be disabled.
         */
        "disabled": boolean;
        /**
          * If desired, a suffix icon for the button
         */
        "endIcon": string | null;
        /**
          * The label for the button.
         */
        "label": string;
        /**
          * The size (height) of the button.
         */
        "size": 'small' | 'normal' | 'medium' | 'large';
        /**
          * If desired, a prefix icon for the button
         */
        "startIcon": string | null;
        /**
          * The type of the button.
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * The display variant of the button.
         */
        "variant": 'standard' | 'text' | 'outline';
    }
    interface VerdocsContactPicker {
        /**
          * If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number of suggestions be limited to the 5 best matching records.
         */
        "contactSuggestions": (IEmailContact | IPhoneContact)[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The role that this contact will be assigned to.
         */
        "templateRole": IRole | null;
    }
    interface VerdocsDocumentPage {
        /**
          * The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer. The parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g. if `pages` was ['page', 'fields'] the structure will be:  ```     <div id="verdocs-document-page-ker2fr1p9">       <div id="verdocs-document-page-ker2fr1p9-page"></div>       <div id="verdocs-document-page-ker2fr1p9-fields"></div>     </div> ```
         */
        "layers": IPageLayer[];
        /**
          * The page number being rendered. Not used internally but included in callbacks/events beacuse page numbers are used everywhere in document handling.
         */
        "pageNumber": number;
        /**
          * The "virtual" height of the page canvas.  Defaults to 792 which at 72dpi is 11" tall. This is used to compute the aspect ratio of the final rendered element.
         */
        "virtualHeight": number;
        /**
          * The "virtual" width of the page canvas. Defaults to 612 which at 72dpi is 8.5" wide. This is used to compute the aspect ratio of the final rendered element.
         */
        "virtualWidth": number;
    }
    interface VerdocsDropdown {
        /**
          * If set, the component will be open by default. This is primarily intended to be used for testing.
         */
        "open": boolean;
        /**
          * The menu options to display.
         */
        "options": IMenuOption[];
    }
    interface VerdocsFieldAttachment {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldCheckbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option": number;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldDate {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldDropdown {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldInitial {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        /**
          * The document or template field to display.
         */
        "initials": string;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldPayment {
        "currentInitial": string;
        "currentInitialId": string;
        "currentSignature": string;
        "currentSignatureId": string;
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "fieldId": string;
        "fields": any[];
        "focused": boolean;
        "pageNum": number;
        "pdfPages": any[];
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
        "recipients": any;
        "roleName": string;
        "selectedRoleName": string;
        "signed": boolean;
    }
    interface VerdocsFieldRadioButton {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option": number;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldSignature {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        /**
          * If set, the signature creation dialog will be initialized with this text.
         */
        "name"?: string;
        /**
          * If set, the signature creation dialog will be initialized from this object.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldTextarea {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldTextbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldTimestamp {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsHelpIcon {
        /**
          * Help text to display on hover/focus
         */
        "text": string;
    }
    interface VerdocsInitialDialog {
        /**
          * Initial signature text
         */
        "initials": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open": boolean;
    }
    interface VerdocsKbaDialog {
        /**
          * For choice challenges, a set of choices to choose from. 6 choices is recommended to fit most screen sizes.
         */
        "choices": string[];
        /**
          * If set, a help/instructions box will be displayed with this text
         */
        "helptext": string;
        /**
          * If set, a help/instructions box will be displayed with this title
         */
        "helptitle": string;
        /**
          * For text input challenges, the label to display next to the input field.
         */
        "label": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "mode": 'text' | 'choice';
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open": boolean;
        /**
          * For text input challenges, the placeholder to display inside the input field.
         */
        "placeholder": string;
        /**
          * Which step this confirmation is for, in a multi-step process. Ignored if `steps` is < 2.
         */
        "step": number;
        /**
          * How many steps exist in a multi-step process. Set to 1 for a single-step process (hides the indicator).
         */
        "steps": number;
    }
    interface VerdocsLoader {
    }
    interface VerdocsOkDialog {
        /**
          * If set, a cancel button will also be displayed. Note that the dialog is always cancelable by clicking the background overlay to dismiss it.
         */
        "cancel": boolean;
        /**
          * The title of the dialog. "title" is a reserved word, so we use heading.
         */
        "heading": string;
        /**
          * The message content to display.
         */
        "message": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open": boolean;
    }
    interface VerdocsOrganizationCard {
        /**
          * The organization to display
         */
        "organization": IOrganization;
    }
    interface VerdocsPreview {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
    }
    interface VerdocsQuickFunctions {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsRadioButton {
        /**
          * Whether the radio button is currently selected.
         */
        "checked": boolean;
        /**
          * If set, the button will still be displayed but not selectable.
         */
        "disabled"?: boolean;
        /**
          * HTML form field name for the input.
         */
        "name": string;
        /**
          * Value to track with the input.
         */
        "value": string;
    }
    interface VerdocsSearch {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsSearchActivity {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        "options": any;
        "type": 'recent' | 'saved' | 'starred';
    }
    interface VerdocsSearchBox {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        "focusField": () => Promise<void>;
        /**
          * If set, the input field will attempt to "grab" focus after being rendered.
         */
        "grabsFocus": boolean;
        /**
          * The placeholder to display in the input field.
         */
        "placeholder": string;
        /**
          * The text search string entered by the user.
         */
        "query": string;
        /**
          * If set to a value other than 'all', a removeable filter indicator will be displayed.
         */
        "type": TContentType;
    }
    interface VerdocsSearchTabs {
    }
    interface VerdocsSend {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
    }
    interface VerdocsSign {
        /**
          * The ID of the document to sign.
         */
        "documentId": string | null;
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The invite code for the signer.
         */
        "inviteCode": string | null;
        /**
          * The name of the role that will be signing.
         */
        "roleId": string | null;
    }
    interface VerdocsSignatureDialog {
        /**
          * Initial signature text
         */
        "name": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open": boolean;
    }
    interface VerdocsStatusIndicator {
        /**
          * The document to display status for. Ignored if `status` is set directly.
         */
        "document"?: IDocument;
        /**
          * The size (height) of the indicator. The small variant is suitable for use in densely populated components such as table rows.
         */
        "size": 'small' | 'normal';
        /**
          * The status to display.
         */
        "status"?: TDocumentStatus | TRecipientStatus | 'accepted';
        /**
          * The theme to use for diplay.
         */
        "theme"?: 'dark' | 'light';
    }
    interface VerdocsTemplateCard {
        /**
          * The template for which the card will be rendered.
         */
        "template": ITemplate;
    }
    interface VerdocsTemplateCreate {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsTemplateFields {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
    }
    interface VerdocsTemplateProperties {
        /**
          * If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number of suggestions be limited to the 5 best matching records.
         */
        "contactSuggestions": (IEmailContact | IPhoneContact)[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The role that this contact will be assigned to.
         */
        "templateRole": IRole | null;
    }
    interface VerdocsTemplateRecipients {
        /**
          * If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number of suggestions be limited to the 5 best matching records.
         */
        "contactSuggestions": (IEmailContact | IPhoneContact)[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The role that this contact will be assigned to.
         */
        "templateRole": IRole | null;
    }
    interface VerdocsTemplateSenderDialog {
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open": boolean;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "value": TemplateSenderTypes;
    }
    interface VerdocsTemplateTags {
        /**
          * The tags to display
         */
        "tags": any[];
    }
    interface VerdocsTextInput {
        /**
          * If desired, the autocomplete attribute to set.
         */
        "autocomplete": string;
        /**
          * Should the field be disabled?
         */
        "disabled": boolean;
        /**
          * The label for the field.
         */
        "label": string;
        /**
          * The placeholder for the field.
         */
        "placeholder": string;
        /**
          * The type of field to render. Only text-type fields are allowed here for the current styling. Additional types (e.g. a date picker) will be supported by other controls in the future.
         */
        "type": 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url';
        /**
          * The value for the input field.
         */
        "value": string;
    }
    interface VerdocsToggle {
        /**
          * The tags to display
         */
        "options": IToggleIconButtons;
        /**
          * The "theme" to be used
         */
        "theme": 'light' | 'dark';
    }
    interface VerdocsToggleButton {
        "active": boolean;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "icon"?: string | null;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "label"?: string | null;
        /**
          * How large the button should be. Small buttons are intended for dialog boxes and other smaller scale UI regions.
         */
        "size"?: 'small' | 'normal';
    }
    interface VerdocsUploadDialog {
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open": boolean;
    }
    interface VerdocsView {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * Layers will be passed through to the individual pages inside this component.
         */
        "pageLayers": IPageLayer[];
        /**
          * Rotate the PDF in degrees
         */
        "rotation": 0 | 90 | 180 | 270;
        /**
          * Src of the PDF to load and render
         */
        "source": string;
    }
}
export interface VerdocsAuthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsAuthElement;
}
export interface VerdocsBuildCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsBuildElement;
}
export interface VerdocsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsButtonElement;
}
export interface VerdocsContactPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsContactPickerElement;
}
export interface VerdocsDocumentPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsDocumentPageElement;
}
export interface VerdocsDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsDropdownElement;
}
export interface VerdocsFieldAttachmentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldAttachmentElement;
}
export interface VerdocsFieldCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldCheckboxElement;
}
export interface VerdocsFieldDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldDateElement;
}
export interface VerdocsFieldDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldDropdownElement;
}
export interface VerdocsFieldInitialCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldInitialElement;
}
export interface VerdocsFieldPaymentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldPaymentElement;
}
export interface VerdocsFieldRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldRadioButtonElement;
}
export interface VerdocsFieldSignatureCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldSignatureElement;
}
export interface VerdocsFieldTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldTextareaElement;
}
export interface VerdocsFieldTextboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldTextboxElement;
}
export interface VerdocsFieldTimestampCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldTimestampElement;
}
export interface VerdocsInitialDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsInitialDialogElement;
}
export interface VerdocsKbaDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsKbaDialogElement;
}
export interface VerdocsOkDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsOkDialogElement;
}
export interface VerdocsPreviewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsPreviewElement;
}
export interface VerdocsQuickFunctionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsQuickFunctionsElement;
}
export interface VerdocsRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsRadioButtonElement;
}
export interface VerdocsSearchActivityCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSearchActivityElement;
}
export interface VerdocsSearchBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSearchBoxElement;
}
export interface VerdocsSendCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSendElement;
}
export interface VerdocsSignCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSignElement;
}
export interface VerdocsSignatureDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSignatureDialogElement;
}
export interface VerdocsTemplateCreateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateCreateElement;
}
export interface VerdocsTemplateFieldsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateFieldsElement;
}
export interface VerdocsTemplatePropertiesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplatePropertiesElement;
}
export interface VerdocsTemplateRecipientsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateRecipientsElement;
}
export interface VerdocsTemplateSenderDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateSenderDialogElement;
}
export interface VerdocsTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTextInputElement;
}
export interface VerdocsToggleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsToggleButtonElement;
}
export interface VerdocsUploadDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsUploadDialogElement;
}
export interface VerdocsViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsViewElement;
}
declare global {
    interface HTMLVerdocsAuthElement extends Components.VerdocsAuth, HTMLStencilElement {
    }
    var HTMLVerdocsAuthElement: {
        prototype: HTMLVerdocsAuthElement;
        new (): HTMLVerdocsAuthElement;
    };
    interface HTMLVerdocsBuildElement extends Components.VerdocsBuild, HTMLStencilElement {
    }
    var HTMLVerdocsBuildElement: {
        prototype: HTMLVerdocsBuildElement;
        new (): HTMLVerdocsBuildElement;
    };
    interface HTMLVerdocsButtonElement extends Components.VerdocsButton, HTMLStencilElement {
    }
    var HTMLVerdocsButtonElement: {
        prototype: HTMLVerdocsButtonElement;
        new (): HTMLVerdocsButtonElement;
    };
    interface HTMLVerdocsContactPickerElement extends Components.VerdocsContactPicker, HTMLStencilElement {
    }
    var HTMLVerdocsContactPickerElement: {
        prototype: HTMLVerdocsContactPickerElement;
        new (): HTMLVerdocsContactPickerElement;
    };
    interface HTMLVerdocsDocumentPageElement extends Components.VerdocsDocumentPage, HTMLStencilElement {
    }
    var HTMLVerdocsDocumentPageElement: {
        prototype: HTMLVerdocsDocumentPageElement;
        new (): HTMLVerdocsDocumentPageElement;
    };
    interface HTMLVerdocsDropdownElement extends Components.VerdocsDropdown, HTMLStencilElement {
    }
    var HTMLVerdocsDropdownElement: {
        prototype: HTMLVerdocsDropdownElement;
        new (): HTMLVerdocsDropdownElement;
    };
    interface HTMLVerdocsFieldAttachmentElement extends Components.VerdocsFieldAttachment, HTMLStencilElement {
    }
    var HTMLVerdocsFieldAttachmentElement: {
        prototype: HTMLVerdocsFieldAttachmentElement;
        new (): HTMLVerdocsFieldAttachmentElement;
    };
    interface HTMLVerdocsFieldCheckboxElement extends Components.VerdocsFieldCheckbox, HTMLStencilElement {
    }
    var HTMLVerdocsFieldCheckboxElement: {
        prototype: HTMLVerdocsFieldCheckboxElement;
        new (): HTMLVerdocsFieldCheckboxElement;
    };
    interface HTMLVerdocsFieldDateElement extends Components.VerdocsFieldDate, HTMLStencilElement {
    }
    var HTMLVerdocsFieldDateElement: {
        prototype: HTMLVerdocsFieldDateElement;
        new (): HTMLVerdocsFieldDateElement;
    };
    interface HTMLVerdocsFieldDropdownElement extends Components.VerdocsFieldDropdown, HTMLStencilElement {
    }
    var HTMLVerdocsFieldDropdownElement: {
        prototype: HTMLVerdocsFieldDropdownElement;
        new (): HTMLVerdocsFieldDropdownElement;
    };
    interface HTMLVerdocsFieldInitialElement extends Components.VerdocsFieldInitial, HTMLStencilElement {
    }
    var HTMLVerdocsFieldInitialElement: {
        prototype: HTMLVerdocsFieldInitialElement;
        new (): HTMLVerdocsFieldInitialElement;
    };
    interface HTMLVerdocsFieldPaymentElement extends Components.VerdocsFieldPayment, HTMLStencilElement {
    }
    var HTMLVerdocsFieldPaymentElement: {
        prototype: HTMLVerdocsFieldPaymentElement;
        new (): HTMLVerdocsFieldPaymentElement;
    };
    interface HTMLVerdocsFieldRadioButtonElement extends Components.VerdocsFieldRadioButton, HTMLStencilElement {
    }
    var HTMLVerdocsFieldRadioButtonElement: {
        prototype: HTMLVerdocsFieldRadioButtonElement;
        new (): HTMLVerdocsFieldRadioButtonElement;
    };
    interface HTMLVerdocsFieldSignatureElement extends Components.VerdocsFieldSignature, HTMLStencilElement {
    }
    var HTMLVerdocsFieldSignatureElement: {
        prototype: HTMLVerdocsFieldSignatureElement;
        new (): HTMLVerdocsFieldSignatureElement;
    };
    interface HTMLVerdocsFieldTextareaElement extends Components.VerdocsFieldTextarea, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTextareaElement: {
        prototype: HTMLVerdocsFieldTextareaElement;
        new (): HTMLVerdocsFieldTextareaElement;
    };
    interface HTMLVerdocsFieldTextboxElement extends Components.VerdocsFieldTextbox, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTextboxElement: {
        prototype: HTMLVerdocsFieldTextboxElement;
        new (): HTMLVerdocsFieldTextboxElement;
    };
    interface HTMLVerdocsFieldTimestampElement extends Components.VerdocsFieldTimestamp, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTimestampElement: {
        prototype: HTMLVerdocsFieldTimestampElement;
        new (): HTMLVerdocsFieldTimestampElement;
    };
    interface HTMLVerdocsHelpIconElement extends Components.VerdocsHelpIcon, HTMLStencilElement {
    }
    var HTMLVerdocsHelpIconElement: {
        prototype: HTMLVerdocsHelpIconElement;
        new (): HTMLVerdocsHelpIconElement;
    };
    interface HTMLVerdocsInitialDialogElement extends Components.VerdocsInitialDialog, HTMLStencilElement {
    }
    var HTMLVerdocsInitialDialogElement: {
        prototype: HTMLVerdocsInitialDialogElement;
        new (): HTMLVerdocsInitialDialogElement;
    };
    interface HTMLVerdocsKbaDialogElement extends Components.VerdocsKbaDialog, HTMLStencilElement {
    }
    var HTMLVerdocsKbaDialogElement: {
        prototype: HTMLVerdocsKbaDialogElement;
        new (): HTMLVerdocsKbaDialogElement;
    };
    interface HTMLVerdocsLoaderElement extends Components.VerdocsLoader, HTMLStencilElement {
    }
    var HTMLVerdocsLoaderElement: {
        prototype: HTMLVerdocsLoaderElement;
        new (): HTMLVerdocsLoaderElement;
    };
    interface HTMLVerdocsOkDialogElement extends Components.VerdocsOkDialog, HTMLStencilElement {
    }
    var HTMLVerdocsOkDialogElement: {
        prototype: HTMLVerdocsOkDialogElement;
        new (): HTMLVerdocsOkDialogElement;
    };
    interface HTMLVerdocsOrganizationCardElement extends Components.VerdocsOrganizationCard, HTMLStencilElement {
    }
    var HTMLVerdocsOrganizationCardElement: {
        prototype: HTMLVerdocsOrganizationCardElement;
        new (): HTMLVerdocsOrganizationCardElement;
    };
    interface HTMLVerdocsPreviewElement extends Components.VerdocsPreview, HTMLStencilElement {
    }
    var HTMLVerdocsPreviewElement: {
        prototype: HTMLVerdocsPreviewElement;
        new (): HTMLVerdocsPreviewElement;
    };
    interface HTMLVerdocsQuickFunctionsElement extends Components.VerdocsQuickFunctions, HTMLStencilElement {
    }
    var HTMLVerdocsQuickFunctionsElement: {
        prototype: HTMLVerdocsQuickFunctionsElement;
        new (): HTMLVerdocsQuickFunctionsElement;
    };
    interface HTMLVerdocsRadioButtonElement extends Components.VerdocsRadioButton, HTMLStencilElement {
    }
    var HTMLVerdocsRadioButtonElement: {
        prototype: HTMLVerdocsRadioButtonElement;
        new (): HTMLVerdocsRadioButtonElement;
    };
    interface HTMLVerdocsSearchElement extends Components.VerdocsSearch, HTMLStencilElement {
    }
    var HTMLVerdocsSearchElement: {
        prototype: HTMLVerdocsSearchElement;
        new (): HTMLVerdocsSearchElement;
    };
    interface HTMLVerdocsSearchActivityElement extends Components.VerdocsSearchActivity, HTMLStencilElement {
    }
    var HTMLVerdocsSearchActivityElement: {
        prototype: HTMLVerdocsSearchActivityElement;
        new (): HTMLVerdocsSearchActivityElement;
    };
    interface HTMLVerdocsSearchBoxElement extends Components.VerdocsSearchBox, HTMLStencilElement {
    }
    var HTMLVerdocsSearchBoxElement: {
        prototype: HTMLVerdocsSearchBoxElement;
        new (): HTMLVerdocsSearchBoxElement;
    };
    interface HTMLVerdocsSearchTabsElement extends Components.VerdocsSearchTabs, HTMLStencilElement {
    }
    var HTMLVerdocsSearchTabsElement: {
        prototype: HTMLVerdocsSearchTabsElement;
        new (): HTMLVerdocsSearchTabsElement;
    };
    interface HTMLVerdocsSendElement extends Components.VerdocsSend, HTMLStencilElement {
    }
    var HTMLVerdocsSendElement: {
        prototype: HTMLVerdocsSendElement;
        new (): HTMLVerdocsSendElement;
    };
    interface HTMLVerdocsSignElement extends Components.VerdocsSign, HTMLStencilElement {
    }
    var HTMLVerdocsSignElement: {
        prototype: HTMLVerdocsSignElement;
        new (): HTMLVerdocsSignElement;
    };
    interface HTMLVerdocsSignatureDialogElement extends Components.VerdocsSignatureDialog, HTMLStencilElement {
    }
    var HTMLVerdocsSignatureDialogElement: {
        prototype: HTMLVerdocsSignatureDialogElement;
        new (): HTMLVerdocsSignatureDialogElement;
    };
    interface HTMLVerdocsStatusIndicatorElement extends Components.VerdocsStatusIndicator, HTMLStencilElement {
    }
    var HTMLVerdocsStatusIndicatorElement: {
        prototype: HTMLVerdocsStatusIndicatorElement;
        new (): HTMLVerdocsStatusIndicatorElement;
    };
    interface HTMLVerdocsTemplateCardElement extends Components.VerdocsTemplateCard, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateCardElement: {
        prototype: HTMLVerdocsTemplateCardElement;
        new (): HTMLVerdocsTemplateCardElement;
    };
    interface HTMLVerdocsTemplateCreateElement extends Components.VerdocsTemplateCreate, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateCreateElement: {
        prototype: HTMLVerdocsTemplateCreateElement;
        new (): HTMLVerdocsTemplateCreateElement;
    };
    interface HTMLVerdocsTemplateFieldsElement extends Components.VerdocsTemplateFields, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateFieldsElement: {
        prototype: HTMLVerdocsTemplateFieldsElement;
        new (): HTMLVerdocsTemplateFieldsElement;
    };
    interface HTMLVerdocsTemplatePropertiesElement extends Components.VerdocsTemplateProperties, HTMLStencilElement {
    }
    var HTMLVerdocsTemplatePropertiesElement: {
        prototype: HTMLVerdocsTemplatePropertiesElement;
        new (): HTMLVerdocsTemplatePropertiesElement;
    };
    interface HTMLVerdocsTemplateRecipientsElement extends Components.VerdocsTemplateRecipients, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateRecipientsElement: {
        prototype: HTMLVerdocsTemplateRecipientsElement;
        new (): HTMLVerdocsTemplateRecipientsElement;
    };
    interface HTMLVerdocsTemplateSenderDialogElement extends Components.VerdocsTemplateSenderDialog, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateSenderDialogElement: {
        prototype: HTMLVerdocsTemplateSenderDialogElement;
        new (): HTMLVerdocsTemplateSenderDialogElement;
    };
    interface HTMLVerdocsTemplateTagsElement extends Components.VerdocsTemplateTags, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateTagsElement: {
        prototype: HTMLVerdocsTemplateTagsElement;
        new (): HTMLVerdocsTemplateTagsElement;
    };
    interface HTMLVerdocsTextInputElement extends Components.VerdocsTextInput, HTMLStencilElement {
    }
    var HTMLVerdocsTextInputElement: {
        prototype: HTMLVerdocsTextInputElement;
        new (): HTMLVerdocsTextInputElement;
    };
    interface HTMLVerdocsToggleElement extends Components.VerdocsToggle, HTMLStencilElement {
    }
    var HTMLVerdocsToggleElement: {
        prototype: HTMLVerdocsToggleElement;
        new (): HTMLVerdocsToggleElement;
    };
    interface HTMLVerdocsToggleButtonElement extends Components.VerdocsToggleButton, HTMLStencilElement {
    }
    var HTMLVerdocsToggleButtonElement: {
        prototype: HTMLVerdocsToggleButtonElement;
        new (): HTMLVerdocsToggleButtonElement;
    };
    interface HTMLVerdocsUploadDialogElement extends Components.VerdocsUploadDialog, HTMLStencilElement {
    }
    var HTMLVerdocsUploadDialogElement: {
        prototype: HTMLVerdocsUploadDialogElement;
        new (): HTMLVerdocsUploadDialogElement;
    };
    interface HTMLVerdocsViewElement extends Components.VerdocsView, HTMLStencilElement {
    }
    var HTMLVerdocsViewElement: {
        prototype: HTMLVerdocsViewElement;
        new (): HTMLVerdocsViewElement;
    };
    interface HTMLElementTagNameMap {
        "verdocs-auth": HTMLVerdocsAuthElement;
        "verdocs-build": HTMLVerdocsBuildElement;
        "verdocs-button": HTMLVerdocsButtonElement;
        "verdocs-contact-picker": HTMLVerdocsContactPickerElement;
        "verdocs-document-page": HTMLVerdocsDocumentPageElement;
        "verdocs-dropdown": HTMLVerdocsDropdownElement;
        "verdocs-field-attachment": HTMLVerdocsFieldAttachmentElement;
        "verdocs-field-checkbox": HTMLVerdocsFieldCheckboxElement;
        "verdocs-field-date": HTMLVerdocsFieldDateElement;
        "verdocs-field-dropdown": HTMLVerdocsFieldDropdownElement;
        "verdocs-field-initial": HTMLVerdocsFieldInitialElement;
        "verdocs-field-payment": HTMLVerdocsFieldPaymentElement;
        "verdocs-field-radio-button": HTMLVerdocsFieldRadioButtonElement;
        "verdocs-field-signature": HTMLVerdocsFieldSignatureElement;
        "verdocs-field-textarea": HTMLVerdocsFieldTextareaElement;
        "verdocs-field-textbox": HTMLVerdocsFieldTextboxElement;
        "verdocs-field-timestamp": HTMLVerdocsFieldTimestampElement;
        "verdocs-help-icon": HTMLVerdocsHelpIconElement;
        "verdocs-initial-dialog": HTMLVerdocsInitialDialogElement;
        "verdocs-kba-dialog": HTMLVerdocsKbaDialogElement;
        "verdocs-loader": HTMLVerdocsLoaderElement;
        "verdocs-ok-dialog": HTMLVerdocsOkDialogElement;
        "verdocs-organization-card": HTMLVerdocsOrganizationCardElement;
        "verdocs-preview": HTMLVerdocsPreviewElement;
        "verdocs-quick-functions": HTMLVerdocsQuickFunctionsElement;
        "verdocs-radio-button": HTMLVerdocsRadioButtonElement;
        "verdocs-search": HTMLVerdocsSearchElement;
        "verdocs-search-activity": HTMLVerdocsSearchActivityElement;
        "verdocs-search-box": HTMLVerdocsSearchBoxElement;
        "verdocs-search-tabs": HTMLVerdocsSearchTabsElement;
        "verdocs-send": HTMLVerdocsSendElement;
        "verdocs-sign": HTMLVerdocsSignElement;
        "verdocs-signature-dialog": HTMLVerdocsSignatureDialogElement;
        "verdocs-status-indicator": HTMLVerdocsStatusIndicatorElement;
        "verdocs-template-card": HTMLVerdocsTemplateCardElement;
        "verdocs-template-create": HTMLVerdocsTemplateCreateElement;
        "verdocs-template-fields": HTMLVerdocsTemplateFieldsElement;
        "verdocs-template-properties": HTMLVerdocsTemplatePropertiesElement;
        "verdocs-template-recipients": HTMLVerdocsTemplateRecipientsElement;
        "verdocs-template-sender-dialog": HTMLVerdocsTemplateSenderDialogElement;
        "verdocs-template-tags": HTMLVerdocsTemplateTagsElement;
        "verdocs-text-input": HTMLVerdocsTextInputElement;
        "verdocs-toggle": HTMLVerdocsToggleElement;
        "verdocs-toggle-button": HTMLVerdocsToggleButtonElement;
        "verdocs-upload-dialog": HTMLVerdocsUploadDialogElement;
        "verdocs-view": HTMLVerdocsViewElement;
    }
}
declare namespace LocalJSX {
    interface VerdocsAuth {
        /**
          * If the user is authenticated, this embed will normally render invisibly. If debug is set true, a summary if the user's session details will be displayed instead. This may be useful while debugging authentication flows in new applications.
         */
        "debug"?: boolean;
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * By default, a Verdocs logo will be displayed above the login/signup forms. This may be used to override its source. (Alternatively, you may simply hide it via CSS overrides.) Logos should be in SVG format for best results.
         */
        "logo"?: string;
        /**
          * Event fired when session authentication process has completed. Check the event contents for completion status.
         */
        "onAuthenticated"?: (event: VerdocsAuthCustomEvent<IAuthStatus>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsAuthCustomEvent<SDKError>) => void;
        /**
          * Normally, if the user has a valid session, this embed will be invisible, otherwise it will display login / signup forms. If this is set to false, this embed will be invisible in both cases. Apps may use this to verify if a user has a valid session without needing a separate call to Verdocs JS SDK.
         */
        "visible"?: boolean;
    }
    interface VerdocsBuild {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsBuildCustomEvent<SDKError>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
    }
    interface VerdocsButton {
        /**
          * Whether the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * If desired, a suffix icon for the button
         */
        "endIcon"?: string | null;
        /**
          * The label for the button.
         */
        "label": string;
        /**
          * Event fired when the button is pressed.
         */
        "onPress"?: (event: VerdocsButtonCustomEvent<any>) => void;
        /**
          * The size (height) of the button.
         */
        "size"?: 'small' | 'normal' | 'medium' | 'large';
        /**
          * If desired, a prefix icon for the button
         */
        "startIcon"?: string | null;
        /**
          * The type of the button.
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The display variant of the button.
         */
        "variant"?: 'standard' | 'text' | 'outline';
    }
    interface VerdocsContactPicker {
        /**
          * If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number of suggestions be limited to the 5 best matching records.
         */
        "contactSuggestions"?: (IEmailContact | IPhoneContact)[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onCancel"?: (event: VerdocsContactPickerCustomEvent<any>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onContactSelected"?: (event: VerdocsContactPickerCustomEvent<IContactSelectEvent>) => void;
        /**
          * Event fired when the user enters text in the search field. The calling application may use this to update the `contactSuggestions` property.
         */
        "onSearchContacts"?: (event: VerdocsContactPickerCustomEvent<IContactSearchEvent>) => void;
        /**
          * The role that this contact will be assigned to.
         */
        "templateRole"?: IRole | null;
    }
    interface VerdocsDocumentPage {
        /**
          * The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer. The parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g. if `pages` was ['page', 'fields'] the structure will be:  ```     <div id="verdocs-document-page-ker2fr1p9">       <div id="verdocs-document-page-ker2fr1p9-page"></div>       <div id="verdocs-document-page-ker2fr1p9-fields"></div>     </div> ```
         */
        "layers"?: IPageLayer[];
        /**
          * Fired when a page has been rendered. This is also fired when the page is resized.
         */
        "onPageRendered"?: (event: VerdocsDocumentPageCustomEvent<IDocumentPageInfo>) => void;
        /**
          * The page number being rendered. Not used internally but included in callbacks/events beacuse page numbers are used everywhere in document handling.
         */
        "pageNumber"?: number;
        /**
          * The "virtual" height of the page canvas.  Defaults to 792 which at 72dpi is 11" tall. This is used to compute the aspect ratio of the final rendered element.
         */
        "virtualHeight"?: number;
        /**
          * The "virtual" width of the page canvas. Defaults to 612 which at 72dpi is 8.5" wide. This is used to compute the aspect ratio of the final rendered element.
         */
        "virtualWidth"?: number;
    }
    interface VerdocsDropdown {
        /**
          * Event fired when a menu option is clicked. Web Component events need to be "composed" to cross the Shadow DOM and be received by parent frameworks.
         */
        "onOptionSelected"?: (event: VerdocsDropdownCustomEvent<IMenuOption>) => void;
        /**
          * If set, the component will be open by default. This is primarily intended to be used for testing.
         */
        "open"?: boolean;
        /**
          * The menu options to display.
         */
        "options"?: IMenuOption[];
    }
    interface VerdocsFieldAttachment {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldAttachmentCustomEvent<string>) => void;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldCheckbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldCheckboxCustomEvent<{option: number; value: boolean}>) => void;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option"?: number;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldDate {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * Event fired when the input field gains focus.
         */
        "onFieldBlur"?: (event: VerdocsFieldDateCustomEvent<boolean>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldDateCustomEvent<string>) => void;
        /**
          * Event fired when the input field loses focus.
         */
        "onFieldFocus"?: (event: VerdocsFieldDateCustomEvent<boolean>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onFieldInput"?: (event: VerdocsFieldDateCustomEvent<string>) => void;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldDropdown {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * Event fired when the input field gains focus.
         */
        "onFieldBlur"?: (event: VerdocsFieldDropdownCustomEvent<boolean>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldDropdownCustomEvent<string>) => void;
        /**
          * Event fired when the input field loses focus.
         */
        "onFieldFocus"?: (event: VerdocsFieldDropdownCustomEvent<boolean>) => void;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldInitial {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * The document or template field to display.
         */
        "initials"?: string;
        /**
          * Event emitted when an initial block is adopted by the user. The event detail will contain the base64 string of the initial image.
         */
        "onAdopt"?: (event: VerdocsFieldInitialCustomEvent<string>) => void;
        /**
          * Event emitted when the user cancels the process.
         */
        "onCancel"?: (event: VerdocsFieldInitialCustomEvent<any>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldInitialCustomEvent<string>) => void;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldPayment {
        "currentInitial"?: string;
        "currentInitialId"?: string;
        "currentSignature"?: string;
        "currentSignatureId"?: string;
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        "fieldId"?: string;
        "fields"?: any[];
        "focused"?: boolean;
        "onInitialComplete"?: (event: VerdocsFieldPaymentCustomEvent<string>) => void;
        "onSignatureComplete"?: (event: VerdocsFieldPaymentCustomEvent<string>) => void;
        "pageNum"?: number;
        "pdfPages"?: any[];
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
        "recipients"?: any;
        "roleName"?: string;
        "selectedRoleName"?: string;
        "signed"?: boolean;
    }
    interface VerdocsFieldRadioButton {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldRadioButtonCustomEvent<{option: number; value: boolean}>) => void;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option"?: number;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldSignature {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * If set, the signature creation dialog will be initialized with this text.
         */
        "name"?: string;
        /**
          * Event emitted when the field has changed.
         */
        "onFieldChange"?: (event: VerdocsFieldSignatureCustomEvent<string>) => void;
        /**
          * If set, the signature creation dialog will be initialized from this object.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldTextarea {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * Event fired when the input field gains focus.
         */
        "onFieldBlur"?: (event: VerdocsFieldTextareaCustomEvent<boolean>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldTextareaCustomEvent<string>) => void;
        /**
          * Event fired when the input field loses focus.
         */
        "onFieldFocus"?: (event: VerdocsFieldTextareaCustomEvent<boolean>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onFieldInput"?: (event: VerdocsFieldTextareaCustomEvent<string>) => void;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldTextbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * Event fired when the input field gains focus.
         */
        "onFieldBlur"?: (event: VerdocsFieldTextboxCustomEvent<boolean>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldTextboxCustomEvent<string>) => void;
        /**
          * Event fired when the input field loses focus.
         */
        "onFieldFocus"?: (event: VerdocsFieldTextboxCustomEvent<boolean>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onFieldInput"?: (event: VerdocsFieldTextboxCustomEvent<string>) => void;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsFieldTimestamp {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * Event fired when the input field gains focus.
         */
        "onFieldBlur"?: (event: VerdocsFieldTimestampCustomEvent<boolean>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldTimestampCustomEvent<string>) => void;
        /**
          * Event fired when the input field loses focus.
         */
        "onFieldFocus"?: (event: VerdocsFieldTimestampCustomEvent<boolean>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onFieldInput"?: (event: VerdocsFieldTimestampCustomEvent<string>) => void;
        /**
          * The recipient completing the form, if known.
         */
        "recipient"?: IRecipient;
    }
    interface VerdocsHelpIcon {
        /**
          * Help text to display on hover/focus
         */
        "text"?: string;
    }
    interface VerdocsInitialDialog {
        /**
          * Initial signature text
         */
        "initials"?: string;
        /**
          * Event fired when the initials are adopted.
         */
        "onAdopt"?: (event: VerdocsInitialDialogCustomEvent<string>) => void;
        /**
          * Event fired when the step is cancelled.
         */
        "onCancel"?: (event: VerdocsInitialDialogCustomEvent<any>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open"?: boolean;
    }
    interface VerdocsKbaDialog {
        /**
          * For choice challenges, a set of choices to choose from. 6 choices is recommended to fit most screen sizes.
         */
        "choices"?: string[];
        /**
          * If set, a help/instructions box will be displayed with this text
         */
        "helptext"?: string;
        /**
          * If set, a help/instructions box will be displayed with this title
         */
        "helptitle"?: string;
        /**
          * For text input challenges, the label to display next to the input field.
         */
        "label"?: string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "mode"?: 'text' | 'choice';
        /**
          * Event fired when the dialog is closed. The event data will contain the closure reason.
         */
        "onCancel"?: (event: VerdocsKbaDialogCustomEvent<any>) => void;
        /**
          * Event fired when the dialog is closed. The event data will contain the closure reason.
         */
        "onDone"?: (event: VerdocsKbaDialogCustomEvent<string>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open"?: boolean;
        /**
          * For text input challenges, the placeholder to display inside the input field.
         */
        "placeholder"?: string;
        /**
          * Which step this confirmation is for, in a multi-step process. Ignored if `steps` is < 2.
         */
        "step"?: number;
        /**
          * How many steps exist in a multi-step process. Set to 1 for a single-step process (hides the indicator).
         */
        "steps"?: number;
    }
    interface VerdocsLoader {
    }
    interface VerdocsOkDialog {
        /**
          * If set, a cancel button will also be displayed. Note that the dialog is always cancelable by clicking the background overlay to dismiss it.
         */
        "cancel"?: boolean;
        /**
          * The title of the dialog. "title" is a reserved word, so we use heading.
         */
        "heading"?: string;
        /**
          * The message content to display.
         */
        "message"?: string;
        /**
          * Event fired when the dialog is closed. The event data will contain the closure reason.
         */
        "onClosed"?: (event: VerdocsOkDialogCustomEvent<'cancel' | 'ok'>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open"?: boolean;
    }
    interface VerdocsOrganizationCard {
        /**
          * The organization to display
         */
        "organization"?: IOrganization;
    }
    interface VerdocsPreview {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsPreviewCustomEvent<SDKError>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
    }
    interface VerdocsQuickFunctions {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when an entry is clicked.
         */
        "onCreateDocument"?: (event: VerdocsQuickFunctionsCustomEvent<any>) => void;
        /**
          * Event fired when an entry is clicked.
         */
        "onCreateTemplate"?: (event: VerdocsQuickFunctionsCustomEvent<any>) => void;
    }
    interface VerdocsRadioButton {
        /**
          * Whether the radio button is currently selected.
         */
        "checked"?: boolean;
        /**
          * If set, the button will still be displayed but not selectable.
         */
        "disabled"?: boolean;
        /**
          * HTML form field name for the input.
         */
        "name"?: string;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onSelected"?: (event: VerdocsRadioButtonCustomEvent<{value: string}>) => void;
        /**
          * Value to track with the input.
         */
        "value"?: string;
    }
    interface VerdocsSearch {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
    }
    interface VerdocsSearchActivity {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when an entry is clicked.
         */
        "onEntrySelected"?: (event: VerdocsSearchActivityCustomEvent<IRecentSearch>) => void;
        "options"?: any;
        "type"?: 'recent' | 'saved' | 'starred';
    }
    interface VerdocsSearchBox {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * If set, the input field will attempt to "grab" focus after being rendered.
         */
        "grabsFocus"?: boolean;
        /**
          * Event fired when the user changes the query string.
         */
        "onQueryChanged"?: (event: VerdocsSearchBoxCustomEvent<string>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onSearchClicked"?: (event: VerdocsSearchBoxCustomEvent<ISearchEvent>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onTypeChanged"?: (event: VerdocsSearchBoxCustomEvent<TContentType>) => void;
        /**
          * The placeholder to display in the input field.
         */
        "placeholder"?: string;
        /**
          * The text search string entered by the user.
         */
        "query"?: string;
        /**
          * If set to a value other than 'all', a removeable filter indicator will be displayed.
         */
        "type"?: TContentType;
    }
    interface VerdocsSearchTabs {
    }
    interface VerdocsSend {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The user canceled the process.
         */
        "onCancel"?: (event: VerdocsSendCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSendCustomEvent<SDKError>) => void;
        /**
          * The user completed the form and clicked send.
         */
        "onSend"?: (event: VerdocsSendCustomEvent<{recipientsAssigned: IRole[]}>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
    }
    interface VerdocsSign {
        /**
          * The ID of the document to sign.
         */
        "documentId"?: string | null;
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The invite code for the signer.
         */
        "inviteCode"?: string | null;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSignCustomEvent<SDKError>) => void;
        /**
          * The name of the role that will be signing.
         */
        "roleId"?: string | null;
    }
    interface VerdocsSignatureDialog {
        /**
          * Initial signature text
         */
        "name"?: string;
        /**
          * Event fired when a signature is adopted.
         */
        "onAdopt"?: (event: VerdocsSignatureDialogCustomEvent<string>) => void;
        /**
          * Event fired when the step is cancelled.
         */
        "onCancel"?: (event: VerdocsSignatureDialogCustomEvent<any>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open"?: boolean;
    }
    interface VerdocsStatusIndicator {
        /**
          * The document to display status for. Ignored if `status` is set directly.
         */
        "document"?: IDocument;
        /**
          * The size (height) of the indicator. The small variant is suitable for use in densely populated components such as table rows.
         */
        "size"?: 'small' | 'normal';
        /**
          * The status to display.
         */
        "status"?: TDocumentStatus | TRecipientStatus | 'accepted';
        /**
          * The theme to use for diplay.
         */
        "theme"?: 'dark' | 'light';
    }
    interface VerdocsTemplateCard {
        /**
          * The template for which the card will be rendered.
         */
        "template"?: ITemplate;
    }
    interface VerdocsTemplateCreate {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onCancel"?: (event: VerdocsTemplateCreateCustomEvent<any>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onFileUploaded"?: (event: VerdocsTemplateCreateCustomEvent<{filePath: string}>) => void;
    }
    interface VerdocsTemplateFields {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onCancel"?: (event: VerdocsTemplateFieldsCustomEvent<any>) => void;
        /**
          * Event fired when the fields are saved.
         */
        "onSave"?: (event: VerdocsTemplateFieldsCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateFieldsCustomEvent<SDKError>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
    }
    interface VerdocsTemplateProperties {
        /**
          * If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number of suggestions be limited to the 5 best matching records.
         */
        "contactSuggestions"?: (IEmailContact | IPhoneContact)[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onCancel"?: (event: VerdocsTemplatePropertiesCustomEvent<any>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onContactSelected"?: (event: VerdocsTemplatePropertiesCustomEvent<IContactSelectEvent>) => void;
        /**
          * Event fired when the user enters text in the search field. The calling application may use this to update the `contactSuggestions` property.
         */
        "onSearchContacts"?: (event: VerdocsTemplatePropertiesCustomEvent<IContactSearchEvent>) => void;
        /**
          * The role that this contact will be assigned to.
         */
        "templateRole"?: IRole | null;
    }
    interface VerdocsTemplateRecipients {
        /**
          * If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number of suggestions be limited to the 5 best matching records.
         */
        "contactSuggestions"?: (IEmailContact | IPhoneContact)[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onCancel"?: (event: VerdocsTemplateRecipientsCustomEvent<any>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onContactSelected"?: (event: VerdocsTemplateRecipientsCustomEvent<IContactSelectEvent>) => void;
        /**
          * Event fired when the user enters text in the search field. The calling application may use this to update the `contactSuggestions` property.
         */
        "onSearchContacts"?: (event: VerdocsTemplateRecipientsCustomEvent<IContactSearchEvent>) => void;
        /**
          * The role that this contact will be assigned to.
         */
        "templateRole"?: IRole | null;
    }
    interface VerdocsTemplateSenderDialog {
        /**
          * Event fired when the dialog is closed. The event data will contain the closure reason.
         */
        "onCancel"?: (event: VerdocsTemplateSenderDialogCustomEvent<any>) => void;
        /**
          * Event fired when the dialog is closed. The event data will contain the closure reason.
         */
        "onDone"?: (event: VerdocsTemplateSenderDialogCustomEvent<{sender: TemplateSenderTypes}>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open"?: boolean;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "value"?: TemplateSenderTypes;
    }
    interface VerdocsTemplateTags {
        /**
          * The tags to display
         */
        "tags"?: any[];
    }
    interface VerdocsTextInput {
        /**
          * If desired, the autocomplete attribute to set.
         */
        "autocomplete"?: string;
        /**
          * Should the field be disabled?
         */
        "disabled"?: boolean;
        /**
          * The label for the field.
         */
        "label"?: string;
        /**
          * Event fired when the field loses focus.
         */
        "onFieldBlur"?: (event: VerdocsTextInputCustomEvent<any>) => void;
        /**
          * Event fired when the field receives focus.
         */
        "onFieldFocus"?: (event: VerdocsTextInputCustomEvent<any>) => void;
        /**
          * Event fired when the input value changes.
         */
        "onFieldInput"?: (event: VerdocsTextInputCustomEvent<string>) => void;
        /**
          * The placeholder for the field.
         */
        "placeholder"?: string;
        /**
          * The type of field to render. Only text-type fields are allowed here for the current styling. Additional types (e.g. a date picker) will be supported by other controls in the future.
         */
        "type"?: 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url';
        /**
          * The value for the input field.
         */
        "value"?: string;
    }
    interface VerdocsToggle {
        /**
          * The tags to display
         */
        "options"?: IToggleIconButtons;
        /**
          * The "theme" to be used
         */
        "theme"?: 'light' | 'dark';
    }
    interface VerdocsToggleButton {
        "active"?: boolean;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "icon"?: string | null;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "label"?: string | null;
        /**
          * Event fired when the button is pressed.
         */
        "onToggle"?: (event: VerdocsToggleButtonCustomEvent<{active: boolean}>) => void;
        /**
          * How large the button should be. Small buttons are intended for dialog boxes and other smaller scale UI regions.
         */
        "size"?: 'small' | 'normal';
    }
    interface VerdocsUploadDialog {
        /**
          * Event fired when the dialog is closed. The event data will contain the closure reason.
         */
        "onCancel"?: (event: VerdocsUploadDialogCustomEvent<any>) => void;
        /**
          * Event fired when the dialog is closed. The event data will contain the closure reason.
         */
        "onDone"?: (event: VerdocsUploadDialogCustomEvent<FileWithData[]>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open"?: boolean;
    }
    interface VerdocsView {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Fired when a page has been changed
         */
        "onPageChange"?: (event: VerdocsViewCustomEvent<number>) => void;
        /**
          * Fired when a page has been initialized
         */
        "onPageInit"?: (event: VerdocsViewCustomEvent<number>) => void;
        /**
          * Fired when a page has been changed
         */
        "onPageLoaded"?: (event: VerdocsViewCustomEvent<number>) => void;
        /**
          * Fired when a page has been rendered
         */
        "onPageRendered"?: (event: VerdocsViewCustomEvent<IPageRenderEvent>) => void;
        /**
          * Fired when a page has been scaled
         */
        "onScaleChange"?: (event: VerdocsViewCustomEvent<number>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsViewCustomEvent<SDKError>) => void;
        /**
          * Layers will be passed through to the individual pages inside this component.
         */
        "pageLayers"?: IPageLayer[];
        /**
          * Rotate the PDF in degrees
         */
        "rotation"?: 0 | 90 | 180 | 270;
        /**
          * Src of the PDF to load and render
         */
        "source"?: string;
    }
    interface IntrinsicElements {
        "verdocs-auth": VerdocsAuth;
        "verdocs-build": VerdocsBuild;
        "verdocs-button": VerdocsButton;
        "verdocs-contact-picker": VerdocsContactPicker;
        "verdocs-document-page": VerdocsDocumentPage;
        "verdocs-dropdown": VerdocsDropdown;
        "verdocs-field-attachment": VerdocsFieldAttachment;
        "verdocs-field-checkbox": VerdocsFieldCheckbox;
        "verdocs-field-date": VerdocsFieldDate;
        "verdocs-field-dropdown": VerdocsFieldDropdown;
        "verdocs-field-initial": VerdocsFieldInitial;
        "verdocs-field-payment": VerdocsFieldPayment;
        "verdocs-field-radio-button": VerdocsFieldRadioButton;
        "verdocs-field-signature": VerdocsFieldSignature;
        "verdocs-field-textarea": VerdocsFieldTextarea;
        "verdocs-field-textbox": VerdocsFieldTextbox;
        "verdocs-field-timestamp": VerdocsFieldTimestamp;
        "verdocs-help-icon": VerdocsHelpIcon;
        "verdocs-initial-dialog": VerdocsInitialDialog;
        "verdocs-kba-dialog": VerdocsKbaDialog;
        "verdocs-loader": VerdocsLoader;
        "verdocs-ok-dialog": VerdocsOkDialog;
        "verdocs-organization-card": VerdocsOrganizationCard;
        "verdocs-preview": VerdocsPreview;
        "verdocs-quick-functions": VerdocsQuickFunctions;
        "verdocs-radio-button": VerdocsRadioButton;
        "verdocs-search": VerdocsSearch;
        "verdocs-search-activity": VerdocsSearchActivity;
        "verdocs-search-box": VerdocsSearchBox;
        "verdocs-search-tabs": VerdocsSearchTabs;
        "verdocs-send": VerdocsSend;
        "verdocs-sign": VerdocsSign;
        "verdocs-signature-dialog": VerdocsSignatureDialog;
        "verdocs-status-indicator": VerdocsStatusIndicator;
        "verdocs-template-card": VerdocsTemplateCard;
        "verdocs-template-create": VerdocsTemplateCreate;
        "verdocs-template-fields": VerdocsTemplateFields;
        "verdocs-template-properties": VerdocsTemplateProperties;
        "verdocs-template-recipients": VerdocsTemplateRecipients;
        "verdocs-template-sender-dialog": VerdocsTemplateSenderDialog;
        "verdocs-template-tags": VerdocsTemplateTags;
        "verdocs-text-input": VerdocsTextInput;
        "verdocs-toggle": VerdocsToggle;
        "verdocs-toggle-button": VerdocsToggleButton;
        "verdocs-upload-dialog": VerdocsUploadDialog;
        "verdocs-view": VerdocsView;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "verdocs-auth": LocalJSX.VerdocsAuth & JSXBase.HTMLAttributes<HTMLVerdocsAuthElement>;
            "verdocs-build": LocalJSX.VerdocsBuild & JSXBase.HTMLAttributes<HTMLVerdocsBuildElement>;
            "verdocs-button": LocalJSX.VerdocsButton & JSXBase.HTMLAttributes<HTMLVerdocsButtonElement>;
            "verdocs-contact-picker": LocalJSX.VerdocsContactPicker & JSXBase.HTMLAttributes<HTMLVerdocsContactPickerElement>;
            "verdocs-document-page": LocalJSX.VerdocsDocumentPage & JSXBase.HTMLAttributes<HTMLVerdocsDocumentPageElement>;
            "verdocs-dropdown": LocalJSX.VerdocsDropdown & JSXBase.HTMLAttributes<HTMLVerdocsDropdownElement>;
            "verdocs-field-attachment": LocalJSX.VerdocsFieldAttachment & JSXBase.HTMLAttributes<HTMLVerdocsFieldAttachmentElement>;
            "verdocs-field-checkbox": LocalJSX.VerdocsFieldCheckbox & JSXBase.HTMLAttributes<HTMLVerdocsFieldCheckboxElement>;
            "verdocs-field-date": LocalJSX.VerdocsFieldDate & JSXBase.HTMLAttributes<HTMLVerdocsFieldDateElement>;
            "verdocs-field-dropdown": LocalJSX.VerdocsFieldDropdown & JSXBase.HTMLAttributes<HTMLVerdocsFieldDropdownElement>;
            "verdocs-field-initial": LocalJSX.VerdocsFieldInitial & JSXBase.HTMLAttributes<HTMLVerdocsFieldInitialElement>;
            "verdocs-field-payment": LocalJSX.VerdocsFieldPayment & JSXBase.HTMLAttributes<HTMLVerdocsFieldPaymentElement>;
            "verdocs-field-radio-button": LocalJSX.VerdocsFieldRadioButton & JSXBase.HTMLAttributes<HTMLVerdocsFieldRadioButtonElement>;
            "verdocs-field-signature": LocalJSX.VerdocsFieldSignature & JSXBase.HTMLAttributes<HTMLVerdocsFieldSignatureElement>;
            "verdocs-field-textarea": LocalJSX.VerdocsFieldTextarea & JSXBase.HTMLAttributes<HTMLVerdocsFieldTextareaElement>;
            "verdocs-field-textbox": LocalJSX.VerdocsFieldTextbox & JSXBase.HTMLAttributes<HTMLVerdocsFieldTextboxElement>;
            "verdocs-field-timestamp": LocalJSX.VerdocsFieldTimestamp & JSXBase.HTMLAttributes<HTMLVerdocsFieldTimestampElement>;
            "verdocs-help-icon": LocalJSX.VerdocsHelpIcon & JSXBase.HTMLAttributes<HTMLVerdocsHelpIconElement>;
            "verdocs-initial-dialog": LocalJSX.VerdocsInitialDialog & JSXBase.HTMLAttributes<HTMLVerdocsInitialDialogElement>;
            "verdocs-kba-dialog": LocalJSX.VerdocsKbaDialog & JSXBase.HTMLAttributes<HTMLVerdocsKbaDialogElement>;
            "verdocs-loader": LocalJSX.VerdocsLoader & JSXBase.HTMLAttributes<HTMLVerdocsLoaderElement>;
            "verdocs-ok-dialog": LocalJSX.VerdocsOkDialog & JSXBase.HTMLAttributes<HTMLVerdocsOkDialogElement>;
            "verdocs-organization-card": LocalJSX.VerdocsOrganizationCard & JSXBase.HTMLAttributes<HTMLVerdocsOrganizationCardElement>;
            "verdocs-preview": LocalJSX.VerdocsPreview & JSXBase.HTMLAttributes<HTMLVerdocsPreviewElement>;
            "verdocs-quick-functions": LocalJSX.VerdocsQuickFunctions & JSXBase.HTMLAttributes<HTMLVerdocsQuickFunctionsElement>;
            "verdocs-radio-button": LocalJSX.VerdocsRadioButton & JSXBase.HTMLAttributes<HTMLVerdocsRadioButtonElement>;
            "verdocs-search": LocalJSX.VerdocsSearch & JSXBase.HTMLAttributes<HTMLVerdocsSearchElement>;
            "verdocs-search-activity": LocalJSX.VerdocsSearchActivity & JSXBase.HTMLAttributes<HTMLVerdocsSearchActivityElement>;
            "verdocs-search-box": LocalJSX.VerdocsSearchBox & JSXBase.HTMLAttributes<HTMLVerdocsSearchBoxElement>;
            "verdocs-search-tabs": LocalJSX.VerdocsSearchTabs & JSXBase.HTMLAttributes<HTMLVerdocsSearchTabsElement>;
            "verdocs-send": LocalJSX.VerdocsSend & JSXBase.HTMLAttributes<HTMLVerdocsSendElement>;
            "verdocs-sign": LocalJSX.VerdocsSign & JSXBase.HTMLAttributes<HTMLVerdocsSignElement>;
            "verdocs-signature-dialog": LocalJSX.VerdocsSignatureDialog & JSXBase.HTMLAttributes<HTMLVerdocsSignatureDialogElement>;
            "verdocs-status-indicator": LocalJSX.VerdocsStatusIndicator & JSXBase.HTMLAttributes<HTMLVerdocsStatusIndicatorElement>;
            "verdocs-template-card": LocalJSX.VerdocsTemplateCard & JSXBase.HTMLAttributes<HTMLVerdocsTemplateCardElement>;
            "verdocs-template-create": LocalJSX.VerdocsTemplateCreate & JSXBase.HTMLAttributes<HTMLVerdocsTemplateCreateElement>;
            "verdocs-template-fields": LocalJSX.VerdocsTemplateFields & JSXBase.HTMLAttributes<HTMLVerdocsTemplateFieldsElement>;
            "verdocs-template-properties": LocalJSX.VerdocsTemplateProperties & JSXBase.HTMLAttributes<HTMLVerdocsTemplatePropertiesElement>;
            "verdocs-template-recipients": LocalJSX.VerdocsTemplateRecipients & JSXBase.HTMLAttributes<HTMLVerdocsTemplateRecipientsElement>;
            "verdocs-template-sender-dialog": LocalJSX.VerdocsTemplateSenderDialog & JSXBase.HTMLAttributes<HTMLVerdocsTemplateSenderDialogElement>;
            "verdocs-template-tags": LocalJSX.VerdocsTemplateTags & JSXBase.HTMLAttributes<HTMLVerdocsTemplateTagsElement>;
            "verdocs-text-input": LocalJSX.VerdocsTextInput & JSXBase.HTMLAttributes<HTMLVerdocsTextInputElement>;
            "verdocs-toggle": LocalJSX.VerdocsToggle & JSXBase.HTMLAttributes<HTMLVerdocsToggleElement>;
            "verdocs-toggle-button": LocalJSX.VerdocsToggleButton & JSXBase.HTMLAttributes<HTMLVerdocsToggleButtonElement>;
            "verdocs-upload-dialog": LocalJSX.VerdocsUploadDialog & JSXBase.HTMLAttributes<HTMLVerdocsUploadDialogElement>;
            "verdocs-view": LocalJSX.VerdocsView & JSXBase.HTMLAttributes<HTMLVerdocsViewElement>;
        }
    }
}
