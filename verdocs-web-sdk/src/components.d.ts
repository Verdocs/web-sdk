/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ISearchEvent, TContentType } from "./components/elements/search-box/search-box";
import { IRecentSearch, ISavedSearch } from "@verdocs/js-sdk/Search/Types";
import { IToggleIconButtons } from "./components/controls/toggle-icon-buttons/toggle-icon-buttons";
import { IAuthStatus } from "./components/embeds/verdocs-auth/verdocs-auth";
import { IDocumentField, TDocumentStatus } from "@verdocs/js-sdk/Documents/Documents";
import { IMenuOption } from "./components/controls/verdocs-dropdown/verdocs-dropdown";
import { IOrganization } from "@verdocs/js-sdk/Organizations/Types";
import { ITemplate } from "@verdocs/js-sdk/Templates/Types";
import { IPDFRenderEvent } from "./components/embeds/verdocs-view/verdocs-view";
export namespace Components {
    interface SearchBox {
        /**
          * The placeholder to display in the input field.
         */
        "placeholder": string;
        /**
          * The text search string entered by the user.
         */
        "query": string;
        /**
          * If set to a value other than 'all', a removeable filter indicator will be displayed.
         */
        "type": TContentType;
    }
    interface SearchQuickFunctions {
    }
    interface SearchRecent {
        /**
          * If set, limits the number of entries that will be shown. Note that there is a server-imposed limit of 20 entries that cannot currently be increased (only reduced).
         */
        "limit": number;
    }
    interface SearchSaved {
        /**
          * If set, limits the number of entries that will be shown. Note that there is a server-imposed limit of 20 entries that cannot currently be increased (only reduced).
         */
        "limit": number;
    }
    interface SearchStarred {
        "options": any;
    }
    interface SearchTabs {
    }
    interface ToggleIconButtons {
        /**
          * The tags to display
         */
        "options": IToggleIconButtons;
        /**
          * The "theme" to be used
         */
        "theme": "light" | "dark";
    }
    interface VerdocsAuth {
        /**
          * If the user is authenticated, this embed will normally render invisibly. If debug is set true, a summary if the user's session details will be displayed instead. This may be useful while debugging authentication flows in new applications.
         */
        "debug": boolean;
        /**
          * By default, a Verdocs logo will be displayed above the login/signup forms. This may be used to override its source. (Alternatively, you may simply hide it via CSS overrides.) Logos should be in SVG format for best results.
         */
        "logo": string;
        /**
          * Normally, if the user has a valid session, this embed will be invisible, otherwise it will display login / signup forms. If this is set to false, this embed will be invisible in both cases. Apps may use this to verify if a user has a valid session without needing a separate call to Verdocs JS SDK.
         */
        "visible": boolean;
    }
    interface VerdocsButton {
        /**
          * Whether the button should be disabled.
         */
        "disabled": boolean;
        /**
          * The label for the  button.
         */
        "label": string;
        /**
          * The type of the button.
         */
        "type": 'button' | 'submit' | 'reset';
    }
    interface VerdocsDocumentStatus {
        /**
          * The status to display
         */
        "status": TDocumentStatus;
    }
    interface VerdocsDropdown {
        /**
          * If set, the component will be open by default. This is primarily intended to be used for testing.
         */
        "open": boolean;
        /**
          * The menu options to display.
         */
        "options": IMenuOption[];
    }
    interface VerdocsFieldAttachment {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled": boolean;
        /**
          * Sets the tabIndex of the input element.
         */
        "order": number;
        /**
          * If true, the field will be marked required.
         */
        "required": boolean;
        /**
          * Sets the value of the input element.
         */
        "value": string;
    }
    interface VerdocsFieldCheckbox {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled": boolean;
        /**
          * Sets the tabIndex of the input element.
         */
        "order": number;
        /**
          * If true, the field will be marked required.
         */
        "required": boolean;
        /**
          * Sets the value of the input element.
         */
        "value": boolean;
    }
    interface VerdocsFieldDate {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled": boolean;
        /**
          * Sets the tabIndex of the input element.
         */
        "order": number;
        /**
          * A placeholder to assist the user in completing the field.
         */
        "placeholder": string;
        /**
          * If true, the field will be marked required.
         */
        "required": boolean;
        /**
          * Sets the value of the input element.
         */
        "value": string;
    }
    interface VerdocsFieldDropdown {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled": boolean;
        /**
          * The optoins to choose from.
         */
        "options": any[];
        /**
          * If true, the field will be marked required.
         */
        "required": boolean;
        /**
          * The currently selected value.
         */
        "value": string;
    }
    interface VerdocsFieldInitial {
        /**
          * Whether the field is required.
         */
        "required": boolean;
        /**
          * The base64 signature value.
         */
        "value": string;
    }
    interface VerdocsFieldPayment {
        "currentInitial": string;
        "currentInitialId": string;
        "currentSignature": string;
        "currentSignatureId": string;
        /**
          * The field to display.
         */
        "field": IDocumentField;
        "fieldId": string;
        "fields": any[];
        "focused": boolean;
        "pageNum": number;
        "pdfPages": any[];
        "recipients": any;
        "roleName": string;
        "selectedRoleName": string;
        "signed": boolean;
    }
    interface VerdocsFieldRadioButton {
        /**
          * Sets the value of the input element.
         */
        "checked": boolean;
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled": boolean;
        /**
          * Sets the name of the input element.
         */
        "name": string;
        /**
          * Sets the tabIndex of the input element.
         */
        "order": number;
        /**
          * If true, the field will be marked required.
         */
        "required": boolean;
        /**
          * Sets the value of the input element.
         */
        "value": string;
    }
    interface VerdocsFieldSignature {
        /**
          * Whether the field is required.
         */
        "required": boolean;
        /**
          * The base64 signature value.
         */
        "value": string;
    }
    interface VerdocsFieldTextarea {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled": boolean;
        /**
          * Sets the tabIndex of the input element.
         */
        "order": number;
        /**
          * A placeholder to assist the user in completing the field.
         */
        "placeholder": string;
        /**
          * If true, the field will be marked required.
         */
        "required": boolean;
        /**
          * Sets the value of the input element.
         */
        "value": string;
    }
    interface VerdocsFieldTextbox {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled": boolean;
        /**
          * Sets the tabIndex of the input element.
         */
        "order": number;
        /**
          * A placeholder to assist the user in completing the field.
         */
        "placeholder": string;
        /**
          * If true, the field will be marked required.
         */
        "required": boolean;
        /**
          * Sets the value of the input element.
         */
        "value": string;
    }
    interface VerdocsInitialDialog {
        /**
          * Signature text
         */
        "initials": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open": boolean;
    }
    interface VerdocsLoader {
    }
    interface VerdocsOkDialog {
        /**
          * The title of the dialog. "title" is a reserved word, so we use heading.
         */
        "heading": string;
        /**
          * The message content to display.
         */
        "message": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open": boolean;
    }
    interface VerdocsOrganizationCard {
        /**
          * The organization to display
         */
        "organization": IOrganization;
    }
    interface VerdocsSearch {
    }
    interface VerdocsSign {
        /**
          * If `source` is set to `verdocs-sign`, this should be set to a valid invitation code to activate a signing session.
         */
        "documentid": string | null;
        /**
          * If `source` is set to `verdocs-sign`, this should be set to a valid invitation code to activate a signing session.
         */
        "invitecode": string | null;
        /**
          * If `source` is set to `verdocs-sign`, this should be set to a valid invitation code to activate a signing session.
         */
        "roleid": string | null;
    }
    interface VerdocsSignatureDialog {
        /**
          * Signature text
         */
        "fullName": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open": boolean;
    }
    interface VerdocsTemplateCard {
        /**
          * The template for which the card will be rendered.
         */
        "template": ITemplate;
    }
    interface VerdocsTemplateTags {
        /**
          * The tags to display
         */
        "tags": any[];
    }
    interface VerdocsTextButton {
        /**
          * Whether the button should be disabled.
         */
        "disabled": boolean;
        /**
          * The label for the  button.
         */
        "label": string;
        /**
          * The type of the button.
         */
        "type": 'button' | 'submit' | 'reset';
    }
    interface VerdocsTextInput {
        /**
          * If desired, the autocomplete attribute to set.
         */
        "autocomplete": string;
        /**
          * Should the field be disabled?
         */
        "disabled": boolean;
        /**
          * The label for the field.
         */
        "label": string;
        /**
          * The placeholder for the field.
         */
        "placeholder": string;
        /**
          * The type of field to render. Only text-type fields are allowed here for the current styling. Additional types (e.g. a date picker) will be supported by other controls in the future.
         */
        "type": 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url';
        /**
          * The value for the input field.
         */
        "value": string;
    }
    interface VerdocsView {
        /**
          * Rotate the PDF in degrees
         */
        "rotation": 0 | 90 | 180 | 270;
        /**
          * Src of the PDF to load and render
         */
        "source": string;
        /**
          * Access token to use. This component is a wrapper for PDF.js which does not use a VerdocsEndpoint, so the token must be supplied directly.
         */
        "token": string | null;
    }
}
declare global {
    interface HTMLSearchBoxElement extends Components.SearchBox, HTMLStencilElement {
    }
    var HTMLSearchBoxElement: {
        prototype: HTMLSearchBoxElement;
        new (): HTMLSearchBoxElement;
    };
    interface HTMLSearchQuickFunctionsElement extends Components.SearchQuickFunctions, HTMLStencilElement {
    }
    var HTMLSearchQuickFunctionsElement: {
        prototype: HTMLSearchQuickFunctionsElement;
        new (): HTMLSearchQuickFunctionsElement;
    };
    interface HTMLSearchRecentElement extends Components.SearchRecent, HTMLStencilElement {
    }
    var HTMLSearchRecentElement: {
        prototype: HTMLSearchRecentElement;
        new (): HTMLSearchRecentElement;
    };
    interface HTMLSearchSavedElement extends Components.SearchSaved, HTMLStencilElement {
    }
    var HTMLSearchSavedElement: {
        prototype: HTMLSearchSavedElement;
        new (): HTMLSearchSavedElement;
    };
    interface HTMLSearchStarredElement extends Components.SearchStarred, HTMLStencilElement {
    }
    var HTMLSearchStarredElement: {
        prototype: HTMLSearchStarredElement;
        new (): HTMLSearchStarredElement;
    };
    interface HTMLSearchTabsElement extends Components.SearchTabs, HTMLStencilElement {
    }
    var HTMLSearchTabsElement: {
        prototype: HTMLSearchTabsElement;
        new (): HTMLSearchTabsElement;
    };
    interface HTMLToggleIconButtonsElement extends Components.ToggleIconButtons, HTMLStencilElement {
    }
    var HTMLToggleIconButtonsElement: {
        prototype: HTMLToggleIconButtonsElement;
        new (): HTMLToggleIconButtonsElement;
    };
    interface HTMLVerdocsAuthElement extends Components.VerdocsAuth, HTMLStencilElement {
    }
    var HTMLVerdocsAuthElement: {
        prototype: HTMLVerdocsAuthElement;
        new (): HTMLVerdocsAuthElement;
    };
    interface HTMLVerdocsButtonElement extends Components.VerdocsButton, HTMLStencilElement {
    }
    var HTMLVerdocsButtonElement: {
        prototype: HTMLVerdocsButtonElement;
        new (): HTMLVerdocsButtonElement;
    };
    interface HTMLVerdocsDocumentStatusElement extends Components.VerdocsDocumentStatus, HTMLStencilElement {
    }
    var HTMLVerdocsDocumentStatusElement: {
        prototype: HTMLVerdocsDocumentStatusElement;
        new (): HTMLVerdocsDocumentStatusElement;
    };
    interface HTMLVerdocsDropdownElement extends Components.VerdocsDropdown, HTMLStencilElement {
    }
    var HTMLVerdocsDropdownElement: {
        prototype: HTMLVerdocsDropdownElement;
        new (): HTMLVerdocsDropdownElement;
    };
    interface HTMLVerdocsFieldAttachmentElement extends Components.VerdocsFieldAttachment, HTMLStencilElement {
    }
    var HTMLVerdocsFieldAttachmentElement: {
        prototype: HTMLVerdocsFieldAttachmentElement;
        new (): HTMLVerdocsFieldAttachmentElement;
    };
    interface HTMLVerdocsFieldCheckboxElement extends Components.VerdocsFieldCheckbox, HTMLStencilElement {
    }
    var HTMLVerdocsFieldCheckboxElement: {
        prototype: HTMLVerdocsFieldCheckboxElement;
        new (): HTMLVerdocsFieldCheckboxElement;
    };
    interface HTMLVerdocsFieldDateElement extends Components.VerdocsFieldDate, HTMLStencilElement {
    }
    var HTMLVerdocsFieldDateElement: {
        prototype: HTMLVerdocsFieldDateElement;
        new (): HTMLVerdocsFieldDateElement;
    };
    interface HTMLVerdocsFieldDropdownElement extends Components.VerdocsFieldDropdown, HTMLStencilElement {
    }
    var HTMLVerdocsFieldDropdownElement: {
        prototype: HTMLVerdocsFieldDropdownElement;
        new (): HTMLVerdocsFieldDropdownElement;
    };
    interface HTMLVerdocsFieldInitialElement extends Components.VerdocsFieldInitial, HTMLStencilElement {
    }
    var HTMLVerdocsFieldInitialElement: {
        prototype: HTMLVerdocsFieldInitialElement;
        new (): HTMLVerdocsFieldInitialElement;
    };
    interface HTMLVerdocsFieldPaymentElement extends Components.VerdocsFieldPayment, HTMLStencilElement {
    }
    var HTMLVerdocsFieldPaymentElement: {
        prototype: HTMLVerdocsFieldPaymentElement;
        new (): HTMLVerdocsFieldPaymentElement;
    };
    interface HTMLVerdocsFieldRadioButtonElement extends Components.VerdocsFieldRadioButton, HTMLStencilElement {
    }
    var HTMLVerdocsFieldRadioButtonElement: {
        prototype: HTMLVerdocsFieldRadioButtonElement;
        new (): HTMLVerdocsFieldRadioButtonElement;
    };
    interface HTMLVerdocsFieldSignatureElement extends Components.VerdocsFieldSignature, HTMLStencilElement {
    }
    var HTMLVerdocsFieldSignatureElement: {
        prototype: HTMLVerdocsFieldSignatureElement;
        new (): HTMLVerdocsFieldSignatureElement;
    };
    interface HTMLVerdocsFieldTextareaElement extends Components.VerdocsFieldTextarea, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTextareaElement: {
        prototype: HTMLVerdocsFieldTextareaElement;
        new (): HTMLVerdocsFieldTextareaElement;
    };
    interface HTMLVerdocsFieldTextboxElement extends Components.VerdocsFieldTextbox, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTextboxElement: {
        prototype: HTMLVerdocsFieldTextboxElement;
        new (): HTMLVerdocsFieldTextboxElement;
    };
    interface HTMLVerdocsInitialDialogElement extends Components.VerdocsInitialDialog, HTMLStencilElement {
    }
    var HTMLVerdocsInitialDialogElement: {
        prototype: HTMLVerdocsInitialDialogElement;
        new (): HTMLVerdocsInitialDialogElement;
    };
    interface HTMLVerdocsLoaderElement extends Components.VerdocsLoader, HTMLStencilElement {
    }
    var HTMLVerdocsLoaderElement: {
        prototype: HTMLVerdocsLoaderElement;
        new (): HTMLVerdocsLoaderElement;
    };
    interface HTMLVerdocsOkDialogElement extends Components.VerdocsOkDialog, HTMLStencilElement {
    }
    var HTMLVerdocsOkDialogElement: {
        prototype: HTMLVerdocsOkDialogElement;
        new (): HTMLVerdocsOkDialogElement;
    };
    interface HTMLVerdocsOrganizationCardElement extends Components.VerdocsOrganizationCard, HTMLStencilElement {
    }
    var HTMLVerdocsOrganizationCardElement: {
        prototype: HTMLVerdocsOrganizationCardElement;
        new (): HTMLVerdocsOrganizationCardElement;
    };
    interface HTMLVerdocsSearchElement extends Components.VerdocsSearch, HTMLStencilElement {
    }
    var HTMLVerdocsSearchElement: {
        prototype: HTMLVerdocsSearchElement;
        new (): HTMLVerdocsSearchElement;
    };
    interface HTMLVerdocsSignElement extends Components.VerdocsSign, HTMLStencilElement {
    }
    var HTMLVerdocsSignElement: {
        prototype: HTMLVerdocsSignElement;
        new (): HTMLVerdocsSignElement;
    };
    interface HTMLVerdocsSignatureDialogElement extends Components.VerdocsSignatureDialog, HTMLStencilElement {
    }
    var HTMLVerdocsSignatureDialogElement: {
        prototype: HTMLVerdocsSignatureDialogElement;
        new (): HTMLVerdocsSignatureDialogElement;
    };
    interface HTMLVerdocsTemplateCardElement extends Components.VerdocsTemplateCard, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateCardElement: {
        prototype: HTMLVerdocsTemplateCardElement;
        new (): HTMLVerdocsTemplateCardElement;
    };
    interface HTMLVerdocsTemplateTagsElement extends Components.VerdocsTemplateTags, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateTagsElement: {
        prototype: HTMLVerdocsTemplateTagsElement;
        new (): HTMLVerdocsTemplateTagsElement;
    };
    interface HTMLVerdocsTextButtonElement extends Components.VerdocsTextButton, HTMLStencilElement {
    }
    var HTMLVerdocsTextButtonElement: {
        prototype: HTMLVerdocsTextButtonElement;
        new (): HTMLVerdocsTextButtonElement;
    };
    interface HTMLVerdocsTextInputElement extends Components.VerdocsTextInput, HTMLStencilElement {
    }
    var HTMLVerdocsTextInputElement: {
        prototype: HTMLVerdocsTextInputElement;
        new (): HTMLVerdocsTextInputElement;
    };
    interface HTMLVerdocsViewElement extends Components.VerdocsView, HTMLStencilElement {
    }
    var HTMLVerdocsViewElement: {
        prototype: HTMLVerdocsViewElement;
        new (): HTMLVerdocsViewElement;
    };
    interface HTMLElementTagNameMap {
        "search-box": HTMLSearchBoxElement;
        "search-quick-functions": HTMLSearchQuickFunctionsElement;
        "search-recent": HTMLSearchRecentElement;
        "search-saved": HTMLSearchSavedElement;
        "search-starred": HTMLSearchStarredElement;
        "search-tabs": HTMLSearchTabsElement;
        "toggle-icon-buttons": HTMLToggleIconButtonsElement;
        "verdocs-auth": HTMLVerdocsAuthElement;
        "verdocs-button": HTMLVerdocsButtonElement;
        "verdocs-document-status": HTMLVerdocsDocumentStatusElement;
        "verdocs-dropdown": HTMLVerdocsDropdownElement;
        "verdocs-field-attachment": HTMLVerdocsFieldAttachmentElement;
        "verdocs-field-checkbox": HTMLVerdocsFieldCheckboxElement;
        "verdocs-field-date": HTMLVerdocsFieldDateElement;
        "verdocs-field-dropdown": HTMLVerdocsFieldDropdownElement;
        "verdocs-field-initial": HTMLVerdocsFieldInitialElement;
        "verdocs-field-payment": HTMLVerdocsFieldPaymentElement;
        "verdocs-field-radio-button": HTMLVerdocsFieldRadioButtonElement;
        "verdocs-field-signature": HTMLVerdocsFieldSignatureElement;
        "verdocs-field-textarea": HTMLVerdocsFieldTextareaElement;
        "verdocs-field-textbox": HTMLVerdocsFieldTextboxElement;
        "verdocs-initial-dialog": HTMLVerdocsInitialDialogElement;
        "verdocs-loader": HTMLVerdocsLoaderElement;
        "verdocs-ok-dialog": HTMLVerdocsOkDialogElement;
        "verdocs-organization-card": HTMLVerdocsOrganizationCardElement;
        "verdocs-search": HTMLVerdocsSearchElement;
        "verdocs-sign": HTMLVerdocsSignElement;
        "verdocs-signature-dialog": HTMLVerdocsSignatureDialogElement;
        "verdocs-template-card": HTMLVerdocsTemplateCardElement;
        "verdocs-template-tags": HTMLVerdocsTemplateTagsElement;
        "verdocs-text-button": HTMLVerdocsTextButtonElement;
        "verdocs-text-input": HTMLVerdocsTextInputElement;
        "verdocs-view": HTMLVerdocsViewElement;
    }
}
declare namespace LocalJSX {
    interface SearchBox {
        /**
          * Event fired when the user changes the query string.
         */
        "onQueryChanged"?: (event: CustomEvent<string>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onSearchClicked"?: (event: CustomEvent<ISearchEvent>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onTypeChanged"?: (event: CustomEvent<TContentType>) => void;
        /**
          * The placeholder to display in the input field.
         */
        "placeholder"?: string;
        /**
          * The text search string entered by the user.
         */
        "query"?: string;
        /**
          * If set to a value other than 'all', a removeable filter indicator will be displayed.
         */
        "type"?: TContentType;
    }
    interface SearchQuickFunctions {
        /**
          * Event fired when an entry is clicked.
         */
        "onCreateDocument"?: (event: CustomEvent<any>) => void;
        /**
          * Event fired when an entry is clicked.
         */
        "onCreateTemplate"?: (event: CustomEvent<any>) => void;
    }
    interface SearchRecent {
        /**
          * If set, limits the number of entries that will be shown. Note that there is a server-imposed limit of 20 entries that cannot currently be increased (only reduced).
         */
        "limit"?: number;
        /**
          * Event fired when an entry is clicked.
         */
        "onEntrySelected"?: (event: CustomEvent<IRecentSearch>) => void;
    }
    interface SearchSaved {
        /**
          * If set, limits the number of entries that will be shown. Note that there is a server-imposed limit of 20 entries that cannot currently be increased (only reduced).
         */
        "limit"?: number;
        /**
          * Event fired when an entry is clicked.
         */
        "onEntrySelected"?: (event: CustomEvent<ISavedSearch>) => void;
    }
    interface SearchStarred {
        /**
          * Event fired when an entry is clicked.
         */
        "onEntrySelected"?: (event: CustomEvent<IRecentSearch>) => void;
        "options"?: any;
    }
    interface SearchTabs {
    }
    interface ToggleIconButtons {
        /**
          * The tags to display
         */
        "options"?: IToggleIconButtons;
        /**
          * The "theme" to be used
         */
        "theme"?: "light" | "dark";
    }
    interface VerdocsAuth {
        /**
          * If the user is authenticated, this embed will normally render invisibly. If debug is set true, a summary if the user's session details will be displayed instead. This may be useful while debugging authentication flows in new applications.
         */
        "debug"?: boolean;
        /**
          * By default, a Verdocs logo will be displayed above the login/signup forms. This may be used to override its source. (Alternatively, you may simply hide it via CSS overrides.) Logos should be in SVG format for best results.
         */
        "logo"?: string;
        /**
          * Event fired when session authentication process has completed. Check the event contents for completion status.
         */
        "onAuthenticated"?: (event: CustomEvent<IAuthStatus>) => void;
        /**
          * Normally, if the user has a valid session, this embed will be invisible, otherwise it will display login / signup forms. If this is set to false, this embed will be invisible in both cases. Apps may use this to verify if a user has a valid session without needing a separate call to Verdocs JS SDK.
         */
        "visible"?: boolean;
    }
    interface VerdocsButton {
        /**
          * Whether the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * The label for the  button.
         */
        "label"?: string;
        /**
          * Event fired when the button is pressed.
         */
        "onPress"?: (event: CustomEvent<string>) => void;
        /**
          * The type of the button.
         */
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface VerdocsDocumentStatus {
        /**
          * The status to display
         */
        "status"?: TDocumentStatus;
    }
    interface VerdocsDropdown {
        /**
          * Event fired when a menu option is clicked. Web Component events need to be "composed" to cross the Shadow DOM and be received by parent frameworks.
         */
        "onOptionSelected"?: (event: CustomEvent<IMenuOption>) => void;
        /**
          * If set, the component will be open by default. This is primarily intended to be used for testing.
         */
        "open"?: boolean;
        /**
          * The menu options to display.
         */
        "options"?: IMenuOption[];
    }
    interface VerdocsFieldAttachment {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled"?: boolean;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: CustomEvent<string>) => void;
        /**
          * Sets the tabIndex of the input element.
         */
        "order"?: number;
        /**
          * If true, the field will be marked required.
         */
        "required"?: boolean;
        /**
          * Sets the value of the input element.
         */
        "value"?: string;
    }
    interface VerdocsFieldCheckbox {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled"?: boolean;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: CustomEvent<string>) => void;
        /**
          * Sets the tabIndex of the input element.
         */
        "order"?: number;
        /**
          * If true, the field will be marked required.
         */
        "required"?: boolean;
        /**
          * Sets the value of the input element.
         */
        "value"?: boolean;
    }
    interface VerdocsFieldDate {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled"?: boolean;
        /**
          * Event fired when the input field gains focus.
         */
        "onFieldBlur"?: (event: CustomEvent<boolean>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: CustomEvent<string>) => void;
        /**
          * Event fired when the input field loses focus.
         */
        "onFieldFocus"?: (event: CustomEvent<boolean>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onFieldInput"?: (event: CustomEvent<string>) => void;
        /**
          * Sets the tabIndex of the input element.
         */
        "order"?: number;
        /**
          * A placeholder to assist the user in completing the field.
         */
        "placeholder"?: string;
        /**
          * If true, the field will be marked required.
         */
        "required"?: boolean;
        /**
          * Sets the value of the input element.
         */
        "value"?: string;
    }
    interface VerdocsFieldDropdown {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled"?: boolean;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: CustomEvent<string>) => void;
        /**
          * The optoins to choose from.
         */
        "options"?: any[];
        /**
          * If true, the field will be marked required.
         */
        "required"?: boolean;
        /**
          * The currently selected value.
         */
        "value"?: string;
    }
    interface VerdocsFieldInitial {
        /**
          * Event emitted when an initial block is adopted by the user. The event detail will contain the base64 string of the initial image.
         */
        "onAdopt"?: (event: CustomEvent<string>) => void;
        /**
          * Event emitted when the user cancels the process.
         */
        "onCancel"?: (event: CustomEvent<any>) => void;
        /**
          * Whether the field is required.
         */
        "required"?: boolean;
        /**
          * The base64 signature value.
         */
        "value"?: string;
    }
    interface VerdocsFieldPayment {
        "currentInitial"?: string;
        "currentInitialId"?: string;
        "currentSignature"?: string;
        "currentSignatureId"?: string;
        /**
          * The field to display.
         */
        "field"?: IDocumentField;
        "fieldId"?: string;
        "fields"?: any[];
        "focused"?: boolean;
        "onInitialComplete"?: (event: CustomEvent<string>) => void;
        "onSignatureComplete"?: (event: CustomEvent<string>) => void;
        "pageNum"?: number;
        "pdfPages"?: any[];
        "recipients"?: any;
        "roleName"?: string;
        "selectedRoleName"?: string;
        "signed"?: boolean;
    }
    interface VerdocsFieldRadioButton {
        /**
          * Sets the value of the input element.
         */
        "checked"?: boolean;
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled"?: boolean;
        /**
          * Sets the name of the input element.
         */
        "name"?: string;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: CustomEvent<string>) => void;
        /**
          * Sets the tabIndex of the input element.
         */
        "order"?: number;
        /**
          * If true, the field will be marked required.
         */
        "required"?: boolean;
        /**
          * Sets the value of the input element.
         */
        "value"?: string;
    }
    interface VerdocsFieldSignature {
        /**
          * Event emitted when an initial block is adopted by the user. The event detail will contain the base64 string of the initial image.
         */
        "onAdopt"?: (event: CustomEvent<string>) => void;
        /**
          * Event emitted when the user cancels the process.
         */
        "onCancel"?: (event: CustomEvent<any>) => void;
        /**
          * Whether the field is required.
         */
        "required"?: boolean;
        /**
          * The base64 signature value.
         */
        "value"?: string;
    }
    interface VerdocsFieldTextarea {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled"?: boolean;
        /**
          * Event fired when the input field gains focus.
         */
        "onFieldBlur"?: (event: CustomEvent<boolean>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: CustomEvent<string>) => void;
        /**
          * Event fired when the input field loses focus.
         */
        "onFieldFocus"?: (event: CustomEvent<boolean>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onFieldInput"?: (event: CustomEvent<string>) => void;
        /**
          * Sets the tabIndex of the input element.
         */
        "order"?: number;
        /**
          * A placeholder to assist the user in completing the field.
         */
        "placeholder"?: string;
        /**
          * If true, the field will be marked required.
         */
        "required"?: boolean;
        /**
          * Sets the value of the input element.
         */
        "value"?: string;
    }
    interface VerdocsFieldTextbox {
        /**
          * Sets the disabled attribute of the input element.
         */
        "disabled"?: boolean;
        /**
          * Event fired when the input field gains focus.
         */
        "onFieldBlur"?: (event: CustomEvent<boolean>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: CustomEvent<string>) => void;
        /**
          * Event fired when the input field loses focus.
         */
        "onFieldFocus"?: (event: CustomEvent<boolean>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onFieldInput"?: (event: CustomEvent<string>) => void;
        /**
          * Sets the tabIndex of the input element.
         */
        "order"?: number;
        /**
          * A placeholder to assist the user in completing the field.
         */
        "placeholder"?: string;
        /**
          * If true, the field will be marked required.
         */
        "required"?: boolean;
        /**
          * Sets the value of the input element.
         */
        "value"?: string;
    }
    interface VerdocsInitialDialog {
        /**
          * Signature text
         */
        "initials"?: string;
        /**
          * Event fired when the initials are adopted.
         */
        "onAdopt"?: (event: CustomEvent<string>) => void;
        /**
          * Event fired when the step is cancelled.
         */
        "onCancel"?: (event: CustomEvent<any>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open"?: boolean;
    }
    interface VerdocsLoader {
    }
    interface VerdocsOkDialog {
        /**
          * The title of the dialog. "title" is a reserved word, so we use heading.
         */
        "heading"?: string;
        /**
          * The message content to display.
         */
        "message"?: string;
        /**
          * Event fired when the dialog is closed. The event data will contain the closure reason.
         */
        "onClosed"?: (event: CustomEvent<'cancel' | 'ok'>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open"?: boolean;
    }
    interface VerdocsOrganizationCard {
        /**
          * The organization to display
         */
        "organization"?: IOrganization;
    }
    interface VerdocsSearch {
    }
    interface VerdocsSign {
        /**
          * If `source` is set to `verdocs-sign`, this should be set to a valid invitation code to activate a signing session.
         */
        "documentid"?: string | null;
        /**
          * If `source` is set to `verdocs-sign`, this should be set to a valid invitation code to activate a signing session.
         */
        "invitecode"?: string | null;
        /**
          * If `source` is set to `verdocs-sign`, this should be set to a valid invitation code to activate a signing session.
         */
        "roleid"?: string | null;
    }
    interface VerdocsSignatureDialog {
        /**
          * Signature text
         */
        "fullName"?: string;
        /**
          * Event fired when the initials are adopted.
         */
        "onAdopt"?: (event: CustomEvent<string>) => void;
        /**
          * Event fired when the step is cancelled.
         */
        "onCancel"?: (event: CustomEvent<any>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "open"?: boolean;
    }
    interface VerdocsTemplateCard {
        /**
          * The template for which the card will be rendered.
         */
        "template"?: ITemplate;
    }
    interface VerdocsTemplateTags {
        /**
          * The tags to display
         */
        "tags"?: any[];
    }
    interface VerdocsTextButton {
        /**
          * Whether the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * The label for the  button.
         */
        "label"?: string;
        /**
          * Event fired when the button is clicked.
         */
        "onPress"?: (event: CustomEvent<string>) => void;
        /**
          * The type of the button.
         */
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface VerdocsTextInput {
        /**
          * If desired, the autocomplete attribute to set.
         */
        "autocomplete"?: string;
        /**
          * Should the field be disabled?
         */
        "disabled"?: boolean;
        /**
          * The label for the field.
         */
        "label"?: string;
        /**
          * Event fired when the field loses focus.
         */
        "onFieldBlur"?: (event: CustomEvent<any>) => void;
        /**
          * Event fired when the field receives focus.
         */
        "onFieldFocus"?: (event: CustomEvent<any>) => void;
        /**
          * Event fired when the input value changes.
         */
        "onFieldInput"?: (event: CustomEvent<string>) => void;
        /**
          * The placeholder for the field.
         */
        "placeholder"?: string;
        /**
          * The type of field to render. Only text-type fields are allowed here for the current styling. Additional types (e.g. a date picker) will be supported by other controls in the future.
         */
        "type"?: 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url';
        /**
          * The value for the input field.
         */
        "value"?: string;
    }
    interface VerdocsView {
        /**
          * Fired when the document has completed rendered. The event will include the rendered page count.
         */
        "onDocumentRendered"?: (event: CustomEvent<IPDFRenderEvent>) => void;
        /**
          * Fired when a page has been changed
         */
        "onPageChange"?: (event: CustomEvent<number>) => void;
        /**
          * Fired when a page has been initialized
         */
        "onPageInit"?: (event: CustomEvent<number>) => void;
        /**
          * Fired when a page has been changed
         */
        "onPageLoaded"?: (event: CustomEvent<number>) => void;
        /**
          * Fired when a page has been rendered
         */
        "onPageRendered"?: (event: CustomEvent<IPDFRenderEvent>) => void;
        /**
          * Fired when a page has been scaled
         */
        "onScaleChange"?: (event: CustomEvent<number>) => void;
        /**
          * Rotate the PDF in degrees
         */
        "rotation"?: 0 | 90 | 180 | 270;
        /**
          * Src of the PDF to load and render
         */
        "source"?: string;
        /**
          * Access token to use. This component is a wrapper for PDF.js which does not use a VerdocsEndpoint, so the token must be supplied directly.
         */
        "token"?: string | null;
    }
    interface IntrinsicElements {
        "search-box": SearchBox;
        "search-quick-functions": SearchQuickFunctions;
        "search-recent": SearchRecent;
        "search-saved": SearchSaved;
        "search-starred": SearchStarred;
        "search-tabs": SearchTabs;
        "toggle-icon-buttons": ToggleIconButtons;
        "verdocs-auth": VerdocsAuth;
        "verdocs-button": VerdocsButton;
        "verdocs-document-status": VerdocsDocumentStatus;
        "verdocs-dropdown": VerdocsDropdown;
        "verdocs-field-attachment": VerdocsFieldAttachment;
        "verdocs-field-checkbox": VerdocsFieldCheckbox;
        "verdocs-field-date": VerdocsFieldDate;
        "verdocs-field-dropdown": VerdocsFieldDropdown;
        "verdocs-field-initial": VerdocsFieldInitial;
        "verdocs-field-payment": VerdocsFieldPayment;
        "verdocs-field-radio-button": VerdocsFieldRadioButton;
        "verdocs-field-signature": VerdocsFieldSignature;
        "verdocs-field-textarea": VerdocsFieldTextarea;
        "verdocs-field-textbox": VerdocsFieldTextbox;
        "verdocs-initial-dialog": VerdocsInitialDialog;
        "verdocs-loader": VerdocsLoader;
        "verdocs-ok-dialog": VerdocsOkDialog;
        "verdocs-organization-card": VerdocsOrganizationCard;
        "verdocs-search": VerdocsSearch;
        "verdocs-sign": VerdocsSign;
        "verdocs-signature-dialog": VerdocsSignatureDialog;
        "verdocs-template-card": VerdocsTemplateCard;
        "verdocs-template-tags": VerdocsTemplateTags;
        "verdocs-text-button": VerdocsTextButton;
        "verdocs-text-input": VerdocsTextInput;
        "verdocs-view": VerdocsView;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "search-box": LocalJSX.SearchBox & JSXBase.HTMLAttributes<HTMLSearchBoxElement>;
            "search-quick-functions": LocalJSX.SearchQuickFunctions & JSXBase.HTMLAttributes<HTMLSearchQuickFunctionsElement>;
            "search-recent": LocalJSX.SearchRecent & JSXBase.HTMLAttributes<HTMLSearchRecentElement>;
            "search-saved": LocalJSX.SearchSaved & JSXBase.HTMLAttributes<HTMLSearchSavedElement>;
            "search-starred": LocalJSX.SearchStarred & JSXBase.HTMLAttributes<HTMLSearchStarredElement>;
            "search-tabs": LocalJSX.SearchTabs & JSXBase.HTMLAttributes<HTMLSearchTabsElement>;
            "toggle-icon-buttons": LocalJSX.ToggleIconButtons & JSXBase.HTMLAttributes<HTMLToggleIconButtonsElement>;
            "verdocs-auth": LocalJSX.VerdocsAuth & JSXBase.HTMLAttributes<HTMLVerdocsAuthElement>;
            "verdocs-button": LocalJSX.VerdocsButton & JSXBase.HTMLAttributes<HTMLVerdocsButtonElement>;
            "verdocs-document-status": LocalJSX.VerdocsDocumentStatus & JSXBase.HTMLAttributes<HTMLVerdocsDocumentStatusElement>;
            "verdocs-dropdown": LocalJSX.VerdocsDropdown & JSXBase.HTMLAttributes<HTMLVerdocsDropdownElement>;
            "verdocs-field-attachment": LocalJSX.VerdocsFieldAttachment & JSXBase.HTMLAttributes<HTMLVerdocsFieldAttachmentElement>;
            "verdocs-field-checkbox": LocalJSX.VerdocsFieldCheckbox & JSXBase.HTMLAttributes<HTMLVerdocsFieldCheckboxElement>;
            "verdocs-field-date": LocalJSX.VerdocsFieldDate & JSXBase.HTMLAttributes<HTMLVerdocsFieldDateElement>;
            "verdocs-field-dropdown": LocalJSX.VerdocsFieldDropdown & JSXBase.HTMLAttributes<HTMLVerdocsFieldDropdownElement>;
            "verdocs-field-initial": LocalJSX.VerdocsFieldInitial & JSXBase.HTMLAttributes<HTMLVerdocsFieldInitialElement>;
            "verdocs-field-payment": LocalJSX.VerdocsFieldPayment & JSXBase.HTMLAttributes<HTMLVerdocsFieldPaymentElement>;
            "verdocs-field-radio-button": LocalJSX.VerdocsFieldRadioButton & JSXBase.HTMLAttributes<HTMLVerdocsFieldRadioButtonElement>;
            "verdocs-field-signature": LocalJSX.VerdocsFieldSignature & JSXBase.HTMLAttributes<HTMLVerdocsFieldSignatureElement>;
            "verdocs-field-textarea": LocalJSX.VerdocsFieldTextarea & JSXBase.HTMLAttributes<HTMLVerdocsFieldTextareaElement>;
            "verdocs-field-textbox": LocalJSX.VerdocsFieldTextbox & JSXBase.HTMLAttributes<HTMLVerdocsFieldTextboxElement>;
            "verdocs-initial-dialog": LocalJSX.VerdocsInitialDialog & JSXBase.HTMLAttributes<HTMLVerdocsInitialDialogElement>;
            "verdocs-loader": LocalJSX.VerdocsLoader & JSXBase.HTMLAttributes<HTMLVerdocsLoaderElement>;
            "verdocs-ok-dialog": LocalJSX.VerdocsOkDialog & JSXBase.HTMLAttributes<HTMLVerdocsOkDialogElement>;
            "verdocs-organization-card": LocalJSX.VerdocsOrganizationCard & JSXBase.HTMLAttributes<HTMLVerdocsOrganizationCardElement>;
            "verdocs-search": LocalJSX.VerdocsSearch & JSXBase.HTMLAttributes<HTMLVerdocsSearchElement>;
            "verdocs-sign": LocalJSX.VerdocsSign & JSXBase.HTMLAttributes<HTMLVerdocsSignElement>;
            "verdocs-signature-dialog": LocalJSX.VerdocsSignatureDialog & JSXBase.HTMLAttributes<HTMLVerdocsSignatureDialogElement>;
            "verdocs-template-card": LocalJSX.VerdocsTemplateCard & JSXBase.HTMLAttributes<HTMLVerdocsTemplateCardElement>;
            "verdocs-template-tags": LocalJSX.VerdocsTemplateTags & JSXBase.HTMLAttributes<HTMLVerdocsTemplateTagsElement>;
            "verdocs-text-button": LocalJSX.VerdocsTextButton & JSXBase.HTMLAttributes<HTMLVerdocsTextButtonElement>;
            "verdocs-text-input": LocalJSX.VerdocsTextInput & JSXBase.HTMLAttributes<HTMLVerdocsTextInputElement>;
            "verdocs-view": LocalJSX.VerdocsView & JSXBase.HTMLAttributes<HTMLVerdocsViewElement>;
        }
    }
}
