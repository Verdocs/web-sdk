/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { VerdocsEndpoint } from "@verdocs/js-sdk";
import { IAuthStatus } from "./components/embeds/verdocs-auth/verdocs-auth";
import { SDKError } from "./utils/errors";
import { IRole, ITemplate, ITemplateField, TTemplateSender } from "@verdocs/js-sdk/Templates/Types";
import { IContactSearchEvent, IContactSelectEvent, IEmailContact, IPhoneContact } from "./components/elements/verdocs-contact-picker/verdocs-contact-picker";
import { IDocumentPageInfo, IPageLayer } from "./utils/Types";
import { IMenuOption } from "./components/controls/verdocs-dropdown/verdocs-dropdown";
import { IDocumentField, IEnvelope, TEnvelopeStatus, TRecipientStatus } from "@verdocs/js-sdk/Envelopes/Types";
import { IOption } from "./components/controls/verdocs-floating-menu/verdocs-floating-menu";
import { IOrganization } from "@verdocs/js-sdk/Organizations/Types";
import { IRecentSearch } from "@verdocs/js-sdk/Search/Types";
import { ISearchEvent, TContentType } from "./components/elements/verdocs-search-box/verdocs-search-box";
import { IToggleIconButtons } from "./components/controls/verdocs-toggle/verdocs-toggle";
import { Placement } from "@popperjs/core/lib/enums";
import { FileWithData } from "@verdocs/js-sdk/Utils/Files";
export namespace Components {
    interface VerdocsAuth {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * By default, a Verdocs logo will be displayed above the login/signup forms. This may be used to override its source. (Alternatively, you may simply hide it via CSS overrides.) Logos should be in SVG format for best results.
         */
        "logo": string;
        /**
          * Normally, if the user has a valid session, this embed will be invisible, otherwise it will display login / signup forms. If this is set to false, this embed will be invisible in both cases. Apps may use this to verify if a user has a valid session without needing a separate call to Verdocs JS SDK.
         */
        "visible": boolean;
    }
    interface VerdocsBuild {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
    }
    interface VerdocsButton {
        /**
          * Whether the button should be disabled.
         */
        "disabled": boolean;
        /**
          * If desired, a suffix icon for the button.
         */
        "endIcon": string | null;
        /**
          * The label for the button.
         */
        "label": string;
        /**
          * The size (height) of the button.
         */
        "size": 'small' | 'normal' | 'medium' | 'large';
        /**
          * If desired, a prefix icon for the button.
         */
        "startIcon": string | null;
        /**
          * The type of the button.
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * The display variant of the button.
         */
        "variant": 'standard' | 'text' | 'outline';
    }
    interface VerdocsButtonPanel {
        "hidePanel": () => Promise<void>;
        /**
          * SVG icon to display
         */
        "icon": string;
        "showPanel": () => Promise<void>;
        "toggle": () => Promise<void>;
    }
    interface VerdocsCheckbox {
        /**
          * Whether the radio button is currently selected.
         */
        "checked": boolean;
        /**
          * If set, the button will still be displayed but not selectable.
         */
        "disabled"?: boolean;
        /**
          * Label to display. Leave blank for no label. The label will be displayed to the right of the checkbox, but may be repositioned with CSS.
         */
        "label": string;
        /**
          * HTML form field name for the input.
         */
        "name": string;
        /**
          * Style of checkbox to render. Use 'dark' when rendering on a dark background.
         */
        "theme": 'light' | 'dark';
        /**
          * Value to track with the input. Value is not used internally by this component but is sometimes useful to set because it can be retrieved in event handlers via e.target.value. This can be used to identify which checkbox was clicked in a checkbox group.
         */
        "value": string;
    }
    interface VerdocsComponentError {
        /**
          * The message to display.
         */
        "message": string;
    }
    interface VerdocsContactPicker {
        /**
          * If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number of suggestions be limited to the 5 best matching records.
         */
        "contactSuggestions": (IEmailContact | IPhoneContact)[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The role that this contact will be assigned to.
         */
        "templateRole": IRole | null;
    }
    interface VerdocsDocumentPage {
        /**
          * The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer. The parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g. if `pages` was ['page', 'fields'] the structure will be:  ```     <div id="verdocs-document-page-ker2fr1p9">       <div id="verdocs-document-page-ker2fr1p9-page"></div>       <div id="verdocs-document-page-ker2fr1p9-fields"></div>     </div> ```
         */
        "layers": IPageLayer[];
        /**
          * The URL of the image to render as the page background.
         */
        "pageImageUri": string;
        /**
          * The page number being rendered. Not used internally, but included in callbacks/events beacuse page numbers are used everywhere in document handling. (Reminder: page numbers are 1-based.)
         */
        "pageNumber": number;
        /**
          * The "virtual" height of the page canvas.  Defaults to 792 which at 72dpi is 11" tall. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualHeight": number;
        /**
          * The "virtual" width of the page canvas. Defaults to 612 which at 72dpi is 8.5" wide. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualWidth": number;
    }
    interface VerdocsDropdown {
        /**
          * The menu options to display.
         */
        "options": IMenuOption[];
    }
    interface VerdocsEnvelopeSidebar {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The envelope ID to render. Set ONE OF templateId or envelopeId. If both are set, envelopeId will be ignored.
         */
        "envelopeId": string;
    }
    interface VerdocsFieldAttachment {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleIndex"?: number;
        "showSettingsPanel": () => Promise<void>;
    }
    interface VerdocsFieldCheckbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option": number;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "showSettingsPanel": () => Promise<void>;
    }
    interface VerdocsFieldDate {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "showSettingsPanel": () => Promise<void>;
    }
    interface VerdocsFieldDropdown {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "showSettingsPanel": () => Promise<void>;
    }
    interface VerdocsFieldInitial {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * The document or template field to display.
         */
        "initials": string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "showSettingsPanel": () => Promise<void>;
    }
    interface VerdocsFieldPayment {
        "currentInitial": string;
        "currentInitialId": string;
        "currentSignature": string;
        "currentSignatureId": string;
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "fieldId": string;
        "fields": any[];
        "focused": boolean;
        "hideSettingsPanel": () => Promise<void>;
        "pageNum": number;
        "pdfPages": any[];
        "recipients": any;
        "roleName": string;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "selectedRoleName": string;
        "showSettingsPanel": () => Promise<void>;
        "signed": boolean;
    }
    interface VerdocsFieldRadioButton {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option": number;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "showSettingsPanel": () => Promise<void>;
    }
    interface VerdocsFieldSignature {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * If set, the signature creation dialog will be initialized with this text.
         */
        "name"?: string;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "showSettingsPanel": () => Promise<void>;
    }
    interface VerdocsFieldTextarea {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "showSettingsPanel": () => Promise<void>;
    }
    interface VerdocsFieldTextbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "showSettingsPanel": () => Promise<void>;
    }
    interface VerdocsFieldTimestamp {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field": IDocumentField | ITemplateField | null;
        "focusField": () => Promise<void>;
        "hideSettingsPanel": () => Promise<void>;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "showSettingsPanel": () => Promise<void>;
    }
    interface VerdocsFloatingMenu {
        /**
          * The role that this contact will be assigned to.
         */
        "options": IOption[];
    }
    interface VerdocsHelpIcon {
        /**
          * Help text to display on hover/focus
         */
        "text": string;
    }
    interface VerdocsInitialDialog {
        /**
          * Initial signature text
         */
        "initials": string;
    }
    interface VerdocsKbaDialog {
        /**
          * For choice challenges, a set of choices to choose from. 6 choices is recommended to fit most screen sizes.
         */
        "choices": string[];
        /**
          * If set, a help/instructions box will be displayed with this text
         */
        "helptext": string;
        /**
          * If set, a help/instructions box will be displayed with this title
         */
        "helptitle": string;
        /**
          * For text input challenges, the label to display next to the input field.
         */
        "label": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "mode": 'text' | 'choice';
        /**
          * For text input challenges, the placeholder to display inside the input field.
         */
        "placeholder": string;
        /**
          * Which step this confirmation is for, in a multi-step process. Ignored if `steps` is < 2.
         */
        "step": number;
        /**
          * How many steps exist in a multi-step process. Set to 1 for a single-step process (hides the indicator).
         */
        "steps": number;
    }
    interface VerdocsLoader {
    }
    interface VerdocsOkDialog {
        /**
          * The title of the dialog. "title" is a reserved word, so we use heading.
         */
        "heading": string;
        /**
          * The message content to display.
         */
        "message": string;
        /**
          * If set, a cancel button will also be displayed. Note that the dialog is always cancelable by clicking the background overlay to dismiss it.
         */
        "showCancel": boolean;
    }
    interface VerdocsOrganizationCard {
        /**
          * The organization to display
         */
        "organization": IOrganization;
    }
    interface VerdocsPreview {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
    }
    interface VerdocsQuickFunctions {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsRadioButton {
        /**
          * Whether the radio button is currently selected.
         */
        "checked": boolean;
        /**
          * If set, the button will still be displayed but not selectable.
         */
        "disabled"?: boolean;
        /**
          * HTML form field name for the input.
         */
        "name": string;
        /**
          * Value to track with the input.
         */
        "value": string;
    }
    interface VerdocsSearch {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsSearchActivity {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        "options": any;
        "type": 'recent' | 'saved' | 'starred';
    }
    interface VerdocsSearchBox {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        "focusField": () => Promise<void>;
        /**
          * If set, the input field will attempt to "grab" focus after being rendered.
         */
        "grabsFocus": boolean;
        /**
          * The placeholder to display in the input field.
         */
        "placeholder": string;
        /**
          * The text search string entered by the user.
         */
        "query": string;
        /**
          * If set to a value other than 'all', a removeable filter indicator will be displayed.
         */
        "type": TContentType;
    }
    interface VerdocsSearchTabs {
    }
    interface VerdocsSelectInput {
        /**
          * Should the field be disabled?
         */
        "disabled": boolean;
        /**
          * The label for the field.
         */
        "label": string;
        /**
          * The options to list.
         */
        "options": {label: string; value: string}[];
        /**
          * The initial value for the input field.
         */
        "value": string;
    }
    interface VerdocsSend {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        "reset": () => Promise<void>;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
    }
    interface VerdocsSign {
        /**
          * The ID of the envelope to sign.
         */
        "envelopeId": string | null;
        /**
          * The invite code for the signer.
         */
        "inviteCode": string | null;
        /**
          * The ID of the role that will be signing e.g. 'Recipient 1'
         */
        "roleId": string | null;
    }
    interface VerdocsSignatureDialog {
        /**
          * Initial signature text
         */
        "name": string;
    }
    interface VerdocsStatusIndicator {
        /**
          * The document to display status for. Ignored if `status` is set directly.
         */
        "envelope"?: IEnvelope;
        /**
          * The size (height) of the indicator. The small variant is suitable for use in densely populated components such as table rows.
         */
        "size": 'small' | 'normal';
        /**
          * The status to display.
         */
        "status"?: TEnvelopeStatus | TRecipientStatus | 'accepted';
        /**
          * The theme to use for diplay.
         */
        "theme"?: 'dark' | 'light';
    }
    interface VerdocsTemplateAttachments {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateCard {
        /**
          * The template for which the card will be rendered.
         */
        "template": ITemplate;
    }
    interface VerdocsTemplateCreate {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
    }
    interface VerdocsTemplateDocumentPage {
        /**
          * The ID of the document to display.
         */
        "documentId": string;
        /**
          * The endpoint to load from.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer. The parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g. if `pages` was ['page', 'fields'] the structure will be:  ```     <div id="verdocs-document-page-ker2fr1p9">       <div id="verdocs-document-page-ker2fr1p9-page"></div>       <div id="verdocs-document-page-ker2fr1p9-fields"></div>     </div> ```
         */
        "layers": IPageLayer[];
        /**
          * The page number being rendered. (Reminder: page numbers are 1-based.)
         */
        "pageNumber": number;
        /**
          * The ID of the template the document is for.
         */
        "templateId": string;
        /**
          * The "virtual" height of the page canvas.  Defaults to 792 which at 72dpi is 11" tall. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualHeight": number;
        /**
          * The "virtual" width of the page canvas. Defaults to 612 which at 72dpi is 8.5" wide. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualWidth": number;
    }
    interface VerdocsTemplateFieldProperties {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The field to configure.
         */
        "fieldName": string;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateFields {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The ID of the template to create the document from.
         */
        "templateId": string | null;
        /**
          * If set, (recommended), the host application should create a <DIV> element with a unique ID. When this component renders, the toolbar will be removed from its default location and placed in the target element. This allows the parent application to more easily control its placement and scroll effects.
         */
        "toolbarTargetId": string | null;
    }
    interface VerdocsTemplateName {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateProperties {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateReminders {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateRoleProperties {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The role name to edit.
         */
        "roleName": string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "sender": TTemplateSender;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateRoles {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateSender {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "sender": TTemplateSender;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTemplateTags {
        /**
          * The tags to display
         */
        "tags": any[];
    }
    interface VerdocsTemplateVisibility {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The template ID to edit.
         */
        "templateId": string;
    }
    interface VerdocsTextInput {
        /**
          * If desired, the autocomplete attribute to set.
         */
        "autocomplete": string;
        /**
          * Should the field be disabled?
         */
        "disabled": boolean;
        /**
          * If supplied, a help icon will be displayed to provide the user more information.
         */
        "helpText": string;
        /**
          * The label for the field.
         */
        "label": string;
        /**
          * The placeholder for the field.
         */
        "placeholder": string;
        /**
          * The type of field to render. Only text-type fields are allowed here for the current styling. Additional types (e.g. a date picker) will be supported by other controls in the future.
         */
        "type": 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url';
        /**
          * The initial value for the input field.
         */
        "value": string;
    }
    interface VerdocsToggle {
        /**
          * The tags to display
         */
        "options": IToggleIconButtons;
        /**
          * The "theme" to be used
         */
        "theme": 'light' | 'dark';
    }
    interface VerdocsToggleButton {
        "active": boolean;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "icon"?: string | null;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "label"?: string | null;
        /**
          * How large the button should be. Small buttons are intended for dialog boxes and other smaller scale UI regions.
         */
        "size"?: 'small' | 'normal';
    }
    interface VerdocsToolbarIcon {
        /**
          * SVG icon to display
         */
        "icon": string;
        /**
          * Override the Popper "placement" setting
         */
        "placement": Placement;
        /**
          * Help text to display on hover/focus
         */
        "text": string;
    }
    interface VerdocsUploadDialog {
    }
    interface VerdocsView {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint": VerdocsEndpoint;
        /**
          * The envelope ID to render. Set ONE OF templateId or envelopeId. If both are set, envelopeId will be ignored.
         */
        "envelopeId": string;
    }
}
export interface VerdocsAuthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsAuthElement;
}
export interface VerdocsBuildCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsBuildElement;
}
export interface VerdocsContactPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsContactPickerElement;
}
export interface VerdocsDocumentPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsDocumentPageElement;
}
export interface VerdocsDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsDropdownElement;
}
export interface VerdocsEnvelopeSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsEnvelopeSidebarElement;
}
export interface VerdocsFieldAttachmentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldAttachmentElement;
}
export interface VerdocsFieldCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldCheckboxElement;
}
export interface VerdocsFieldDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldDateElement;
}
export interface VerdocsFieldDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldDropdownElement;
}
export interface VerdocsFieldInitialCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldInitialElement;
}
export interface VerdocsFieldPaymentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldPaymentElement;
}
export interface VerdocsFieldRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldRadioButtonElement;
}
export interface VerdocsFieldSignatureCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldSignatureElement;
}
export interface VerdocsFieldTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldTextareaElement;
}
export interface VerdocsFieldTextboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldTextboxElement;
}
export interface VerdocsFieldTimestampCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFieldTimestampElement;
}
export interface VerdocsFloatingMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsFloatingMenuElement;
}
export interface VerdocsInitialDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsInitialDialogElement;
}
export interface VerdocsKbaDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsKbaDialogElement;
}
export interface VerdocsOkDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsOkDialogElement;
}
export interface VerdocsPreviewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsPreviewElement;
}
export interface VerdocsQuickFunctionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsQuickFunctionsElement;
}
export interface VerdocsSearchActivityCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSearchActivityElement;
}
export interface VerdocsSearchBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSearchBoxElement;
}
export interface VerdocsSendCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSendElement;
}
export interface VerdocsSignCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSignElement;
}
export interface VerdocsSignatureDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsSignatureDialogElement;
}
export interface VerdocsTemplateAttachmentsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateAttachmentsElement;
}
export interface VerdocsTemplateCreateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateCreateElement;
}
export interface VerdocsTemplateDocumentPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateDocumentPageElement;
}
export interface VerdocsTemplateFieldPropertiesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateFieldPropertiesElement;
}
export interface VerdocsTemplateFieldsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateFieldsElement;
}
export interface VerdocsTemplateNameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateNameElement;
}
export interface VerdocsTemplatePropertiesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplatePropertiesElement;
}
export interface VerdocsTemplateRemindersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateRemindersElement;
}
export interface VerdocsTemplateRolePropertiesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateRolePropertiesElement;
}
export interface VerdocsTemplateRolesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateRolesElement;
}
export interface VerdocsTemplateSenderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateSenderElement;
}
export interface VerdocsTemplateVisibilityCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsTemplateVisibilityElement;
}
export interface VerdocsToggleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsToggleButtonElement;
}
export interface VerdocsUploadDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsUploadDialogElement;
}
export interface VerdocsViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVerdocsViewElement;
}
declare global {
    interface HTMLVerdocsAuthElement extends Components.VerdocsAuth, HTMLStencilElement {
    }
    var HTMLVerdocsAuthElement: {
        prototype: HTMLVerdocsAuthElement;
        new (): HTMLVerdocsAuthElement;
    };
    interface HTMLVerdocsBuildElement extends Components.VerdocsBuild, HTMLStencilElement {
    }
    var HTMLVerdocsBuildElement: {
        prototype: HTMLVerdocsBuildElement;
        new (): HTMLVerdocsBuildElement;
    };
    interface HTMLVerdocsButtonElement extends Components.VerdocsButton, HTMLStencilElement {
    }
    var HTMLVerdocsButtonElement: {
        prototype: HTMLVerdocsButtonElement;
        new (): HTMLVerdocsButtonElement;
    };
    interface HTMLVerdocsButtonPanelElement extends Components.VerdocsButtonPanel, HTMLStencilElement {
    }
    var HTMLVerdocsButtonPanelElement: {
        prototype: HTMLVerdocsButtonPanelElement;
        new (): HTMLVerdocsButtonPanelElement;
    };
    interface HTMLVerdocsCheckboxElement extends Components.VerdocsCheckbox, HTMLStencilElement {
    }
    var HTMLVerdocsCheckboxElement: {
        prototype: HTMLVerdocsCheckboxElement;
        new (): HTMLVerdocsCheckboxElement;
    };
    interface HTMLVerdocsComponentErrorElement extends Components.VerdocsComponentError, HTMLStencilElement {
    }
    var HTMLVerdocsComponentErrorElement: {
        prototype: HTMLVerdocsComponentErrorElement;
        new (): HTMLVerdocsComponentErrorElement;
    };
    interface HTMLVerdocsContactPickerElement extends Components.VerdocsContactPicker, HTMLStencilElement {
    }
    var HTMLVerdocsContactPickerElement: {
        prototype: HTMLVerdocsContactPickerElement;
        new (): HTMLVerdocsContactPickerElement;
    };
    interface HTMLVerdocsDocumentPageElement extends Components.VerdocsDocumentPage, HTMLStencilElement {
    }
    var HTMLVerdocsDocumentPageElement: {
        prototype: HTMLVerdocsDocumentPageElement;
        new (): HTMLVerdocsDocumentPageElement;
    };
    interface HTMLVerdocsDropdownElement extends Components.VerdocsDropdown, HTMLStencilElement {
    }
    var HTMLVerdocsDropdownElement: {
        prototype: HTMLVerdocsDropdownElement;
        new (): HTMLVerdocsDropdownElement;
    };
    interface HTMLVerdocsEnvelopeSidebarElement extends Components.VerdocsEnvelopeSidebar, HTMLStencilElement {
    }
    var HTMLVerdocsEnvelopeSidebarElement: {
        prototype: HTMLVerdocsEnvelopeSidebarElement;
        new (): HTMLVerdocsEnvelopeSidebarElement;
    };
    interface HTMLVerdocsFieldAttachmentElement extends Components.VerdocsFieldAttachment, HTMLStencilElement {
    }
    var HTMLVerdocsFieldAttachmentElement: {
        prototype: HTMLVerdocsFieldAttachmentElement;
        new (): HTMLVerdocsFieldAttachmentElement;
    };
    interface HTMLVerdocsFieldCheckboxElement extends Components.VerdocsFieldCheckbox, HTMLStencilElement {
    }
    var HTMLVerdocsFieldCheckboxElement: {
        prototype: HTMLVerdocsFieldCheckboxElement;
        new (): HTMLVerdocsFieldCheckboxElement;
    };
    interface HTMLVerdocsFieldDateElement extends Components.VerdocsFieldDate, HTMLStencilElement {
    }
    var HTMLVerdocsFieldDateElement: {
        prototype: HTMLVerdocsFieldDateElement;
        new (): HTMLVerdocsFieldDateElement;
    };
    interface HTMLVerdocsFieldDropdownElement extends Components.VerdocsFieldDropdown, HTMLStencilElement {
    }
    var HTMLVerdocsFieldDropdownElement: {
        prototype: HTMLVerdocsFieldDropdownElement;
        new (): HTMLVerdocsFieldDropdownElement;
    };
    interface HTMLVerdocsFieldInitialElement extends Components.VerdocsFieldInitial, HTMLStencilElement {
    }
    var HTMLVerdocsFieldInitialElement: {
        prototype: HTMLVerdocsFieldInitialElement;
        new (): HTMLVerdocsFieldInitialElement;
    };
    interface HTMLVerdocsFieldPaymentElement extends Components.VerdocsFieldPayment, HTMLStencilElement {
    }
    var HTMLVerdocsFieldPaymentElement: {
        prototype: HTMLVerdocsFieldPaymentElement;
        new (): HTMLVerdocsFieldPaymentElement;
    };
    interface HTMLVerdocsFieldRadioButtonElement extends Components.VerdocsFieldRadioButton, HTMLStencilElement {
    }
    var HTMLVerdocsFieldRadioButtonElement: {
        prototype: HTMLVerdocsFieldRadioButtonElement;
        new (): HTMLVerdocsFieldRadioButtonElement;
    };
    interface HTMLVerdocsFieldSignatureElement extends Components.VerdocsFieldSignature, HTMLStencilElement {
    }
    var HTMLVerdocsFieldSignatureElement: {
        prototype: HTMLVerdocsFieldSignatureElement;
        new (): HTMLVerdocsFieldSignatureElement;
    };
    interface HTMLVerdocsFieldTextareaElement extends Components.VerdocsFieldTextarea, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTextareaElement: {
        prototype: HTMLVerdocsFieldTextareaElement;
        new (): HTMLVerdocsFieldTextareaElement;
    };
    interface HTMLVerdocsFieldTextboxElement extends Components.VerdocsFieldTextbox, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTextboxElement: {
        prototype: HTMLVerdocsFieldTextboxElement;
        new (): HTMLVerdocsFieldTextboxElement;
    };
    interface HTMLVerdocsFieldTimestampElement extends Components.VerdocsFieldTimestamp, HTMLStencilElement {
    }
    var HTMLVerdocsFieldTimestampElement: {
        prototype: HTMLVerdocsFieldTimestampElement;
        new (): HTMLVerdocsFieldTimestampElement;
    };
    interface HTMLVerdocsFloatingMenuElement extends Components.VerdocsFloatingMenu, HTMLStencilElement {
    }
    var HTMLVerdocsFloatingMenuElement: {
        prototype: HTMLVerdocsFloatingMenuElement;
        new (): HTMLVerdocsFloatingMenuElement;
    };
    interface HTMLVerdocsHelpIconElement extends Components.VerdocsHelpIcon, HTMLStencilElement {
    }
    var HTMLVerdocsHelpIconElement: {
        prototype: HTMLVerdocsHelpIconElement;
        new (): HTMLVerdocsHelpIconElement;
    };
    interface HTMLVerdocsInitialDialogElement extends Components.VerdocsInitialDialog, HTMLStencilElement {
    }
    var HTMLVerdocsInitialDialogElement: {
        prototype: HTMLVerdocsInitialDialogElement;
        new (): HTMLVerdocsInitialDialogElement;
    };
    interface HTMLVerdocsKbaDialogElement extends Components.VerdocsKbaDialog, HTMLStencilElement {
    }
    var HTMLVerdocsKbaDialogElement: {
        prototype: HTMLVerdocsKbaDialogElement;
        new (): HTMLVerdocsKbaDialogElement;
    };
    interface HTMLVerdocsLoaderElement extends Components.VerdocsLoader, HTMLStencilElement {
    }
    var HTMLVerdocsLoaderElement: {
        prototype: HTMLVerdocsLoaderElement;
        new (): HTMLVerdocsLoaderElement;
    };
    interface HTMLVerdocsOkDialogElement extends Components.VerdocsOkDialog, HTMLStencilElement {
    }
    var HTMLVerdocsOkDialogElement: {
        prototype: HTMLVerdocsOkDialogElement;
        new (): HTMLVerdocsOkDialogElement;
    };
    interface HTMLVerdocsOrganizationCardElement extends Components.VerdocsOrganizationCard, HTMLStencilElement {
    }
    var HTMLVerdocsOrganizationCardElement: {
        prototype: HTMLVerdocsOrganizationCardElement;
        new (): HTMLVerdocsOrganizationCardElement;
    };
    interface HTMLVerdocsPreviewElement extends Components.VerdocsPreview, HTMLStencilElement {
    }
    var HTMLVerdocsPreviewElement: {
        prototype: HTMLVerdocsPreviewElement;
        new (): HTMLVerdocsPreviewElement;
    };
    interface HTMLVerdocsQuickFunctionsElement extends Components.VerdocsQuickFunctions, HTMLStencilElement {
    }
    var HTMLVerdocsQuickFunctionsElement: {
        prototype: HTMLVerdocsQuickFunctionsElement;
        new (): HTMLVerdocsQuickFunctionsElement;
    };
    interface HTMLVerdocsRadioButtonElement extends Components.VerdocsRadioButton, HTMLStencilElement {
    }
    var HTMLVerdocsRadioButtonElement: {
        prototype: HTMLVerdocsRadioButtonElement;
        new (): HTMLVerdocsRadioButtonElement;
    };
    interface HTMLVerdocsSearchElement extends Components.VerdocsSearch, HTMLStencilElement {
    }
    var HTMLVerdocsSearchElement: {
        prototype: HTMLVerdocsSearchElement;
        new (): HTMLVerdocsSearchElement;
    };
    interface HTMLVerdocsSearchActivityElement extends Components.VerdocsSearchActivity, HTMLStencilElement {
    }
    var HTMLVerdocsSearchActivityElement: {
        prototype: HTMLVerdocsSearchActivityElement;
        new (): HTMLVerdocsSearchActivityElement;
    };
    interface HTMLVerdocsSearchBoxElement extends Components.VerdocsSearchBox, HTMLStencilElement {
    }
    var HTMLVerdocsSearchBoxElement: {
        prototype: HTMLVerdocsSearchBoxElement;
        new (): HTMLVerdocsSearchBoxElement;
    };
    interface HTMLVerdocsSearchTabsElement extends Components.VerdocsSearchTabs, HTMLStencilElement {
    }
    var HTMLVerdocsSearchTabsElement: {
        prototype: HTMLVerdocsSearchTabsElement;
        new (): HTMLVerdocsSearchTabsElement;
    };
    interface HTMLVerdocsSelectInputElement extends Components.VerdocsSelectInput, HTMLStencilElement {
    }
    var HTMLVerdocsSelectInputElement: {
        prototype: HTMLVerdocsSelectInputElement;
        new (): HTMLVerdocsSelectInputElement;
    };
    interface HTMLVerdocsSendElement extends Components.VerdocsSend, HTMLStencilElement {
    }
    var HTMLVerdocsSendElement: {
        prototype: HTMLVerdocsSendElement;
        new (): HTMLVerdocsSendElement;
    };
    interface HTMLVerdocsSignElement extends Components.VerdocsSign, HTMLStencilElement {
    }
    var HTMLVerdocsSignElement: {
        prototype: HTMLVerdocsSignElement;
        new (): HTMLVerdocsSignElement;
    };
    interface HTMLVerdocsSignatureDialogElement extends Components.VerdocsSignatureDialog, HTMLStencilElement {
    }
    var HTMLVerdocsSignatureDialogElement: {
        prototype: HTMLVerdocsSignatureDialogElement;
        new (): HTMLVerdocsSignatureDialogElement;
    };
    interface HTMLVerdocsStatusIndicatorElement extends Components.VerdocsStatusIndicator, HTMLStencilElement {
    }
    var HTMLVerdocsStatusIndicatorElement: {
        prototype: HTMLVerdocsStatusIndicatorElement;
        new (): HTMLVerdocsStatusIndicatorElement;
    };
    interface HTMLVerdocsTemplateAttachmentsElement extends Components.VerdocsTemplateAttachments, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateAttachmentsElement: {
        prototype: HTMLVerdocsTemplateAttachmentsElement;
        new (): HTMLVerdocsTemplateAttachmentsElement;
    };
    interface HTMLVerdocsTemplateCardElement extends Components.VerdocsTemplateCard, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateCardElement: {
        prototype: HTMLVerdocsTemplateCardElement;
        new (): HTMLVerdocsTemplateCardElement;
    };
    interface HTMLVerdocsTemplateCreateElement extends Components.VerdocsTemplateCreate, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateCreateElement: {
        prototype: HTMLVerdocsTemplateCreateElement;
        new (): HTMLVerdocsTemplateCreateElement;
    };
    interface HTMLVerdocsTemplateDocumentPageElement extends Components.VerdocsTemplateDocumentPage, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateDocumentPageElement: {
        prototype: HTMLVerdocsTemplateDocumentPageElement;
        new (): HTMLVerdocsTemplateDocumentPageElement;
    };
    interface HTMLVerdocsTemplateFieldPropertiesElement extends Components.VerdocsTemplateFieldProperties, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateFieldPropertiesElement: {
        prototype: HTMLVerdocsTemplateFieldPropertiesElement;
        new (): HTMLVerdocsTemplateFieldPropertiesElement;
    };
    interface HTMLVerdocsTemplateFieldsElement extends Components.VerdocsTemplateFields, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateFieldsElement: {
        prototype: HTMLVerdocsTemplateFieldsElement;
        new (): HTMLVerdocsTemplateFieldsElement;
    };
    interface HTMLVerdocsTemplateNameElement extends Components.VerdocsTemplateName, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateNameElement: {
        prototype: HTMLVerdocsTemplateNameElement;
        new (): HTMLVerdocsTemplateNameElement;
    };
    interface HTMLVerdocsTemplatePropertiesElement extends Components.VerdocsTemplateProperties, HTMLStencilElement {
    }
    var HTMLVerdocsTemplatePropertiesElement: {
        prototype: HTMLVerdocsTemplatePropertiesElement;
        new (): HTMLVerdocsTemplatePropertiesElement;
    };
    interface HTMLVerdocsTemplateRemindersElement extends Components.VerdocsTemplateReminders, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateRemindersElement: {
        prototype: HTMLVerdocsTemplateRemindersElement;
        new (): HTMLVerdocsTemplateRemindersElement;
    };
    interface HTMLVerdocsTemplateRolePropertiesElement extends Components.VerdocsTemplateRoleProperties, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateRolePropertiesElement: {
        prototype: HTMLVerdocsTemplateRolePropertiesElement;
        new (): HTMLVerdocsTemplateRolePropertiesElement;
    };
    interface HTMLVerdocsTemplateRolesElement extends Components.VerdocsTemplateRoles, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateRolesElement: {
        prototype: HTMLVerdocsTemplateRolesElement;
        new (): HTMLVerdocsTemplateRolesElement;
    };
    interface HTMLVerdocsTemplateSenderElement extends Components.VerdocsTemplateSender, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateSenderElement: {
        prototype: HTMLVerdocsTemplateSenderElement;
        new (): HTMLVerdocsTemplateSenderElement;
    };
    interface HTMLVerdocsTemplateTagsElement extends Components.VerdocsTemplateTags, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateTagsElement: {
        prototype: HTMLVerdocsTemplateTagsElement;
        new (): HTMLVerdocsTemplateTagsElement;
    };
    interface HTMLVerdocsTemplateVisibilityElement extends Components.VerdocsTemplateVisibility, HTMLStencilElement {
    }
    var HTMLVerdocsTemplateVisibilityElement: {
        prototype: HTMLVerdocsTemplateVisibilityElement;
        new (): HTMLVerdocsTemplateVisibilityElement;
    };
    interface HTMLVerdocsTextInputElement extends Components.VerdocsTextInput, HTMLStencilElement {
    }
    var HTMLVerdocsTextInputElement: {
        prototype: HTMLVerdocsTextInputElement;
        new (): HTMLVerdocsTextInputElement;
    };
    interface HTMLVerdocsToggleElement extends Components.VerdocsToggle, HTMLStencilElement {
    }
    var HTMLVerdocsToggleElement: {
        prototype: HTMLVerdocsToggleElement;
        new (): HTMLVerdocsToggleElement;
    };
    interface HTMLVerdocsToggleButtonElement extends Components.VerdocsToggleButton, HTMLStencilElement {
    }
    var HTMLVerdocsToggleButtonElement: {
        prototype: HTMLVerdocsToggleButtonElement;
        new (): HTMLVerdocsToggleButtonElement;
    };
    interface HTMLVerdocsToolbarIconElement extends Components.VerdocsToolbarIcon, HTMLStencilElement {
    }
    var HTMLVerdocsToolbarIconElement: {
        prototype: HTMLVerdocsToolbarIconElement;
        new (): HTMLVerdocsToolbarIconElement;
    };
    interface HTMLVerdocsUploadDialogElement extends Components.VerdocsUploadDialog, HTMLStencilElement {
    }
    var HTMLVerdocsUploadDialogElement: {
        prototype: HTMLVerdocsUploadDialogElement;
        new (): HTMLVerdocsUploadDialogElement;
    };
    interface HTMLVerdocsViewElement extends Components.VerdocsView, HTMLStencilElement {
    }
    var HTMLVerdocsViewElement: {
        prototype: HTMLVerdocsViewElement;
        new (): HTMLVerdocsViewElement;
    };
    interface HTMLElementTagNameMap {
        "verdocs-auth": HTMLVerdocsAuthElement;
        "verdocs-build": HTMLVerdocsBuildElement;
        "verdocs-button": HTMLVerdocsButtonElement;
        "verdocs-button-panel": HTMLVerdocsButtonPanelElement;
        "verdocs-checkbox": HTMLVerdocsCheckboxElement;
        "verdocs-component-error": HTMLVerdocsComponentErrorElement;
        "verdocs-contact-picker": HTMLVerdocsContactPickerElement;
        "verdocs-document-page": HTMLVerdocsDocumentPageElement;
        "verdocs-dropdown": HTMLVerdocsDropdownElement;
        "verdocs-envelope-sidebar": HTMLVerdocsEnvelopeSidebarElement;
        "verdocs-field-attachment": HTMLVerdocsFieldAttachmentElement;
        "verdocs-field-checkbox": HTMLVerdocsFieldCheckboxElement;
        "verdocs-field-date": HTMLVerdocsFieldDateElement;
        "verdocs-field-dropdown": HTMLVerdocsFieldDropdownElement;
        "verdocs-field-initial": HTMLVerdocsFieldInitialElement;
        "verdocs-field-payment": HTMLVerdocsFieldPaymentElement;
        "verdocs-field-radio-button": HTMLVerdocsFieldRadioButtonElement;
        "verdocs-field-signature": HTMLVerdocsFieldSignatureElement;
        "verdocs-field-textarea": HTMLVerdocsFieldTextareaElement;
        "verdocs-field-textbox": HTMLVerdocsFieldTextboxElement;
        "verdocs-field-timestamp": HTMLVerdocsFieldTimestampElement;
        "verdocs-floating-menu": HTMLVerdocsFloatingMenuElement;
        "verdocs-help-icon": HTMLVerdocsHelpIconElement;
        "verdocs-initial-dialog": HTMLVerdocsInitialDialogElement;
        "verdocs-kba-dialog": HTMLVerdocsKbaDialogElement;
        "verdocs-loader": HTMLVerdocsLoaderElement;
        "verdocs-ok-dialog": HTMLVerdocsOkDialogElement;
        "verdocs-organization-card": HTMLVerdocsOrganizationCardElement;
        "verdocs-preview": HTMLVerdocsPreviewElement;
        "verdocs-quick-functions": HTMLVerdocsQuickFunctionsElement;
        "verdocs-radio-button": HTMLVerdocsRadioButtonElement;
        "verdocs-search": HTMLVerdocsSearchElement;
        "verdocs-search-activity": HTMLVerdocsSearchActivityElement;
        "verdocs-search-box": HTMLVerdocsSearchBoxElement;
        "verdocs-search-tabs": HTMLVerdocsSearchTabsElement;
        "verdocs-select-input": HTMLVerdocsSelectInputElement;
        "verdocs-send": HTMLVerdocsSendElement;
        "verdocs-sign": HTMLVerdocsSignElement;
        "verdocs-signature-dialog": HTMLVerdocsSignatureDialogElement;
        "verdocs-status-indicator": HTMLVerdocsStatusIndicatorElement;
        "verdocs-template-attachments": HTMLVerdocsTemplateAttachmentsElement;
        "verdocs-template-card": HTMLVerdocsTemplateCardElement;
        "verdocs-template-create": HTMLVerdocsTemplateCreateElement;
        "verdocs-template-document-page": HTMLVerdocsTemplateDocumentPageElement;
        "verdocs-template-field-properties": HTMLVerdocsTemplateFieldPropertiesElement;
        "verdocs-template-fields": HTMLVerdocsTemplateFieldsElement;
        "verdocs-template-name": HTMLVerdocsTemplateNameElement;
        "verdocs-template-properties": HTMLVerdocsTemplatePropertiesElement;
        "verdocs-template-reminders": HTMLVerdocsTemplateRemindersElement;
        "verdocs-template-role-properties": HTMLVerdocsTemplateRolePropertiesElement;
        "verdocs-template-roles": HTMLVerdocsTemplateRolesElement;
        "verdocs-template-sender": HTMLVerdocsTemplateSenderElement;
        "verdocs-template-tags": HTMLVerdocsTemplateTagsElement;
        "verdocs-template-visibility": HTMLVerdocsTemplateVisibilityElement;
        "verdocs-text-input": HTMLVerdocsTextInputElement;
        "verdocs-toggle": HTMLVerdocsToggleElement;
        "verdocs-toggle-button": HTMLVerdocsToggleButtonElement;
        "verdocs-toolbar-icon": HTMLVerdocsToolbarIconElement;
        "verdocs-upload-dialog": HTMLVerdocsUploadDialogElement;
        "verdocs-view": HTMLVerdocsViewElement;
    }
}
declare namespace LocalJSX {
    interface VerdocsAuth {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * By default, a Verdocs logo will be displayed above the login/signup forms. This may be used to override its source. (Alternatively, you may simply hide it via CSS overrides.) Logos should be in SVG format for best results.
         */
        "logo"?: string;
        /**
          * Event fired when session authentication process has completed. Check the event contents for completion status.
         */
        "onAuthenticated"?: (event: VerdocsAuthCustomEvent<IAuthStatus>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsAuthCustomEvent<SDKError>) => void;
        /**
          * Normally, if the user has a valid session, this embed will be invisible, otherwise it will display login / signup forms. If this is set to false, this embed will be invisible in both cases. Apps may use this to verify if a user has a valid session without needing a separate call to Verdocs JS SDK.
         */
        "visible"?: boolean;
    }
    interface VerdocsBuild {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsBuildCustomEvent<SDKError>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
    }
    interface VerdocsButton {
        /**
          * Whether the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * If desired, a suffix icon for the button.
         */
        "endIcon"?: string | null;
        /**
          * The label for the button.
         */
        "label": string;
        /**
          * The size (height) of the button.
         */
        "size"?: 'small' | 'normal' | 'medium' | 'large';
        /**
          * If desired, a prefix icon for the button.
         */
        "startIcon"?: string | null;
        /**
          * The type of the button.
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The display variant of the button.
         */
        "variant"?: 'standard' | 'text' | 'outline';
    }
    interface VerdocsButtonPanel {
        /**
          * SVG icon to display
         */
        "icon"?: string;
    }
    interface VerdocsCheckbox {
        /**
          * Whether the radio button is currently selected.
         */
        "checked"?: boolean;
        /**
          * If set, the button will still be displayed but not selectable.
         */
        "disabled"?: boolean;
        /**
          * Label to display. Leave blank for no label. The label will be displayed to the right of the checkbox, but may be repositioned with CSS.
         */
        "label"?: string;
        /**
          * HTML form field name for the input.
         */
        "name"?: string;
        /**
          * Style of checkbox to render. Use 'dark' when rendering on a dark background.
         */
        "theme"?: 'light' | 'dark';
        /**
          * Value to track with the input. Value is not used internally by this component but is sometimes useful to set because it can be retrieved in event handlers via e.target.value. This can be used to identify which checkbox was clicked in a checkbox group.
         */
        "value"?: string;
    }
    interface VerdocsComponentError {
        /**
          * The message to display.
         */
        "message"?: string;
    }
    interface VerdocsContactPicker {
        /**
          * If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number of suggestions be limited to the 5 best matching records.
         */
        "contactSuggestions"?: (IEmailContact | IPhoneContact)[];
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsContactPickerCustomEvent<any>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onNext"?: (event: VerdocsContactPickerCustomEvent<IContactSelectEvent>) => void;
        /**
          * Event fired when the user enters text in the search field. The calling application may use this to update the `contactSuggestions` property.
         */
        "onSearchContacts"?: (event: VerdocsContactPickerCustomEvent<IContactSearchEvent>) => void;
        /**
          * The role that this contact will be assigned to.
         */
        "templateRole"?: IRole | null;
    }
    interface VerdocsDocumentPage {
        /**
          * The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer. The parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g. if `pages` was ['page', 'fields'] the structure will be:  ```     <div id="verdocs-document-page-ker2fr1p9">       <div id="verdocs-document-page-ker2fr1p9-page"></div>       <div id="verdocs-document-page-ker2fr1p9-fields"></div>     </div> ```
         */
        "layers"?: IPageLayer[];
        /**
          * Fired when a page has been rendered. This is also fired when the page is resized.
         */
        "onPageRendered"?: (event: VerdocsDocumentPageCustomEvent<IDocumentPageInfo>) => void;
        /**
          * The URL of the image to render as the page background.
         */
        "pageImageUri"?: string;
        /**
          * The page number being rendered. Not used internally, but included in callbacks/events beacuse page numbers are used everywhere in document handling. (Reminder: page numbers are 1-based.)
         */
        "pageNumber"?: number;
        /**
          * The "virtual" height of the page canvas.  Defaults to 792 which at 72dpi is 11" tall. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualHeight"?: number;
        /**
          * The "virtual" width of the page canvas. Defaults to 612 which at 72dpi is 8.5" wide. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualWidth"?: number;
    }
    interface VerdocsDropdown {
        /**
          * Event fired when a menu option is clicked. Web Component events need to be "composed" to cross the Shadow DOM and be received by parent frameworks.
         */
        "onOptionSelected"?: (event: VerdocsDropdownCustomEvent<IMenuOption>) => void;
        /**
          * The menu options to display.
         */
        "options"?: IMenuOption[];
    }
    interface VerdocsEnvelopeSidebar {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The envelope ID to render. Set ONE OF templateId or envelopeId. If both are set, envelopeId will be ignored.
         */
        "envelopeId"?: string;
        /**
          * Event fired when the envelope is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onEnvelopeUpdated"?: (event: VerdocsEnvelopeSidebarCustomEvent<{endpoint: VerdocsEndpoint; envelope: IEnvelope; event: string}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsEnvelopeSidebarCustomEvent<SDKError>) => void;
    }
    interface VerdocsFieldAttachment {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldAttachmentCustomEvent<{fieldName: string}>) => void;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleIndex"?: number;
    }
    interface VerdocsFieldCheckbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldCheckboxCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldCheckboxCustomEvent<{fieldName: string}>) => void;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option"?: number;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
    }
    interface VerdocsFieldDate {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldDateCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldDateCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onSettingsPress"?: (event: VerdocsFieldDateCustomEvent<any>) => void;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
    }
    interface VerdocsFieldDropdown {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldDropdownCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldDropdownCustomEvent<string>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldDropdownCustomEvent<{fieldName: string}>) => void;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
    }
    interface VerdocsFieldInitial {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * The document or template field to display.
         */
        "initials"?: string;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event emitted when an initial block is adopted by the user. The event detail will contain the base64 string of the initial image.
         */
        "onAdopt"?: (event: VerdocsFieldInitialCustomEvent<string>) => void;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldInitialCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsFieldInitialCustomEvent<any>) => void;
        /**
          * Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc. It is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every keypress.
         */
        "onFieldChange"?: (event: VerdocsFieldInitialCustomEvent<string>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldInitialCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onSettingsPress"?: (event: VerdocsFieldInitialCustomEvent<any>) => void;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
    }
    interface VerdocsFieldPayment {
        "currentInitial"?: string;
        "currentInitialId"?: string;
        "currentSignature"?: string;
        "currentSignatureId"?: string;
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        "fieldId"?: string;
        "fields"?: any[];
        "focused"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldPaymentCustomEvent<{fieldName: string}>) => void;
        "onInitialComplete"?: (event: VerdocsFieldPaymentCustomEvent<string>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldPaymentCustomEvent<{fieldName: string}>) => void;
        "onSignatureComplete"?: (event: VerdocsFieldPaymentCustomEvent<string>) => void;
        "pageNum"?: number;
        "pdfPages"?: any[];
        "recipients"?: any;
        "roleName"?: string;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
        "selectedRoleName"?: string;
        "signed"?: boolean;
    }
    interface VerdocsFieldRadioButton {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldRadioButtonCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldRadioButtonCustomEvent<{fieldName: string}>) => void;
        /**
          * The index of the settings option this particular checkbox is for
         */
        "option"?: number;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
    }
    interface VerdocsFieldSignature {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * If set, the signature creation dialog will be initialized with this text.
         */
        "name"?: string;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldSignatureCustomEvent<{fieldName: string}>) => void;
        /**
          * Event emitted when the field has changed.
         */
        "onFieldChange"?: (event: VerdocsFieldSignatureCustomEvent<string>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldSignatureCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired on every character entered into / deleted from the field.
         */
        "onSettingsPress"?: (event: VerdocsFieldSignatureCustomEvent<any>) => void;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
    }
    interface VerdocsFieldTextarea {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldTextareaCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldTextareaCustomEvent<{fieldName: string}>) => void;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
    }
    interface VerdocsFieldTextbox {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldTextboxCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldTextboxCustomEvent<{fieldName: string}>) => void;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
    }
    interface VerdocsFieldTimestamp {
        /**
          * If set, overrides the field's settings object. Primarily used to support "preview" modes where all fields are disabled.
         */
        "disabled"?: boolean;
        /**
          * If set, the field is considered "done" and is drawn in a display-final-value state.
         */
        "done"?: boolean;
        /**
          * If set, a settings icon will be displayed on hover. The settings shown allow the field's recipient and other settings to be changed, so it should typically only be enabled in the Builder.
         */
        "editable"?: boolean;
        /**
          * The document or template field to display.
         */
        "field"?: IDocumentField | ITemplateField | null;
        /**
          * If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.
         */
        "moveable"?: boolean;
        /**
          * Event fired when the field is deleted.
         */
        "onDeleted"?: (event: VerdocsFieldTimestampCustomEvent<{fieldName: string}>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsFieldTimestampCustomEvent<{fieldName: string}>) => void;
        /**
          * If set, the field will be colored using this index value to select the background color.
         */
        "roleindex"?: number;
    }
    interface VerdocsFloatingMenu {
        /**
          * Event fired when a menu option is clicked. Web Component events need to be "composed" to cross the Shadow DOM and be received by parent frameworks.
         */
        "onOptionSelected"?: (event: VerdocsFloatingMenuCustomEvent<IOption>) => void;
        /**
          * The role that this contact will be assigned to.
         */
        "options"?: IOption[];
    }
    interface VerdocsHelpIcon {
        /**
          * Help text to display on hover/focus
         */
        "text"?: string;
    }
    interface VerdocsInitialDialog {
        /**
          * Initial signature text
         */
        "initials"?: string;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsInitialDialogCustomEvent<any>) => void;
        /**
          * Event fired when the initials are adopted.
         */
        "onNext"?: (event: VerdocsInitialDialogCustomEvent<string>) => void;
    }
    interface VerdocsKbaDialog {
        /**
          * For choice challenges, a set of choices to choose from. 6 choices is recommended to fit most screen sizes.
         */
        "choices"?: string[];
        /**
          * If set, a help/instructions box will be displayed with this text
         */
        "helptext"?: string;
        /**
          * If set, a help/instructions box will be displayed with this title
         */
        "helptitle"?: string;
        /**
          * For text input challenges, the label to display next to the input field.
         */
        "label"?: string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "mode"?: 'text' | 'choice';
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsKbaDialogCustomEvent<any>) => void;
        /**
          * Event fired when the dialog is closed. The event data will contain the value selected.
         */
        "onNext"?: (event: VerdocsKbaDialogCustomEvent<string>) => void;
        /**
          * For text input challenges, the placeholder to display inside the input field.
         */
        "placeholder"?: string;
        /**
          * Which step this confirmation is for, in a multi-step process. Ignored if `steps` is < 2.
         */
        "step"?: number;
        /**
          * How many steps exist in a multi-step process. Set to 1 for a single-step process (hides the indicator).
         */
        "steps"?: number;
    }
    interface VerdocsLoader {
    }
    interface VerdocsOkDialog {
        /**
          * The title of the dialog. "title" is a reserved word, so we use heading.
         */
        "heading"?: string;
        /**
          * The message content to display.
         */
        "message"?: string;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsOkDialogCustomEvent<any>) => void;
        /**
          * Event fired when the user clicks the OK button.
         */
        "onNext"?: (event: VerdocsOkDialogCustomEvent<any>) => void;
        /**
          * If set, a cancel button will also be displayed. Note that the dialog is always cancelable by clicking the background overlay to dismiss it.
         */
        "showCancel"?: boolean;
    }
    interface VerdocsOrganizationCard {
        /**
          * The organization to display
         */
        "organization"?: IOrganization;
    }
    interface VerdocsPreview {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsPreviewCustomEvent<SDKError>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
    }
    interface VerdocsQuickFunctions {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when an entry is clicked.
         */
        "onCreateDocument"?: (event: VerdocsQuickFunctionsCustomEvent<any>) => void;
        /**
          * Event fired when an entry is clicked.
         */
        "onCreateTemplate"?: (event: VerdocsQuickFunctionsCustomEvent<any>) => void;
    }
    interface VerdocsRadioButton {
        /**
          * Whether the radio button is currently selected.
         */
        "checked"?: boolean;
        /**
          * If set, the button will still be displayed but not selectable.
         */
        "disabled"?: boolean;
        /**
          * HTML form field name for the input.
         */
        "name"?: string;
        /**
          * Value to track with the input.
         */
        "value"?: string;
    }
    interface VerdocsSearch {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
    }
    interface VerdocsSearchActivity {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when an entry is clicked.
         */
        "onEntrySelected"?: (event: VerdocsSearchActivityCustomEvent<IRecentSearch>) => void;
        "options"?: any;
        "type"?: 'recent' | 'saved' | 'starred';
    }
    interface VerdocsSearchBox {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * If set, the input field will attempt to "grab" focus after being rendered.
         */
        "grabsFocus"?: boolean;
        /**
          * Event fired when the user changes the query string.
         */
        "onQueryChanged"?: (event: VerdocsSearchBoxCustomEvent<string>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onSearchClicked"?: (event: VerdocsSearchBoxCustomEvent<ISearchEvent>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onTypeChanged"?: (event: VerdocsSearchBoxCustomEvent<TContentType>) => void;
        /**
          * The placeholder to display in the input field.
         */
        "placeholder"?: string;
        /**
          * The text search string entered by the user.
         */
        "query"?: string;
        /**
          * If set to a value other than 'all', a removeable filter indicator will be displayed.
         */
        "type"?: TContentType;
    }
    interface VerdocsSearchTabs {
    }
    interface VerdocsSelectInput {
        /**
          * Should the field be disabled?
         */
        "disabled"?: boolean;
        /**
          * The label for the field.
         */
        "label"?: string;
        /**
          * The options to list.
         */
        "options"?: {label: string; value: string}[];
        /**
          * The initial value for the input field.
         */
        "value"?: string;
    }
    interface VerdocsSend {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsSendCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSendCustomEvent<SDKError>) => void;
        /**
          * The user completed the form and clicked send.
         */
        "onSend"?: (event: VerdocsSendCustomEvent<{roles: IRole[]; name: string; template_id: string}>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
    }
    interface VerdocsSign {
        /**
          * The ID of the envelope to sign.
         */
        "envelopeId"?: string | null;
        /**
          * The invite code for the signer.
         */
        "inviteCode"?: string | null;
        /**
          * Event fired when the envelope is updated in any way.
         */
        "onEnvelopeLoaded"?: (event: VerdocsSignCustomEvent<{endpoint: VerdocsEndpoint; envelope: IEnvelope}>) => void;
        /**
          * Event fired when the envelope is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onEnvelopeUpdated"?: (event: VerdocsSignCustomEvent<{endpoint: VerdocsEndpoint; envelope: IEnvelope; event: string}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsSignCustomEvent<SDKError>) => void;
        /**
          * The ID of the role that will be signing e.g. 'Recipient 1'
         */
        "roleId"?: string | null;
    }
    interface VerdocsSignatureDialog {
        /**
          * Initial signature text
         */
        "name"?: string;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsSignatureDialogCustomEvent<any>) => void;
        /**
          * Fired when the user completes the dialog and clicks Adopt. The event detail will contain a base64-encoded string representation of the signature adopted.
         */
        "onNext"?: (event: VerdocsSignatureDialogCustomEvent<string>) => void;
    }
    interface VerdocsStatusIndicator {
        /**
          * The document to display status for. Ignored if `status` is set directly.
         */
        "envelope"?: IEnvelope;
        /**
          * The size (height) of the indicator. The small variant is suitable for use in densely populated components such as table rows.
         */
        "size"?: 'small' | 'normal';
        /**
          * The status to display.
         */
        "status"?: TEnvelopeStatus | TRecipientStatus | 'accepted';
        /**
          * The theme to use for diplay.
         */
        "theme"?: 'dark' | 'light';
    }
    interface VerdocsTemplateAttachments {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateAttachmentsCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateAttachmentsCustomEvent<SDKError>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateCard {
        /**
          * The template for which the card will be rendered.
         */
        "template"?: ITemplate;
    }
    interface VerdocsTemplateCreate {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsTemplateCreateCustomEvent<any>) => void;
        /**
          * Event fired when the user changes the type.
         */
        "onNext"?: (event: VerdocsTemplateCreateCustomEvent<ITemplate>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateCreateCustomEvent<SDKError>) => void;
    }
    interface VerdocsTemplateDocumentPage {
        /**
          * The ID of the document to display.
         */
        "documentId"?: string;
        /**
          * The endpoint to load from.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer. The parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g. if `pages` was ['page', 'fields'] the structure will be:  ```     <div id="verdocs-document-page-ker2fr1p9">       <div id="verdocs-document-page-ker2fr1p9-page"></div>       <div id="verdocs-document-page-ker2fr1p9-fields"></div>     </div> ```
         */
        "layers"?: IPageLayer[];
        /**
          * Fired when a page has been rendered. This is also fired when the page is resized.
         */
        "onPageRendered"?: (event: VerdocsTemplateDocumentPageCustomEvent<IDocumentPageInfo>) => void;
        /**
          * The page number being rendered. (Reminder: page numbers are 1-based.)
         */
        "pageNumber"?: number;
        /**
          * The ID of the template the document is for.
         */
        "templateId"?: string;
        /**
          * The "virtual" height of the page canvas.  Defaults to 792 which at 72dpi is 11" tall. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualHeight"?: number;
        /**
          * The "virtual" width of the page canvas. Defaults to 612 which at 72dpi is 8.5" wide. This is used to compute the aspect ratio of the final rendered element when scaling up/down.
         */
        "virtualWidth"?: number;
    }
    interface VerdocsTemplateFieldProperties {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The field to configure.
         */
        "fieldName"?: string;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateFieldPropertiesCustomEvent<any>) => void;
        /**
          * Event fired when the user deletes the role. The parent should update its UI to reflect the removal. When this event is emitted, the role will have already been deleted server-side.
         */
        "onDelete"?: (event: VerdocsTemplateFieldPropertiesCustomEvent<{templateId: string; roleName: string}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateFieldPropertiesCustomEvent<SDKError>) => void;
        /**
          * Event fired when the field's settings are changed.
         */
        "onSettingsChanged"?: (event: VerdocsTemplateFieldPropertiesCustomEvent<{fieldName: string}>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateFields {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateFieldsCustomEvent<SDKError>) => void;
        /**
          * Event fired when the template is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onTemplateUpdated"?: (event: VerdocsTemplateFieldsCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate; event: string}>) => void;
        /**
          * The ID of the template to create the document from.
         */
        "templateId"?: string | null;
        /**
          * If set, (recommended), the host application should create a <DIV> element with a unique ID. When this component renders, the toolbar will be removed from its default location and placed in the target element. This allows the parent application to more easily control its placement and scroll effects.
         */
        "toolbarTargetId"?: string | null;
    }
    interface VerdocsTemplateName {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateNameCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateNameCustomEvent<SDKError>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateProperties {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsTemplatePropertiesCustomEvent<any>) => void;
        /**
          * Event fired when the user completes the step.
         */
        "onNext"?: (event: VerdocsTemplatePropertiesCustomEvent<{name: string; sendReminders: boolean; firstReminderDays: number; reminderDays: number}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplatePropertiesCustomEvent<SDKError>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateReminders {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateRemindersCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateRemindersCustomEvent<SDKError>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateRoleProperties {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateRolePropertiesCustomEvent<any>) => void;
        /**
          * Event fired when the user deletes the role. The parent should update its UI to reflect the removal. When this event is emitted, the role will have already been deleted server-side.
         */
        "onDelete"?: (event: VerdocsTemplateRolePropertiesCustomEvent<{templateId: string; roleName: string}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateRolePropertiesCustomEvent<SDKError>) => void;
        /**
          * The role name to edit.
         */
        "roleName"?: string;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "sender"?: TTemplateSender;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateRoles {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsTemplateRolesCustomEvent<any>) => void;
        /**
          * Event fired when the user clicks to proceed.
         */
        "onNext"?: (event: VerdocsTemplateRolesCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateRolesCustomEvent<SDKError>) => void;
        /**
          * Event fired when the template is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onTemplateUpdated"?: (event: VerdocsTemplateRolesCustomEvent<{endpoint: VerdocsEndpoint; template: ITemplate; event: string}>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateSender {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateSenderCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateSenderCustomEvent<SDKError>) => void;
        /**
          * Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.
         */
        "sender"?: TTemplateSender;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTemplateTags {
        /**
          * The tags to display
         */
        "tags"?: any[];
    }
    interface VerdocsTemplateVisibility {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * Event fired when the user cancels the dialog.
         */
        "onClose"?: (event: VerdocsTemplateVisibilityCustomEvent<any>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsTemplateVisibilityCustomEvent<SDKError>) => void;
        /**
          * The template ID to edit.
         */
        "templateId"?: string;
    }
    interface VerdocsTextInput {
        /**
          * If desired, the autocomplete attribute to set.
         */
        "autocomplete"?: string;
        /**
          * Should the field be disabled?
         */
        "disabled"?: boolean;
        /**
          * If supplied, a help icon will be displayed to provide the user more information.
         */
        "helpText"?: string;
        /**
          * The label for the field.
         */
        "label"?: string;
        /**
          * The placeholder for the field.
         */
        "placeholder"?: string;
        /**
          * The type of field to render. Only text-type fields are allowed here for the current styling. Additional types (e.g. a date picker) will be supported by other controls in the future.
         */
        "type"?: 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url';
        /**
          * The initial value for the input field.
         */
        "value"?: string;
    }
    interface VerdocsToggle {
        /**
          * The tags to display
         */
        "options"?: IToggleIconButtons;
        /**
          * The "theme" to be used
         */
        "theme"?: 'light' | 'dark';
    }
    interface VerdocsToggleButton {
        "active"?: boolean;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "icon"?: string | null;
        /**
          * If set, should be an SVG object. This will be rendered as the button's visible element. If icon is supplied, label is ignored.
         */
        "label"?: string | null;
        /**
          * Event fired when the button is pressed.
         */
        "onToggle"?: (event: VerdocsToggleButtonCustomEvent<{active: boolean}>) => void;
        /**
          * How large the button should be. Small buttons are intended for dialog boxes and other smaller scale UI regions.
         */
        "size"?: 'small' | 'normal';
    }
    interface VerdocsToolbarIcon {
        /**
          * SVG icon to display
         */
        "icon"?: string;
        /**
          * Override the Popper "placement" setting
         */
        "placement"?: Placement;
        /**
          * Help text to display on hover/focus
         */
        "text"?: string;
    }
    interface VerdocsUploadDialog {
        /**
          * Event fired when the step is cancelled. This is called exit to avoid conflicts with the JS-reserved "cancel" event name.
         */
        "onExit"?: (event: VerdocsUploadDialogCustomEvent<any>) => void;
        /**
          * Event fired when the dialog is closed. The event data will contain the file selected.
         */
        "onNext"?: (event: VerdocsUploadDialogCustomEvent<FileWithData[]>) => void;
    }
    interface VerdocsView {
        /**
          * The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.
         */
        "endpoint"?: VerdocsEndpoint;
        /**
          * The envelope ID to render. Set ONE OF templateId or envelopeId. If both are set, envelopeId will be ignored.
         */
        "envelopeId"?: string;
        /**
          * Event fired when the envelope is updated in any way. May be used for tasks such as cache invalidation or reporting to other systems.
         */
        "onEnvelopeUpdated"?: (event: VerdocsViewCustomEvent<{endpoint: VerdocsEndpoint; envelope: IEnvelope; event: string}>) => void;
        /**
          * Event fired if an error occurs. The event details will contain information about the error. Most errors will terminate the process, and the calling application should correct the condition and re-render the component.
         */
        "onSdkError"?: (event: VerdocsViewCustomEvent<SDKError>) => void;
    }
    interface IntrinsicElements {
        "verdocs-auth": VerdocsAuth;
        "verdocs-build": VerdocsBuild;
        "verdocs-button": VerdocsButton;
        "verdocs-button-panel": VerdocsButtonPanel;
        "verdocs-checkbox": VerdocsCheckbox;
        "verdocs-component-error": VerdocsComponentError;
        "verdocs-contact-picker": VerdocsContactPicker;
        "verdocs-document-page": VerdocsDocumentPage;
        "verdocs-dropdown": VerdocsDropdown;
        "verdocs-envelope-sidebar": VerdocsEnvelopeSidebar;
        "verdocs-field-attachment": VerdocsFieldAttachment;
        "verdocs-field-checkbox": VerdocsFieldCheckbox;
        "verdocs-field-date": VerdocsFieldDate;
        "verdocs-field-dropdown": VerdocsFieldDropdown;
        "verdocs-field-initial": VerdocsFieldInitial;
        "verdocs-field-payment": VerdocsFieldPayment;
        "verdocs-field-radio-button": VerdocsFieldRadioButton;
        "verdocs-field-signature": VerdocsFieldSignature;
        "verdocs-field-textarea": VerdocsFieldTextarea;
        "verdocs-field-textbox": VerdocsFieldTextbox;
        "verdocs-field-timestamp": VerdocsFieldTimestamp;
        "verdocs-floating-menu": VerdocsFloatingMenu;
        "verdocs-help-icon": VerdocsHelpIcon;
        "verdocs-initial-dialog": VerdocsInitialDialog;
        "verdocs-kba-dialog": VerdocsKbaDialog;
        "verdocs-loader": VerdocsLoader;
        "verdocs-ok-dialog": VerdocsOkDialog;
        "verdocs-organization-card": VerdocsOrganizationCard;
        "verdocs-preview": VerdocsPreview;
        "verdocs-quick-functions": VerdocsQuickFunctions;
        "verdocs-radio-button": VerdocsRadioButton;
        "verdocs-search": VerdocsSearch;
        "verdocs-search-activity": VerdocsSearchActivity;
        "verdocs-search-box": VerdocsSearchBox;
        "verdocs-search-tabs": VerdocsSearchTabs;
        "verdocs-select-input": VerdocsSelectInput;
        "verdocs-send": VerdocsSend;
        "verdocs-sign": VerdocsSign;
        "verdocs-signature-dialog": VerdocsSignatureDialog;
        "verdocs-status-indicator": VerdocsStatusIndicator;
        "verdocs-template-attachments": VerdocsTemplateAttachments;
        "verdocs-template-card": VerdocsTemplateCard;
        "verdocs-template-create": VerdocsTemplateCreate;
        "verdocs-template-document-page": VerdocsTemplateDocumentPage;
        "verdocs-template-field-properties": VerdocsTemplateFieldProperties;
        "verdocs-template-fields": VerdocsTemplateFields;
        "verdocs-template-name": VerdocsTemplateName;
        "verdocs-template-properties": VerdocsTemplateProperties;
        "verdocs-template-reminders": VerdocsTemplateReminders;
        "verdocs-template-role-properties": VerdocsTemplateRoleProperties;
        "verdocs-template-roles": VerdocsTemplateRoles;
        "verdocs-template-sender": VerdocsTemplateSender;
        "verdocs-template-tags": VerdocsTemplateTags;
        "verdocs-template-visibility": VerdocsTemplateVisibility;
        "verdocs-text-input": VerdocsTextInput;
        "verdocs-toggle": VerdocsToggle;
        "verdocs-toggle-button": VerdocsToggleButton;
        "verdocs-toolbar-icon": VerdocsToolbarIcon;
        "verdocs-upload-dialog": VerdocsUploadDialog;
        "verdocs-view": VerdocsView;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "verdocs-auth": LocalJSX.VerdocsAuth & JSXBase.HTMLAttributes<HTMLVerdocsAuthElement>;
            "verdocs-build": LocalJSX.VerdocsBuild & JSXBase.HTMLAttributes<HTMLVerdocsBuildElement>;
            "verdocs-button": LocalJSX.VerdocsButton & JSXBase.HTMLAttributes<HTMLVerdocsButtonElement>;
            "verdocs-button-panel": LocalJSX.VerdocsButtonPanel & JSXBase.HTMLAttributes<HTMLVerdocsButtonPanelElement>;
            "verdocs-checkbox": LocalJSX.VerdocsCheckbox & JSXBase.HTMLAttributes<HTMLVerdocsCheckboxElement>;
            "verdocs-component-error": LocalJSX.VerdocsComponentError & JSXBase.HTMLAttributes<HTMLVerdocsComponentErrorElement>;
            "verdocs-contact-picker": LocalJSX.VerdocsContactPicker & JSXBase.HTMLAttributes<HTMLVerdocsContactPickerElement>;
            "verdocs-document-page": LocalJSX.VerdocsDocumentPage & JSXBase.HTMLAttributes<HTMLVerdocsDocumentPageElement>;
            "verdocs-dropdown": LocalJSX.VerdocsDropdown & JSXBase.HTMLAttributes<HTMLVerdocsDropdownElement>;
            "verdocs-envelope-sidebar": LocalJSX.VerdocsEnvelopeSidebar & JSXBase.HTMLAttributes<HTMLVerdocsEnvelopeSidebarElement>;
            "verdocs-field-attachment": LocalJSX.VerdocsFieldAttachment & JSXBase.HTMLAttributes<HTMLVerdocsFieldAttachmentElement>;
            "verdocs-field-checkbox": LocalJSX.VerdocsFieldCheckbox & JSXBase.HTMLAttributes<HTMLVerdocsFieldCheckboxElement>;
            "verdocs-field-date": LocalJSX.VerdocsFieldDate & JSXBase.HTMLAttributes<HTMLVerdocsFieldDateElement>;
            "verdocs-field-dropdown": LocalJSX.VerdocsFieldDropdown & JSXBase.HTMLAttributes<HTMLVerdocsFieldDropdownElement>;
            "verdocs-field-initial": LocalJSX.VerdocsFieldInitial & JSXBase.HTMLAttributes<HTMLVerdocsFieldInitialElement>;
            "verdocs-field-payment": LocalJSX.VerdocsFieldPayment & JSXBase.HTMLAttributes<HTMLVerdocsFieldPaymentElement>;
            "verdocs-field-radio-button": LocalJSX.VerdocsFieldRadioButton & JSXBase.HTMLAttributes<HTMLVerdocsFieldRadioButtonElement>;
            "verdocs-field-signature": LocalJSX.VerdocsFieldSignature & JSXBase.HTMLAttributes<HTMLVerdocsFieldSignatureElement>;
            "verdocs-field-textarea": LocalJSX.VerdocsFieldTextarea & JSXBase.HTMLAttributes<HTMLVerdocsFieldTextareaElement>;
            "verdocs-field-textbox": LocalJSX.VerdocsFieldTextbox & JSXBase.HTMLAttributes<HTMLVerdocsFieldTextboxElement>;
            "verdocs-field-timestamp": LocalJSX.VerdocsFieldTimestamp & JSXBase.HTMLAttributes<HTMLVerdocsFieldTimestampElement>;
            "verdocs-floating-menu": LocalJSX.VerdocsFloatingMenu & JSXBase.HTMLAttributes<HTMLVerdocsFloatingMenuElement>;
            "verdocs-help-icon": LocalJSX.VerdocsHelpIcon & JSXBase.HTMLAttributes<HTMLVerdocsHelpIconElement>;
            "verdocs-initial-dialog": LocalJSX.VerdocsInitialDialog & JSXBase.HTMLAttributes<HTMLVerdocsInitialDialogElement>;
            "verdocs-kba-dialog": LocalJSX.VerdocsKbaDialog & JSXBase.HTMLAttributes<HTMLVerdocsKbaDialogElement>;
            "verdocs-loader": LocalJSX.VerdocsLoader & JSXBase.HTMLAttributes<HTMLVerdocsLoaderElement>;
            "verdocs-ok-dialog": LocalJSX.VerdocsOkDialog & JSXBase.HTMLAttributes<HTMLVerdocsOkDialogElement>;
            "verdocs-organization-card": LocalJSX.VerdocsOrganizationCard & JSXBase.HTMLAttributes<HTMLVerdocsOrganizationCardElement>;
            "verdocs-preview": LocalJSX.VerdocsPreview & JSXBase.HTMLAttributes<HTMLVerdocsPreviewElement>;
            "verdocs-quick-functions": LocalJSX.VerdocsQuickFunctions & JSXBase.HTMLAttributes<HTMLVerdocsQuickFunctionsElement>;
            "verdocs-radio-button": LocalJSX.VerdocsRadioButton & JSXBase.HTMLAttributes<HTMLVerdocsRadioButtonElement>;
            "verdocs-search": LocalJSX.VerdocsSearch & JSXBase.HTMLAttributes<HTMLVerdocsSearchElement>;
            "verdocs-search-activity": LocalJSX.VerdocsSearchActivity & JSXBase.HTMLAttributes<HTMLVerdocsSearchActivityElement>;
            "verdocs-search-box": LocalJSX.VerdocsSearchBox & JSXBase.HTMLAttributes<HTMLVerdocsSearchBoxElement>;
            "verdocs-search-tabs": LocalJSX.VerdocsSearchTabs & JSXBase.HTMLAttributes<HTMLVerdocsSearchTabsElement>;
            "verdocs-select-input": LocalJSX.VerdocsSelectInput & JSXBase.HTMLAttributes<HTMLVerdocsSelectInputElement>;
            "verdocs-send": LocalJSX.VerdocsSend & JSXBase.HTMLAttributes<HTMLVerdocsSendElement>;
            "verdocs-sign": LocalJSX.VerdocsSign & JSXBase.HTMLAttributes<HTMLVerdocsSignElement>;
            "verdocs-signature-dialog": LocalJSX.VerdocsSignatureDialog & JSXBase.HTMLAttributes<HTMLVerdocsSignatureDialogElement>;
            "verdocs-status-indicator": LocalJSX.VerdocsStatusIndicator & JSXBase.HTMLAttributes<HTMLVerdocsStatusIndicatorElement>;
            "verdocs-template-attachments": LocalJSX.VerdocsTemplateAttachments & JSXBase.HTMLAttributes<HTMLVerdocsTemplateAttachmentsElement>;
            "verdocs-template-card": LocalJSX.VerdocsTemplateCard & JSXBase.HTMLAttributes<HTMLVerdocsTemplateCardElement>;
            "verdocs-template-create": LocalJSX.VerdocsTemplateCreate & JSXBase.HTMLAttributes<HTMLVerdocsTemplateCreateElement>;
            "verdocs-template-document-page": LocalJSX.VerdocsTemplateDocumentPage & JSXBase.HTMLAttributes<HTMLVerdocsTemplateDocumentPageElement>;
            "verdocs-template-field-properties": LocalJSX.VerdocsTemplateFieldProperties & JSXBase.HTMLAttributes<HTMLVerdocsTemplateFieldPropertiesElement>;
            "verdocs-template-fields": LocalJSX.VerdocsTemplateFields & JSXBase.HTMLAttributes<HTMLVerdocsTemplateFieldsElement>;
            "verdocs-template-name": LocalJSX.VerdocsTemplateName & JSXBase.HTMLAttributes<HTMLVerdocsTemplateNameElement>;
            "verdocs-template-properties": LocalJSX.VerdocsTemplateProperties & JSXBase.HTMLAttributes<HTMLVerdocsTemplatePropertiesElement>;
            "verdocs-template-reminders": LocalJSX.VerdocsTemplateReminders & JSXBase.HTMLAttributes<HTMLVerdocsTemplateRemindersElement>;
            "verdocs-template-role-properties": LocalJSX.VerdocsTemplateRoleProperties & JSXBase.HTMLAttributes<HTMLVerdocsTemplateRolePropertiesElement>;
            "verdocs-template-roles": LocalJSX.VerdocsTemplateRoles & JSXBase.HTMLAttributes<HTMLVerdocsTemplateRolesElement>;
            "verdocs-template-sender": LocalJSX.VerdocsTemplateSender & JSXBase.HTMLAttributes<HTMLVerdocsTemplateSenderElement>;
            "verdocs-template-tags": LocalJSX.VerdocsTemplateTags & JSXBase.HTMLAttributes<HTMLVerdocsTemplateTagsElement>;
            "verdocs-template-visibility": LocalJSX.VerdocsTemplateVisibility & JSXBase.HTMLAttributes<HTMLVerdocsTemplateVisibilityElement>;
            "verdocs-text-input": LocalJSX.VerdocsTextInput & JSXBase.HTMLAttributes<HTMLVerdocsTextInputElement>;
            "verdocs-toggle": LocalJSX.VerdocsToggle & JSXBase.HTMLAttributes<HTMLVerdocsToggleElement>;
            "verdocs-toggle-button": LocalJSX.VerdocsToggleButton & JSXBase.HTMLAttributes<HTMLVerdocsToggleButtonElement>;
            "verdocs-toolbar-icon": LocalJSX.VerdocsToolbarIcon & JSXBase.HTMLAttributes<HTMLVerdocsToolbarIconElement>;
            "verdocs-upload-dialog": LocalJSX.VerdocsUploadDialog & JSXBase.HTMLAttributes<HTMLVerdocsUploadDialogElement>;
            "verdocs-view": LocalJSX.VerdocsView & JSXBase.HTMLAttributes<HTMLVerdocsViewElement>;
        }
    }
}
