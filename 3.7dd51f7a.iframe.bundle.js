(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"./dist/esm/Types-ab9f6af8.js":function(module,__webpack_exports__,__webpack_require__){"use strict";var TemplatePermissions,TemplateSenderTypes,TemplateActions,SortOptions;__webpack_require__.d(__webpack_exports__,"a",(function(){return TemplateSenderTypes})),function(TemplatePermissions){TemplatePermissions.TEMPLATE_CREATOR_CREATE_PUBLIC="template:creator:create:public",TemplatePermissions.TEMPLATE_CREATOR_CREATE_ORG="template:creator:create:org",TemplatePermissions.TEMPLATE_CREATOR_CREATE_PERSONAL="template:creator:create:personal",TemplatePermissions.TEMPLATE_CREATOR_DELETE="template:creator:delete",TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY="template:creator:visibility",TemplatePermissions.TEMPLATE_MEMBER_READ="template:member:read",TemplatePermissions.TEMPLATE_MEMBER_WRITE="template:member:write",TemplatePermissions.TEMPLATE_MEMBER_DELETE="template:member:delete",TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY="template:member:visibility"}(TemplatePermissions||(TemplatePermissions={})),function(TemplateSenderTypes){TemplateSenderTypes.CREATOR="creator",TemplateSenderTypes.ORGANIZATION_MEMBER="organization_member",TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR="organization_member_as_creator",TemplateSenderTypes.EVERYONE="everyone",TemplateSenderTypes.EVERYONE_AS_CREATOR="everyone_as_creator"}(TemplateSenderTypes||(TemplateSenderTypes={})),function(TemplateActions){TemplateActions.CREATE_PERSONAL="create_personal",TemplateActions.CREATE_ORG="create_org",TemplateActions.CREATE_PUBLIC="create_public",TemplateActions.READ="read",TemplateActions.WRITE="write",TemplateActions.DELETE="delete",TemplateActions.CHANGE_VISIBILITY_PERSONAL="change_visibility_personal",TemplateActions.CHANGE_VISIBILITY_ORG="change_visibility_org",TemplateActions.CHANGE_VISIBILITY_PUBLIC="change_visibility_public"}(TemplateActions||(TemplateActions={})),function(SortOptions){SortOptions.CREATED_AT="created_at",SortOptions.UPDATED_AT="updated_at",SortOptions.NAME="name",SortOptions.LAST_USED_AT="last_used_at",SortOptions.COUNTER="counter",SortOptions.STAR_COUNTER="star_counter"}(SortOptions||(SortOptions={}))},"./dist/esm/VerdocsEndpoint-cf4392fb.js":function(module,__webpack_exports__,__webpack_require__){"use strict";(function(global,Buffer){__webpack_require__.d(__webpack_exports__,"a",(function(){return VerdocsEndpoint}));__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.array-buffer.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.array-buffer.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.array-buffer.is-view.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.string.trim.js"),__webpack_require__("./node_modules/core-js/modules/es.string.replace.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-names.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.global-this.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.uint8-array.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.copy-within.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.every.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.fill.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.find-index.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.last-index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reduce-right.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.set.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.some.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.subarray.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.to-locale-string.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-properties.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.number.is-finite.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-json.js"),__webpack_require__("./node_modules/core-js/modules/web.url.to-json.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.string.ends-with.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.array.some.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-iso-string.js"),__webpack_require__("./node_modules/core-js/modules/web.url.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match-all.js"),__webpack_require__("./node_modules/core-js/modules/es.object.entries.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.date.now.js"),__webpack_require__("./node_modules/core-js/modules/es.string.search.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/web.timers.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.array.splice.js"),__webpack_require__("./node_modules/core-js/modules/es.map.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js");var _Token_54690789_js__WEBPACK_IMPORTED_MODULE_83__=__webpack_require__("./dist/esm/Token-54690789.js");function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&null!=_i.return&&(_r=_i.return(),Object(_r)!==_r))return}finally{if(_d)throw _e}}return _arr}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}function bind(fn,thisArg){return function wrap(){return fn.apply(thisArg,arguments)}}var cache,toString=Object.prototype.toString,getPrototypeOf=Object.getPrototypeOf,kindOf=(cache=Object.create(null),function(thing){var str=toString.call(thing);return cache[str]||(cache[str]=str.slice(8,-1).toLowerCase())}),kindOfTest=function kindOfTest(type){return type=type.toLowerCase(),function(thing){return kindOf(thing)===type}},typeOfTest=function typeOfTest(type){return function(thing){return typeof thing===type}},isArray=Array.isArray,isUndefined=typeOfTest("undefined");var isArrayBuffer=kindOfTest("ArrayBuffer");var isString=typeOfTest("string"),isFunction=typeOfTest("function"),isNumber=typeOfTest("number"),isObject=function isObject(thing){return null!==thing&&"object"==typeof thing},isPlainObject=function isPlainObject(val){if("object"!==kindOf(val))return!1;var prototype=getPrototypeOf(val);return!(null!==prototype&&prototype!==Object.prototype&&null!==Object.getPrototypeOf(prototype)||Symbol.toStringTag in val||Symbol.iterator in val)},isDate=kindOfTest("Date"),isFile=kindOfTest("File"),isBlob=kindOfTest("Blob"),isFileList=kindOfTest("FileList"),isURLSearchParams=kindOfTest("URLSearchParams");function forEach(obj,fn){var i,l,_ref=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},_ref$allOwnKeys=_ref.allOwnKeys,allOwnKeys=void 0!==_ref$allOwnKeys&&_ref$allOwnKeys;if(null!=obj)if("object"!=typeof obj&&(obj=[obj]),isArray(obj))for(i=0,l=obj.length;i<l;i++)fn.call(null,obj[i],i,obj);else{var key,keys=allOwnKeys?Object.getOwnPropertyNames(obj):Object.keys(obj),len=keys.length;for(i=0;i<len;i++)key=keys[i],fn.call(null,obj[key],key,obj)}}function findKey(obj,key){key=key.toLowerCase();for(var _key,keys=Object.keys(obj),i=keys.length;i-- >0;)if(key===(_key=keys[i]).toLowerCase())return _key;return null}var _global="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,isContextDefined=function isContextDefined(context){return!isUndefined(context)&&context!==_global};var TypedArray,isTypedArray=(TypedArray="undefined"!=typeof Uint8Array&&getPrototypeOf(Uint8Array),function(thing){return TypedArray&&thing instanceof TypedArray}),isHTMLForm=kindOfTest("HTMLFormElement"),hasOwnProperty=function(_ref4){var hasOwnProperty=Object.prototype.hasOwnProperty;return function(obj,prop){return hasOwnProperty.call(obj,prop)}}(),isRegExp=kindOfTest("RegExp"),reduceDescriptors=function reduceDescriptors(obj,reducer){var descriptors=Object.getOwnPropertyDescriptors(obj),reducedDescriptors={};forEach(descriptors,(function(descriptor,name){!1!==reducer(descriptor,name,obj)&&(reducedDescriptors[name]=descriptor)})),Object.defineProperties(obj,reducedDescriptors)},ALPHA="abcdefghijklmnopqrstuvwxyz",ALPHABET={DIGIT:"0123456789",ALPHA:ALPHA,ALPHA_DIGIT:ALPHA+ALPHA.toUpperCase()+"0123456789"};var utils={isArray:isArray,isArrayBuffer:isArrayBuffer,isBuffer:function isBuffer(val){return null!==val&&!isUndefined(val)&&null!==val.constructor&&!isUndefined(val.constructor)&&isFunction(val.constructor.isBuffer)&&val.constructor.isBuffer(val)},isFormData:function isFormData(thing){return thing&&("function"==typeof FormData&&thing instanceof FormData||"[object FormData]"===toString.call(thing)||isFunction(thing.toString)&&"[object FormData]"===thing.toString())},isArrayBufferView:function isArrayBufferView(val){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(val):val&&val.buffer&&isArrayBuffer(val.buffer)},isString:isString,isNumber:isNumber,isBoolean:function isBoolean(thing){return!0===thing||!1===thing},isObject:isObject,isPlainObject:isPlainObject,isUndefined:isUndefined,isDate:isDate,isFile:isFile,isBlob:isBlob,isRegExp:isRegExp,isFunction:isFunction,isStream:function isStream(val){return isObject(val)&&isFunction(val.pipe)},isURLSearchParams:isURLSearchParams,isTypedArray:isTypedArray,isFileList:isFileList,forEach:forEach,merge:function merge(){for(var _ref2=isContextDefined(this)&&this||{},caseless=_ref2.caseless,result={},assignValue=function assignValue(val,key){var targetKey=caseless&&findKey(result,key)||key;isPlainObject(result[targetKey])&&isPlainObject(val)?result[targetKey]=merge(result[targetKey],val):isPlainObject(val)?result[targetKey]=merge({},val):isArray(val)?result[targetKey]=val.slice():result[targetKey]=val},i=0,l=arguments.length;i<l;i++)arguments[i]&&forEach(arguments[i],assignValue);return result},extend:function extend(a,b,thisArg){var _ref3=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},allOwnKeys=_ref3.allOwnKeys;return forEach(b,(function(val,key){thisArg&&isFunction(val)?a[key]=bind(val,thisArg):a[key]=val}),{allOwnKeys:allOwnKeys}),a},trim:function trim(str){return str.trim?str.trim():str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},stripBOM:function stripBOM(content){return 65279===content.charCodeAt(0)&&(content=content.slice(1)),content},inherits:function inherits(constructor,superConstructor,props,descriptors){constructor.prototype=Object.create(superConstructor.prototype,descriptors),constructor.prototype.constructor=constructor,Object.defineProperty(constructor,"super",{value:superConstructor.prototype}),props&&Object.assign(constructor.prototype,props)},toFlatObject:function toFlatObject(sourceObj,destObj,filter,propFilter){var props,i,prop,merged={};if(destObj=destObj||{},null==sourceObj)return destObj;do{for(i=(props=Object.getOwnPropertyNames(sourceObj)).length;i-- >0;)prop=props[i],propFilter&&!propFilter(prop,sourceObj,destObj)||merged[prop]||(destObj[prop]=sourceObj[prop],merged[prop]=!0);sourceObj=!1!==filter&&getPrototypeOf(sourceObj)}while(sourceObj&&(!filter||filter(sourceObj,destObj))&&sourceObj!==Object.prototype);return destObj},kindOf:kindOf,kindOfTest:kindOfTest,endsWith:function endsWith(str,searchString,position){str=String(str),(void 0===position||position>str.length)&&(position=str.length),position-=searchString.length;var lastIndex=str.indexOf(searchString,position);return-1!==lastIndex&&lastIndex===position},toArray:function toArray(thing){if(!thing)return null;if(isArray(thing))return thing;var i=thing.length;if(!isNumber(i))return null;for(var arr=new Array(i);i-- >0;)arr[i]=thing[i];return arr},forEachEntry:function forEachEntry(obj,fn){for(var result,iterator=(obj&&obj[Symbol.iterator]).call(obj);(result=iterator.next())&&!result.done;){var pair=result.value;fn.call(obj,pair[0],pair[1])}},matchAll:function matchAll(regExp,str){for(var matches,arr=[];null!==(matches=regExp.exec(str));)arr.push(matches);return arr},isHTMLForm:isHTMLForm,hasOwnProperty:hasOwnProperty,hasOwnProp:hasOwnProperty,reduceDescriptors:reduceDescriptors,freezeMethods:function freezeMethods(obj){reduceDescriptors(obj,(function(descriptor,name){if(isFunction(obj)&&-1!==["arguments","caller","callee"].indexOf(name))return!1;var value=obj[name];isFunction(value)&&(descriptor.enumerable=!1,"writable"in descriptor?descriptor.writable=!1:descriptor.set||(descriptor.set=function(){throw Error("Can not rewrite read-only method '"+name+"'")}))}))},toObjectSet:function toObjectSet(arrayOrString,delimiter){var obj={},define=function define(arr){arr.forEach((function(value){obj[value]=!0}))};return isArray(arrayOrString)?define(arrayOrString):define(String(arrayOrString).split(delimiter)),obj},toCamelCase:function toCamelCase(str){return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function replacer(m,p1,p2){return p1.toUpperCase()+p2}))},noop:function noop(){},toFiniteNumber:function toFiniteNumber(value,defaultValue){return value=+value,Number.isFinite(value)?value:defaultValue},findKey:findKey,global:_global,isContextDefined:isContextDefined,ALPHABET:ALPHABET,generateString:function generateString(){for(var size=arguments.length>0&&void 0!==arguments[0]?arguments[0]:16,alphabet=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ALPHABET.ALPHA_DIGIT,str="",length=alphabet.length;size--;)str+=alphabet[Math.random()*length|0];return str},isSpecCompliantForm:function isSpecCompliantForm(thing){return!!(thing&&isFunction(thing.append)&&"FormData"===thing[Symbol.toStringTag]&&thing[Symbol.iterator])},toJSONObject:function toJSONObject(obj){var stack=new Array(10);return function visit(source,i){if(isObject(source)){if(stack.indexOf(source)>=0)return;if(!("toJSON"in source)){stack[i]=source;var target=isArray(source)?[]:{};return forEach(source,(function(value,key){var reducedValue=visit(value,i+1);!isUndefined(reducedValue)&&(target[key]=reducedValue)})),stack[i]=void 0,target}}return source}(obj,0)}};function AxiosError(message,code,config,request,response){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=message,this.name="AxiosError",code&&(this.code=code),config&&(this.config=config),request&&(this.request=request),response&&(this.response=response)}utils.inherits(AxiosError,Error,{toJSON:function toJSON(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:utils.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var prototype$1=AxiosError.prototype,descriptors={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((function(code){descriptors[code]={value:code}})),Object.defineProperties(AxiosError,descriptors),Object.defineProperty(prototype$1,"isAxiosError",{value:!0}),AxiosError.from=function(error,code,config,request,response,customProps){var axiosError=Object.create(prototype$1);return utils.toFlatObject(error,axiosError,(function filter(obj){return obj!==Error.prototype}),(function(prop){return"isAxiosError"!==prop})),AxiosError.call(axiosError,error.message,code,config,request,response),axiosError.cause=error,axiosError.name=error.name,customProps&&Object.assign(axiosError,customProps),axiosError};function isVisitable(thing){return utils.isPlainObject(thing)||utils.isArray(thing)}function removeBrackets(key){return utils.endsWith(key,"[]")?key.slice(0,-2):key}function renderKey(path,key,dots){return path?path.concat(key).map((function each(token,i){return token=removeBrackets(token),!dots&&i?"["+token+"]":token})).join(dots?".":""):key}var predicates=utils.toFlatObject(utils,{},null,(function filter(prop){return/^is[A-Z]/.test(prop)}));function toFormData(obj,formData,options){if(!utils.isObject(obj))throw new TypeError("target must be an object");formData=formData||new FormData;var metaTokens=(options=utils.toFlatObject(options,{metaTokens:!0,dots:!1,indexes:!1},!1,(function defined(option,source){return!utils.isUndefined(source[option])}))).metaTokens,visitor=options.visitor||defaultVisitor,dots=options.dots,indexes=options.indexes,useBlob=(options.Blob||"undefined"!=typeof Blob&&Blob)&&utils.isSpecCompliantForm(formData);if(!utils.isFunction(visitor))throw new TypeError("visitor must be a function");function convertValue(value){if(null===value)return"";if(utils.isDate(value))return value.toISOString();if(!useBlob&&utils.isBlob(value))throw new AxiosError("Blob is not supported. Use a Buffer instead.");return utils.isArrayBuffer(value)||utils.isTypedArray(value)?useBlob&&"function"==typeof Blob?new Blob([value]):Buffer.from(value):value}function defaultVisitor(value,key,path){var arr=value;if(value&&!path&&"object"==typeof value)if(utils.endsWith(key,"{}"))key=metaTokens?key:key.slice(0,-2),value=JSON.stringify(value);else if(utils.isArray(value)&&function isFlatArray(arr){return utils.isArray(arr)&&!arr.some(isVisitable)}(value)||utils.isFileList(value)||utils.endsWith(key,"[]")&&(arr=utils.toArray(value)))return key=removeBrackets(key),arr.forEach((function each(el,index){!utils.isUndefined(el)&&null!==el&&formData.append(!0===indexes?renderKey([key],index,dots):null===indexes?key:key+"[]",convertValue(el))})),!1;return!!isVisitable(value)||(formData.append(renderKey(path,key,dots),convertValue(value)),!1)}var stack=[],exposedHelpers=Object.assign(predicates,{defaultVisitor:defaultVisitor,convertValue:convertValue,isVisitable:isVisitable});if(!utils.isObject(obj))throw new TypeError("data must be an object");return function build(value,path){if(!utils.isUndefined(value)){if(-1!==stack.indexOf(value))throw Error("Circular reference detected in "+path.join("."));stack.push(value),utils.forEach(value,(function each(el,key){!0===(!(utils.isUndefined(el)||null===el)&&visitor.call(formData,el,utils.isString(key)?key.trim():key,path,exposedHelpers))&&build(el,path?path.concat(key):[key])})),stack.pop()}}(obj),formData}function encode$1(str){var charMap={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g,(function replacer(match){return charMap[match]}))}function AxiosURLSearchParams(params,options){this._pairs=[],params&&toFormData(params,this,options)}var prototype=AxiosURLSearchParams.prototype;function encode(val){return encodeURIComponent(val).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function buildURL(url,params,options){if(!params)return url;var serializedParams,_encode=options&&options.encode||encode,serializeFn=options&&options.serialize;if(serializedParams=serializeFn?serializeFn(params,options):utils.isURLSearchParams(params)?params.toString():new AxiosURLSearchParams(params,options).toString(_encode)){var hashmarkIndex=url.indexOf("#");-1!==hashmarkIndex&&(url=url.slice(0,hashmarkIndex)),url+=(-1===url.indexOf("?")?"?":"&")+serializedParams}return url}prototype.append=function append(name,value){this._pairs.push([name,value])},prototype.toString=function toString(encoder){var _encode=encoder?function(value){return encoder.call(this,value,encode$1)}:encode$1;return this._pairs.map((function each(pair){return _encode(pair[0])+"="+_encode(pair[1])}),"").join("&")};var product,InterceptorManager=function(){function InterceptorManager(){_classCallCheck(this,InterceptorManager),this.handlers=[]}return _createClass(InterceptorManager,[{key:"use",value:function use(fulfilled,rejected,options){return this.handlers.push({fulfilled:fulfilled,rejected:rejected,synchronous:!!options&&options.synchronous,runWhen:options?options.runWhen:null}),this.handlers.length-1}},{key:"eject",value:function eject(id){this.handlers[id]&&(this.handlers[id]=null)}},{key:"clear",value:function clear(){this.handlers&&(this.handlers=[])}},{key:"forEach",value:function forEach(fn){utils.forEach(this.handlers,(function forEachHandler(h){null!==h&&fn(h)}))}}]),InterceptorManager}(),transitionalDefaults={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},URLSearchParams$1="undefined"!=typeof URLSearchParams?URLSearchParams:AxiosURLSearchParams,FormData$1=FormData,isStandardBrowserEnv=("undefined"==typeof navigator||"ReactNative"!==(product=navigator.product)&&"NativeScript"!==product&&"NS"!==product)&&"undefined"!=typeof window&&"undefined"!=typeof document,isStandardBrowserWebWorkerEnv="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,platform={isBrowser:!0,classes:{URLSearchParams:URLSearchParams$1,FormData:FormData$1,Blob:Blob},isStandardBrowserEnv:isStandardBrowserEnv,isStandardBrowserWebWorkerEnv:isStandardBrowserWebWorkerEnv,protocols:["http","https","file","blob","url","data"]};function formDataToJSON(formData){function buildPath(path,value,target,index){var name=path[index++],isNumericKey=Number.isFinite(+name),isLast=index>=path.length;return name=!name&&utils.isArray(target)?target.length:name,isLast?(utils.hasOwnProp(target,name)?target[name]=[target[name],value]:target[name]=value,!isNumericKey):(target[name]&&utils.isObject(target[name])||(target[name]=[]),buildPath(path,value,target[name],index)&&utils.isArray(target[name])&&(target[name]=function arrayToObject(arr){var i,key,obj={},keys=Object.keys(arr),len=keys.length;for(i=0;i<len;i++)obj[key=keys[i]]=arr[key];return obj}(target[name])),!isNumericKey)}if(utils.isFormData(formData)&&utils.isFunction(formData.entries)){var obj={};return utils.forEachEntry(formData,(function(name,value){buildPath(function parsePropPath(name){return utils.matchAll(/\w+|\[(\w*)]/g,name).map((function(match){return"[]"===match[0]?"":match[1]||match[0]}))}(name),value,obj,0)})),obj}return null}var DEFAULT_CONTENT_TYPE={"Content-Type":void 0};var defaults={transitional:transitionalDefaults,adapter:["xhr","http"],transformRequest:[function transformRequest(data,headers){var isFileList,contentType=headers.getContentType()||"",hasJSONContentType=contentType.indexOf("application/json")>-1,isObjectPayload=utils.isObject(data);if(isObjectPayload&&utils.isHTMLForm(data)&&(data=new FormData(data)),utils.isFormData(data))return hasJSONContentType&&hasJSONContentType?JSON.stringify(formDataToJSON(data)):data;if(utils.isArrayBuffer(data)||utils.isBuffer(data)||utils.isStream(data)||utils.isFile(data)||utils.isBlob(data))return data;if(utils.isArrayBufferView(data))return data.buffer;if(utils.isURLSearchParams(data))return headers.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),data.toString();if(isObjectPayload){if(contentType.indexOf("application/x-www-form-urlencoded")>-1)return function toURLEncodedForm(data,options){return toFormData(data,new platform.classes.URLSearchParams,Object.assign({visitor:function visitor(value,key,path,helpers){return helpers.defaultVisitor.apply(this,arguments)}},options))}(data,this.formSerializer).toString();if((isFileList=utils.isFileList(data))||contentType.indexOf("multipart/form-data")>-1){var _FormData=this.env&&this.env.FormData;return toFormData(isFileList?{"files[]":data}:data,_FormData&&new _FormData,this.formSerializer)}}return isObjectPayload||hasJSONContentType?(headers.setContentType("application/json",!1),function stringifySafely(rawValue,parser,encoder){if(utils.isString(rawValue))try{return(parser||JSON.parse)(rawValue),utils.trim(rawValue)}catch(e){if("SyntaxError"!==e.name)throw e}return(encoder||JSON.stringify)(rawValue)}(data)):data}],transformResponse:[function transformResponse(data){var transitional=this.transitional||defaults.transitional,forcedJSONParsing=transitional&&transitional.forcedJSONParsing,JSONRequested="json"===this.responseType;if(data&&utils.isString(data)&&(forcedJSONParsing&&!this.responseType||JSONRequested)){var strictJSONParsing=!(transitional&&transitional.silentJSONParsing)&&JSONRequested;try{return JSON.parse(data)}catch(e){if(strictJSONParsing){if("SyntaxError"===e.name)throw AxiosError.from(e,AxiosError.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return data}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:platform.classes.FormData,Blob:platform.classes.Blob},validateStatus:function validateStatus(status){return status>=200&&status<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};utils.forEach(["delete","get","head"],(function forEachMethodNoData(method){defaults.headers[method]={}})),utils.forEach(["post","put","patch"],(function forEachMethodWithData(method){defaults.headers[method]=utils.merge(DEFAULT_CONTENT_TYPE)}));var ignoreDuplicateOf=utils.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),$internals=Symbol("internals");function normalizeHeader(header){return header&&String(header).trim().toLowerCase()}function normalizeValue(value){return!1===value||null==value?value:utils.isArray(value)?value.map(normalizeValue):String(value)}function matchHeaderValue(context,value,header,filter){return utils.isFunction(filter)?filter.call(this,value,header):utils.isString(value)?utils.isString(filter)?-1!==value.indexOf(filter):utils.isRegExp(filter)?filter.test(value):void 0:void 0}var AxiosHeaders=function(_Symbol$iterator,_Symbol$toStringTag){function AxiosHeaders(headers){_classCallCheck(this,AxiosHeaders),headers&&this.set(headers)}return _createClass(AxiosHeaders,[{key:"set",value:function set(header,valueOrRewrite,rewrite){var self=this;function setHeader(_value,_header,_rewrite){var lHeader=normalizeHeader(_header);if(!lHeader)throw new Error("header name must be a non-empty string");var key=utils.findKey(self,lHeader);(!key||void 0===self[key]||!0===_rewrite||void 0===_rewrite&&!1!==self[key])&&(self[key||_header]=normalizeValue(_value))}var setHeaders=function setHeaders(headers,_rewrite){return utils.forEach(headers,(function(_value,_header){return setHeader(_value,_header,_rewrite)}))};return utils.isPlainObject(header)||header instanceof this.constructor?setHeaders(header,valueOrRewrite):utils.isString(header)&&(header=header.trim())&&!function isValidHeaderName(str){return/^[-_a-zA-Z]+$/.test(str.trim())}(header)?setHeaders(function parseHeaders(rawHeaders){var key,val,i,parsed={};return rawHeaders&&rawHeaders.split("\n").forEach((function parser(line){i=line.indexOf(":"),key=line.substring(0,i).trim().toLowerCase(),val=line.substring(i+1).trim(),!key||parsed[key]&&ignoreDuplicateOf[key]||("set-cookie"===key?parsed[key]?parsed[key].push(val):parsed[key]=[val]:parsed[key]=parsed[key]?parsed[key]+", "+val:val)})),parsed}(header),valueOrRewrite):null!=header&&setHeader(valueOrRewrite,header,rewrite),this}},{key:"get",value:function get(header,parser){if(header=normalizeHeader(header)){var key=utils.findKey(this,header);if(key){var value=this[key];if(!parser)return value;if(!0===parser)return function parseTokens(str){for(var match,tokens=Object.create(null),tokensRE=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;match=tokensRE.exec(str);)tokens[match[1]]=match[2];return tokens}(value);if(utils.isFunction(parser))return parser.call(this,value,key);if(utils.isRegExp(parser))return parser.exec(value);throw new TypeError("parser must be boolean|regexp|function")}}}},{key:"has",value:function has(header,matcher){if(header=normalizeHeader(header)){var key=utils.findKey(this,header);return!(!key||matcher&&!matchHeaderValue(0,this[key],key,matcher))}return!1}},{key:"delete",value:function _delete(header,matcher){var self=this,deleted=!1;function deleteHeader(_header){if(_header=normalizeHeader(_header)){var key=utils.findKey(self,_header);!key||matcher&&!matchHeaderValue(0,self[key],key,matcher)||(delete self[key],deleted=!0)}}return utils.isArray(header)?header.forEach(deleteHeader):deleteHeader(header),deleted}},{key:"clear",value:function clear(matcher){for(var keys=Object.keys(this),i=keys.length,deleted=!1;i--;){var key=keys[i];matcher&&!matchHeaderValue(0,this[key],key,matcher)||(delete this[key],deleted=!0)}return deleted}},{key:"normalize",value:function normalize(format){var self=this,headers={};return utils.forEach(this,(function(value,header){var key=utils.findKey(headers,header);if(key)return self[key]=normalizeValue(value),void delete self[header];var normalized=format?function formatHeader(header){return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(function(w,_char,str){return _char.toUpperCase()+str}))}(header):String(header).trim();normalized!==header&&delete self[header],self[normalized]=normalizeValue(value),headers[normalized]=!0})),this}},{key:"concat",value:function concat(){for(var _this$constructor,_len=arguments.length,targets=new Array(_len),_key2=0;_key2<_len;_key2++)targets[_key2]=arguments[_key2];return(_this$constructor=this.constructor).concat.apply(_this$constructor,[this].concat(targets))}},{key:"toJSON",value:function toJSON(asStrings){var obj=Object.create(null);return utils.forEach(this,(function(value,header){null!=value&&!1!==value&&(obj[header]=asStrings&&utils.isArray(value)?value.join(", "):value)})),obj}},{key:Symbol.iterator,value:function value(){return Object.entries(this.toJSON())[Symbol.iterator]()}},{key:"toString",value:function toString(){return Object.entries(this.toJSON()).map((function(_ref5){var _ref6=_slicedToArray(_ref5,2);return _ref6[0]+": "+_ref6[1]})).join("\n")}},{key:Symbol.toStringTag,get:function get(){return"AxiosHeaders"}}],[{key:"from",value:function from(thing){return thing instanceof this?thing:new this(thing)}},{key:"concat",value:function concat(first){for(var computed=new this(first),_len2=arguments.length,targets=new Array(_len2>1?_len2-1:0),_key3=1;_key3<_len2;_key3++)targets[_key3-1]=arguments[_key3];return targets.forEach((function(target){return computed.set(target)})),computed}},{key:"accessor",value:function accessor(header){var accessors=(this[$internals]=this[$internals]={accessors:{}}).accessors,prototype=this.prototype;function defineAccessor(_header){var lHeader=normalizeHeader(_header);accessors[lHeader]||(!function buildAccessors(obj,header){var accessorName=utils.toCamelCase(" "+header);["get","set","has"].forEach((function(methodName){Object.defineProperty(obj,methodName+accessorName,{value:function value(arg1,arg2,arg3){return this[methodName].call(this,header,arg1,arg2,arg3)},configurable:!0})}))}(prototype,_header),accessors[lHeader]=!0)}return utils.isArray(header)?header.forEach(defineAccessor):defineAccessor(header),this}}]),AxiosHeaders}();function transformData(fns,response){var config=this||defaults,context=response||config,headers=AxiosHeaders.from(context.headers),data=context.data;return utils.forEach(fns,(function transform(fn){data=fn.call(config,data,headers.normalize(),response?response.status:void 0)})),headers.normalize(),data}function isCancel(value){return!(!value||!value.__CANCEL__)}function CanceledError(message,config,request){AxiosError.call(this,null==message?"canceled":message,AxiosError.ERR_CANCELED,config,request),this.name="CanceledError"}AxiosHeaders.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),utils.freezeMethods(AxiosHeaders.prototype),utils.freezeMethods(AxiosHeaders),utils.inherits(CanceledError,AxiosError,{__CANCEL__:!0});var cookies=platform.isStandardBrowserEnv?function standardBrowserEnv(){return{write:function write(name,value,expires,path,domain,secure){var cookie=[];cookie.push(name+"="+encodeURIComponent(value)),utils.isNumber(expires)&&cookie.push("expires="+new Date(expires).toGMTString()),utils.isString(path)&&cookie.push("path="+path),utils.isString(domain)&&cookie.push("domain="+domain),!0===secure&&cookie.push("secure"),document.cookie=cookie.join("; ")},read:function read(name){var match=document.cookie.match(new RegExp("(^|;\\s*)("+name+")=([^;]*)"));return match?decodeURIComponent(match[3]):null},remove:function remove(name){this.write(name,"",Date.now()-864e5)}}}():{write:function write(){},read:function read(){return null},remove:function remove(){}};function buildFullPath(baseURL,requestedURL){return baseURL&&!function isAbsoluteURL(url){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(url)}(requestedURL)?function combineURLs(baseURL,relativeURL){return relativeURL?baseURL.replace(/\/+$/,"")+"/"+relativeURL.replace(/^\/+/,""):baseURL}(baseURL,requestedURL):requestedURL}var isURLSameOrigin=platform.isStandardBrowserEnv?function standardBrowserEnv(){var originURL,msie=/(msie|trident)/i.test(navigator.userAgent),urlParsingNode=document.createElement("a");function resolveURL(url){var href=url;return msie&&(urlParsingNode.setAttribute("href",href),href=urlParsingNode.href),urlParsingNode.setAttribute("href",href),{href:urlParsingNode.href,protocol:urlParsingNode.protocol?urlParsingNode.protocol.replace(/:$/,""):"",host:urlParsingNode.host,search:urlParsingNode.search?urlParsingNode.search.replace(/^\?/,""):"",hash:urlParsingNode.hash?urlParsingNode.hash.replace(/^#/,""):"",hostname:urlParsingNode.hostname,port:urlParsingNode.port,pathname:"/"===urlParsingNode.pathname.charAt(0)?urlParsingNode.pathname:"/"+urlParsingNode.pathname}}return originURL=resolveURL(window.location.href),function isURLSameOrigin(requestURL){var parsed=utils.isString(requestURL)?resolveURL(requestURL):requestURL;return parsed.protocol===originURL.protocol&&parsed.host===originURL.host}}():function isURLSameOrigin(){return!0};function progressEventReducer(listener,isDownloadStream){var bytesNotified=0,_speedometer=function speedometer(samplesCount,min){samplesCount=samplesCount||10;var firstSampleTS,bytes=new Array(samplesCount),timestamps=new Array(samplesCount),head=0,tail=0;return min=void 0!==min?min:1e3,function push(chunkLength){var now=Date.now(),startedAt=timestamps[tail];firstSampleTS||(firstSampleTS=now),bytes[head]=chunkLength,timestamps[head]=now;for(var i=tail,bytesCount=0;i!==head;)bytesCount+=bytes[i++],i%=samplesCount;if((head=(head+1)%samplesCount)===tail&&(tail=(tail+1)%samplesCount),!(now-firstSampleTS<min)){var passed=startedAt&&now-startedAt;return passed?Math.round(1e3*bytesCount/passed):void 0}}}(50,250);return function(e){var loaded=e.loaded,total=e.lengthComputable?e.total:void 0,progressBytes=loaded-bytesNotified,rate=_speedometer(progressBytes);bytesNotified=loaded;var data={loaded:loaded,total:total,progress:total?loaded/total:void 0,bytes:progressBytes,rate:rate||void 0,estimated:rate&&total&&loaded<=total?(total-loaded)/rate:void 0,event:e};data[isDownloadStream?"download":"upload"]=!0,listener(data)}}var knownAdapters={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(config){return new Promise((function dispatchXhrRequest(resolve,reject){var onCanceled,requestData=config.data,requestHeaders=AxiosHeaders.from(config.headers).normalize(),responseType=config.responseType;function done(){config.cancelToken&&config.cancelToken.unsubscribe(onCanceled),config.signal&&config.signal.removeEventListener("abort",onCanceled)}utils.isFormData(requestData)&&(platform.isStandardBrowserEnv||platform.isStandardBrowserWebWorkerEnv)&&requestHeaders.setContentType(!1);var request=new XMLHttpRequest;if(config.auth){var username=config.auth.username||"",password=config.auth.password?unescape(encodeURIComponent(config.auth.password)):"";requestHeaders.set("Authorization","Basic "+btoa(username+":"+password))}var fullPath=buildFullPath(config.baseURL,config.url);function onloadend(){if(request){var responseHeaders=AxiosHeaders.from("getAllResponseHeaders"in request&&request.getAllResponseHeaders());!function settle(resolve,reject,response){var validateStatus=response.config.validateStatus;response.status&&validateStatus&&!validateStatus(response.status)?reject(new AxiosError("Request failed with status code "+response.status,[AxiosError.ERR_BAD_REQUEST,AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status/100)-4],response.config,response.request,response)):resolve(response)}((function _resolve(value){resolve(value),done()}),(function _reject(err){reject(err),done()}),{data:responseType&&"text"!==responseType&&"json"!==responseType?request.response:request.responseText,status:request.status,statusText:request.statusText,headers:responseHeaders,config:config,request:request}),request=null}}if(request.open(config.method.toUpperCase(),buildURL(fullPath,config.params,config.paramsSerializer),!0),request.timeout=config.timeout,"onloadend"in request?request.onloadend=onloadend:request.onreadystatechange=function handleLoad(){request&&4===request.readyState&&(0!==request.status||request.responseURL&&0===request.responseURL.indexOf("file:"))&&setTimeout(onloadend)},request.onabort=function handleAbort(){request&&(reject(new AxiosError("Request aborted",AxiosError.ECONNABORTED,config,request)),request=null)},request.onerror=function handleError(){reject(new AxiosError("Network Error",AxiosError.ERR_NETWORK,config,request)),request=null},request.ontimeout=function handleTimeout(){var timeoutErrorMessage=config.timeout?"timeout of "+config.timeout+"ms exceeded":"timeout exceeded",transitional=config.transitional||transitionalDefaults;config.timeoutErrorMessage&&(timeoutErrorMessage=config.timeoutErrorMessage),reject(new AxiosError(timeoutErrorMessage,transitional.clarifyTimeoutError?AxiosError.ETIMEDOUT:AxiosError.ECONNABORTED,config,request)),request=null},platform.isStandardBrowserEnv){var xsrfValue=(config.withCredentials||isURLSameOrigin(fullPath))&&config.xsrfCookieName&&cookies.read(config.xsrfCookieName);xsrfValue&&requestHeaders.set(config.xsrfHeaderName,xsrfValue)}void 0===requestData&&requestHeaders.setContentType(null),"setRequestHeader"in request&&utils.forEach(requestHeaders.toJSON(),(function setRequestHeader(val,key){request.setRequestHeader(key,val)})),utils.isUndefined(config.withCredentials)||(request.withCredentials=!!config.withCredentials),responseType&&"json"!==responseType&&(request.responseType=config.responseType),"function"==typeof config.onDownloadProgress&&request.addEventListener("progress",progressEventReducer(config.onDownloadProgress,!0)),"function"==typeof config.onUploadProgress&&request.upload&&request.upload.addEventListener("progress",progressEventReducer(config.onUploadProgress)),(config.cancelToken||config.signal)&&(onCanceled=function onCanceled(cancel){request&&(reject(!cancel||cancel.type?new CanceledError(null,config,request):cancel),request.abort(),request=null)},config.cancelToken&&config.cancelToken.subscribe(onCanceled),config.signal&&(config.signal.aborted?onCanceled():config.signal.addEventListener("abort",onCanceled)));var protocol=function parseProtocol(url){var match=/^([-+\w]{1,25})(:?\/\/|:)/.exec(url);return match&&match[1]||""}(fullPath);protocol&&-1===platform.protocols.indexOf(protocol)?reject(new AxiosError("Unsupported protocol "+protocol+":",AxiosError.ERR_BAD_REQUEST,config)):request.send(requestData||null)}))}};utils.forEach(knownAdapters,(function(fn,value){if(fn){try{Object.defineProperty(fn,"name",{value:value})}catch(e){}Object.defineProperty(fn,"adapterName",{value:value})}}));var adapters_getAdapter=function getAdapter(adapters){for(var nameOrAdapter,adapter,length=(adapters=utils.isArray(adapters)?adapters:[adapters]).length,i=0;i<length&&(nameOrAdapter=adapters[i],!(adapter=utils.isString(nameOrAdapter)?knownAdapters[nameOrAdapter.toLowerCase()]:nameOrAdapter));i++);if(!adapter){if(!1===adapter)throw new AxiosError("Adapter "+nameOrAdapter+" is not supported by the environment","ERR_NOT_SUPPORT");throw new Error(utils.hasOwnProp(knownAdapters,nameOrAdapter)?"Adapter '"+nameOrAdapter+"' is not available in the build":"Unknown adapter '"+nameOrAdapter+"'")}if(!utils.isFunction(adapter))throw new TypeError("adapter is not a function");return adapter};function throwIfCancellationRequested(config){if(config.cancelToken&&config.cancelToken.throwIfRequested(),config.signal&&config.signal.aborted)throw new CanceledError(null,config)}function dispatchRequest(config){return throwIfCancellationRequested(config),config.headers=AxiosHeaders.from(config.headers),config.data=transformData.call(config,config.transformRequest),-1!==["post","put","patch"].indexOf(config.method)&&config.headers.setContentType("application/x-www-form-urlencoded",!1),adapters_getAdapter(config.adapter||defaults.adapter)(config).then((function onAdapterResolution(response){return throwIfCancellationRequested(config),response.data=transformData.call(config,config.transformResponse,response),response.headers=AxiosHeaders.from(response.headers),response}),(function onAdapterRejection(reason){return isCancel(reason)||(throwIfCancellationRequested(config),reason&&reason.response&&(reason.response.data=transformData.call(config,config.transformResponse,reason.response),reason.response.headers=AxiosHeaders.from(reason.response.headers))),Promise.reject(reason)}))}var headersToObject=function headersToObject(thing){return thing instanceof AxiosHeaders?thing.toJSON():thing};function mergeConfig(config1,config2){config2=config2||{};var config={};function getMergedValue(target,source,caseless){return utils.isPlainObject(target)&&utils.isPlainObject(source)?utils.merge.call({caseless:caseless},target,source):utils.isPlainObject(source)?utils.merge({},source):utils.isArray(source)?source.slice():source}function mergeDeepProperties(a,b,caseless){return utils.isUndefined(b)?utils.isUndefined(a)?void 0:getMergedValue(void 0,a,caseless):getMergedValue(a,b,caseless)}function valueFromConfig2(a,b){if(!utils.isUndefined(b))return getMergedValue(void 0,b)}function defaultToConfig2(a,b){return utils.isUndefined(b)?utils.isUndefined(a)?void 0:getMergedValue(void 0,a):getMergedValue(void 0,b)}function mergeDirectKeys(a,b,prop){return prop in config2?getMergedValue(a,b):prop in config1?getMergedValue(void 0,a):void 0}var mergeMap={url:valueFromConfig2,method:valueFromConfig2,data:valueFromConfig2,baseURL:defaultToConfig2,transformRequest:defaultToConfig2,transformResponse:defaultToConfig2,paramsSerializer:defaultToConfig2,timeout:defaultToConfig2,timeoutMessage:defaultToConfig2,withCredentials:defaultToConfig2,adapter:defaultToConfig2,responseType:defaultToConfig2,xsrfCookieName:defaultToConfig2,xsrfHeaderName:defaultToConfig2,onUploadProgress:defaultToConfig2,onDownloadProgress:defaultToConfig2,decompress:defaultToConfig2,maxContentLength:defaultToConfig2,maxBodyLength:defaultToConfig2,beforeRedirect:defaultToConfig2,transport:defaultToConfig2,httpAgent:defaultToConfig2,httpsAgent:defaultToConfig2,cancelToken:defaultToConfig2,socketPath:defaultToConfig2,responseEncoding:defaultToConfig2,validateStatus:mergeDirectKeys,headers:function headers(a,b){return mergeDeepProperties(headersToObject(a),headersToObject(b),!0)}};return utils.forEach(Object.keys(config1).concat(Object.keys(config2)),(function computeConfigValue(prop){var merge=mergeMap[prop]||mergeDeepProperties,configValue=merge(config1[prop],config2[prop],prop);utils.isUndefined(configValue)&&merge!==mergeDirectKeys||(config[prop]=configValue)})),config}var validators$1={};["object","boolean","number","function","string","symbol"].forEach((function(type,i){validators$1[type]=function validator(thing){return typeof thing===type||"a"+(i<1?"n ":" ")+type}}));var deprecatedWarnings={};validators$1.transitional=function transitional(validator,version,message){function formatMessage(opt,desc){return"[Axios v1.3.0] Transitional option '"+opt+"'"+desc+(message?". "+message:"")}return function(value,opt,opts){if(!1===validator)throw new AxiosError(formatMessage(opt," has been removed"+(version?" in "+version:"")),AxiosError.ERR_DEPRECATED);return version&&!deprecatedWarnings[opt]&&(deprecatedWarnings[opt]=!0,console.warn(formatMessage(opt," has been deprecated since v"+version+" and will be removed in the near future"))),!validator||validator(value,opt,opts)}};var validator={assertOptions:function assertOptions(options,schema,allowUnknown){if("object"!=typeof options)throw new AxiosError("options must be an object",AxiosError.ERR_BAD_OPTION_VALUE);for(var keys=Object.keys(options),i=keys.length;i-- >0;){var opt=keys[i],_validator=schema[opt];if(_validator){var value=options[opt],result=void 0===value||_validator(value,opt,options);if(!0!==result)throw new AxiosError("option "+opt+" must be "+result,AxiosError.ERR_BAD_OPTION_VALUE)}else if(!0!==allowUnknown)throw new AxiosError("Unknown option "+opt,AxiosError.ERR_BAD_OPTION)}},validators:validators$1},validators=validator.validators,Axios=function(){function Axios(instanceConfig){_classCallCheck(this,Axios),this.defaults=instanceConfig,this.interceptors={request:new InterceptorManager,response:new InterceptorManager}}return _createClass(Axios,[{key:"request",value:function request(configOrUrl,config){"string"==typeof configOrUrl?(config=config||{}).url=configOrUrl:config=configOrUrl||{};var contextHeaders,_config=config=mergeConfig(this.defaults,config),transitional=_config.transitional,paramsSerializer=_config.paramsSerializer,headers=_config.headers;void 0!==transitional&&validator.assertOptions(transitional,{silentJSONParsing:validators.transitional(validators.boolean),forcedJSONParsing:validators.transitional(validators.boolean),clarifyTimeoutError:validators.transitional(validators.boolean)},!1),void 0!==paramsSerializer&&validator.assertOptions(paramsSerializer,{encode:validators.function,serialize:validators.function},!0),config.method=(config.method||this.defaults.method||"get").toLowerCase(),(contextHeaders=headers&&utils.merge(headers.common,headers[config.method]))&&utils.forEach(["delete","get","head","post","put","patch","common"],(function(method){delete headers[method]})),config.headers=AxiosHeaders.concat(contextHeaders,headers);var requestInterceptorChain=[],synchronousRequestInterceptors=!0;this.interceptors.request.forEach((function unshiftRequestInterceptors(interceptor){"function"==typeof interceptor.runWhen&&!1===interceptor.runWhen(config)||(synchronousRequestInterceptors=synchronousRequestInterceptors&&interceptor.synchronous,requestInterceptorChain.unshift(interceptor.fulfilled,interceptor.rejected))}));var promise,responseInterceptorChain=[];this.interceptors.response.forEach((function pushResponseInterceptors(interceptor){responseInterceptorChain.push(interceptor.fulfilled,interceptor.rejected)}));var len,i=0;if(!synchronousRequestInterceptors){var chain=[dispatchRequest.bind(this),void 0];for(chain.unshift.apply(chain,requestInterceptorChain),chain.push.apply(chain,responseInterceptorChain),len=chain.length,promise=Promise.resolve(config);i<len;)promise=promise.then(chain[i++],chain[i++]);return promise}len=requestInterceptorChain.length;var newConfig=config;for(i=0;i<len;){var onFulfilled=requestInterceptorChain[i++],onRejected=requestInterceptorChain[i++];try{newConfig=onFulfilled(newConfig)}catch(error){onRejected.call(this,error);break}}try{promise=dispatchRequest.call(this,newConfig)}catch(error){return Promise.reject(error)}for(i=0,len=responseInterceptorChain.length;i<len;)promise=promise.then(responseInterceptorChain[i++],responseInterceptorChain[i++]);return promise}},{key:"getUri",value:function getUri(config){return buildURL(buildFullPath((config=mergeConfig(this.defaults,config)).baseURL,config.url),config.params,config.paramsSerializer)}}]),Axios}();utils.forEach(["delete","get","head","options"],(function forEachMethodNoData(method){Axios.prototype[method]=function(url,config){return this.request(mergeConfig(config||{},{method:method,url:url,data:(config||{}).data}))}})),utils.forEach(["post","put","patch"],(function forEachMethodWithData(method){function generateHTTPMethod(isForm){return function httpMethod(url,data,config){return this.request(mergeConfig(config||{},{method:method,headers:isForm?{"Content-Type":"multipart/form-data"}:{},url:url,data:data}))}}Axios.prototype[method]=generateHTTPMethod(),Axios.prototype[method+"Form"]=generateHTTPMethod(!0)}));var CancelToken=function(){function CancelToken(executor){if(_classCallCheck(this,CancelToken),"function"!=typeof executor)throw new TypeError("executor must be a function.");var resolvePromise;this.promise=new Promise((function promiseExecutor(resolve){resolvePromise=resolve}));var token=this;this.promise.then((function(cancel){if(token._listeners){for(var i=token._listeners.length;i-- >0;)token._listeners[i](cancel);token._listeners=null}})),this.promise.then=function(onfulfilled){var _resolve,promise=new Promise((function(resolve){token.subscribe(resolve),_resolve=resolve})).then(onfulfilled);return promise.cancel=function reject(){token.unsubscribe(_resolve)},promise},executor((function cancel(message,config,request){token.reason||(token.reason=new CanceledError(message,config,request),resolvePromise(token.reason))}))}return _createClass(CancelToken,[{key:"throwIfRequested",value:function throwIfRequested(){if(this.reason)throw this.reason}},{key:"subscribe",value:function subscribe(listener){this.reason?listener(this.reason):this._listeners?this._listeners.push(listener):this._listeners=[listener]}},{key:"unsubscribe",value:function unsubscribe(listener){if(this._listeners){var index=this._listeners.indexOf(listener);-1!==index&&this._listeners.splice(index,1)}}}],[{key:"source",value:function source(){var cancel;return{token:new CancelToken((function executor(c){cancel=c})),cancel:cancel}}}]),CancelToken}();var HttpStatusCode={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(HttpStatusCode).forEach((function(_ref7){var _ref8=_slicedToArray(_ref7,2),key=_ref8[0],value=_ref8[1];HttpStatusCode[value]=key}));var axios=function createInstance(defaultConfig){var context=new Axios(defaultConfig),instance=bind(Axios.prototype.request,context);return utils.extend(instance,Axios.prototype,context,{allOwnKeys:!0}),utils.extend(instance,context,null,{allOwnKeys:!0}),instance.create=function create(instanceConfig){return createInstance(mergeConfig(defaultConfig,instanceConfig))},instance}(defaults);axios.Axios=Axios,axios.CanceledError=CanceledError,axios.CancelToken=CancelToken,axios.isCancel=isCancel,axios.VERSION="1.3.0",axios.toFormData=toFormData,axios.AxiosError=AxiosError,axios.Cancel=axios.CanceledError,axios.all=function all(promises){return Promise.all(promises)},axios.spread=function spread(callback){return function wrap(arr){return callback.apply(null,arr)}},axios.isAxiosError=function isAxiosError(payload){return utils.isObject(payload)&&!0===payload.isAxiosError},axios.mergeConfig=mergeConfig,axios.AxiosHeaders=AxiosHeaders,axios.formToJSON=function(thing){return formDataToJSON(utils.isHTMLForm(thing)?new FormData(thing):thing)},axios.HttpStatusCode=HttpStatusCode,axios.default=axios;var naiveFallback=function naiveFallback(){if("object"==typeof self&&self)return self;if("object"==typeof window&&window)return window;throw new Error("Unable to resolve global `this`")},globalThis_1=function(){if(this)return this;if("object"==typeof globalThis&&globalThis)return globalThis;try{Object.defineProperty(Object.prototype,"__global__",{get:function get(){return this},configurable:!0})}catch(error){return naiveFallback()}try{return __global__||naiveFallback()}finally{delete Object.prototype.__global__}}(),ENDPOINT_KEY=Symbol.for("verdocs-default-endpoint"),requestLogger=function requestLogger(r){return console.debug("[JS-SDK] ".concat(r.method.toUpperCase()," ").concat(r.baseURL).concat(r.url),r.data?JSON.stringify(r.data):""),r},VerdocsEndpoint=function(){function VerdocsEndpoint(options){this.environment="verdocs",this.sessionType="user",this.baseURL="https://api.verdocs.com",this.clientID="not-set",this.timeout=15e3,this.token=null,this.nextListenerId=0,this.sessionListeners=new Map,this.requestLoggerId=null,this.session=null,this.baseURL=(null==options?void 0:options.baseURL)||"https://api.verdocs.com",this.timeout=(null==options?void 0:options.timeout)||15e3,this.environment=(null==options?void 0:options.environment)||"verdocs",this.sessionType=(null==options?void 0:options.sessionType)||"user",this.clientID=(null==options?void 0:options.clientID)||"not-set",this.api=axios.create({baseURL:this.baseURL,timeout:this.timeout})}return VerdocsEndpoint.prototype.setDefault=function(){globalThis_1[ENDPOINT_KEY]=this},VerdocsEndpoint.getDefault=function(){return globalThis_1[ENDPOINT_KEY]||(globalThis_1[ENDPOINT_KEY]=new VerdocsEndpoint,window.console.debug("[JS_SDK] Created default endpoint",globalThis_1[ENDPOINT_KEY])),globalThis_1[ENDPOINT_KEY]},VerdocsEndpoint.prototype.getEnvironment=function(){return this.environment},VerdocsEndpoint.prototype.getSessionType=function(){return this.sessionType},VerdocsEndpoint.prototype.getBaseURL=function(){return this.baseURL},VerdocsEndpoint.prototype.getClientID=function(){return this.clientID},VerdocsEndpoint.prototype.getTimeout=function(){return this.timeout},VerdocsEndpoint.prototype.getSession=function(){return this.session},VerdocsEndpoint.prototype.setEnvironment=function(environment){return this.environment=environment,this},VerdocsEndpoint.prototype.setSessionType=function(sessionType){return this.sessionType=sessionType,this},VerdocsEndpoint.prototype.setBaseURL=function(url){return this.api.defaults.baseURL=url,this},VerdocsEndpoint.prototype.setClientID=function(clientID){return this.clientID=clientID,this.api.defaults.headers.common["X-Client-ID"]=clientID,this},VerdocsEndpoint.prototype.setTimeout=function(timeout){return this.timeout=timeout,this.api.defaults.timeout=timeout,this},VerdocsEndpoint.prototype.logRequests=function(enable){return enable&&null===this.requestLoggerId?this.requestLoggerId=this.api.interceptors.request.use(requestLogger):enable||null===this.requestLoggerId||this.api.interceptors.request.eject(this.requestLoggerId),this},VerdocsEndpoint.prototype.setToken=function(token){if(!token)return this.clearSession();var session=Object(_Token_54690789_js__WEBPACK_IMPORTED_MODULE_83__.a)(token);return null===session||session.exp&&1e3*session.exp<(new Date).getTime()?(window.console.warn("[JS_SDK] Ignoring attempt to use expired session token"),this.clearSession()):(this.token=token,this.session=session,"user"===this.sessionType?this.api.defaults.headers.common.Authorization="Bearer ".concat(token):this.api.defaults.headers.common.signer="Bearer ".concat(token),localStorage.setItem(this.sessionStorageKey(),token),this.notifySessionListeners(),this)},VerdocsEndpoint.prototype.getToken=function(){return this.token},VerdocsEndpoint.prototype.sessionStorageKey=function(){return"verdocs-session-".concat(this.getSessionType(),"-").concat(this.getEnvironment())},VerdocsEndpoint.prototype.clearSession=function(){return localStorage.removeItem(this.sessionStorageKey()),delete this.api.defaults.headers.common.Authorization,delete this.api.defaults.headers.common.signer,this.session=null,this.token=null,this.notifySessionListeners(),this},VerdocsEndpoint.prototype.clearSignerSession=function(){return localStorage.removeItem(this.sessionStorageKey()),delete this.api.defaults.headers.common.Authorization,this.session=null,this.token=null,this.notifySessionListeners(),this},VerdocsEndpoint.prototype.notifySessionListeners=function(){var _this=this;this.sessionListeners.forEach((function(listener){try{listener(_this,_this.session)}catch(e){}}))},VerdocsEndpoint.prototype.onSessionChanged=function(listener){var _this=this;this.nextListenerId++;var listenerSymbol=Symbol.for(""+this.nextListenerId);return this.sessionListeners.set(listenerSymbol,listener),function(){_this.sessionListeners.delete(listenerSymbol)}},VerdocsEndpoint.prototype.loadSession=function(){var token=localStorage.getItem(this.sessionStorageKey());return token?this.setToken(token):this.clearSession()},VerdocsEndpoint}()}).call(this,__webpack_require__("./node_modules/@storybook/builder-webpack4/node_modules/webpack/buildin/global.js"),__webpack_require__("./node_modules/buffer/index.js").Buffer)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,