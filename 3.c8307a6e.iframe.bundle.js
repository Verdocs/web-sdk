(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"./dist/esm/Types-ab9f6af8.js":function(module,__webpack_exports__,__webpack_require__){"use strict";var TemplatePermissions,TemplateSenderTypes,TemplateActions,SortOptions;__webpack_require__.d(__webpack_exports__,"a",(function(){return TemplateSenderTypes})),function(TemplatePermissions){TemplatePermissions.TEMPLATE_CREATOR_CREATE_PUBLIC="template:creator:create:public",TemplatePermissions.TEMPLATE_CREATOR_CREATE_ORG="template:creator:create:org",TemplatePermissions.TEMPLATE_CREATOR_CREATE_PERSONAL="template:creator:create:personal",TemplatePermissions.TEMPLATE_CREATOR_DELETE="template:creator:delete",TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY="template:creator:visibility",TemplatePermissions.TEMPLATE_MEMBER_READ="template:member:read",TemplatePermissions.TEMPLATE_MEMBER_WRITE="template:member:write",TemplatePermissions.TEMPLATE_MEMBER_DELETE="template:member:delete",TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY="template:member:visibility"}(TemplatePermissions||(TemplatePermissions={})),function(TemplateSenderTypes){TemplateSenderTypes.CREATOR="creator",TemplateSenderTypes.ORGANIZATION_MEMBER="organization_member",TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR="organization_member_as_creator",TemplateSenderTypes.EVERYONE="everyone",TemplateSenderTypes.EVERYONE_AS_CREATOR="everyone_as_creator"}(TemplateSenderTypes||(TemplateSenderTypes={})),function(TemplateActions){TemplateActions.CREATE_PERSONAL="create_personal",TemplateActions.CREATE_ORG="create_org",TemplateActions.CREATE_PUBLIC="create_public",TemplateActions.READ="read",TemplateActions.WRITE="write",TemplateActions.DELETE="delete",TemplateActions.CHANGE_VISIBILITY_PERSONAL="change_visibility_personal",TemplateActions.CHANGE_VISIBILITY_ORG="change_visibility_org",TemplateActions.CHANGE_VISIBILITY_PUBLIC="change_visibility_public"}(TemplateActions||(TemplateActions={})),function(SortOptions){SortOptions.CREATED_AT="created_at",SortOptions.UPDATED_AT="updated_at",SortOptions.NAME="name",SortOptions.LAST_USED_AT="last_used_at",SortOptions.COUNTER="counter",SortOptions.STAR_COUNTER="star_counter"}(SortOptions||(SortOptions={}))},"./dist/esm/VerdocsEndpoint-28ba21cc.js":function(module,__webpack_exports__,__webpack_require__){"use strict";(function(global,Buffer){__webpack_require__.d(__webpack_exports__,"a",(function(){return VerdocsEndpoint}));__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.array-buffer.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.array-buffer.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.array-buffer.is-view.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.string.trim.js"),__webpack_require__("./node_modules/core-js/modules/es.string.replace.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-names.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.global-this.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.uint8-array.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.copy-within.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.every.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.fill.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.find-index.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.last-index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reduce-right.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.set.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.some.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.subarray.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.to-locale-string.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-properties.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.number.is-finite.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-json.js"),__webpack_require__("./node_modules/core-js/modules/web.url.to-json.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.string.ends-with.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.array.some.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-iso-string.js"),__webpack_require__("./node_modules/core-js/modules/web.url.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match-all.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.entries.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.date.now.js"),__webpack_require__("./node_modules/core-js/modules/es.string.search.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/web.timers.js"),__webpack_require__("./node_modules/core-js/modules/es.array.splice.js"),__webpack_require__("./node_modules/core-js/modules/es.map.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js");var _Token_54690789_js__WEBPACK_IMPORTED_MODULE_83__=__webpack_require__("./dist/esm/Token-54690789.js");function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&null!=_i.return&&(_r=_i.return(),Object(_r)!==_r))return}finally{if(_d)throw _e}}return _arr}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}function bind(fn,thisArg){return function wrap(){return fn.apply(thisArg,arguments)}}var cache,toString=Object.prototype.toString,getPrototypeOf=Object.getPrototypeOf,kindOf=(cache=Object.create(null),function(thing){var str=toString.call(thing);return cache[str]||(cache[str]=str.slice(8,-1).toLowerCase())}),kindOfTest=function kindOfTest(type){return type=type.toLowerCase(),function(thing){return kindOf(thing)===type}},typeOfTest=function typeOfTest(type){return function(thing){return typeof thing===type}},isArray=Array.isArray,isUndefined=typeOfTest("undefined");var isArrayBuffer=kindOfTest("ArrayBuffer");var isString=typeOfTest("string"),isFunction=typeOfTest("function"),isNumber=typeOfTest("number"),isObject=function isObject(thing){return null!==thing&&"object"==typeof thing},isPlainObject=function isPlainObject(val){if("object"!==kindOf(val))return!1;var prototype=getPrototypeOf(val);return!(null!==prototype&&prototype!==Object.prototype&&null!==Object.getPrototypeOf(prototype)||Symbol.toStringTag in val||Symbol.iterator in val)},isDate=kindOfTest("Date"),isFile=kindOfTest("File"),isBlob=kindOfTest("Blob"),isFileList=kindOfTest("FileList"),isURLSearchParams=kindOfTest("URLSearchParams");function forEach(obj,fn){var i,l,_ref=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},_ref$allOwnKeys=_ref.allOwnKeys,allOwnKeys=void 0!==_ref$allOwnKeys&&_ref$allOwnKeys;if(null!=obj)if("object"!=typeof obj&&(obj=[obj]),isArray(obj))for(i=0,l=obj.length;i<l;i++)fn.call(null,obj[i],i,obj);else{var key,keys=allOwnKeys?Object.getOwnPropertyNames(obj):Object.keys(obj),len=keys.length;for(i=0;i<len;i++)key=keys[i],fn.call(null,obj[key],key,obj)}}function findKey(obj,key){key=key.toLowerCase();for(var _key,keys=Object.keys(obj),i=keys.length;i-- >0;)if(key===(_key=keys[i]).toLowerCase())return _key;return null}var _global="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,isContextDefined=function isContextDefined(context){return!isUndefined(context)&&context!==_global};var TypedArray,isTypedArray=(TypedArray="undefined"!=typeof Uint8Array&&getPrototypeOf(Uint8Array),function(thing){return TypedArray&&thing instanceof TypedArray}),isHTMLForm=kindOfTest("HTMLFormElement"),hasOwnProperty=function(_ref4){var hasOwnProperty=Object.prototype.hasOwnProperty;return function(obj,prop){return hasOwnProperty.call(obj,prop)}}(),isRegExp=kindOfTest("RegExp"),reduceDescriptors=function reduceDescriptors(obj,reducer){var descriptors=Object.getOwnPropertyDescriptors(obj),reducedDescriptors={};forEach(descriptors,(function(descriptor,name){!1!==reducer(descriptor,name,obj)&&(reducedDescriptors[name]=descriptor)})),Object.defineProperties(obj,reducedDescriptors)},utils={isArray:isArray,isArrayBuffer:isArrayBuffer,isBuffer:function isBuffer(val){return null!==val&&!isUndefined(val)&&null!==val.constructor&&!isUndefined(val.constructor)&&isFunction(val.constructor.isBuffer)&&val.constructor.isBuffer(val)},isFormData:function isFormData(thing){return thing&&("function"==typeof FormData&&thing instanceof FormData||"[object FormData]"===toString.call(thing)||isFunction(thing.toString)&&"[object FormData]"===thing.toString())},isArrayBufferView:function isArrayBufferView(val){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(val):val&&val.buffer&&isArrayBuffer(val.buffer)},isString:isString,isNumber:isNumber,isBoolean:function isBoolean(thing){return!0===thing||!1===thing},isObject:isObject,isPlainObject:isPlainObject,isUndefined:isUndefined,isDate:isDate,isFile:isFile,isBlob:isBlob,isRegExp:isRegExp,isFunction:isFunction,isStream:function isStream(val){return isObject(val)&&isFunction(val.pipe)},isURLSearchParams:isURLSearchParams,isTypedArray:isTypedArray,isFileList:isFileList,forEach:forEach,merge:function merge(){for(var _ref2=isContextDefined(this)&&this||{},caseless=_ref2.caseless,result={},assignValue=function assignValue(val,key){var targetKey=caseless&&findKey(result,key)||key;isPlainObject(result[targetKey])&&isPlainObject(val)?result[targetKey]=merge(result[targetKey],val):isPlainObject(val)?result[targetKey]=merge({},val):isArray(val)?result[targetKey]=val.slice():result[targetKey]=val},i=0,l=arguments.length;i<l;i++)arguments[i]&&forEach(arguments[i],assignValue);return result},extend:function extend(a,b,thisArg){var _ref3=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},allOwnKeys=_ref3.allOwnKeys;return forEach(b,(function(val,key){thisArg&&isFunction(val)?a[key]=bind(val,thisArg):a[key]=val}),{allOwnKeys:allOwnKeys}),a},trim:function trim(str){return str.trim?str.trim():str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},stripBOM:function stripBOM(content){return 65279===content.charCodeAt(0)&&(content=content.slice(1)),content},inherits:function inherits(constructor,superConstructor,props,descriptors){constructor.prototype=Object.create(superConstructor.prototype,descriptors),constructor.prototype.constructor=constructor,Object.defineProperty(constructor,"super",{value:superConstructor.prototype}),props&&Object.assign(constructor.prototype,props)},toFlatObject:function toFlatObject(sourceObj,destObj,filter,propFilter){var props,i,prop,merged={};if(destObj=destObj||{},null==sourceObj)return destObj;do{for(i=(props=Object.getOwnPropertyNames(sourceObj)).length;i-- >0;)prop=props[i],propFilter&&!propFilter(prop,sourceObj,destObj)||merged[prop]||(destObj[prop]=sourceObj[prop],merged[prop]=!0);sourceObj=!1!==filter&&getPrototypeOf(sourceObj)}while(sourceObj&&(!filter||filter(sourceObj,destObj))&&sourceObj!==Object.prototype);return destObj},kindOf:kindOf,kindOfTest:kindOfTest,endsWith:function endsWith(str,searchString,position){str=String(str),(void 0===position||position>str.length)&&(position=str.length),position-=searchString.length;var lastIndex=str.indexOf(searchString,position);return-1!==lastIndex&&lastIndex===position},toArray:function toArray(thing){if(!thing)return null;if(isArray(thing))return thing;var i=thing.length;if(!isNumber(i))return null;for(var arr=new Array(i);i-- >0;)arr[i]=thing[i];return arr},forEachEntry:function forEachEntry(obj,fn){for(var result,iterator=(obj&&obj[Symbol.iterator]).call(obj);(result=iterator.next())&&!result.done;){var pair=result.value;fn.call(obj,pair[0],pair[1])}},matchAll:function matchAll(regExp,str){for(var matches,arr=[];null!==(matches=regExp.exec(str));)arr.push(matches);return arr},isHTMLForm:isHTMLForm,hasOwnProperty:hasOwnProperty,hasOwnProp:hasOwnProperty,reduceDescriptors:reduceDescriptors,freezeMethods:function freezeMethods(obj){reduceDescriptors(obj,(function(descriptor,name){if(isFunction(obj)&&-1!==["arguments","caller","callee"].indexOf(name))return!1;var value=obj[name];isFunction(value)&&(descriptor.enumerable=!1,"writable"in descriptor?descriptor.writable=!1:descriptor.set||(descriptor.set=function(){throw Error("Can not rewrite read-only method '"+name+"'")}))}))},toObjectSet:function toObjectSet(arrayOrString,delimiter){var obj={},define=function define(arr){arr.forEach((function(value){obj[value]=!0}))};return isArray(arrayOrString)?define(arrayOrString):define(String(arrayOrString).split(delimiter)),obj},toCamelCase:function toCamelCase(str){return str.toLowerCase().replace(/[_-\s]([a-z\d])(\w*)/g,(function replacer(m,p1,p2){return p1.toUpperCase()+p2}))},noop:function noop(){},toFiniteNumber:function toFiniteNumber(value,defaultValue){return value=+value,Number.isFinite(value)?value:defaultValue},findKey:findKey,global:_global,isContextDefined:isContextDefined,toJSONObject:function toJSONObject(obj){var stack=new Array(10);return function visit(source,i){if(isObject(source)){if(stack.indexOf(source)>=0)return;if(!("toJSON"in source)){stack[i]=source;var target=isArray(source)?[]:{};return forEach(source,(function(value,key){var reducedValue=visit(value,i+1);!isUndefined(reducedValue)&&(target[key]=reducedValue)})),stack[i]=void 0,target}}return source}(obj,0)}};function AxiosError(message,code,config,request,response){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=message,this.name="AxiosError",code&&(this.code=code),config&&(this.config=config),request&&(this.request=request),response&&(this.response=response)}utils.inherits(AxiosError,Error,{toJSON:function toJSON(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:utils.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var prototype$1=AxiosError.prototype,descriptors={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((function(code){descriptors[code]={value:code}})),Object.defineProperties(AxiosError,descriptors),Object.defineProperty(prototype$1,"isAxiosError",{value:!0}),AxiosError.from=function(error,code,config,request,response,customProps){var axiosError=Object.create(prototype$1);return utils.toFlatObject(error,axiosError,(function filter(obj){return obj!==Error.prototype}),(function(prop){return"isAxiosError"!==prop})),AxiosError.call(axiosError,error.message,code,config,request,response),axiosError.cause=error,axiosError.name=error.name,customProps&&Object.assign(axiosError,customProps),axiosError};var browser="object"==typeof self?self.FormData:window.FormData;function isVisitable(thing){return utils.isPlainObject(thing)||utils.isArray(thing)}function removeBrackets(key){return utils.endsWith(key,"[]")?key.slice(0,-2):key}function renderKey(path,key,dots){return path?path.concat(key).map((function each(token,i){return token=removeBrackets(token),!dots&&i?"["+token+"]":token})).join(dots?".":""):key}var predicates=utils.toFlatObject(utils,{},null,(function filter(prop){return/^is[A-Z]/.test(prop)}));function toFormData(obj,formData,options){if(!utils.isObject(obj))throw new TypeError("target must be an object");formData=formData||new(browser||FormData);var metaTokens=(options=utils.toFlatObject(options,{metaTokens:!0,dots:!1,indexes:!1},!1,(function defined(option,source){return!utils.isUndefined(source[option])}))).metaTokens,visitor=options.visitor||defaultVisitor,dots=options.dots,indexes=options.indexes,useBlob=(options.Blob||"undefined"!=typeof Blob&&Blob)&&function isSpecCompliant(thing){return thing&&utils.isFunction(thing.append)&&"FormData"===thing[Symbol.toStringTag]&&thing[Symbol.iterator]}(formData);if(!utils.isFunction(visitor))throw new TypeError("visitor must be a function");function convertValue(value){if(null===value)return"";if(utils.isDate(value))return value.toISOString();if(!useBlob&&utils.isBlob(value))throw new AxiosError("Blob is not supported. Use a Buffer instead.");return utils.isArrayBuffer(value)||utils.isTypedArray(value)?useBlob&&"function"==typeof Blob?new Blob([value]):Buffer.from(value):value}function defaultVisitor(value,key,path){var arr=value;if(value&&!path&&"object"==typeof value)if(utils.endsWith(key,"{}"))key=metaTokens?key:key.slice(0,-2),value=JSON.stringify(value);else if(utils.isArray(value)&&function isFlatArray(arr){return utils.isArray(arr)&&!arr.some(isVisitable)}(value)||utils.isFileList(value)||utils.endsWith(key,"[]")&&(arr=utils.toArray(value)))return key=removeBrackets(key),arr.forEach((function each(el,index){!utils.isUndefined(el)&&null!==el&&formData.append(!0===indexes?renderKey([key],index,dots):null===indexes?key:key+"[]",convertValue(el))})),!1;return!!isVisitable(value)||(formData.append(renderKey(path,key,dots),convertValue(value)),!1)}var stack=[],exposedHelpers=Object.assign(predicates,{defaultVisitor:defaultVisitor,convertValue:convertValue,isVisitable:isVisitable});if(!utils.isObject(obj))throw new TypeError("data must be an object");return function build(value,path){if(!utils.isUndefined(value)){if(-1!==stack.indexOf(value))throw Error("Circular reference detected in "+path.join("."));stack.push(value),utils.forEach(value,(function each(el,key){!0===(!(utils.isUndefined(el)||null===el)&&visitor.call(formData,el,utils.isString(key)?key.trim():key,path,exposedHelpers))&&build(el,path?path.concat(key):[key])})),stack.pop()}}(obj),formData}function encode$1(str){var charMap={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g,(function replacer(match){return charMap[match]}))}function AxiosURLSearchParams(params,options){this._pairs=[],params&&toFormData(params,this,options)}var prototype=AxiosURLSearchParams.prototype;function encode(val){return encodeURIComponent(val).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function buildURL(url,params,options){if(!params)return url;var serializedParams,_encode=options&&options.encode||encode,serializeFn=options&&options.serialize;if(serializedParams=serializeFn?serializeFn(params,options):utils.isURLSearchParams(params)?params.toString():new AxiosURLSearchParams(params,options).toString(_encode)){var hashmarkIndex=url.indexOf("#");-1!==hashmarkIndex&&(url=url.slice(0,hashmarkIndex)),url+=(-1===url.indexOf("?")?"?":"&")+serializedParams}return url}prototype.append=function append(name,value){this._pairs.push([name,value])},prototype.toString=function toString(encoder){var _encode=encoder?function(value){return encoder.call(this,value,encode$1)}:encode$1;return this._pairs.map((function each(pair){return _encode(pair[0])+"="+_encode(pair[1])}),"").join("&")};var product,InterceptorManager=function(){function InterceptorManager(){_classCallCheck(this,InterceptorManager),this.handlers=[]}return _createClass(InterceptorManager,[{key:"use",value:function use(fulfilled,rejected,options){return this.handlers.push({fulfilled:fulfilled,rejected:rejected,synchronous:!!options&&options.synchronous,runWhen:options?options.runWhen:null}),this.handlers.length-1}},{key:"eject",value:function eject(id){this.handlers[id]&&(this.handlers[id]=null)}},{key:"clear",value:function clear(){this.handlers&&(this.handlers=[])}},{key:"forEach",value:function forEach(fn){utils.forEach(this.handlers,(function forEachHandler(h){null!==h&&fn(h)}))}}]),InterceptorManager}(),transitionalDefaults={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},URLSearchParams$1="undefined"!=typeof URLSearchParams?URLSearchParams:AxiosURLSearchParams,FormData$1=FormData,isStandardBrowserEnv=("undefined"==typeof navigator||"ReactNative"!==(product=navigator.product)&&"NativeScript"!==product&&"NS"!==product)&&"undefined"!=typeof window&&"undefined"!=typeof document,isStandardBrowserWebWorkerEnv="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,platform={isBrowser:!0,classes:{URLSearchParams:URLSearchParams$1,FormData:FormData$1,Blob:Blob},isStandardBrowserEnv:isStandardBrowserEnv,isStandardBrowserWebWorkerEnv:isStandardBrowserWebWorkerEnv,protocols:["http","https","file","blob","url","data"]};function formDataToJSON(formData){function buildPath(path,value,target,index){var name=path[index++],isNumericKey=Number.isFinite(+name),isLast=index>=path.length;return name=!name&&utils.isArray(target)?target.length:name,isLast?(utils.hasOwnProp(target,name)?target[name]=[target[name],value]:target[name]=value,!isNumericKey):(target[name]&&utils.isObject(target[name])||(target[name]=[]),buildPath(path,value,target[name],index)&&utils.isArray(target[name])&&(target[name]=function arrayToObject(arr){var i,key,obj={},keys=Object.keys(arr),len=keys.length;for(i=0;i<len;i++)obj[key=keys[i]]=arr[key];return obj}(target[name])),!isNumericKey)}if(utils.isFormData(formData)&&utils.isFunction(formData.entries)){var obj={};return utils.forEachEntry(formData,(function(name,value){buildPath(function parsePropPath(name){return utils.matchAll(/\w+|\[(\w*)]/g,name).map((function(match){return"[]"===match[0]?"":match[1]||match[0]}))}(name),value,obj,0)})),obj}return null}var DEFAULT_CONTENT_TYPE={"Content-Type":void 0};var defaults={transitional:transitionalDefaults,adapter:["xhr","http"],transformRequest:[function transformRequest(data,headers){var isFileList,contentType=headers.getContentType()||"",hasJSONContentType=contentType.indexOf("application/json")>-1,isObjectPayload=utils.isObject(data);if(isObjectPayload&&utils.isHTMLForm(data)&&(data=new FormData(data)),utils.isFormData(data))return hasJSONContentType&&hasJSONContentType?JSON.stringify(formDataToJSON(data)):data;if(utils.isArrayBuffer(data)||utils.isBuffer(data)||utils.isStream(data)||utils.isFile(data)||utils.isBlob(data))return data;if(utils.isArrayBufferView(data))return data.buffer;if(utils.isURLSearchParams(data))return headers.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),data.toString();if(isObjectPayload){if(contentType.indexOf("application/x-www-form-urlencoded")>-1)return function toURLEncodedForm(data,options){return toFormData(data,new platform.classes.URLSearchParams,Object.assign({visitor:function visitor(value,key,path,helpers){return helpers.defaultVisitor.apply(this,arguments)}},options))}(data,this.formSerializer).toString();if((isFileList=utils.isFileList(data))||contentType.indexOf("multipart/form-data")>-1){var _FormData=this.env&&this.env.FormData;return toFormData(isFileList?{"files[]":data}:data,_FormData&&new _FormData,this.formSerializer)}}return isObjectPayload||hasJSONContentType?(headers.setContentType("application/json",!1),function stringifySafely(rawValue,parser,encoder){if(utils.isString(rawValue))try{return(parser||JSON.parse)(rawValue),utils.trim(rawValue)}catch(e){if("SyntaxError"!==e.name)throw e}return(encoder||JSON.stringify)(rawValue)}(data)):data}],transformResponse:[function transformResponse(data){var transitional=this.transitional||defaults.transitional,forcedJSONParsing=transitional&&transitional.forcedJSONParsing,JSONRequested="json"===this.responseType;if(data&&utils.isString(data)&&(forcedJSONParsing&&!this.responseType||JSONRequested)){var strictJSONParsing=!(transitional&&transitional.silentJSONParsing)&&JSONRequested;try{return JSON.parse(data)}catch(e){if(strictJSONParsing){if("SyntaxError"===e.name)throw AxiosError.from(e,AxiosError.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return data}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:platform.classes.FormData,Blob:platform.classes.Blob},validateStatus:function validateStatus(status){return status>=200&&status<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};utils.forEach(["delete","get","head"],(function forEachMethodNoData(method){defaults.headers[method]={}})),utils.forEach(["post","put","patch"],(function forEachMethodWithData(method){defaults.headers[method]=utils.merge(DEFAULT_CONTENT_TYPE)}));var ignoreDuplicateOf=utils.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),$internals=Symbol("internals");function normalizeHeader(header){return header&&String(header).trim().toLowerCase()}function normalizeValue(value){return!1===value||null==value?value:utils.isArray(value)?value.map(normalizeValue):String(value)}function matchHeaderValue(context,value,header,filter){return utils.isFunction(filter)?filter.call(this,value,header):utils.isString(value)?utils.isString(filter)?-1!==value.indexOf(filter):utils.isRegExp(filter)?filter.test(value):void 0:void 0}var AxiosHeaders=function(_Symbol$iterator,_Symbol$toStringTag){function AxiosHeaders(headers){_classCallCheck(this,AxiosHeaders),headers&&this.set(headers)}return _createClass(AxiosHeaders,[{key:"set",value:function set(header,valueOrRewrite,rewrite){var self=this;function setHeader(_value,_header,_rewrite){var lHeader=normalizeHeader(_header);if(!lHeader)throw new Error("header name must be a non-empty string");var key=utils.findKey(self,lHeader);(!key||void 0===self[key]||!0===_rewrite||void 0===_rewrite&&!1!==self[key])&&(self[key||_header]=normalizeValue(_value))}var setHeaders=function setHeaders(headers,_rewrite){return utils.forEach(headers,(function(_value,_header){return setHeader(_value,_header,_rewrite)}))};return utils.isPlainObject(header)||header instanceof this.constructor?setHeaders(header,valueOrRewrite):utils.isString(header)&&(header=header.trim())&&!function isValidHeaderName(str){return/^[-_a-zA-Z]+$/.test(str.trim())}(header)?setHeaders(function parseHeaders(rawHeaders){var key,val,i,parsed={};return rawHeaders&&rawHeaders.split("\n").forEach((function parser(line){i=line.indexOf(":"),key=line.substring(0,i).trim().toLowerCase(),val=line.substring(i+1).trim(),!key||parsed[key]&&ignoreDuplicateOf[key]||("set-cookie"===key?parsed[key]?parsed[key].push(val):parsed[key]=[val]:parsed[key]=parsed[key]?parsed[key]+", "+val:val)})),parsed}(header),valueOrRewrite):null!=header&&setHeader(valueOrRewrite,header,rewrite),this}},{key:"get",value:function get(header,parser){if(header=normalizeHeader(header)){var key=utils.findKey(this,header);if(key){var value=this[key];if(!parser)return value;if(!0===parser)return function parseTokens(str){for(var match,tokens=Object.create(null),tokensRE=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;match=tokensRE.exec(str);)tokens[match[1]]=match[2];return tokens}(value);if(utils.isFunction(parser))return parser.call(this,value,key);if(utils.isRegExp(parser))return parser.exec(value);throw new TypeError("parser must be boolean|regexp|function")}}}},{key:"has",value:function has(header,matcher){if(header=normalizeHeader(header)){var key=utils.findKey(this,header);return!(!key||matcher&&!matchHeaderValue(0,this[key],key,matcher))}return!1}},{key:"delete",value:function _delete(header,matcher){var self=this,deleted=!1;function deleteHeader(_header){if(_header=normalizeHeader(_header)){var key=utils.findKey(self,_header);!key||matcher&&!matchHeaderValue(0,self[key],key,matcher)||(delete self[key],deleted=!0)}}return utils.isArray(header)?header.forEach(deleteHeader):deleteHeader(header),deleted}},{key:"clear",value:function clear(){return Object.keys(this).forEach(this.delete.bind(this))}},{key:"normalize",value:function normalize(format){var self=this,headers={};return utils.forEach(this,(function(value,header){var key=utils.findKey(headers,header);if(key)return self[key]=normalizeValue(value),void delete self[header];var normalized=format?function formatHeader(header){return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(function(w,_char,str){return _char.toUpperCase()+str}))}(header):String(header).trim();normalized!==header&&delete self[header],self[normalized]=normalizeValue(value),headers[normalized]=!0})),this}},{key:"concat",value:function concat(){for(var _this$constructor,_len=arguments.length,targets=new Array(_len),_key2=0;_key2<_len;_key2++)targets[_key2]=arguments[_key2];return(_this$constructor=this.constructor).concat.apply(_this$constructor,[this].concat(targets))}},{key:"toJSON",value:function toJSON(asStrings){var obj=Object.create(null);return utils.forEach(this,(function(value,header){null!=value&&!1!==value&&(obj[header]=asStrings&&utils.isArray(value)?value.join(", "):value)})),obj}},{key:Symbol.iterator,value:function value(){return Object.entries(this.toJSON())[Symbol.iterator]()}},{key:"toString",value:function toString(){return Object.entries(this.toJSON()).map((function(_ref5){var _ref6=_slicedToArray(_ref5,2);return _ref6[0]+": "+_ref6[1]})).join("\n")}},{key:Symbol.toStringTag,get:function get(){return"AxiosHeaders"}}],[{key:"from",value:function from(thing){return thing instanceof this?thing:new this(thing)}},{key:"concat",value:function concat(first){for(var computed=new this(first),_len2=arguments.length,targets=new Array(_len2>1?_len2-1:0),_key3=1;_key3<_len2;_key3++)targets[_key3-1]=arguments[_key3];return targets.forEach((function(target){return computed.set(target)})),computed}},{key:"accessor",value:function accessor(header){var accessors=(this[$internals]=this[$internals]={accessors:{}}).accessors,prototype=this.prototype;function defineAccessor(_header){var lHeader=normalizeHeader(_header);accessors[lHeader]||(!function buildAccessors(obj,header){var accessorName=utils.toCamelCase(" "+header);["get","set","has"].forEach((function(methodName){Object.defineProperty(obj,methodName+accessorName,{value:function value(arg1,arg2,arg3){return this[methodName].call(this,header,arg1,arg2,arg3)},configurable:!0})}))}(prototype,_header),accessors[lHeader]=!0)}return utils.isArray(header)?header.forEach(defineAccessor):defineAccessor(header),this}}]),AxiosHeaders}();function transformData(fns,response){var config=this||defaults,context=response||config,headers=AxiosHeaders.from(context.headers),data=context.data;return utils.forEach(fns,(function transform(fn){data=fn.call(config,data,headers.normalize(),response?response.status:void 0)})),headers.normalize(),data}function isCancel(value){return!(!value||!value.__CANCEL__)}function CanceledError(message,config,request){AxiosError.call(this,null==message?"canceled":message,AxiosError.ERR_CANCELED,config,request),this.name="CanceledError"}AxiosHeaders.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent"]),utils.freezeMethods(AxiosHeaders.prototype),utils.freezeMethods(AxiosHeaders),utils.inherits(CanceledError,AxiosError,{__CANCEL__:!0});var cookies=platform.isStandardBrowserEnv?function standardBrowserEnv(){return{write:function write(name,value,expires,path,domain,secure){var cookie=[];cookie.push(name+"="+encodeURIComponent(value)),utils.isNumber(expires)&&cookie.push("expires="+new Date(expires).toGMTString()),utils.isString(path)&&cookie.push("path="+path),utils.isString(domain)&&cookie.push("domain="+domain),!0===secure&&cookie.push("secure"),document.cookie=cookie.join("; ")},read:function read(name){var match=document.cookie.match(new RegExp("(^|;\\s*)("+name+")=([^;]*)"));return match?decodeURIComponent(match[3]):null},remove:function remove(name){this.write(name,"",Date.now()-864e5)}}}():{write:function write(){},read:function read(){return null},remove:function remove(){}};function buildFullPath(baseURL,requestedURL){return baseURL&&!function isAbsoluteURL(url){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(url)}(requestedURL)?function combineURLs(baseURL,relativeURL){return relativeURL?baseURL.replace(/\/+$/,"")+"/"+relativeURL.replace(/^\/+/,""):baseURL}(baseURL,requestedURL):requestedURL}var isURLSameOrigin=platform.isStandardBrowserEnv?function standardBrowserEnv(){var originURL,msie=/(msie|trident)/i.test(navigator.userAgent),urlParsingNode=document.createElement("a");function resolveURL(url){var href=url;return msie&&(urlParsingNode.setAttribute("href",href),href=urlParsingNode.href),urlParsingNode.setAttribute("href",href),{href:urlParsingNode.href,protocol:urlParsingNode.protocol?urlParsingNode.protocol.replace(/:$/,""):"",host:urlParsingNode.host,search:urlParsingNode.search?urlParsingNode.search.replace(/^\?/,""):"",hash:urlParsingNode.hash?urlParsingNode.hash.replace(/^#/,""):"",hostname:urlParsingNode.hostname,port:urlParsingNode.port,pathname:"/"===urlParsingNode.pathname.charAt(0)?urlParsingNode.pathname:"/"+urlParsingNode.pathname}}return originURL=resolveURL(window.location.href),function isURLSameOrigin(requestURL){var parsed=utils.isString(requestURL)?resolveURL(requestURL):requestURL;return parsed.protocol===originURL.protocol&&parsed.host===originURL.host}}():function isURLSameOrigin(){return!0};function progressEventReducer(listener,isDownloadStream){var bytesNotified=0,_speedometer=function speedometer(samplesCount,min){samplesCount=samplesCount||10;var firstSampleTS,bytes=new Array(samplesCount),timestamps=new Array(samplesCount),head=0,tail=0;return min=void 0!==min?min:1e3,function push(chunkLength){var now=Date.now(),startedAt=timestamps[tail];firstSampleTS||(firstSampleTS=now),bytes[head]=chunkLength,timestamps[head]=now;for(var i=tail,bytesCount=0;i!==head;)bytesCount+=bytes[i++],i%=samplesCount;if((head=(head+1)%samplesCount)===tail&&(tail=(tail+1)%samplesCount),!(now-firstSampleTS<min)){var passed=startedAt&&now-startedAt;return passed?Math.round(1e3*bytesCount/passed):void 0}}}(50,250);return function(e){var loaded=e.loaded,total=e.lengthComputable?e.total:void 0,progressBytes=loaded-bytesNotified,rate=_speedometer(progressBytes);bytesNotified=loaded;var data={loaded:loaded,total:total,progress:total?loaded/total:void 0,bytes:progressBytes,rate:rate||void 0,estimated:rate&&total&&loaded<=total?(total-loaded)/rate:void 0,event:e};data[isDownloadStream?"download":"upload"]=!0,listener(data)}}var knownAdapters={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(config){return new Promise((function dispatchXhrRequest(resolve,reject){var onCanceled,requestData=config.data,requestHeaders=AxiosHeaders.from(config.headers).normalize(),responseType=config.responseType;function done(){config.cancelToken&&config.cancelToken.unsubscribe(onCanceled),config.signal&&config.signal.removeEventListener("abort",onCanceled)}utils.isFormData(requestData)&&(platform.isStandardBrowserEnv||platform.isStandardBrowserWebWorkerEnv)&&requestHeaders.setContentType(!1);var request=new XMLHttpRequest;if(config.auth){var username=config.auth.username||"",password=config.auth.password?unescape(encodeURIComponent(config.auth.password)):"";requestHeaders.set("Authorization","Basic "+btoa(username+":"+password))}var fullPath=buildFullPath(config.baseURL,config.url);function onloadend(){if(request){var responseHeaders=AxiosHeaders.from("getAllResponseHeaders"in request&&request.getAllResponseHeaders());!function settle(resolve,reject,response){var validateStatus=response.config.validateStatus;response.status&&validateStatus&&!validateStatus(response.status)?reject(new AxiosError("Request failed with status code "+response.status,[AxiosError.ERR_BAD_REQUEST,AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status/100)-4],response.config,response.request,response)):resolve(response)}((function _resolve(value){resolve(value),done()}),(function _reject(err){reject(err),done()}),{data:responseType&&"text"!==responseType&&"json"!==responseType?request.response:request.responseText,status:request.status,statusText:request.statusText,headers:responseHeaders,config:config,request:request}),request=null}}if(request.open(config.method.toUpperCase(),buildURL(fullPath,config.params,config.paramsSerializer),!0),request.timeout=config.timeout,"onloadend"in request?request.onloadend=onloadend:request.onreadystatechange=function handleLoad(){request&&4===request.readyState&&(0!==request.status||request.responseURL&&0===request.responseURL.indexOf("file:"))&&setTimeout(onloadend)},request.onabort=function handleAbort(){request&&(reject(new AxiosError("Request aborted",AxiosError.ECONNABORTED,config,request)),request=null)},request.onerror=function handleError(){reject(new AxiosError("Network Error",AxiosError.ERR_NETWORK,config,request)),request=null},request.ontimeout=function handleTimeout(){var timeoutErrorMessage=config.timeout?"timeout of "+config.timeout+"ms exceeded":"timeout exceeded",transitional=config.transitional||transitionalDefaults;config.timeoutErrorMessage&&(timeoutErrorMessage=config.timeoutErrorMessage),reject(new AxiosError(timeoutErrorMessage,transitional.clarifyTimeoutError?AxiosError.ETIMEDOUT:AxiosError.ECONNABORTED,config,request)),request=null},platform.isStandardBrowserEnv){var xsrfValue=(config.withCredentials||isURLSameOrigin(fullPath))&&config.xsrfCookieName&&cookies.read(config.xsrfCookieName);xsrfValue&&requestHeaders.set(config.xsrfHeaderName,xsrfValue)}void 0===requestData&&requestHeaders.setContentType(null),"setRequestHeader"in request&&utils.forEach(requestHeaders.toJSON(),(function setRequestHeader(val,key){request.setRequestHeader(key,val)})),utils.isUndefined(config.withCredentials)||(request.withCredentials=!!config.withCredentials),responseType&&"json"!==responseType&&(request.responseType=config.responseType),"function"==typeof config.onDownloadProgress&&request.addEventListener("progress",progressEventReducer(config.onDownloadProgress,!0)),"function"==typeof config.onUploadProgress&&request.upload&&request.upload.addEventListener("progress",progressEventReducer(config.onUploadProgress)),(config.cancelToken||config.signal)&&(onCanceled=function onCanceled(cancel){request&&(reject(!cancel||cancel.type?new CanceledError(null,config,request):cancel),request.abort(),request=null)},config.cancelToken&&config.cancelToken.subscribe(onCanceled),config.signal&&(config.signal.aborted?onCanceled():config.signal.addEventListener("abort",onCanceled)));var protocol=function parseProtocol(url){var match=/^([-+\w]{1,25})(:?\/\/|:)/.exec(url);return match&&match[1]||""}(fullPath);protocol&&-1===platform.protocols.indexOf(protocol)?reject(new AxiosError("Unsupported protocol "+protocol+":",AxiosError.ERR_BAD_REQUEST,config)):request.send(requestData||null)}))}};utils.forEach(knownAdapters,(function(fn,value){if(fn){try{Object.defineProperty(fn,"name",{value:value})}catch(e){}Object.defineProperty(fn,"adapterName",{value:value})}}));var adapters_getAdapter=function getAdapter(adapters){for(var nameOrAdapter,adapter,length=(adapters=utils.isArray(adapters)?adapters:[adapters]).length,i=0;i<length&&(nameOrAdapter=adapters[i],!(adapter=utils.isString(nameOrAdapter)?knownAdapters[nameOrAdapter.toLowerCase()]:nameOrAdapter));i++);if(!adapter){if(!1===adapter)throw new AxiosError("Adapter "+nameOrAdapter+" is not supported by the environment","ERR_NOT_SUPPORT");throw new Error(utils.hasOwnProp(knownAdapters,nameOrAdapter)?"Adapter '"+nameOrAdapter+"' is not available in the build":"Unknown adapter '"+nameOrAdapter+"'")}if(!utils.isFunction(adapter))throw new TypeError("adapter is not a function");return adapter};function throwIfCancellationRequested(config){if(config.cancelToken&&config.cancelToken.throwIfRequested(),config.signal&&config.signal.aborted)throw new CanceledError(null,config)}function dispatchRequest(config){return throwIfCancellationRequested(config),config.headers=AxiosHeaders.from(config.headers),config.data=transformData.call(config,config.transformRequest),-1!==["post","put","patch"].indexOf(config.method)&&config.headers.setContentType("application/x-www-form-urlencoded",!1),adapters_getAdapter(config.adapter||defaults.adapter)(config).then((function onAdapterResolution(response){return throwIfCancellationRequested(config),response.data=transformData.call(config,config.transformResponse,response),response.headers=AxiosHeaders.from(response.headers),response}),(function onAdapterRejection(reason){return isCancel(reason)||(throwIfCancellationRequested(config),reason&&reason.response&&(reason.response.data=transformData.call(config,config.transformResponse,reason.response),reason.response.headers=AxiosHeaders.from(reason.response.headers))),Promise.reject(reason)}))}var headersToObject=function headersToObject(thing){return thing instanceof AxiosHeaders?thing.toJSON():thing};function mergeConfig(config1,config2){config2=config2||{};var config={};function getMergedValue(target,source,caseless){return utils.isPlainObject(target)&&utils.isPlainObject(source)?utils.merge.call({caseless:caseless},target,source):utils.isPlainObject(source)?utils.merge({},source):utils.isArray(source)?source.slice():source}function mergeDeepProperties(a,b,caseless){return utils.isUndefined(b)?utils.isUndefined(a)?void 0:getMergedValue(void 0,a,caseless):getMergedValue(a,b,caseless)}function valueFromConfig2(a,b){if(!utils.isUndefined(b))return getMergedValue(void 0,b)}function defaultToConfig2(a,b){return utils.isUndefined(b)?utils.isUndefined(a)?void 0:getMergedValue(void 0,a):getMergedValue(void 0,b)}function mergeDirectKeys(a,b,prop){return prop in config2?getMergedValue(a,b):prop in config1?getMergedValue(void 0,a):void 0}var mergeMap={url:valueFromConfig2,method:valueFromConfig2,data:valueFromConfig2,baseURL:defaultToConfig2,transformRequest:defaultToConfig2,transformResponse:defaultToConfig2,paramsSerializer:defaultToConfig2,timeout:defaultToConfig2,timeoutMessage:defaultToConfig2,withCredentials:defaultToConfig2,adapter:defaultToConfig2,responseType:defaultToConfig2,xsrfCookieName:defaultToConfig2,xsrfHeaderName:defaultToConfig2,onUploadProgress:defaultToConfig2,onDownloadProgress:defaultToConfig2,decompress:defaultToConfig2,maxContentLength:defaultToConfig2,maxBodyLength:defaultToConfig2,beforeRedirect:defaultToConfig2,transport:defaultToConfig2,httpAgent:defaultToConfig2,httpsAgent:defaultToConfig2,cancelToken:defaultToConfig2,socketPath:defaultToConfig2,responseEncoding:defaultToConfig2,validateStatus:mergeDirectKeys,headers:function headers(a,b){return mergeDeepProperties(headersToObject(a),headersToObject(b),!0)}};return utils.forEach(Object.keys(config1).concat(Object.keys(config2)),(function computeConfigValue(prop){var merge=mergeMap[prop]||mergeDeepProperties,configValue=merge(config1[prop],config2[prop],prop);utils.isUndefined(configValue)&&merge!==mergeDirectKeys||(config[prop]=configValue)})),config}var validators$1={};["object","boolean","number","function","string","symbol"].forEach((function(type,i){validators$1[type]=function validator(thing){return typeof thing===type||"a"+(i<1?"n ":" ")+type}}));var deprecatedWarnings={};validators$1.transitional=function transitional(validator,version,message){function formatMessage(opt,desc){return"[Axios v1.2.3] Transitional option '"+opt+"'"+desc+(message?". "+message:"")}return function(value,opt,opts){if(!1===validator)throw new AxiosError(formatMessage(opt," has been removed"+(version?" in "+version:"")),AxiosError.ERR_DEPRECATED);return version&&!deprecatedWarnings[opt]&&(deprecatedWarnings[opt]=!0,console.warn(formatMessage(opt," has been deprecated since v"+version+" and will be removed in the near future"))),!validator||validator(value,opt,opts)}};var validator={assertOptions:function assertOptions(options,schema,allowUnknown){if("object"!=typeof options)throw new AxiosError("options must be an object",AxiosError.ERR_BAD_OPTION_VALUE);for(var keys=Object.keys(options),i=keys.length;i-- >0;){var opt=keys[i],_validator=schema[opt];if(_validator){var value=options[opt],result=void 0===value||_validator(value,opt,options);if(!0!==result)throw new AxiosError("option "+opt+" must be "+result,AxiosError.ERR_BAD_OPTION_VALUE)}else if(!0!==allowUnknown)throw new AxiosError("Unknown option "+opt,AxiosError.ERR_BAD_OPTION)}},validators:validators$1},validators=validator.validators,Axios=function(){function Axios(instanceConfig){_classCallCheck(this,Axios),this.defaults=instanceConfig,this.interceptors={request:new InterceptorManager,response:new InterceptorManager}}return _createClass(Axios,[{key:"request",value:function request(configOrUrl,config){"string"==typeof configOrUrl?(config=config||{}).url=configOrUrl:config=configOrUrl||{};var contextHeaders,_config=config=mergeConfig(this.defaults,config),transitional=_config.transitional,paramsSerializer=_config.paramsSerializer,headers=_config.headers;void 0!==transitional&&validator.assertOptions(transitional,{silentJSONParsing:validators.transitional(validators.boolean),forcedJSONParsing:validators.transitional(validators.boolean),clarifyTimeoutError:validators.transitional(validators.boolean)},!1),void 0!==paramsSerializer&&validator.assertOptions(paramsSerializer,{encode:validators.function,serialize:validators.function},!0),config.method=(config.method||this.defaults.method||"get").toLowerCase(),(contextHeaders=headers&&utils.merge(headers.common,headers[config.method]))&&utils.forEach(["delete","get","head","post","put","patch","common"],(function(method){delete headers[method]})),config.headers=AxiosHeaders.concat(contextHeaders,headers);var requestInterceptorChain=[],synchronousRequestInterceptors=!0;this.interceptors.request.forEach((function unshiftRequestInterceptors(interceptor){"function"==typeof interceptor.runWhen&&!1===interceptor.runWhen(config)||(synchronousRequestInterceptors=synchronousRequestInterceptors&&interceptor.synchronous,requestInterceptorChain.unshift(interceptor.fulfilled,interceptor.rejected))}));var promise,responseInterceptorChain=[];this.interceptors.response.forEach((function pushResponseInterceptors(interceptor){responseInterceptorChain.push(interceptor.fulfilled,interceptor.rejected)}));var len,i=0;if(!synchronousRequestInterceptors){var chain=[dispatchRequest.bind(this),void 0];for(chain.unshift.apply(chain,requestInterceptorChain),chain.push.apply(chain,responseInterceptorChain),len=chain.length,promise=Promise.resolve(config);i<len;)promise=promise.then(chain[i++],chain[i++]);return promise}len=requestInterceptorChain.length;var newConfig=config;for(i=0;i<len;){var onFulfilled=requestInterceptorChain[i++],onRejected=requestInterceptorChain[i++];try{newConfig=onFulfilled(newConfig)}catch(error){onRejected.call(this,error);break}}try{promise=dispatchRequest.call(this,newConfig)}catch(error){return Promise.reject(error)}for(i=0,len=responseInterceptorChain.length;i<len;)promise=promise.then(responseInterceptorChain[i++],responseInterceptorChain[i++]);return promise}},{key:"getUri",value:function getUri(config){return buildURL(buildFullPath((config=mergeConfig(this.defaults,config)).baseURL,config.url),config.params,config.paramsSerializer)}}]),Axios}();utils.forEach(["delete","get","head","options"],(function forEachMethodNoData(method){Axios.prototype[method]=function(url,config){return this.request(mergeConfig(config||{},{method:method,url:url,data:(config||{}).data}))}})),utils.forEach(["post","put","patch"],(function forEachMethodWithData(method){function generateHTTPMethod(isForm){return function httpMethod(url,data,config){return this.request(mergeConfig(config||{},{method:method,headers:isForm?{"Content-Type":"multipart/form-data"}:{},url:url,data:data}))}}Axios.prototype[method]=generateHTTPMethod(),Axios.prototype[method+"Form"]=generateHTTPMethod(!0)}));var CancelToken=function(){function CancelToken(executor){if(_classCallCheck(this,CancelToken),"function"!=typeof executor)throw new TypeError("executor must be a function.");var resolvePromise;this.promise=new Promise((function promiseExecutor(resolve){resolvePromise=resolve}));var token=this;this.promise.then((function(cancel){if(token._listeners){for(var i=token._listeners.length;i-- >0;)token._listeners[i](cancel);token._listeners=null}})),this.promise.then=function(onfulfilled){var _resolve,promise=new Promise((function(resolve){token.subscribe(resolve),_resolve=resolve})).then(onfulfilled);return promise.cancel=function reject(){token.unsubscribe(_resolve)},promise},executor((function cancel(message,config,request){token.reason||(token.reason=new CanceledError(message,config,request),resolvePromise(token.reason))}))}return _createClass(CancelToken,[{key:"throwIfRequested",value:function throwIfRequested(){if(this.reason)throw this.reason}},{key:"subscribe",value:function subscribe(listener){this.reason?listener(this.reason):this._listeners?this._listeners.push(listener):this._listeners=[listener]}},{key:"unsubscribe",value:function unsubscribe(listener){if(this._listeners){var index=this._listeners.indexOf(listener);-1!==index&&this._listeners.splice(index,1)}}}],[{key:"source",value:function source(){var cancel;return{token:new CancelToken((function executor(c){cancel=c})),cancel:cancel}}}]),CancelToken}();var HttpStatusCode={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(HttpStatusCode).forEach((function(_ref7){var _ref8=_slicedToArray(_ref7,2),key=_ref8[0],value=_ref8[1];HttpStatusCode[value]=key}));var axios=function createInstance(defaultConfig){var context=new Axios(defaultConfig),instance=bind(Axios.prototype.request,context);return utils.extend(instance,Axios.prototype,context,{allOwnKeys:!0}),utils.extend(instance,context,null,{allOwnKeys:!0}),instance.create=function create(instanceConfig){return createInstance(mergeConfig(defaultConfig,instanceConfig))},instance}(defaults);axios.Axios=Axios,axios.CanceledError=CanceledError,axios.CancelToken=CancelToken,axios.isCancel=isCancel,axios.VERSION="1.2.3",axios.toFormData=toFormData,axios.AxiosError=AxiosError,axios.Cancel=axios.CanceledError,axios.all=function all(promises){return Promise.all(promises)},axios.spread=function spread(callback){return function wrap(arr){return callback.apply(null,arr)}},axios.isAxiosError=function isAxiosError(payload){return utils.isObject(payload)&&!0===payload.isAxiosError},axios.mergeConfig=mergeConfig,axios.AxiosHeaders=AxiosHeaders,axios.formToJSON=function(thing){return formDataToJSON(utils.isHTMLForm(thing)?new FormData(thing):thing)},axios.HttpStatusCode=HttpStatusCode,axios.default=axios;var naiveFallback=function naiveFallback(){if("object"==typeof self&&self)return self;if("object"==typeof window&&window)return window;throw new Error("Unable to resolve global `this`")},globalThis_1=function(){if(this)return this;if("object"==typeof globalThis&&globalThis)return globalThis;try{Object.defineProperty(Object.prototype,"__global__",{get:function get(){return this},configurable:!0})}catch(error){return naiveFallback()}try{return __global__||naiveFallback()}finally{delete Object.prototype.__global__}}(),ENDPOINT_KEY=Symbol.for("verdocs-default-endpoint"),requestLogger=function requestLogger(r){return console.debug("[JS-SDK] ".concat(r.method.toUpperCase()," ").concat(r.baseURL).concat(r.url),r.data?JSON.stringify(r.data):""),r},VerdocsEndpoint=function(){function VerdocsEndpoint(options){this.environment="verdocs",this.sessionType="user",this.baseURL="https://api.verdocs.com",this.clientID="not-set",this.timeout=15e3,this.token=null,this.nextListenerId=0,this.sessionListeners=new Map,this.requestLoggerId=null,this.session=null,this.baseURL=(null==options?void 0:options.baseURL)||"https://api.verdocs.com",this.timeout=(null==options?void 0:options.timeout)||15e3,this.environment=(null==options?void 0:options.environment)||"verdocs",this.sessionType=(null==options?void 0:options.sessionType)||"user",this.clientID=(null==options?void 0:options.clientID)||"not-set",this.api=axios.create({baseURL:this.baseURL,timeout:this.timeout})}return VerdocsEndpoint.prototype.setDefault=function(){globalThis_1[ENDPOINT_KEY]=this},VerdocsEndpoint.getDefault=function(){return globalThis_1[ENDPOINT_KEY]||(globalThis_1[ENDPOINT_KEY]=new VerdocsEndpoint,window.console.debug("[JS_SDK] Created default endpoint",globalThis_1[ENDPOINT_KEY])),globalThis_1[ENDPOINT_KEY]},VerdocsEndpoint.prototype.getEnvironment=function(){return this.environment},VerdocsEndpoint.prototype.getSessionType=function(){return this.sessionType},VerdocsEndpoint.prototype.getBaseURL=function(){return this.baseURL},VerdocsEndpoint.prototype.getClientID=function(){return this.clientID},VerdocsEndpoint.prototype.getTimeout=function(){return this.timeout},VerdocsEndpoint.prototype.getSession=function(){return this.session},VerdocsEndpoint.prototype.setEnvironment=function(environment){return this.environment=environment,this},VerdocsEndpoint.prototype.setSessionType=function(sessionType){return this.sessionType=sessionType,this},VerdocsEndpoint.prototype.setBaseURL=function(url){return this.api.defaults.baseURL=url,this},VerdocsEndpoint.prototype.setClientID=function(clientID){return this.clientID=clientID,this.api.defaults.headers.common["X-Client-ID"]=clientID,this},VerdocsEndpoint.prototype.setTimeout=function(timeout){return this.timeout=timeout,this.api.defaults.timeout=timeout,this},VerdocsEndpoint.prototype.logRequests=function(enable){return enable&&null===this.requestLoggerId?this.requestLoggerId=this.api.interceptors.request.use(requestLogger):enable||null===this.requestLoggerId||this.api.interceptors.request.eject(this.requestLoggerId),this},VerdocsEndpoint.prototype.setToken=function(token){if(!token)return this.clearSession();var session=Object(_Token_54690789_js__WEBPACK_IMPORTED_MODULE_83__.a)(token);return null===session||session.exp&&1e3*session.exp<(new Date).getTime()?(window.console.warn("[JS_SDK] Ignoring attempt to use expired session token"),this.clearSession()):(this.token=token,this.session=session,"user"===this.sessionType?this.api.defaults.headers.common.Authorization="Bearer ".concat(token):this.api.defaults.headers.common.signer="Bearer ".concat(token),localStorage.setItem(this.sessionStorageKey(),token),this.notifySessionListeners(),this)},VerdocsEndpoint.prototype.getToken=function(){return this.token},VerdocsEndpoint.prototype.sessionStorageKey=function(){return"verdocs-session-".concat(this.getSessionType(),"-").concat(this.getEnvironment())},VerdocsEndpoint.prototype.clearSession=function(){return localStorage.removeItem(this.sessionStorageKey()),delete this.api.defaults.headers.common.Authorization,delete this.api.defaults.headers.common.signer,this.session=null,this.token=null,this.notifySessionListeners(),this},VerdocsEndpoint.prototype.clearSignerSession=function(){return localStorage.removeItem(this.sessionStorageKey()),delete this.api.defaults.headers.common.Authorization,this.session=null,this.token=null,this.notifySessionListeners(),this},VerdocsEndpoint.prototype.notifySessionListeners=function(){var _this=this;this.sessionListeners.forEach((function(listener){try{listener(_this,_this.session)}catch(e){}}))},VerdocsEndpoint.prototype.onSessionChanged=function(listener){var _this=this;this.nextListenerId++;var listenerSymbol=Symbol.for(""+this.nextListenerId);return this.sessionListeners.set(listenerSymbol,listener),function(){_this.sessionListeners.delete(listenerSymbol)}},VerdocsEndpoint.prototype.loadSession=function(){var token=localStorage.getItem(this.sessionStorageKey());return token?this.setToken(token):this.clearSession()},VerdocsEndpoint}()}).call(this,__webpack_require__("./node_modules/@storybook/builder-webpack4/node_modules/webpack/buildin/global.js"),__webpack_require__("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL0B2ZXJkb2NzL2pzLXNkay9UZW1wbGF0ZXMvVHlwZXMuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2F4aW9zL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b0Zvcm1EYXRhLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9udWxsLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9AdmVyZG9jcy9qcy1zZGsvVXRpbHMvZ2xvYmFsVGhpcy5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL0B2ZXJkb2NzL2pzLXNkay9WZXJkb2NzRW5kcG9pbnQuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVQZXJtaXNzaW9ucyIsIlRlbXBsYXRlU2VuZGVyVHlwZXMiLCJUZW1wbGF0ZUFjdGlvbnMiLCJTb3J0T3B0aW9ucyIsImJpbmQiLCJmbiIsInRoaXNBcmciLCJ3cmFwIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjYWNoZSIsInRvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJraW5kT2YiLCJjcmVhdGUiLCJ0aGluZyIsInN0ciIsImNhbGwiLCJzbGljZSIsInRvTG93ZXJDYXNlIiwia2luZE9mVGVzdCIsInR5cGUiLCJ0eXBlT2ZUZXN0IiwiaXNBcnJheSIsIkFycmF5IiwiaXNVbmRlZmluZWQiLCJpc0FycmF5QnVmZmVyIiwiaXNTdHJpbmciLCJpc0Z1bmN0aW9uIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ2YWwiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIml0ZXJhdG9yIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGaWxlTGlzdCIsImlzVVJMU2VhcmNoUGFyYW1zIiwiZm9yRWFjaCIsIm9iaiIsImkiLCJsIiwiYWxsT3duS2V5cyIsImxlbmd0aCIsImtleSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibGVuIiwiZmluZEtleSIsIl9rZXkiLCJfZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJ3aW5kb3ciLCJnbG9iYWwiLCJpc0NvbnRleHREZWZpbmVkIiwiY29udGV4dCIsIlR5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiaXNIVE1MRm9ybSIsImhhc093blByb3BlcnR5IiwicHJvcCIsImlzUmVnRXhwIiwicmVkdWNlRGVzY3JpcHRvcnMiLCJyZWR1Y2VyIiwiZGVzY3JpcHRvcnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwicmVkdWNlZERlc2NyaXB0b3JzIiwiZGVzY3JpcHRvciIsIm5hbWUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiaXNCdWZmZXIiLCJjb25zdHJ1Y3RvciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc0Jvb2xlYW4iLCJpc1N0cmVhbSIsInBpcGUiLCJtZXJnZSIsInRoaXMiLCJjYXNlbGVzcyIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwidGFyZ2V0S2V5IiwiZXh0ZW5kIiwiYSIsImIiLCJ0cmltIiwicmVwbGFjZSIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJpbmhlcml0cyIsInN1cGVyQ29uc3RydWN0b3IiLCJwcm9wcyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJhc3NpZ24iLCJ0b0ZsYXRPYmplY3QiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwiZmlsdGVyIiwicHJvcEZpbHRlciIsIm1lcmdlZCIsImVuZHNXaXRoIiwic2VhcmNoU3RyaW5nIiwicG9zaXRpb24iLCJTdHJpbmciLCJ1bmRlZmluZWQiLCJsYXN0SW5kZXgiLCJpbmRleE9mIiwidG9BcnJheSIsImFyciIsImZvckVhY2hFbnRyeSIsIm5leHQiLCJkb25lIiwicGFpciIsIm1hdGNoQWxsIiwicmVnRXhwIiwibWF0Y2hlcyIsImV4ZWMiLCJwdXNoIiwiaGFzT3duUHJvcCIsImZyZWV6ZU1ldGhvZHMiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJzZXQiLCJFcnJvciIsInRvT2JqZWN0U2V0IiwiYXJyYXlPclN0cmluZyIsImRlbGltaXRlciIsImRlZmluZSIsInNwbGl0IiwidG9DYW1lbENhc2UiLCJyZXBsYWNlciIsIm0iLCJwMSIsInAyIiwidG9VcHBlckNhc2UiLCJub29wIiwidG9GaW5pdGVOdW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsInRvSlNPTk9iamVjdCIsInN0YWNrIiwidmlzaXQiLCJzb3VyY2UiLCJ0YXJnZXQiLCJyZWR1Y2VkVmFsdWUiLCJBeGlvc0Vycm9yIiwibWVzc2FnZSIsImNvZGUiLCJjb25maWciLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInV0aWxzIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGF0dXMiLCJmcm9tIiwiZXJyb3IiLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJjYXVzZSIsImlzVmlzaXRhYmxlIiwicmVtb3ZlQnJhY2tldHMiLCJyZW5kZXJLZXkiLCJwYXRoIiwiZG90cyIsImNvbmNhdCIsIm1hcCIsImVhY2giLCJ0b2tlbiIsImpvaW4iLCJwcmVkaWNhdGVzIiwidGVzdCIsInRvRm9ybURhdGEiLCJmb3JtRGF0YSIsIm9wdGlvbnMiLCJUeXBlRXJyb3IiLCJlbnZGb3JtRGF0YSIsIm1ldGFUb2tlbnMiLCJpbmRleGVzIiwiZGVmaW5lZCIsIm9wdGlvbiIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsInVzZUJsb2IiLCJCbG9iIiwiaXNTcGVjQ29tcGxpYW50IiwiYXBwZW5kIiwiY29udmVydFZhbHVlIiwidG9JU09TdHJpbmciLCJCdWZmZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNGbGF0QXJyYXkiLCJzb21lIiwiZWwiLCJpbmRleCIsImV4cG9zZWRIZWxwZXJzIiwiYnVpbGQiLCJwb3AiLCJlbmNvZGUiLCJjaGFyTWFwIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibWF0Y2giLCJBeGlvc1VSTFNlYXJjaFBhcmFtcyIsInBhcmFtcyIsIl9wYWlycyIsImJ1aWxkVVJMIiwidXJsIiwic2VyaWFsaXplZFBhcmFtcyIsIl9lbmNvZGUiLCJzZXJpYWxpemVGbiIsInNlcmlhbGl6ZSIsImhhc2htYXJrSW5kZXgiLCJlbmNvZGVyIiwicHJvZHVjdCIsIkludGVyY2VwdG9yTWFuYWdlciIsImhhbmRsZXJzIiwidXNlIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzeW5jaHJvbm91cyIsInJ1bldoZW4iLCJlamVjdCIsImlkIiwiY2xlYXIiLCJmb3JFYWNoSGFuZGxlciIsImgiLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwiZG9jdW1lbnQiLCJpc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiIsIldvcmtlckdsb2JhbFNjb3BlIiwiaW1wb3J0U2NyaXB0cyIsImlzQnJvd3NlciIsImNsYXNzZXMiLCJwcm90b2NvbHMiLCJmb3JtRGF0YVRvSlNPTiIsImJ1aWxkUGF0aCIsImlzTnVtZXJpY0tleSIsImlzTGFzdCIsImFycmF5VG9PYmplY3QiLCJlbnRyaWVzIiwicGFyc2VQcm9wUGF0aCIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwiZGVmYXVsdHMiLCJ0cmFuc2l0aW9uYWwiLCJ0cmFuc2l0aW9uYWxEZWZhdWx0cyIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZGF0YSIsImhlYWRlcnMiLCJjb250ZW50VHlwZSIsImdldENvbnRlbnRUeXBlIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwic2V0Q29udGVudFR5cGUiLCJ0b1VSTEVuY29kZWRGb3JtIiwicGxhdGZvcm0iLCJoZWxwZXJzIiwiZm9ybVNlcmlhbGl6ZXIiLCJfRm9ybURhdGEiLCJlbnYiLCJzdHJpbmdpZnlTYWZlbHkiLCJyYXdWYWx1ZSIsInBhcnNlciIsInBhcnNlIiwiZSIsInRyYW5zZm9ybVJlc3BvbnNlIiwiSlNPTlJlcXVlc3RlZCIsInJlc3BvbnNlVHlwZSIsInN0cmljdEpTT05QYXJzaW5nIiwiRVJSX0JBRF9SRVNQT05TRSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbW1vbiIsImZvckVhY2hNZXRob2ROb0RhdGEiLCJtZXRob2QiLCJmb3JFYWNoTWV0aG9kV2l0aERhdGEiLCJpZ25vcmVEdXBsaWNhdGVPZiIsIiRpbnRlcm5hbHMiLCJub3JtYWxpemVIZWFkZXIiLCJoZWFkZXIiLCJub3JtYWxpemVWYWx1ZSIsIm1hdGNoSGVhZGVyVmFsdWUiLCJBeGlvc0hlYWRlcnMiLCJ2YWx1ZU9yUmV3cml0ZSIsInJld3JpdGUiLCJzZXRIZWFkZXIiLCJfdmFsdWUiLCJfaGVhZGVyIiwiX3Jld3JpdGUiLCJsSGVhZGVyIiwic2V0SGVhZGVycyIsImlzVmFsaWRIZWFkZXJOYW1lIiwicGFyc2VIZWFkZXJzIiwicmF3SGVhZGVycyIsInBhcnNlZCIsImxpbmUiLCJzdWJzdHJpbmciLCJnZXQiLCJwYXJzZVRva2VucyIsInRva2VucyIsInRva2Vuc1JFIiwiaGFzIiwibWF0Y2hlciIsImRlbGV0ZWQiLCJkZWxldGVIZWFkZXIiLCJub3JtYWxpemUiLCJmb3JtYXQiLCJub3JtYWxpemVkIiwiZm9ybWF0SGVhZGVyIiwidyIsImNoYXIiLCJ0YXJnZXRzIiwiYXNTdHJpbmdzIiwiZmlyc3QiLCJjb21wdXRlZCIsImFjY2Vzc29ycyIsImRlZmluZUFjY2Vzc29yIiwiYnVpbGRBY2Nlc3NvcnMiLCJhY2Nlc3Nvck5hbWUiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiY29uZmlndXJhYmxlIiwidHJhbnNmb3JtRGF0YSIsImZucyIsInRyYW5zZm9ybSIsImlzQ2FuY2VsIiwiX19DQU5DRUxfXyIsIkNhbmNlbGVkRXJyb3IiLCJFUlJfQ0FOQ0VMRUQiLCJhY2Nlc3NvciIsInN0YW5kYXJkQnJvd3NlckVudiIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsInJlYWQiLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJidWlsZEZ1bGxQYXRoIiwiYmFzZVVSTCIsInJlcXVlc3RlZFVSTCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlbGF0aXZlVVJMIiwib3JpZ2luVVJMIiwibXNpZSIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiY3JlYXRlRWxlbWVudCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0IiwibG9jYXRpb24iLCJpc1VSTFNhbWVPcmlnaW4iLCJyZXF1ZXN0VVJMIiwicHJvZ3Jlc3NFdmVudFJlZHVjZXIiLCJsaXN0ZW5lciIsImlzRG93bmxvYWRTdHJlYW0iLCJieXRlc05vdGlmaWVkIiwiX3NwZWVkb21ldGVyIiwic3BlZWRvbWV0ZXIiLCJzYW1wbGVzQ291bnQiLCJtaW4iLCJmaXJzdFNhbXBsZVRTIiwiYnl0ZXMiLCJ0aW1lc3RhbXBzIiwiaGVhZCIsInRhaWwiLCJjaHVua0xlbmd0aCIsInN0YXJ0ZWRBdCIsImJ5dGVzQ291bnQiLCJwYXNzZWQiLCJNYXRoIiwicm91bmQiLCJsb2FkZWQiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJwcm9ncmVzc0J5dGVzIiwicmF0ZSIsInByb2dyZXNzIiwiZXN0aW1hdGVkIiwiZXZlbnQiLCJrbm93bkFkYXB0ZXJzIiwiaHR0cCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiUHJvbWlzZSIsImRpc3BhdGNoWGhyUmVxdWVzdCIsInJlc29sdmUiLCJyZWplY3QiLCJvbkNhbmNlbGVkIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImNhbmNlbFRva2VuIiwidW5zdWJzY3JpYmUiLCJzaWduYWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsImJ0b2EiLCJmdWxsUGF0aCIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldHRsZSIsIkVSUl9CQURfUkVRVUVTVCIsImZsb29yIiwiX3Jlc29sdmUiLCJfcmVqZWN0IiwiZXJyIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9wZW4iLCJwYXJhbXNTZXJpYWxpemVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwiaGFuZGxlTG9hZCIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInNldFRpbWVvdXQiLCJvbmFib3J0IiwiaGFuZGxlQWJvcnQiLCJFQ09OTkFCT1JURUQiLCJvbmVycm9yIiwiaGFuZGxlRXJyb3IiLCJFUlJfTkVUV09SSyIsIm9udGltZW91dCIsImhhbmRsZVRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiRVRJTUVET1VUIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwiY29va2llcyIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbCIsImFib3J0Iiwic3Vic2NyaWJlIiwiYWJvcnRlZCIsInBhcnNlUHJvdG9jb2wiLCJzZW5kIiwiYWRhcHRlcnMiLCJuYW1lT3JBZGFwdGVyIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJkaXNwYXRjaFJlcXVlc3QiLCJ0aGVuIiwib25BZGFwdGVyUmVzb2x1dGlvbiIsIm9uQWRhcHRlclJlamVjdGlvbiIsInJlYXNvbiIsImhlYWRlcnNUb09iamVjdCIsIm1lcmdlQ29uZmlnIiwiY29uZmlnMSIsImNvbmZpZzIiLCJnZXRNZXJnZWRWYWx1ZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwidGltZW91dE1lc3NhZ2UiLCJkZWNvbXByZXNzIiwiYmVmb3JlUmVkaXJlY3QiLCJ0cmFuc3BvcnQiLCJodHRwQWdlbnQiLCJodHRwc0FnZW50Iiwic29ja2V0UGF0aCIsInJlc3BvbnNlRW5jb2RpbmciLCJjb21wdXRlQ29uZmlnVmFsdWUiLCJjb25maWdWYWx1ZSIsInZhbGlkYXRvcnMiLCJ2YWxpZGF0b3IiLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2ZXJzaW9uIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiRVJSX0RFUFJFQ0FURUQiLCJjb25zb2xlIiwid2FybiIsImFzc2VydE9wdGlvbnMiLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJFUlJfQkFEX09QVElPTl9WQUxVRSIsIkVSUl9CQURfT1BUSU9OIiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsImludGVyY2VwdG9ycyIsImNvbmZpZ09yVXJsIiwiY29udGV4dEhlYWRlcnMiLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsInVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwicHJvbWlzZSIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsInB1c2hSZXNwb25zZUludGVyY2VwdG9ycyIsImNoYWluIiwibmV3Q29uZmlnIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZ2V0VXJpIiwiZ2VuZXJhdGVIVFRQTWV0aG9kIiwiaXNGb3JtIiwiaHR0cE1ldGhvZCIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2VFeGVjdXRvciIsIl9saXN0ZW5lcnMiLCJvbmZ1bGZpbGxlZCIsInNwbGljZSIsImMiLCJIdHRwU3RhdHVzQ29kZSIsIkNvbnRpbnVlIiwiU3dpdGNoaW5nUHJvdG9jb2xzIiwiUHJvY2Vzc2luZyIsIkVhcmx5SGludHMiLCJPayIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZSIsIlZFUlNJT04iLCJDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImNhbGxiYWNrIiwiaXNBeGlvc0Vycm9yIiwicGF5bG9hZCIsImZvcm1Ub0pTT04iLCJuYWl2ZUZhbGxiYWNrIiwiX19nbG9iYWxfXyIsIkVORFBPSU5UX0tFWSIsInJlcXVlc3RMb2dnZXIiLCJyIiwiZGVidWciLCJWZXJkb2NzRW5kcG9pbnQiLCJlbnZpcm9ubWVudCIsInNlc3Npb25UeXBlIiwiY2xpZW50SUQiLCJuZXh0TGlzdGVuZXJJZCIsInNlc3Npb25MaXN0ZW5lcnMiLCJNYXAiLCJyZXF1ZXN0TG9nZ2VySWQiLCJzZXNzaW9uIiwiYXBpIiwic2V0RGVmYXVsdCIsImdldERlZmF1bHQiLCJnZXRFbnZpcm9ubWVudCIsImdldFNlc3Npb25UeXBlIiwiZ2V0QmFzZVVSTCIsImdldENsaWVudElEIiwiZ2V0VGltZW91dCIsImdldFNlc3Npb24iLCJzZXRFbnZpcm9ubWVudCIsInNldFNlc3Npb25UeXBlIiwic2V0QmFzZVVSTCIsInNldENsaWVudElEIiwibG9nUmVxdWVzdHMiLCJlbmFibGUiLCJzZXRUb2tlbiIsImNsZWFyU2Vzc2lvbiIsImRlY29kZUFjY2Vzc1Rva2VuQm9keSIsImV4cCIsImdldFRpbWUiLCJBdXRob3JpemF0aW9uIiwic2lnbmVyIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInNlc3Npb25TdG9yYWdlS2V5Iiwibm90aWZ5U2Vzc2lvbkxpc3RlbmVycyIsImdldFRva2VuIiwicmVtb3ZlSXRlbSIsImNsZWFyU2lnbmVyU2Vzc2lvbiIsIl90aGlzIiwib25TZXNzaW9uQ2hhbmdlZCIsImxpc3RlbmVyU3ltYm9sIiwibG9hZFNlc3Npb24iLCJnZXRJdGVtIl0sIm1hcHBpbmdzIjoiOEpBQU8sSUFBSUEsb0JBWUFDLG9CQVFBQyxnQkFZQUMsWUFoQ0osd0ZBQ1AsU0FBV0gscUJBQ1BBLG9CQUFvRCwrQkFBSSxpQ0FDeERBLG9CQUFpRCw0QkFBSSw4QkFDckRBLG9CQUFzRCxpQ0FBSSxtQ0FDMURBLG9CQUE2Qyx3QkFBSSwwQkFDakRBLG9CQUFpRCw0QkFBSSw4QkFDckRBLG9CQUEwQyxxQkFBSSx1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U0FBU00sUUFBUTRCLE9BQU9zWCxjQUN4QzNrQixLQUFLc2pCLFFBQVUsS0FDZnRqQixLQUFLbUcsTUFBUSxLQUNibkcsS0FBS2dsQix5QkFDRWhsQixJQUNmLEVBQ0k4aUIsZ0JBQWdCMW5CLFVBQVU0cEIsdUJBQXlCLFdBQy9DLElBQUlJLE1BQVFwbEIsS0FDWkEsS0FBS21qQixpQkFBaUJqbUIsU0FBUSxTQUFVc1csVUFDcEMsSUFDSUEsU0FBUzRSLE1BQU9BLE1BQU05QixRQUd0QyxDQURZLE1BQU83VyxHQUNuQixDQUVBLEdBQ0EsRUFJSXFXLGdCQUFnQjFuQixVQUFVaXFCLGlCQUFtQixTQUFVN1IsVUFDbkQsSUFBSTRSLE1BQVFwbEIsS0FFWkEsS0FBS2tqQixpQkFDTCxJQUFJb0MsZUFBaUI1b0IsT0FBTSxJQUFLLEdBQUtzRCxLQUFLa2pCLGdCQUUxQyxPQURBbGpCLEtBQUttakIsaUJBQWlCcGdCLElBQUl1aUIsZUFBZ0I5UixVQUNuQyxXQUNINFIsTUFBTWpDLGlCQUFnQixPQUFRbUMsZUFDMUMsQ0FDQSxFQUtJeEMsZ0JBQWdCMW5CLFVBQVVtcUIsWUFBYyxXQUNwQyxJQUFJcGYsTUFBUTBlLGFBQWFXLFFBQVF4bEIsS0FBSytrQixxQkFDdEMsT0FBSzVlLE1BR0VuRyxLQUFLc2tCLFNBQVNuZSxPQUZWbkcsS0FBS3VrQixjQUd4QixFQUNXekIsZUFDWCxDQTFScUMsRSIsImZpbGUiOiIzLmM4MzA3YTZlLmlmcmFtZS5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIFRlbXBsYXRlUGVybWlzc2lvbnM7XG4oZnVuY3Rpb24gKFRlbXBsYXRlUGVybWlzc2lvbnMpIHtcbiAgICBUZW1wbGF0ZVBlcm1pc3Npb25zW1wiVEVNUExBVEVfQ1JFQVRPUl9DUkVBVEVfUFVCTElDXCJdID0gXCJ0ZW1wbGF0ZTpjcmVhdG9yOmNyZWF0ZTpwdWJsaWNcIjtcbiAgICBUZW1wbGF0ZVBlcm1pc3Npb25zW1wiVEVNUExBVEVfQ1JFQVRPUl9DUkVBVEVfT1JHXCJdID0gXCJ0ZW1wbGF0ZTpjcmVhdG9yOmNyZWF0ZTpvcmdcIjtcbiAgICBUZW1wbGF0ZVBlcm1pc3Npb25zW1wiVEVNUExBVEVfQ1JFQVRPUl9DUkVBVEVfUEVSU09OQUxcIl0gPSBcInRlbXBsYXRlOmNyZWF0b3I6Y3JlYXRlOnBlcnNvbmFsXCI7XG4gICAgVGVtcGxhdGVQZXJtaXNzaW9uc1tcIlRFTVBMQVRFX0NSRUFUT1JfREVMRVRFXCJdID0gXCJ0ZW1wbGF0ZTpjcmVhdG9yOmRlbGV0ZVwiO1xuICAgIFRlbXBsYXRlUGVybWlzc2lvbnNbXCJURU1QTEFURV9DUkVBVE9SX1ZJU0lCSUxJVFlcIl0gPSBcInRlbXBsYXRlOmNyZWF0b3I6dmlzaWJpbGl0eVwiO1xuICAgIFRlbXBsYXRlUGVybWlzc2lvbnNbXCJURU1QTEFURV9NRU1CRVJfUkVBRFwiXSA9IFwidGVtcGxhdGU6bWVtYmVyOnJlYWRcIjtcbiAgICBUZW1wbGF0ZVBlcm1pc3Npb25zW1wiVEVNUExBVEVfTUVNQkVSX1dSSVRFXCJdID0gXCJ0ZW1wbGF0ZTptZW1iZXI6d3JpdGVcIjtcbiAgICBUZW1wbGF0ZVBlcm1pc3Npb25zW1wiVEVNUExBVEVfTUVNQkVSX0RFTEVURVwiXSA9IFwidGVtcGxhdGU6bWVtYmVyOmRlbGV0ZVwiO1xuICAgIFRlbXBsYXRlUGVybWlzc2lvbnNbXCJURU1QTEFURV9NRU1CRVJfVklTSUJJTElUWVwiXSA9IFwidGVtcGxhdGU6bWVtYmVyOnZpc2liaWxpdHlcIjtcbn0pKFRlbXBsYXRlUGVybWlzc2lvbnMgfHwgKFRlbXBsYXRlUGVybWlzc2lvbnMgPSB7fSkpO1xuZXhwb3J0IHZhciBUZW1wbGF0ZVNlbmRlclR5cGVzO1xuKGZ1bmN0aW9uIChUZW1wbGF0ZVNlbmRlclR5cGVzKSB7XG4gICAgVGVtcGxhdGVTZW5kZXJUeXBlc1tcIkNSRUFUT1JcIl0gPSBcImNyZWF0b3JcIjtcbiAgICBUZW1wbGF0ZVNlbmRlclR5cGVzW1wiT1JHQU5JWkFUSU9OX01FTUJFUlwiXSA9IFwib3JnYW5pemF0aW9uX21lbWJlclwiO1xuICAgIFRlbXBsYXRlU2VuZGVyVHlwZXNbXCJPUkdBTklaQVRJT05fTUVNQkVSX0FTX0NSRUFUT1JcIl0gPSBcIm9yZ2FuaXphdGlvbl9tZW1iZXJfYXNfY3JlYXRvclwiO1xuICAgIFRlbXBsYXRlU2VuZGVyVHlwZXNbXCJFVkVSWU9ORVwiXSA9IFwiZXZlcnlvbmVcIjtcbiAgICBUZW1wbGF0ZVNlbmRlclR5cGVzW1wiRVZFUllPTkVfQVNfQ1JFQVRPUlwiXSA9IFwiZXZlcnlvbmVfYXNfY3JlYXRvclwiO1xufSkoVGVtcGxhdGVTZW5kZXJUeXBlcyB8fCAoVGVtcGxhdGVTZW5kZXJUeXBlcyA9IHt9KSk7XG5leHBvcnQgdmFyIFRlbXBsYXRlQWN0aW9ucztcbihmdW5jdGlvbiAoVGVtcGxhdGVBY3Rpb25zKSB7XG4gICAgVGVtcGxhdGVBY3Rpb25zW1wiQ1JFQVRFX1BFUlNPTkFMXCJdID0gXCJjcmVhdGVfcGVyc29uYWxcIjtcbiAgICBUZW1wbGF0ZUFjdGlvbnNbXCJDUkVBVEVfT1JHXCJdID0gXCJjcmVhdGVfb3JnXCI7XG4gICAgVGVtcGxhdGVBY3Rpb25zW1wiQ1JFQVRFX1BVQkxJQ1wiXSA9IFwiY3JlYXRlX3B1YmxpY1wiO1xuICAgIFRlbXBsYXRlQWN0aW9uc1tcIlJFQURcIl0gPSBcInJlYWRcIjtcbiAgICBUZW1wbGF0ZUFjdGlvbnNbXCJXUklURVwiXSA9IFwid3JpdGVcIjtcbiAgICBUZW1wbGF0ZUFjdGlvbnNbXCJERUxFVEVcIl0gPSBcImRlbGV0ZVwiO1xuICAgIFRlbXBsYXRlQWN0aW9uc1tcIkNIQU5HRV9WSVNJQklMSVRZX1BFUlNPTkFMXCJdID0gXCJjaGFuZ2VfdmlzaWJpbGl0eV9wZXJzb25hbFwiO1xuICAgIFRlbXBsYXRlQWN0aW9uc1tcIkNIQU5HRV9WSVNJQklMSVRZX09SR1wiXSA9IFwiY2hhbmdlX3Zpc2liaWxpdHlfb3JnXCI7XG4gICAgVGVtcGxhdGVBY3Rpb25zW1wiQ0hBTkdFX1ZJU0lCSUxJVFlfUFVCTElDXCJdID0gXCJjaGFuZ2VfdmlzaWJpbGl0eV9wdWJsaWNcIjtcbn0pKFRlbXBsYXRlQWN0aW9ucyB8fCAoVGVtcGxhdGVBY3Rpb25zID0ge30pKTtcbmV4cG9ydCB2YXIgU29ydE9wdGlvbnM7XG4oZnVuY3Rpb24gKFNvcnRPcHRpb25zKSB7XG4gICAgU29ydE9wdGlvbnNbXCJDUkVBVEVEX0FUXCJdID0gXCJjcmVhdGVkX2F0XCI7XG4gICAgU29ydE9wdGlvbnNbXCJVUERBVEVEX0FUXCJdID0gXCJ1cGRhdGVkX2F0XCI7XG4gICAgU29ydE9wdGlvbnNbXCJOQU1FXCJdID0gXCJuYW1lXCI7XG4gICAgU29ydE9wdGlvbnNbXCJMQVNUX1VTRURfQVRcIl0gPSBcImxhc3RfdXNlZF9hdFwiO1xuICAgIFNvcnRPcHRpb25zW1wiQ09VTlRFUlwiXSA9IFwiY291bnRlclwiO1xuICAgIFNvcnRPcHRpb25zW1wiU1RBUl9DT1VOVEVSXCJdID0gXCJzdGFyX2NvdW50ZXJcIjtcbn0pKFNvcnRPcHRpb25zIHx8IChTb3J0T3B0aW9ucyA9IHt9KSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxuY29uc3Qge3RvU3RyaW5nfSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG5jb25zdCBraW5kT2YgPSAoY2FjaGUgPT4gdGhpbmcgPT4ge1xuICAgIGNvbnN0IHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5jb25zdCBraW5kT2ZUZXN0ID0gKHR5cGUpID0+IHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuICh0aGluZykgPT4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZVxufVxuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBjb25zdCBwYXR0ZXJuID0gJ1tvYmplY3QgRm9ybURhdGFdJztcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8XG4gICAgdG9TdHJpbmcuY2FsbCh0aGluZykgPT09IHBhdHRlcm4gfHxcbiAgICAoaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gcGF0dGVybilcbiAgKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1tfLVxcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBpZiAocmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhbGwgbWV0aG9kcyByZWFkLW9ubHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqL1xuXG5jb25zdCBmcmVlemVNZXRob2RzID0gKG9iaikgPT4ge1xuICByZWR1Y2VEZXNjcmlwdG9ycyhvYmosIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgLy8gc2tpcCByZXN0cmljdGVkIHByb3BzIGluIHN0cmljdCBtb2RlXG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSAmJiBbJ2FyZ3VtZW50cycsICdjYWxsZXInLCAnY2FsbGVlJ10uaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgIGlmICghaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybjtcblxuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCd3cml0YWJsZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2FuIG5vdCByZXdyaXRlIHJlYWQtb25seSBtZXRob2QgXFwnJyArIG5hbWUgKyAnXFwnJyk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IHRvT2JqZWN0U2V0ID0gKGFycmF5T3JTdHJpbmcsIGRlbGltaXRlcikgPT4ge1xuICBjb25zdCBvYmogPSB7fTtcblxuICBjb25zdCBkZWZpbmUgPSAoYXJyKSA9PiB7XG4gICAgYXJyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgb2JqW3ZhbHVlXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBpc0FycmF5KGFycmF5T3JTdHJpbmcpID8gZGVmaW5lKGFycmF5T3JTdHJpbmcpIDogZGVmaW5lKFN0cmluZyhhcnJheU9yU3RyaW5nKS5zcGxpdChkZWxpbWl0ZXIpKTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5jb25zdCBub29wID0gKCkgPT4ge31cblxuY29uc3QgdG9GaW5pdGVOdW1iZXIgPSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXIsXG4gIGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZyxcbiAgaXNOdW1iZXIsXG4gIGlzQm9vbGVhbixcbiAgaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIHRvSlNPTk9iamVjdFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICByZXNwb25zZSAmJiAodGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdXRpbHMudG9KU09OT2JqZWN0KHRoaXMuY29uZmlnKSxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH1cbn0pO1xuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc0Vycm9yLnByb3RvdHlwZTtcbmNvbnN0IGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnLFxuICAnRVJSX05PVF9TVVBQT1JUJyxcbiAgJ0VSUl9JTlZBTElEX1VSTCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goY29kZSA9PiB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSAoZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSA9PiB7XG4gIGNvbnN0IGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG5cbiAgdXRpbHMudG9GbGF0T2JqZWN0KGVycm9yLCBheGlvc0Vycm9yLCBmdW5jdGlvbiBmaWx0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gRXJyb3IucHJvdG90eXBlO1xuICB9LCBwcm9wID0+IHtcbiAgICByZXR1cm4gcHJvcCAhPT0gJ2lzQXhpb3NFcnJvcic7XG4gIH0pO1xuXG4gIEF4aW9zRXJyb3IuY2FsbChheGlvc0Vycm9yLCBlcnJvci5tZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblxuICBheGlvc0Vycm9yLmNhdXNlID0gZXJyb3I7XG5cbiAgYXhpb3NFcnJvci5uYW1lID0gZXJyb3IubmFtZTtcblxuICBjdXN0b21Qcm9wcyAmJiBPYmplY3QuYXNzaWduKGF4aW9zRXJyb3IsIGN1c3RvbVByb3BzKTtcblxuICByZXR1cm4gYXhpb3NFcnJvcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zRXJyb3I7XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgPyBzZWxmLkZvcm1EYXRhIDogd2luZG93LkZvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBlbnZGb3JtRGF0YSBmcm9tICcuLi9lbnYvY2xhc3Nlcy9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gdGhpbmcgaXMgYSBhcnJheSBvciBqcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRoaW5nIC0gVGhlIG9iamVjdCBvciBhcnJheSB0byBiZSB2aXNpdGVkLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1Zpc2l0YWJsZSh0aGluZykge1xuICByZXR1cm4gdXRpbHMuaXNQbGFpbk9iamVjdCh0aGluZykgfHwgdXRpbHMuaXNBcnJheSh0aGluZyk7XG59XG5cbi8qKlxuICogSXQgcmVtb3ZlcyB0aGUgYnJhY2tldHMgZnJvbSB0aGUgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUga2V5IHdpdGhvdXQgdGhlIGJyYWNrZXRzLlxuICovXG5mdW5jdGlvbiByZW1vdmVCcmFja2V0cyhrZXkpIHtcbiAgcmV0dXJuIHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykgPyBrZXkuc2xpY2UoMCwgLTIpIDoga2V5O1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGF0aCwgYSBrZXksIGFuZCBhIGJvb2xlYW4sIGFuZCByZXR1cm5zIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgY3VycmVudCBvYmplY3QgYmVpbmcgaXRlcmF0ZWQgb3Zlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkb3RzIC0gSWYgdHJ1ZSwgdGhlIGtleSB3aWxsIGJlIHJlbmRlcmVkIHdpdGggZG90cyBpbnN0ZWFkIG9mIGJyYWNrZXRzLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cykge1xuICBpZiAoIXBhdGgpIHJldHVybiBrZXk7XG4gIHJldHVybiBwYXRoLmNvbmNhdChrZXkpLm1hcChmdW5jdGlvbiBlYWNoKHRva2VuLCBpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdG9rZW4gPSByZW1vdmVCcmFja2V0cyh0b2tlbik7XG4gICAgcmV0dXJuICFkb3RzICYmIGkgPyAnWycgKyB0b2tlbiArICddJyA6IHRva2VuO1xuICB9KS5qb2luKGRvdHMgPyAnLicgOiAnJyk7XG59XG5cbi8qKlxuICogSWYgdGhlIGFycmF5IGlzIGFuIGFycmF5IGFuZCBub25lIG9mIGl0cyBlbGVtZW50cyBhcmUgdmlzaXRhYmxlLCB0aGVuIGl0J3MgYSBmbGF0IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNoZWNrXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmxhdEFycmF5KGFycikge1xuICByZXR1cm4gdXRpbHMuaXNBcnJheShhcnIpICYmICFhcnIuc29tZShpc1Zpc2l0YWJsZSk7XG59XG5cbmNvbnN0IHByZWRpY2F0ZXMgPSB1dGlscy50b0ZsYXRPYmplY3QodXRpbHMsIHt9LCBudWxsLCBmdW5jdGlvbiBmaWx0ZXIocHJvcCkge1xuICByZXR1cm4gL15pc1tBLVpdLy50ZXN0KHByb3ApO1xufSk7XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnQodGhpbmcpIHtcbiAgcmV0dXJuIHRoaW5nICYmIHV0aWxzLmlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl07XG59XG5cbi8qKlxuICogQ29udmVydCBhIGRhdGEgb2JqZWN0IHRvIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHs/T2JqZWN0fSBbZm9ybURhdGFdXG4gKiBAcGFyYW0gez9PYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMudmlzaXRvcl1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubWV0YVRva2VucyA9IHRydWVdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmRvdHMgPSBmYWxzZV1cbiAqIEBwYXJhbSB7P0Jvb2xlYW59IFtvcHRpb25zLmluZGV4ZXMgPSBmYWxzZV1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICoqL1xuXG4vKipcbiAqIEl0IGNvbnZlcnRzIGFuIG9iamVjdCBpbnRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGNvbnZlcnQgdG8gZm9ybSBkYXRhLlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIC0gVGhlIEZvcm1EYXRhIG9iamVjdCB0byBhcHBlbmQgdG8uXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKG9iaiwgZm9ybURhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZm9ybURhdGEgPSBmb3JtRGF0YSB8fCBuZXcgKGVudkZvcm1EYXRhIHx8IEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIGlzU3BlY0NvbXBsaWFudChmb3JtRGF0YSk7XG5cbiAgaWYgKCF1dGlscy5pc0Z1bmN0aW9uKHZpc2l0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmlzaXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICcnO1xuXG4gICAgaWYgKHV0aWxzLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICghdXNlQmxvYiAmJiB1dGlscy5pc0Jsb2IodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignQmxvYiBpcyBub3Qgc3VwcG9ydGVkLiBVc2UgYSBCdWZmZXIgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgdXRpbHMuaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHVzZUJsb2IgJiYgdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgPyBuZXcgQmxvYihbdmFsdWVdKSA6IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCB2aXNpdG9yLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0ga2V5XG4gICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfE51bWJlcj59IHBhdGhcbiAgICogQHRoaXMge0Zvcm1EYXRhfVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gcmV0dXJuIHRydWUgdG8gdmlzaXQgdGhlIGVhY2ggcHJvcCBvZiB0aGUgdmFsdWUgcmVjdXJzaXZlbHlcbiAgICovXG4gIGZ1bmN0aW9uIGRlZmF1bHRWaXNpdG9yKHZhbHVlLCBrZXksIHBhdGgpIHtcbiAgICBsZXQgYXJyID0gdmFsdWU7XG5cbiAgICBpZiAodmFsdWUgJiYgIXBhdGggJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ3t9JykpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IG1ldGFUb2tlbnMgPyBrZXkgOiBrZXkuc2xpY2UoMCwgLTIpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAodXRpbHMuaXNBcnJheSh2YWx1ZSkgJiYgaXNGbGF0QXJyYXkodmFsdWUpKSB8fFxuICAgICAgICAodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRm9ybURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUpO1xuICB9IDogZW5jb2RlO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuIiwiaW1wb3J0IFVSTFNlYXJjaFBhcmFtcyBmcm9tICcuL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzJ1xuaW1wb3J0IEZvcm1EYXRhIGZyb20gJy4vY2xhc3Nlcy9Gb3JtRGF0YS5qcydcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGlzU3RhbmRhcmRCcm93c2VyRW52ID0gKCgpID0+IHtcbiAgbGV0IHByb2R1Y3Q7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgKHByb2R1Y3QgPSBuYXZpZ2F0b3IucHJvZHVjdCkgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICBwcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgIHByb2R1Y3QgPT09ICdOUycpXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufSkoKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgd2ViV29ya2VyIGVudmlyb25tZW50XG4gKlxuICogQWx0aG91Z2ggdGhlIGBpc1N0YW5kYXJkQnJvd3NlckVudmAgbWV0aG9kIGluZGljYXRlcyB0aGF0XG4gKiBgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXJgLCB0aGUgV2ViV29ya2VyIHdpbGwgc3RpbGwgYmVcbiAqIGZpbHRlcmVkIG91dCBkdWUgdG8gaXRzIGp1ZGdtZW50IHN0YW5kYXJkXG4gKiBgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ2AuXG4gKiBUaGlzIGxlYWRzIHRvIGEgcHJvYmxlbSB3aGVuIGF4aW9zIHBvc3QgYEZvcm1EYXRhYCBpbiB3ZWJXb3JrZXJcbiAqL1xuIGNvbnN0IGlzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52ID0gKCgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmXG4gICAgdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufSkoKTtcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQnJvd3NlcjogdHJ1ZSxcbiAgY2xhc3Nlczoge1xuICAgIFVSTFNlYXJjaFBhcmFtcyxcbiAgICBGb3JtRGF0YSxcbiAgICBCbG9iXG4gIH0sXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBpc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuY2xhc3MgSW50ZXJjZXB0b3JNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gICAqL1xuICB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICAgIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgICBmdWxmaWxsZWQsXG4gICAgICByZWplY3RlZCxcbiAgICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGludGVyY2VwdG9yIHdhcyByZW1vdmVkLCBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZWplY3QoaWQpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGludGVyY2VwdG9ycyBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gICAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZvckVhY2goZm4pIHtcbiAgICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICAgIGZuKGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyA/IFVSTFNlYXJjaFBhcmFtcyA6IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtRGF0YTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG5jb25zdCBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxufTtcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogWyd4aHInLCAnaHR0cCddLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSB8fCAnJztcbiAgICBjb25zdCBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICBjb25zdCBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMuaXNGb3JtRGF0YShkYXRhKTtcblxuICAgIGlmIChpc0Zvcm1EYXRhKSB7XG4gICAgICBpZiAoIWhhc0pTT05Db250ZW50VHlwZSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGVscGVycy5kZWZhdWx0VmlzaXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwgb3B0aW9ucykpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8vIFJhd0F4aW9zSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbmNvbnN0IGlnbm9yZUR1cGxpY2F0ZU9mID0gdXRpbHMudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgcmF3SGVhZGVycyA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuICBsZXQgaTtcblxuICByYXdIZWFkZXJzICYmIHJhd0hlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gbGluZS5zdWJzdHJpbmcoaSArIDEpLnRyaW0oKTtcblxuICAgIGlmICgha2V5IHx8IChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZltrZXldKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgaWYgKHBhcnNlZFtrZXldKSB7XG4gICAgICAgIHBhcnNlZFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gW3ZhbF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBwYXJzZUhlYWRlcnMgZnJvbSAnLi4vaGVscGVycy9wYXJzZUhlYWRlcnMuanMnO1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUb2tlbnMoc3RyKSB7XG4gIGNvbnN0IHRva2VucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHRva2Vuc1JFID0gLyhbXlxccyw7PV0rKVxccyooPzo9XFxzKihbXiw7XSspKT8vZztcbiAgbGV0IG1hdGNoO1xuXG4gIHdoaWxlICgobWF0Y2ggPSB0b2tlbnNSRS5leGVjKHN0cikpKSB7XG4gICAgdG9rZW5zW21hdGNoWzFdXSA9IG1hdGNoWzJdO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEhlYWRlck5hbWUoc3RyKSB7XG4gIHJldHVybiAvXlstX2EtekEtWl0rJC8udGVzdChzdHIudHJpbSgpKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzKS5mb3JFYWNoKHRoaXMuZGVsZXRlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCddKTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMucHJvdG90eXBlKTtcbnV0aWxzLmZyZWV6ZU1ldGhvZHMoQXhpb3NIZWFkZXJzKTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NIZWFkZXJzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIGNvbnN0IGNvbnRleHQgPSByZXNwb25zZSB8fCBjb25maWc7XG4gIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb250ZXh0LmhlYWRlcnMpO1xuICBsZXQgZGF0YSA9IGNvbnRleHQuZGF0YTtcblxuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29uZmlnLCBkYXRhLCBoZWFkZXJzLm5vcm1hbGl6ZSgpLCByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIGhlYWRlcnMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdD19IHJlcXVlc3QgVGhlIHJlcXVlc3QuXG4gKlxuICogQHJldHVybnMge0NhbmNlbGVkRXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCwgY29uZmlnLCByZXF1ZXN0KTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscy5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxlZEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIGNvbnN0IGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpc0Fic29sdXRlVVJMIGZyb20gJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyc7XG5pbXBvcnQgY29tYmluZVVSTHMgZnJvbSAnLi4vaGVscGVycy9jb21iaW5lVVJMcy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcbi8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIGNvbnN0IG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxldCBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgbGV0IGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgY29va2llcyBmcm9tICcuLy4uL2hlbHBlcnMvY29va2llcy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi8uLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBzcGVlZG9tZXRlciBmcm9tICcuLi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzJztcblxuZnVuY3Rpb24gcHJvZ3Jlc3NFdmVudFJlZHVjZXIobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0pIHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZVxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9O1xufVxuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGNvbnN0IHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgbGV0IG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpICYmIChwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlckVudiB8fCBwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikpIHtcbiAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKGZhbHNlKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICBjb25zdCB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgY29uc3QgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKFxuICAgICAgICAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ICYmIHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gQXhpb3NFcnJvci5FVElNRURPVVQgOiBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmIChwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKVxuICAgICAgICAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgJiYgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSk7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KGNvbmZpZy54c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLnRvSlNPTigpLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25VcGxvYWRQcm9ncmVzcykpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChmdWxsUGF0aCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENhbGN1bGF0ZSBkYXRhIG1heFJhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlc0NvdW50PSAxMF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPSAxMDAwXVxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBzcGVlZG9tZXRlcihzYW1wbGVzQ291bnQsIG1pbikge1xuICBzYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnQgfHwgMTA7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGNvbnN0IHRpbWVzdGFtcHMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgbGV0IGhlYWQgPSAwO1xuICBsZXQgdGFpbCA9IDA7XG4gIGxldCBmaXJzdFNhbXBsZVRTO1xuXG4gIG1pbiA9IG1pbiAhPT0gdW5kZWZpbmVkID8gbWluIDogMTAwMDtcblxuICByZXR1cm4gZnVuY3Rpb24gcHVzaChjaHVua0xlbmd0aCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBzdGFydGVkQXQgPSB0aW1lc3RhbXBzW3RhaWxdO1xuXG4gICAgaWYgKCFmaXJzdFNhbXBsZVRTKSB7XG4gICAgICBmaXJzdFNhbXBsZVRTID0gbm93O1xuICAgIH1cblxuICAgIGJ5dGVzW2hlYWRdID0gY2h1bmtMZW5ndGg7XG4gICAgdGltZXN0YW1wc1toZWFkXSA9IG5vdztcblxuICAgIGxldCBpID0gdGFpbDtcbiAgICBsZXQgYnl0ZXNDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAoaSAhPT0gaGVhZCkge1xuICAgICAgYnl0ZXNDb3VudCArPSBieXRlc1tpKytdO1xuICAgICAgaSA9IGkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaGVhZCA9IChoZWFkICsgMSkgJSBzYW1wbGVzQ291bnQ7XG5cbiAgICBpZiAoaGVhZCA9PT0gdGFpbCkge1xuICAgICAgdGFpbCA9ICh0YWlsICsgMSkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKG5vdyAtIGZpcnN0U2FtcGxlVFMgPCBtaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXNzZWQgPSBzdGFydGVkQXQgJiYgbm93IC0gc3RhcnRlZEF0O1xuXG4gICAgcmV0dXJuIHBhc3NlZCA/IE1hdGgucm91bmQoYnl0ZXNDb3VudCAqIDEwMDAgLyBwYXNzZWQpIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzcGVlZG9tZXRlcjtcbiIsImltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgaHR0cEFkYXB0ZXIgZnJvbSAnLi9odHRwLmpzJztcbmltcG9ydCB4aHJBZGFwdGVyIGZyb20gJy4veGhyLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcblxuY29uc3Qga25vd25BZGFwdGVycyA9IHtcbiAgaHR0cDogaHR0cEFkYXB0ZXIsXG4gIHhocjogeGhyQWRhcHRlclxufVxuXG51dGlscy5mb3JFYWNoKGtub3duQWRhcHRlcnMsIChmbiwgdmFsdWUpID0+IHtcbiAgaWYoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRBZGFwdGVyOiAoYWRhcHRlcnMpID0+IHtcbiAgICBhZGFwdGVycyA9IHV0aWxzLmlzQXJyYXkoYWRhcHRlcnMpID8gYWRhcHRlcnMgOiBbYWRhcHRlcnNdO1xuXG4gICAgY29uc3Qge2xlbmd0aH0gPSBhZGFwdGVycztcbiAgICBsZXQgbmFtZU9yQWRhcHRlcjtcbiAgICBsZXQgYWRhcHRlcjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGlmKChhZGFwdGVyID0gdXRpbHMuaXNTdHJpbmcobmFtZU9yQWRhcHRlcikgPyBrbm93bkFkYXB0ZXJzW25hbWVPckFkYXB0ZXIudG9Mb3dlckNhc2UoKV0gOiBuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcbiAgICAgIGlmIChhZGFwdGVyID09PSBmYWxzZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICBgQWRhcHRlciAke25hbWVPckFkYXB0ZXJ9IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGVudmlyb25tZW50YCxcbiAgICAgICAgICAnRVJSX05PVF9TVVBQT1JUJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIHV0aWxzLmhhc093blByb3Aoa25vd25BZGFwdGVycywgbmFtZU9yQWRhcHRlcikgP1xuICAgICAgICAgIGBBZGFwdGVyICcke25hbWVPckFkYXB0ZXJ9JyBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBidWlsZGAgOlxuICAgICAgICAgIGBVbmtub3duIGFkYXB0ZXIgJyR7bmFtZU9yQWRhcHRlcn0nYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24oYWRhcHRlcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FkYXB0ZXIgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRhcHRlcjtcbiAgfSxcbiAgYWRhcHRlcnM6IGtub3duQWRhcHRlcnNcbn1cbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3RcbmV4cG9ydCBkZWZhdWx0IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgY29uc3QgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0cmFuc2Zvcm1EYXRhIGZyb20gJy4vdHJhbnNmb3JtRGF0YS5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBhZGFwdGVycyBmcm9tIFwiLi4vYWRhcHRlcnMvYWRhcHRlcnMuanNcIjtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbmZpZy5oZWFkZXJzKTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIGlmIChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10uaW5kZXhPZihjb25maWcubWV0aG9kKSAhPT0gLTEpIHtcbiAgICBjb25maWcuaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywgZmFsc2UpO1xuICB9XG5cbiAgY29uc3QgYWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXIoY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcik7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICByZXNwb25zZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVhc29uLnJlc3BvbnNlLmhlYWRlcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vQXhpb3NIZWFkZXJzLmpzXCI7XG5cbmNvbnN0IGhlYWRlcnNUb09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgaW5zdGFuY2VvZiBBeGlvc0hlYWRlcnMgPyB0aGluZy50b0pTT04oKSA6IHRoaW5nO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICBjb25zdCBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSwgY2FzZWxlc3MpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlLmNhbGwoe2Nhc2VsZXNzfSwgdGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKGEsIGIsIGNhc2VsZXNzKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIsIGNhc2VsZXNzKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSwgY2FzZWxlc3MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMoYSwgYiwgcHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbWVyZ2VNYXAgPSB7XG4gICAgdXJsOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIG1ldGhvZDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBkYXRhOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGJhc2VVUkw6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBwYXJhbXNTZXJpYWxpemVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dE1lc3NhZ2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGFkYXB0ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VUeXBlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZDb29raWVOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZIZWFkZXJOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGRlY29tcHJlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Q29udGVudExlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhCb2R5TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGJlZm9yZVJlZGlyZWN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zcG9ydDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cHNBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBjYW5jZWxUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBzb2NrZXRQYXRoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlRW5jb2Rpbmc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdmFsaWRhdGVTdGF0dXM6IG1lcmdlRGlyZWN0S2V5cyxcbiAgICBoZWFkZXJzOiAoYSwgYikgPT4gbWVyZ2VEZWVwUHJvcGVydGllcyhoZWFkZXJzVG9PYmplY3QoYSksIGhlYWRlcnNUb09iamVjdChiKSwgdHJ1ZSlcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKGNvbmZpZzEpLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBcIjEuMi4zXCI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4uL2hlbHBlcnMvYnVpbGRVUkwuanMnO1xuaW1wb3J0IEludGVyY2VwdG9yTWFuYWdlciBmcm9tICcuL0ludGVyY2VwdG9yTWFuYWdlci5qcyc7XG5pbXBvcnQgZGlzcGF0Y2hSZXF1ZXN0IGZyb20gJy4vZGlzcGF0Y2hSZXF1ZXN0LmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4vYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgdmFsaWRhdG9yIGZyb20gJy4uL2hlbHBlcnMvdmFsaWRhdG9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi9BeGlvc0hlYWRlcnMuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmNsYXNzIEF4aW9zIHtcbiAgY29uc3RydWN0b3IoaW5zdGFuY2VDb25maWcpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgY29uc3Qge3RyYW5zaXRpb25hbCwgcGFyYW1zU2VyaWFsaXplciwgaGVhZGVyc30gPSBjb25maWc7XG5cbiAgICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zU2VyaWFsaXplciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICAgIGVuY29kZTogdmFsaWRhdG9ycy5mdW5jdGlvbixcbiAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICB9LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICAgIGNvbmZpZy5tZXRob2QgPSAoY29uZmlnLm1ldGhvZCB8fCB0aGlzLmRlZmF1bHRzLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKTtcblxuICAgIGxldCBjb250ZXh0SGVhZGVycztcblxuICAgIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICAgIGNvbnRleHRIZWFkZXJzID0gaGVhZGVycyAmJiB1dGlscy5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBjb250ZXh0SGVhZGVycyAmJiB1dGlscy5mb3JFYWNoKFxuICAgICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgICAobWV0aG9kKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzW21ldGhvZF07XG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmNvbmNhdChjb250ZXh0SGVhZGVycywgaGVhZGVycyk7XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gICAgY29uc3QgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICBsZXQgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgbGV0IHByb21pc2U7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBsZW47XG5cbiAgICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgY29uc3QgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LmJpbmQodGhpcyksIHVuZGVmaW5lZF07XG4gICAgICBjaGFpbi51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBjaGFpbi5wdXNoLmFwcGx5KGNoYWluLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgbGVuID0gY2hhaW4ubGVuZ3RoO1xuXG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW5baSsrXSwgY2hhaW5baSsrXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGxlbiA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIGxldCBuZXdDb25maWcgPSBjb25maWc7XG5cbiAgICBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb25zdCBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICBjb25zdCBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBvblJlamVjdGVkLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdC5jYWxsKHRoaXMsIG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaSA9IDA7XG4gICAgbGVuID0gcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRVcmkoY29uZmlnKSB7XG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuICB9XG59XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRUUE1ldGhvZChpc0Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHR0cE1ldGhvZCh1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybCxcbiAgICAgICAgZGF0YVxuICAgICAgfSkpO1xuICAgIH07XG4gIH1cblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCgpO1xuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2QgKyAnRm9ybSddID0gZ2VuZXJhdGVIVFRQTWV0aG9kKHRydWUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL0NhbmNlbGVkRXJyb3IuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxUb2tlbn1cbiAqL1xuY2xhc3MgQ2FuY2VsVG9rZW4ge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdG9rZW4gPSB0aGlzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbihjYW5jZWwgPT4ge1xuICAgICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICAgIGxldCBpID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICAgIH1cbiAgICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbiA9IG9uZnVsZmlsbGVkID0+IHtcbiAgICAgIGxldCBfcmVzb2x2ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAgICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpO1xuICAgICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAgICovXG4gIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gICAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gICAqL1xuICBzdGF0aWMgc291cmNlKCkge1xuICAgIGxldCBjYW5jZWw7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgICAgY2FuY2VsID0gYztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW4sXG4gICAgICBjYW5jZWxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbFRva2VuO1xuIiwiY29uc3QgSHR0cFN0YXR1c0NvZGUgPSB7XG4gIENvbnRpbnVlOiAxMDAsXG4gIFN3aXRjaGluZ1Byb3RvY29sczogMTAxLFxuICBQcm9jZXNzaW5nOiAxMDIsXG4gIEVhcmx5SGludHM6IDEwMyxcbiAgT2s6IDIwMCxcbiAgQ3JlYXRlZDogMjAxLFxuICBBY2NlcHRlZDogMjAyLFxuICBOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246IDIwMyxcbiAgTm9Db250ZW50OiAyMDQsXG4gIFJlc2V0Q29udGVudDogMjA1LFxuICBQYXJ0aWFsQ29udGVudDogMjA2LFxuICBNdWx0aVN0YXR1czogMjA3LFxuICBBbHJlYWR5UmVwb3J0ZWQ6IDIwOCxcbiAgSW1Vc2VkOiAyMjYsXG4gIE11bHRpcGxlQ2hvaWNlczogMzAwLFxuICBNb3ZlZFBlcm1hbmVudGx5OiAzMDEsXG4gIEZvdW5kOiAzMDIsXG4gIFNlZU90aGVyOiAzMDMsXG4gIE5vdE1vZGlmaWVkOiAzMDQsXG4gIFVzZVByb3h5OiAzMDUsXG4gIFVudXNlZDogMzA2LFxuICBUZW1wb3JhcnlSZWRpcmVjdDogMzA3LFxuICBQZXJtYW5lbnRSZWRpcmVjdDogMzA4LFxuICBCYWRSZXF1ZXN0OiA0MDAsXG4gIFVuYXV0aG9yaXplZDogNDAxLFxuICBQYXltZW50UmVxdWlyZWQ6IDQwMixcbiAgRm9yYmlkZGVuOiA0MDMsXG4gIE5vdEZvdW5kOiA0MDQsXG4gIE1ldGhvZE5vdEFsbG93ZWQ6IDQwNSxcbiAgTm90QWNjZXB0YWJsZTogNDA2LFxuICBQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDQwNyxcbiAgUmVxdWVzdFRpbWVvdXQ6IDQwOCxcbiAgQ29uZmxpY3Q6IDQwOSxcbiAgR29uZTogNDEwLFxuICBMZW5ndGhSZXF1aXJlZDogNDExLFxuICBQcmVjb25kaXRpb25GYWlsZWQ6IDQxMixcbiAgUGF5bG9hZFRvb0xhcmdlOiA0MTMsXG4gIFVyaVRvb0xvbmc6IDQxNCxcbiAgVW5zdXBwb3J0ZWRNZWRpYVR5cGU6IDQxNSxcbiAgUmFuZ2VOb3RTYXRpc2ZpYWJsZTogNDE2LFxuICBFeHBlY3RhdGlvbkZhaWxlZDogNDE3LFxuICBJbUFUZWFwb3Q6IDQxOCxcbiAgTWlzZGlyZWN0ZWRSZXF1ZXN0OiA0MjEsXG4gIFVucHJvY2Vzc2FibGVFbnRpdHk6IDQyMixcbiAgTG9ja2VkOiA0MjMsXG4gIEZhaWxlZERlcGVuZGVuY3k6IDQyNCxcbiAgVG9vRWFybHk6IDQyNSxcbiAgVXBncmFkZVJlcXVpcmVkOiA0MjYsXG4gIFByZWNvbmRpdGlvblJlcXVpcmVkOiA0MjgsXG4gIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2U6IDQzMSxcbiAgVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnM6IDQ1MSxcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcjogNTAwLFxuICBOb3RJbXBsZW1lbnRlZDogNTAxLFxuICBCYWRHYXRld2F5OiA1MDIsXG4gIFNlcnZpY2VVbmF2YWlsYWJsZTogNTAzLFxuICBHYXRld2F5VGltZW91dDogNTA0LFxuICBIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZDogNTA1LFxuICBWYXJpYW50QWxzb05lZ290aWF0ZXM6IDUwNixcbiAgSW5zdWZmaWNpZW50U3RvcmFnZTogNTA3LFxuICBMb29wRGV0ZWN0ZWQ6IDUwOCxcbiAgTm90RXh0ZW5kZWQ6IDUxMCxcbiAgTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDUxMSxcbn07XG5cbk9iamVjdC5lbnRyaWVzKEh0dHBTdGF0dXNDb2RlKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgSHR0cFN0YXR1c0NvZGVbdmFsdWVdID0ga2V5O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEh0dHBTdGF0dXNDb2RlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5pbXBvcnQgQXhpb3MgZnJvbSAnLi9jb3JlL0F4aW9zLmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL2NvcmUvbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBDYW5jZWxUb2tlbiBmcm9tICcuL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuL2Vudi9kYXRhLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBzcHJlYWQgZnJvbSAnLi9oZWxwZXJzL3NwcmVhZC5qcyc7XG5pbXBvcnQgaXNBeGlvc0Vycm9yIGZyb20gJy4vaGVscGVycy9pc0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IEh0dHBTdGF0dXNDb2RlIGZyb20gJy4vaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJucyB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgY29uc3QgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgY29uc3QgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0LCBudWxsLCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbmNvbnN0IGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsZWRFcnJvciA9IENhbmNlbGVkRXJyb3I7XG5heGlvcy5DYW5jZWxUb2tlbiA9IENhbmNlbFRva2VuO1xuYXhpb3MuaXNDYW5jZWwgPSBpc0NhbmNlbDtcbmF4aW9zLlZFUlNJT04gPSBWRVJTSU9OO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHRvRm9ybURhdGE7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gQXhpb3NFcnJvcjtcblxuLy8gYWxpYXMgZm9yIENhbmNlbGVkRXJyb3IgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmF4aW9zLkNhbmNlbCA9IGF4aW9zLkNhbmNlbGVkRXJyb3I7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5cbmF4aW9zLnNwcmVhZCA9IHNwcmVhZDtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gaXNBeGlvc0Vycm9yO1xuXG4vLyBFeHBvc2UgbWVyZ2VDb25maWdcbmF4aW9zLm1lcmdlQ29uZmlnID0gbWVyZ2VDb25maWc7XG5cbmF4aW9zLkF4aW9zSGVhZGVycyA9IEF4aW9zSGVhZGVycztcblxuYXhpb3MuZm9ybVRvSlNPTiA9IHRoaW5nID0+IGZvcm1EYXRhVG9KU09OKHV0aWxzLmlzSFRNTEZvcm0odGhpbmcpID8gbmV3IEZvcm1EYXRhKHRoaW5nKSA6IHRoaW5nKTtcblxuYXhpb3MuSHR0cFN0YXR1c0NvZGUgPSBIdHRwU3RhdHVzQ29kZTtcblxuYXhpb3MuZGVmYXVsdCA9IGF4aW9zO1xuXG4vLyB0aGlzIG1vZHVsZSBzaG91bGQgb25seSBoYXZlIGEgZGVmYXVsdCBleHBvcnRcbmV4cG9ydCBkZWZhdWx0IGF4aW9zXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUaGlzIGZpbGUgcHJvdmlkZXMgYSBwb2x5ZmlsbCBmb3IgbWFuYWdpbmcgZ2xvYmFscyBpbiBib3RoIE5vZGVKUyBhbmQgYnJvd3NlciBlbnZpcm9ubWVudHMuIFRoaXMgaXNcbi8vIGFuIGFudGktcGF0dGVybiB3ZSdkIGhvcGVkIHRvIGF2b2lkLCBidXQgd2UgaGF2ZSBzZXZlcmFsIHByb2plY3RzIGRlcGVuZGVuZGluZyBvbiBvbmUgY29tbW9uIGxpYnJhcnlcbi8vICh0aGlzIGpzLXNkaykgYW5kIHdlIHdhbnQgdGhhdCBsaWJyYXJ5IHRvIHByb3ZpZGUgYSBjb21tb24gZW5kcG9pbnQgdG8gYWxsIGNhbGxlcnMgKHNvIGF1dGhlbnRpY2F0aW9uXG4vLyB0b2tlbnMgb25seSBuZWVkIHRvIGJlIHRyYWNrZWQgaW4gb25lIHBsYWNlKS4gVGhlIHRyb3VibGUgaXMsIG9uZSBvZiB0aG9zZSBsaWJyYXJpZXMgaXMgYmFzZWQgb25cbi8vIFN0ZW5jaWxKUyBhbmQgaXMgY29tcGlsaW5nIGl0cyBtb2R1bGVzIGludG8gV2ViIENvbXBvbmVudHMuIEJlY2F1c2Ugb2YgaG93IG1vZHVsZSByZXNvbHV0aW9uIHdvcmtzLFxuLy8gd2hlbiB0aG9zZSBDb21wb25lbnRzIGxvYWQganMtc2RrIHRoZXkgZ2V0IGEgc2VwYXJhdGUgaW5zdGFuY2UuIFdpdGhvdXQgbWVzc3kgb3B0aW9ucyBsaWtlIGhhdmluZyB0b1xuLy8gcGFzcyByYXcgZGF0YSBmcm9tIHRoZSBjYWxsZXIgdG8gZWFjaCBDb21wb25lbnQsIG9yIHBhc3MgYXJvdW5kIHJlZmVyZW5jZXMgdG8gYSBjb21tb24gRW5kcG9pbnQsIHRoZXlcbi8vIGhhdmUgbm8gd2F5IHRvIGFjY2VzcyBhdXRoZW50aWNhdGVkIHNlc3Npb25zIHVubGVzcyB3ZSBtYWtlIHRoZSBFbmRwb2ludCBhIHRydWUgZ2xvYmFsLlxuLy9cbi8vIEBjcmVkaXQgaHR0cHM6Ly9naXRodWIuY29tL21lZGlrb28vZXM1LWV4dC9ibG9iL21hc3Rlci9nbG9iYWwuanNcbi8vIEBjcmVkaXQgaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2dsb2JhbHRoaXNcbnZhciBuYWl2ZUZhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCcgJiYgc2VsZilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdylcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byByZXNvbHZlIGdsb2JhbCBgdGhpc2AnKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMpXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIC8vIFVuZXhwZWN0ZWQgc3RyaWN0IG1vZGUgKG1heSBoYXBwZW4gaWYgZS5nLiBidW5kbGVkIGludG8gRVNNIG1vZHVsZSlcbiAgICAvLyBGYWxsYmFjayB0byBzdGFuZGFyZCBnbG9iYWxUaGlzIGlmIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcylcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgLy8gVGhhbmtzIEBtYXRoaWFzYnluZW5zIC0+IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9nbG9iYWx0aGlzXG4gICAgLy8gSW4gYWxsIEVTNSsgZW5naW5lcyBnbG9iYWwgb2JqZWN0IGluaGVyaXRzIGZyb20gT2JqZWN0LnByb3RvdHlwZVxuICAgIC8vIChpZiB5b3UgYXBwcm9hY2hlZCBvbmUgdGhhdCBkb2Vzbid0IHBsZWFzZSByZXBvcnQpXG4gICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsICdfX2dsb2JhbF9fJywge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIFVuZm9ydHVuYXRlIGNhc2Ugb2YgdXBkYXRlcyB0byBPYmplY3QucHJvdG90eXBlIGJlaW5nIHJlc3RyaWN0ZWRcbiAgICAgICAgLy8gdmlhIHByZXZlbnRFeHRlbnNpb25zLCBzZWFsIG9yIGZyZWV6ZVxuICAgICAgICByZXR1cm4gbmFpdmVGYWxsYmFjaygpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyBTYWZhcmkgY2FzZSAod2luZG93Ll9fZ2xvYmFsX18gd29ya3MsIGJ1dCBfX2dsb2JhbF9fIGRvZXMgbm90KVxuICAgICAgICBpZiAoIV9fZ2xvYmFsX18pXG4gICAgICAgICAgICByZXR1cm4gbmFpdmVGYWxsYmFjaygpO1xuICAgICAgICByZXR1cm4gX19nbG9iYWxfXztcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGRlbGV0ZSBPYmplY3QucHJvdG90eXBlLl9fZ2xvYmFsX187XG4gICAgfVxufSkoKTtcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBkZWNvZGVBY2Nlc3NUb2tlbkJvZHkgfSBmcm9tICcuL1V0aWxzL1Rva2VuJztcbmltcG9ydCBnbG9iYWxUaGlzIGZyb20gJy4vVXRpbHMvZ2xvYmFsVGhpcyc7XG4vLyBAY3JlZGl0IGh0dHBzOi8vZGVyaWNrYmFpbGV5LmNvbS8yMDE2LzAzLzA5L2NyZWF0aW5nLWEtdHJ1ZS1zaW5nbGV0b24taW4tbm9kZS1qcy13aXRoLWVzNi1zeW1ib2xzL1xuLy8gQWxzbyBzZWUgZ2xvYmFsVGhpcyBmb3IgY29tbWVudHMgYWJvdXQgd2h5IHdlJ3JlIGRvaW5nIHRoaXMgaW4gdGhlIGZpcnN0IHBsYWNlLlxudmFyIEVORFBPSU5UX0tFWSA9IFN5bWJvbC5mb3IoJ3ZlcmRvY3MtZGVmYXVsdC1lbmRwb2ludCcpO1xudmFyIHJlcXVlc3RMb2dnZXIgPSBmdW5jdGlvbiAocikge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgIGNvbnNvbGUuZGVidWcoXCJbSlMtU0RLXSBcIi5jb25jYXQoci5tZXRob2QudG9VcHBlckNhc2UoKSwgXCIgXCIpLmNvbmNhdChyLmJhc2VVUkwpLmNvbmNhdChyLnVybCksIHIuZGF0YSA/IEpTT04uc3RyaW5naWZ5KHIuZGF0YSkgOiAnJyk7XG4gICAgcmV0dXJuIHI7XG59O1xuLyoqXG4gKiBWZXJkb2NzRW5kcG9pbnQgaXMgYSBjbGFzcyB3cmFwcGVyIGZvciBhIHNwZWNpZmljIGNvbm5lY3Rpb24gYW5kIGF1dGhvcml6YXRpb24gY29udGV4dCBmb3IgY2FsbGluZyB0aGUgVmVyZG9jcyBBUElzLlxuICogRW5kcG9pbnRzIGNhbiBiZSB1c2VkIGZvciBpc29sYXRlZCBzZXNzaW9uIHRhc2tzLlxuICpcbiAqIEZvciBpbnN0YW5jZSwgZXBoZW1lcmFsIHNpZ25pbmcgc2Vzc2lvbnMgbWF5IGJlIGNyZWF0ZWQgaW5kZXBlbmRlbnRseSBvZiBhIGNhbGxlcidzIHN0YXR1cyBhcyBhbiBhdXRoZW50aWNhdGVkIHVzZXIuXG4gKiBJbiB0aGF0IGNhc2UsIGFuIEVuZHBvaW50IGNhbiBiZSBjcmVhdGVkIGFuZCBhdXRoZW50aWNhdGVkLCB1c2VkIGZvciBjYWxscyByZWxhdGVkIHRvIHNpZ25pbmcgb3BlcmF0aW9ucywgdGhlblxuICogZGlzY2FyZGVkIG9uY2Ugc2lnbmluZyBpcyBjb21wbGV0ZS5cbiAqXG4gKiBOb3RlIHRoYXQgZW5kcG9pbnQgY29uZmlndXJhdGlvbiBmdW5jdGlvbnMgcmV0dXJuIHRoZSBpbnN0YW5jZSwgc28gdGhleSBjYW4gYmUgY2hhaW5lZCwgZS5nLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7VmVyZG9jc0VuZHBvaW50fSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvSFRUUCc7XG4gKlxuICogY29uc3QgZW5kcG9pbnQgPSBuZXcgVmVyZG9jc0VuZHBvaW50KCk7XG4gKiBlbmRwb2ludFxuICogICAgIC5zZXRTZXNzaW9uVHlwZSgnc2lnbmluZycpXG4gKiAgICAgLmxvZ1JlcXVlc3RzKHRydWUpXG4gKiAgICAgLnNldENsaWVudElEKCcxMjM0KVxuICogICAgIC5zZXRUaW1lb3V0KDUwMDApO1xuICogYGBgXG4gKi9cbnZhciBWZXJkb2NzRW5kcG9pbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFZlcmRvY3NFbmRwb2ludCB0byBjYWxsIFZlcmRvY3MgcGxhdGZvcm0gc2VydmljZXMuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogaW1wb3J0IHtWZXJkb2NzRW5kcG9pbnR9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9IVFRQJztcbiAgICAgKiBjb25zdCBlbmRwb2ludCA9IG5ldyBWZXJkb2NzRW5kcG9pbnQoKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBWZXJkb2NzRW5kcG9pbnQob3B0aW9ucykge1xuICAgICAgICB0aGlzLmVudmlyb25tZW50ID0gJ3ZlcmRvY3MnO1xuICAgICAgICB0aGlzLnNlc3Npb25UeXBlID0gJ3VzZXInO1xuICAgICAgICB0aGlzLmJhc2VVUkwgPSAnaHR0cHM6Ly9hcGkudmVyZG9jcy5jb20nO1xuICAgICAgICB0aGlzLmNsaWVudElEID0gJ25vdC1zZXQnO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSAxNTAwMDtcbiAgICAgICAgdGhpcy50b2tlbiA9IG51bGw7XG4gICAgICAgIHRoaXMubmV4dExpc3RlbmVySWQgPSAwO1xuICAgICAgICB0aGlzLnNlc3Npb25MaXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMucmVxdWVzdExvZ2dlcklkID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjdXJyZW50IHVzZXIgc2Vzc2lvbiwgb3IgbnVsbCBpZiBub3QgYXV0aGVudGljYXRlZC4gTWF5IGJlIGVpdGhlciBhIFVzZXIgb3IgU2lnbmluZyBzZXNzaW9uLiBJZiBzZXQsIHRoZVxuICAgICAgICAgKiBwcmVzZW5jZSBvZiB0aGUgYGRvY3VtZW50X2lkYCBmaWVsZCBjYW4gYmUgdXNlZCB0byBkaWZmZXJlbnRpYXRlIHRoZSB0eXBlcy4gT25seSBzaWduaW5nIHNlc3Npb25zIGFyZSBhc3NvY2lhdGVkXG4gICAgICAgICAqIHdpdGggRW52ZWxvcGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXNzaW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5iYXNlVVJMID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5iYXNlVVJMKSB8fCAnaHR0cHM6Ly9hcGkudmVyZG9jcy5jb20nO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXQpIHx8IDE1MDAwO1xuICAgICAgICB0aGlzLmVudmlyb25tZW50ID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5lbnZpcm9ubWVudCkgfHwgJ3ZlcmRvY3MnO1xuICAgICAgICB0aGlzLnNlc3Npb25UeXBlID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZXNzaW9uVHlwZSkgfHwgJ3VzZXInO1xuICAgICAgICB0aGlzLmNsaWVudElEID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jbGllbnRJRCkgfHwgJ25vdC1zZXQnO1xuICAgICAgICB0aGlzLmFwaSA9IGF4aW9zLmNyZWF0ZSh7IGJhc2VVUkw6IHRoaXMuYmFzZVVSTCwgdGltZW91dDogdGhpcy50aW1lb3V0IH0pO1xuICAgIH1cbiAgICBWZXJkb2NzRW5kcG9pbnQucHJvdG90eXBlLnNldERlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdsb2JhbFRoaXNbRU5EUE9JTlRfS0VZXSA9IHRoaXM7XG4gICAgfTtcbiAgICBWZXJkb2NzRW5kcG9pbnQuZ2V0RGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFnbG9iYWxUaGlzW0VORFBPSU5UX0tFWV0pIHtcbiAgICAgICAgICAgIGdsb2JhbFRoaXNbRU5EUE9JTlRfS0VZXSA9IG5ldyBWZXJkb2NzRW5kcG9pbnQoKTtcbiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmRlYnVnKCdbSlNfU0RLXSBDcmVhdGVkIGRlZmF1bHQgZW5kcG9pbnQnLCBnbG9iYWxUaGlzW0VORFBPSU5UX0tFWV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzW0VORFBPSU5UX0tFWV07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXG4gICAgICovXG4gICAgVmVyZG9jc0VuZHBvaW50LnByb3RvdHlwZS5nZXRFbnZpcm9ubWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgc2Vzc2lvbiB0eXBlLlxuICAgICAqL1xuICAgIFZlcmRvY3NFbmRwb2ludC5wcm90b3R5cGUuZ2V0U2Vzc2lvblR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlc3Npb25UeXBlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGJhc2UgVVJMLiBUaGlzIHNob3VsZCByYXJlbHkgYmUgYW55dGhpbmcgb3RoZXIgdGhhbiAnaHR0cHM6Ly9hcGkudmVyZG9jcy5jb20nLlxuICAgICAqL1xuICAgIFZlcmRvY3NFbmRwb2ludC5wcm90b3R5cGUuZ2V0QmFzZVVSTCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZVVSTDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBjbGllbnQgSUQsIGlmIHNldC5cbiAgICAgKi9cbiAgICBWZXJkb2NzRW5kcG9pbnQucHJvdG90eXBlLmdldENsaWVudElEID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRJRDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB0aW1lb3V0LlxuICAgICAqL1xuICAgIFZlcmRvY3NFbmRwb2ludC5wcm90b3R5cGUuZ2V0VGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZW91dDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBzZXNzaW9uLCBpZiBhbnkuXG4gICAgICovXG4gICAgVmVyZG9jc0VuZHBvaW50LnByb3RvdHlwZS5nZXRTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBvcGVyYXRpbmcgZW52aXJvbm1lbnQuIFRoaXMgc2hvdWxkIHJhcmVseSBiZSBhbnl0aGluZyBvdGhlciB0aGFuICd2ZXJkb2NzJy5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBpbXBvcnQge1ZlcmRvY3NFbmRwb2ludH0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL0hUVFAnO1xuICAgICAqXG4gICAgICogY29uc3QgZW5kcG9pbnQgPSBuZXcgVmVyZG9jc0VuZHBvaW50KCk7XG4gICAgICogZW5kcG9pbnQuc2V0RW52aXJvbm1lbnQoJ3ZlcmRvY3Mtc3RhZ2UnKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBWZXJkb2NzRW5kcG9pbnQucHJvdG90eXBlLnNldEVudmlyb25tZW50ID0gZnVuY3Rpb24gKGVudmlyb25tZW50KSB7XG4gICAgICAgIHRoaXMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNlc3Npb24gdHlwZS4gSW4gZ2VuZXJhbCB0aGlzIHNob3VsZCBiZSBkb25lIGltbWVkaWF0ZWx5IHdoZW4gdGhlIGVuZHBvaW50IGlzIGNyZWF0ZWQuIENoYW5naW5nIHRoZVxuICAgICAqIHNlc3Npb24gdHlwZSBtYXkgYmUgZG9uZSBhdCBhbnkgdGltZSwgYnV0IG1heSBoYXZlIHVuaW50ZW5kZWQgY29uc2VxdWVuY2VzIGlmIHRoZSBlbmRwb2ludCBpcyBzaGFyZWQgYmV0d2VlblxuICAgICAqIG11bHRpcGxlIHdpZGdldHMuXG4gICAgICpcbiAgICAgKiBDaGFuZ2luZyB0aGUgc2Vzc2lvbiB0eXBlIHdpbGwgY2xlYXIvcmVsb2FkIHRoZSBhY3Rpb24gc2Vzc2lvbi4gVGhpcyBtYXkgdHJpZ2dlciBub3RpZmljYXRpb25zIHRvIHNlc3Npb24gc3RhdGVcbiAgICAgKiBvYnNlcnZlcnMuIEFwcHMgdGhhdCB1c2Ugb2JzZXJ2ZXJzIHRvIHRyaWdnZXIgVUkgdXBkYXRlcyBzdWNoIGFzIGxvZ2dpbmcgdGhlIHVzZXIgb3V0IHNob3VsZCBiZSBwcmVwYXJlZCB0b1xuICAgICAqIGhhbmRsZSB0aGlzIGV2ZW50LlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGltcG9ydCB7VmVyZG9jc0VuZHBvaW50fSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvSFRUUCc7XG4gICAgICpcbiAgICAgKiBjb25zdCBlbmRwb2ludCA9IG5ldyBWZXJkb2NzRW5kcG9pbnQoKTtcbiAgICAgKiBlbmRwb2ludC5zZXRFbnZpcm9ubWVudCgndmVyZG9jcy1zdGFnZScpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFZlcmRvY3NFbmRwb2ludC5wcm90b3R5cGUuc2V0U2Vzc2lvblR5cGUgPSBmdW5jdGlvbiAoc2Vzc2lvblR5cGUpIHtcbiAgICAgICAgdGhpcy5zZXNzaW9uVHlwZSA9IHNlc3Npb25UeXBlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgYmFzZSBVUkwgZm9yIEFQSSBjYWxscy4gU2hvdWxkIGJlIGNhbGxlZCBvbmx5IHVwb24gZGlyZWN0aW9uIGZyb20gVmVyZG9jcyBDdXN0b21lciBTb2x1dGlvbnMgRW5naW5lZXJpbmcuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogaW1wb3J0IHtWZXJkb2NzRW5kcG9pbnR9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9IVFRQJztcbiAgICAgKlxuICAgICAqIGNvbnN0IGVuZHBvaW50ID0gbmV3IFZlcmRvY3NFbmRwb2ludCgpO1xuICAgICAqIGVuZHBvaW50LnNldEJhc2VVUkwoJ2h0dHBzOi8vYXBpLnZlcmRvY3MuY29tJyk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgVmVyZG9jc0VuZHBvaW50LnByb3RvdHlwZS5zZXRCYXNlVVJMID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICB0aGlzLmFwaS5kZWZhdWx0cy5iYXNlVVJMID0gdXJsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgQ2xpZW50IElEIGZvciBWZXJkb2NzIEFQSSBjYWxscy5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBpbXBvcnQge1ZlcmRvY3NFbmRwb2ludH0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL0hUVFAnO1xuICAgICAqXG4gICAgICogY29uc3QgZW5kcG9pbnQgPSBuZXcgVmVyZG9jc0VuZHBvaW50KCk7XG4gICAgICogZW5kcG9pbnQuc2V0Q2xpZW50SUQoJzEyMzQpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFZlcmRvY3NFbmRwb2ludC5wcm90b3R5cGUuc2V0Q2xpZW50SUQgPSBmdW5jdGlvbiAoY2xpZW50SUQpIHtcbiAgICAgICAgdGhpcy5jbGllbnRJRCA9IGNsaWVudElEO1xuICAgICAgICB0aGlzLmFwaS5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1DbGllbnQtSUQnXSA9IGNsaWVudElEO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgdGltZW91dCBmb3IgQVBJIGNhbGxzIGluIG1pbGxpc2Vjb25kcy4gNTAwMC0yMDAwMG1zIGlzIHJlY29tbWVuZGVkIGZvciBtb3N0IHB1cnBvc2VzLiAxNTAwMG1zIGlzIHRoZSBkZWZhdWx0LlxuICAgICAqIE5vdGUgdGhhdCBzb21lIGNhbGxzIG1heSBpbnZvbHZlIHJlbmRlcmluZyBvcGVyYXRpb25zIHRoYXQgcmVxdWlyZSBzb21lIHRpbWUgdG8gY29tcGxldGUsIHNvIHZlcnkgc2hvcnQgdGltZW91dHNcbiAgICAgKiBhcmUgbm90IHJlY29tbWVuZGVkLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGltcG9ydCB7VmVyZG9jc0VuZHBvaW50fSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvSFRUUCc7XG4gICAgICpcbiAgICAgKiBjb25zdCBlbmRwb2ludCA9IG5ldyBWZXJkb2NzRW5kcG9pbnQoKTtcbiAgICAgKiBlbmRwb2ludC5zZXRUaW1lb3V0KDMwMDApO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFZlcmRvY3NFbmRwb2ludC5wcm90b3R5cGUuc2V0VGltZW91dCA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIHRoaXMuYXBpLmRlZmF1bHRzLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVuYWJsZSBvciBkaXNhYmxlIHJlcXVlc3QgbG9nZ2luZy4gVGhpcyBtYXkgZXhwb3NlIHNlbnNpdGl2ZSBkYXRhIGluIHRoZSBjb25zb2xlIGxvZywgc28gaXQgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGltcG9ydCB7VmVyZG9jc0VuZHBvaW50fSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvSFRUUCc7XG4gICAgICpcbiAgICAgKiBjb25zdCBlbmRwb2ludCA9IG5ldyBWZXJkb2NzRW5kcG9pbnQoKTtcbiAgICAgKiBlbmRwb2ludC5sb2dSZXF1ZXN0cyh0cnVlKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBWZXJkb2NzRW5kcG9pbnQucHJvdG90eXBlLmxvZ1JlcXVlc3RzID0gZnVuY3Rpb24gKGVuYWJsZSkge1xuICAgICAgICBpZiAoZW5hYmxlICYmIHRoaXMucmVxdWVzdExvZ2dlcklkID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RMb2dnZXJJZCA9IHRoaXMuYXBpLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShyZXF1ZXN0TG9nZ2VyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghZW5hYmxlICYmIHRoaXMucmVxdWVzdExvZ2dlcklkICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFwaS5pbnRlcmNlcHRvcnMucmVxdWVzdC5lamVjdCh0aGlzLnJlcXVlc3RMb2dnZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4gdGhhdCB3aWxsIGJlIHVzZWQgZm9yIFZlcmRvY3MgQVBJIGNhbGxzLiBUaGlzIHdpbGwgYWxzbyBzZXQgdGhlIHNlc3Npb24gbWV0YWRhdGFcbiAgICAgKiBhbmQgbm90aWZ5IGFueSBsaXN0ZW5lcnMgb2YgdGhlIG5ldyBkYXRhLlxuICAgICAqXG4gICAgICogSWYgdGhpcyBFbmRwb2ludCB3aWxsIGJlIHVzZWQgZm9yIG5vbi1kZWZhdWx0IHB1cnBvc2VzIChlLmcuIHNpZ25pbmcsIG9yIGluIGFuIGFsdGVybmF0ZSBlbnZpcm9ubWVudCkgdGhvc2VcbiAgICAgKiBzZXR0aW5ncyBzaG91bGQgYmUgbWFkZSBiZWZvcmUgY2FsbGluZyB0aGlzLiBTZXNzaW9ucyBhcmUgcGVyc2lzdGVkIHRvIGxvY2FsU3RvcmFnZSwgYW5kIHRoZSBlbnZpcm9ubWVudCBhbmRcbiAgICAgKiB0eXBlIGJlY29tZSBwYXJ0IG9mIHRoZSBzdG9yYWdlIGtleS5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBpbXBvcnQge1ZlcmRvY3NFbmRwb2ludH0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL0hUVFAnO1xuICAgICAqXG4gICAgICogY29uc3QgZW5kcG9pbnQgPSBuZXcgVmVyZG9jc0VuZHBvaW50KCk7XG4gICAgICogZW5kcG9pbnQuc2V0VG9rZW4oYWNjZXNzVG9rZW4pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIFZlcmRvY3NFbmRwb2ludC5wcm90b3R5cGUuc2V0VG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xlYXJTZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlc3Npb24gPSBkZWNvZGVBY2Nlc3NUb2tlbkJvZHkodG9rZW4pO1xuICAgICAgICBpZiAoc2Vzc2lvbiA9PT0gbnVsbCB8fCAoc2Vzc2lvbi5leHAgJiYgc2Vzc2lvbi5leHAgKiAxMDAwIDwgbmV3IERhdGUoKS5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgICB3aW5kb3cuY29uc29sZS53YXJuKCdbSlNfU0RLXSBJZ25vcmluZyBhdHRlbXB0IHRvIHVzZSBleHBpcmVkIHNlc3Npb24gdG9rZW4nKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsZWFyU2Vzc2lvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgICAgaWYgKHRoaXMuc2Vzc2lvblR5cGUgPT09ICd1c2VyJykge1xuICAgICAgICAgICAgdGhpcy5hcGkuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9IFwiQmVhcmVyIFwiLmNvbmNhdCh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFwaS5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5zaWduZXIgPSBcIkJlYXJlciBcIi5jb25jYXQodG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuc2Vzc2lvblN0b3JhZ2VLZXkoKSwgdG9rZW4pO1xuICAgICAgICB0aGlzLm5vdGlmeVNlc3Npb25MaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGN1cnJlbnQgc2Vzc2lvbiB0b2tlbiwgaWYgYW55LiBUb2tlbnMgc2hvdWxkIHJhcmVseSBiZSB1c2VkIGZvciBkaXJlY3QgYWN0aW9ucywgYnV0IHRoaXMgaXNcbiAgICAgKiByZXF1aXJlZCBieSB0aGUgYDxWZXJkb2NzVmlldz5gIGFuZCBvdGhlciBjb21wb25lbnRzIHRvIGF1dGhvcml6ZSByZXF1ZXN0cyB0byByYXcgUERGIGZpbGVzLlxuICAgICAqL1xuICAgIFZlcmRvY3NFbmRwb2ludC5wcm90b3R5cGUuZ2V0VG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuO1xuICAgIH07XG4gICAgVmVyZG9jc0VuZHBvaW50LnByb3RvdHlwZS5zZXNzaW9uU3RvcmFnZUtleSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwidmVyZG9jcy1zZXNzaW9uLVwiLmNvbmNhdCh0aGlzLmdldFNlc3Npb25UeXBlKCksIFwiLVwiKS5jb25jYXQodGhpcy5nZXRFbnZpcm9ubWVudCgpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBhY3RpdmUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBWZXJkb2NzRW5kcG9pbnQucHJvdG90eXBlLmNsZWFyU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5zZXNzaW9uU3RvcmFnZUtleSgpKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuYXBpLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb247XG4gICAgICAgIGRlbGV0ZSB0aGlzLmFwaS5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5zaWduZXI7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IG51bGw7XG4gICAgICAgIHRoaXMudG9rZW4gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeVNlc3Npb25MaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhciB0aGUgYWN0aXZlIHNpZ25pbmcgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBWZXJkb2NzRW5kcG9pbnQucHJvdG90eXBlLmNsZWFyU2lnbmVyU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5zZXNzaW9uU3RvcmFnZUtleSgpKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuYXBpLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb247XG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IG51bGw7XG4gICAgICAgIHRoaXMudG9rZW4gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeVNlc3Npb25MaXN0ZW5lcnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBWZXJkb2NzRW5kcG9pbnQucHJvdG90eXBlLm5vdGlmeVNlc3Npb25MaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc2Vzc2lvbkxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcihfdGhpcywgX3RoaXMuc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIE5PT1BcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gc2Vzc2lvbiBzdGF0ZSBjaGFuZ2UgZXZlbnRzLlxuICAgICAqL1xuICAgIFZlcmRvY3NFbmRwb2ludC5wcm90b3R5cGUub25TZXNzaW9uQ2hhbmdlZCA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBUaGVyZSdzIG5vIHZhbHVlIGluIHJhbmRvbWl6aW5nIHRoaXMsIGEgc2ltcGxlIGNvdW50ZXIgaXMgZmluZVxuICAgICAgICB0aGlzLm5leHRMaXN0ZW5lcklkKys7XG4gICAgICAgIHZhciBsaXN0ZW5lclN5bWJvbCA9IFN5bWJvbC5mb3IoJycgKyB0aGlzLm5leHRMaXN0ZW5lcklkKTtcbiAgICAgICAgdGhpcy5zZXNzaW9uTGlzdGVuZXJzLnNldChsaXN0ZW5lclN5bWJvbCwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuc2Vzc2lvbkxpc3RlbmVycy5kZWxldGUobGlzdGVuZXJTeW1ib2wpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTG9hZCBhIHBlcnNpc3RlZCBzZXNzaW9uIGZyb20gbG9jYWxTdG9yYWdlLiBUeXBpY2FsbHkgY2FsbGVkIG9uY2UgYWZ0ZXIgdGhlIGVuZHBvaW50IGlzIGNvbmZpZ3VyZWQgd2hlbiB0aGUgYXBwXG4gICAgICogb3IgY29tcG9uZW50IHN0YXJ0cy5cbiAgICAgKi9cbiAgICBWZXJkb2NzRW5kcG9pbnQucHJvdG90eXBlLmxvYWRTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnNlc3Npb25TdG9yYWdlS2V5KCkpO1xuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGVhclNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zZXRUb2tlbih0b2tlbik7XG4gICAgfTtcbiAgICByZXR1cm4gVmVyZG9jc0VuZHBvaW50O1xufSgpKTtcbmV4cG9ydCB7IFZlcmRvY3NFbmRwb2ludCB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==