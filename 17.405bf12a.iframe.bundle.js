/*! For license information please see 17.405bf12a.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"./dist/esm/Envelopes-b031f847.js":function(module,__webpack_exports__,__webpack_require__){"use strict";(function(Buffer){__webpack_require__.d(__webpack_exports__,"a",(function(){return getEnvelope})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getEnvelopeFile})),__webpack_require__.d(__webpack_exports__,"c",(function(){return getSigningSession})),__webpack_require__.d(__webpack_exports__,"d",(function(){return updateEnvelopeField}));__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js");var _VerdocsEndpoint_dac04424_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./dist/esm/VerdocsEndpoint-dac04424.js"),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=function(thisArg,body){var f,y,t,g,_={label:0,sent:function sent(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},getSigningSession=function getSigningSession(endpoint,params){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.get("/envelopes/".concat(params.envelopeId,"/recipients/").concat(encodeURIComponent(params.roleId),"/invitation/").concat(params.inviteCode)).then((function(r){var _a,signerToken=(null===(_a=r.headers)||void 0===_a?void 0:_a.signer_token)||"",session=Object(_VerdocsEndpoint_dac04424_js__WEBPACK_IMPORTED_MODULE_11__.b)(signerToken);return endpoint.setToken(signerToken),{recipient:r.data,session:session,signerToken:signerToken}}))]}))}))},getEnvelope=function getEnvelope(endpoint,envelopeId){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.get("/envelopes/".concat(envelopeId)).then((function(r){return r.data}))]}))}))},getEnvelopeFile=function getEnvelopeFile(endpoint,envelopeId,documentId){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.get("/envelopes/".concat(envelopeId,"/envelope_documents/").concat(documentId,"?file=true"),{responseType:"arraybuffer"}).then((function(r){return Buffer.from(r.data,"binary").toString("base64")}))]}))}))},updateEnvelopeField=function updateEnvelopeField(endpoint,envelopeId,fieldName,value){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.put("/envelopes/".concat(envelopeId,"/fields/").concat(fieldName),value).then((function(r){return r.data}))]}))}))}}).call(this,__webpack_require__("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer)},"./dist/esm/errors-9b5498c8.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return SDKError}));__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.reflect.construct.js"),__webpack_require__("./node_modules/core-js/modules/es.map.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}function _possibleConstructorReturn(self,call){if(call&&("object"==typeof call||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(self)}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _wrapNativeSuper(Class){var _cache="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function _wrapNativeSuper(Class){if(null===Class||!function _isNativeFunction(fn){return-1!==Function.toString.call(fn).indexOf("[native code]")}(Class))return Class;if("function"!=typeof Class)throw new TypeError("Super expression must either be null or a function");if(void 0!==_cache){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper)}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper,Class)},_wrapNativeSuper(Class)}function _construct(Parent,args,Class){return _construct=_isNativeReflectConstruct()?Reflect.construct.bind():function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var instance=new(Function.bind.apply(Parent,a));return Class&&_setPrototypeOf(instance,Class.prototype),instance},_construct.apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)},_getPrototypeOf(o)}var SDKError=function(_Error){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}(SDKError,_Error);var _super=function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}(SDKError);function SDKError(message,statusCode,response){var _this;return function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,SDKError),(_this=_super.call(this,message||"SDK Error")).response=response,_this.statusCode=statusCode,Object.setPrototypeOf(_assertThisInitialized(_this),(this instanceof SDKError?this.constructor:void 0).prototype),_this}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(SDKError)}(_wrapNativeSuper(Error))},"./dist/esm/index-fd7b8a34.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return createStore}));__webpack_require__("./node_modules/core-js/modules/es.array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.string.includes.js"),__webpack_require__("./node_modules/core-js/modules/web.timers.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.map.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.entries.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js");var _index_f78d163d_js__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__("./dist/esm/index-f78d163d.js");function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var isConnected=function isConnected(maybeElement){return!("isConnected"in maybeElement)||maybeElement.isConnected},cleanupElements=function debounce(fn,ms){var timeoutId;return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];timeoutId&&clearTimeout(timeoutId),timeoutId=setTimeout((function(){timeoutId=0,fn.apply(void 0,args)}),ms)}}((function(map){var _step,_iterator=_createForOfIteratorHelper(map.keys());try{for(_iterator.s();!(_step=_iterator.n()).done;){var key=_step.value;map.set(key,map.get(key).filter(isConnected))}}catch(err){_iterator.e(err)}finally{_iterator.f()}}),2e3),unwrap=function unwrap(val){return"function"==typeof val?val():val},removeFromArray=function removeFromArray(array,item){var index=array.indexOf(item);index>=0&&(array[index]=array[array.length-1],array.length--)},createStore=function createStore(defaultState,shouldUpdate){var map=function createObservableMap(defaultState){var shouldUpdate=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(a,b){return a!==b},unwrappedState=unwrap(defaultState),states=new Map(Object.entries(null!=unwrappedState?unwrappedState:{})),handlers={dispose:[],get:[],set:[],reset:[]},reset=function reset(){var _a;states=new Map(Object.entries(null!==(_a=unwrap(defaultState))&&void 0!==_a?_a:{})),handlers.reset.forEach((function(cb){return cb()}))},dispose=function dispose(){handlers.dispose.forEach((function(cb){return cb()})),reset()},_get=function get(propName){return handlers.get.forEach((function(cb){return cb(propName)})),states.get(propName)},_set=function set(propName,value){var oldValue=states.get(propName);shouldUpdate(value,oldValue,propName)&&(states.set(propName,value),handlers.set.forEach((function(cb){return cb(propName,value,oldValue)})))},state="undefined"==typeof Proxy?{}:new Proxy(unwrappedState,{get:function get(_,propName){return _get(propName)},ownKeys:function ownKeys(_){return Array.from(states.keys())},getOwnPropertyDescriptor:function getOwnPropertyDescriptor(){return{enumerable:!0,configurable:!0}},has:function has(_,propName){return states.has(propName)},set:function set(_,propName,value){return _set(propName,value),!0}}),on=function on(eventName,callback){return handlers[eventName].push(callback),function(){removeFromArray(handlers[eventName],callback)}},onChange=function onChange(propName,cb){var unSet=on("set",(function(key,newValue){key===propName&&cb(newValue)})),unReset=on("reset",(function(){return cb(unwrap(defaultState)[propName])}));return function(){unSet(),unReset()}},use=function use(){for(var _len2=arguments.length,subscriptions=new Array(_len2),_key2=0;_key2<_len2;_key2++)subscriptions[_key2]=arguments[_key2];var unsubs=subscriptions.reduce((function(unsubs,subscription){return subscription.set&&unsubs.push(on("set",subscription.set)),subscription.get&&unsubs.push(on("get",subscription.get)),subscription.reset&&unsubs.push(on("reset",subscription.reset)),subscription.dispose&&unsubs.push(on("dispose",subscription.dispose)),unsubs}),[]);return function(){return unsubs.forEach((function(unsub){return unsub()}))}};return{state:state,get:_get,set:_set,on:on,onChange:onChange,use:use,dispose:dispose,reset:reset,forceUpdate:function forceUpdate(key){var oldValue=states.get(key);handlers.set.forEach((function(cb){return cb(key,oldValue,oldValue)}))}}}(defaultState,shouldUpdate);return map.use(function stencilSubscription(){if("function"!=typeof _index_f78d163d_js__WEBPACK_IMPORTED_MODULE_21__.g)return{};var elmsToUpdate=new Map;return{dispose:function dispose(){return elmsToUpdate.clear()},get:function get(propName){var elm=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_21__.g)();elm&&function appendToMap(map,propName,value){var items=map.get(propName);items?items.includes(value)||items.push(value):map.set(propName,[value])}(elmsToUpdate,propName,elm)},set:function set(propName){var elements=elmsToUpdate.get(propName);elements&&elmsToUpdate.set(propName,elements.filter(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_21__.f)),cleanupElements(elmsToUpdate)},reset:function reset(){elmsToUpdate.forEach((function(elms){return elms.forEach(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_21__.f)})),cleanupElements(elmsToUpdate)}}}()),map}},"./dist/esm/utils-99a3c1f0.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getRoleIndex})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getFieldId})),__webpack_require__.d(__webpack_exports__,"c",(function(){return rescale})),__webpack_require__.d(__webpack_exports__,"d",(function(){return fullNameToInitials})),__webpack_require__.d(__webpack_exports__,"e",(function(){return getFieldSettings})),__webpack_require__.d(__webpack_exports__,"f",(function(){return integerSequence})),__webpack_require__.d(__webpack_exports__,"g",(function(){return renderDocumentField})),__webpack_require__.d(__webpack_exports__,"h",(function(){return setControlStyles})),__webpack_require__.d(__webpack_exports__,"i",(function(){return updateCssTransform}));__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.array.fill.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match-all.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js");function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function rescale(r,n){return r*n}var integerSequence=function integerSequence(start,count){return Array(count).fill(1).map((function(_,index){return index+start}))},fullNameToInitials=function fullNameToInitials(name){return name.split(" ").map((function(word){return word[0]})).join("")},setControlStyles=function setControlStyles(el,field,xScale,yScale,option){var _a,_b,_c,_d,settings=field.setting||field.settings,_settings$x=settings.x,x=void 0===_settings$x?0:_settings$x,_settings$y=settings.y,y=void 0===_settings$y?0:_settings$y,_settings$width=settings.width,width=void 0===_settings$width?function defaultWidth(field){switch(field.type){case"attachment":case"payment":return 24;case"checkbox":case"checkbox_group":case"radio_button_group":return 14;case"signature":case"initial":return 82}return 150}(field):_settings$width,_settings$height=settings.height,height=void 0===_settings$height?function defaultHeight(field){switch(field.type){case"attachment":case"payment":return 24;case"checkbox":case"checkbox_group":case"radio_button_group":return 14;case"signature":case"initial":return 41}return 50}(field):_settings$height,optionSettings=void 0!==option&&settings.options[option]?settings.options[option]:null;optionSettings&&(x=null!==(_a=optionSettings.x)&&void 0!==_a?_a:x,y=null!==(_b=optionSettings.y)&&void 0!==_b?_b:y,width=null!==(_c=optionSettings.width)&&void 0!==_c?_c:width,height=null!==(_d=optionSettings.height)&&void 0!==_d?_d:height),el.style.width=width+"px",el.style.height=height+"px",el.style.position="absolute",el.style.left=rescale(xScale,x)+"px",el.style.bottom=rescale(yScale,y)+"px",el.style.transform="scale("+xScale+", "+yScale+")"},getFieldId=function getFieldId(field){return"verdocs-doc-fld-"+field.name},getFieldOptionId=function getFieldOptionId(field,index){return"verdocs-doc-fld-"+field.name+"-"+index},renderDocumentField=function renderDocumentField(field,docPage,roleIndex,handleFieldChange,disabled){var editable=arguments.length>5&&void 0!==arguments[5]&&arguments[5],draggable=arguments.length>6&&void 0!==arguments[6]&&arguments[6],controlsDiv=document.getElementById(docPage.containerId+"-controls");if(controlsDiv)switch(field.type){case"attachment":case"date":case"dropdown":case"initial":case"payment":case"signature":case"timestamp":case"textarea":case"textbox":var id=getFieldId(field),existingField=document.getElementById(id);if(existingField)return void setControlStyles(existingField,field,docPage.xScale,docPage.yScale);var el=document.createElement("verdocs-field-"+field.type);return el.field=field,el.setAttribute("id",id),el.setAttribute("roleindex",roleIndex),disabled&&el.setAttribute("disabled",!0),editable&&el.setAttribute("editable",!0),draggable&&el.setAttribute("draggable",!0),el.addEventListener("fieldChange",(function(e){return handleFieldChange(field,e)})),setControlStyles(el,field,docPage.xScale,docPage.yScale),controlsDiv.appendChild(el),el;case"checkbox_group":(field.settings||field.setting||{}).options.forEach((function(_,checkboxIndex){var id=getFieldOptionId(field,checkboxIndex),existingField=document.getElementById(id);if(!existingField){var cbEl=document.createElement("verdocs-field-checkbox");return cbEl.field=field,cbEl.setAttribute("id",id),cbEl.setAttribute("roleindex",roleIndex),cbEl.setAttribute("option",checkboxIndex),disabled&&cbEl.setAttribute("disabled",!0),cbEl.addEventListener("fieldChange",(function(e){return handleFieldChange(field,e)})),setControlStyles(cbEl,field,docPage.xScale,docPage.yScale),controlsDiv.appendChild(cbEl),cbEl}setControlStyles(existingField,field,docPage.xScale,docPage.yScale)}));break;case"radio_button_group":(field.settings||field.setting||{}).options.forEach((function(_,buttonIndex){var id=getFieldOptionId(field,buttonIndex),existingField=document.getElementById(id);if(!existingField){var cbEl=document.createElement("verdocs-field-radio-button");return cbEl.field=field,cbEl.setAttribute("id",id),cbEl.setAttribute("roleindex",roleIndex),cbEl.setAttribute("option",buttonIndex),disabled&&cbEl.setAttribute("disabled",!0),cbEl.addEventListener("fieldChange",(function(e){return handleFieldChange(field,e)})),setControlStyles(cbEl,field,docPage.xScale,docPage.yScale,buttonIndex),controlsDiv.appendChild(cbEl),cbEl}setControlStyles(existingField,field,docPage.xScale,docPage.yScale)}));break;default:return console.log("[PREVIEW] Skipping unsupported field type",field),null}},getRoleIndex=function getRoleIndex(roles,role){return roles.indexOf(role)||0},getFieldSettings=function getFieldSettings(field){return field.setting?field.setting:field.settings?field.settings:{x:0,y:0,required:!1,disabled:!1,result:"",value:""}},updateCssTransform=function updateCssTransform(el,key,value){var components=_toConsumableArray(el.style.transform.matchAll(/(\w+)\(([^)]*)\)/gi));el.style.transform=[components.filter((function(component){return component[1]!==key})).map((function(component){return component[0]})),key+"("+value+")"].join(" ")}},"./dist/esm/verdocs-view.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_view",(function(){return VerdocsView}));__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.async-iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js");var _index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__=__webpack_require__("./dist/esm/index-f78d163d.js"),_Envelopes_b031f847_js__WEBPACK_IMPORTED_MODULE_30__=__webpack_require__("./dist/esm/Envelopes-b031f847.js"),_VerdocsEndpoint_dac04424_js__WEBPACK_IMPORTED_MODULE_32__=(__webpack_require__("./dist/esm/Types-ab9f6af8.js"),__webpack_require__("./dist/esm/VerdocsEndpoint-dac04424.js")),_utils_99a3c1f0_js__WEBPACK_IMPORTED_MODULE_33__=__webpack_require__("./dist/esm/utils-99a3c1f0.js"),_index_fd7b8a34_js__WEBPACK_IMPORTED_MODULE_34__=__webpack_require__("./dist/esm/index-fd7b8a34.js"),_errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_35__=__webpack_require__("./dist/esm/errors-9b5498c8.js");function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function define(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(void 0===method)return context.delegate=null,"throw"===methodName&&delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}var _createStore=Object(_index_fd7b8a34_js__WEBPACK_IMPORTED_MODULE_34__.a)({envelope:null,loadProgress:0,loading:!0,error:"",roleNames:[],dirty:!1}),state=_createStore.state;(0,_createStore.onChange)("envelope",function(){var _ref=_asyncToGenerator(_regeneratorRuntime().mark((function _callee(newEnvelope){return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:if(newEnvelope){_context.next=8;break}return console.log("[ENVELOPESTORE] Clearing envelope"),state.roleNames=[],state.dirty=!1,state.loading=!1,state.error="",state.loadProgress=0,_context.abrupt("return");case 8:console.log("[ENVELOPESTORE] Loaded envelope",newEnvelope),state.roleNames=newEnvelope.recipients.map((function(recipient){return recipient.role_name})),console.log("[ENVELOPESTORE] Loaded roles",state.roleNames);case 11:case"end":return _context.stop()}}),_callee)})));return function(_x){return _ref.apply(this,arguments)}}());var getEnvelopeById=function(){var _ref2=_asyncToGenerator(_regeneratorRuntime().mark((function _callee2(endpoint,envelopeId){var _a,envelope;return _regeneratorRuntime().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:if(state.envelope=null,envelopeId){_context2.next=4;break}return console.log("[ENVELOPES] Missing required envelope ID"),_context2.abrupt("return");case 4:return state.error="",state.loading=!0,_context2.prev=6,console.log("[ENVELOPES] Loading envelope "+envelopeId),_context2.next=10,Object(_Envelopes_b031f847_js__WEBPACK_IMPORTED_MODULE_30__.a)(endpoint,envelopeId);case 10:if(envelope=_context2.sent){_context2.next=14;break}return console.log("[ENVELOPES] Unable to load envelope"),_context2.abrupt("return");case 14:state.envelope=envelope,state.loading=!1,_context2.next=24;break;case 18:throw _context2.prev=18,_context2.t0=_context2.catch(6),state.loading=!1,state.error=401===(null===(_a=null===_context2.t0||void 0===_context2.t0?void 0:_context2.t0.response)||void 0===_a?void 0:_a.status)?"Authentication required":_context2.t0.message,console.log("[ENVELOPES] Error loading envelope",_context2.t0),_context2.t0;case 24:case"end":return _context2.stop()}}),_callee2,null,[[6,18]])})));return function getEnvelopeById(_x2,_x3){return _ref2.apply(this,arguments)}}(),VerdocsView=function(){function VerdocsView(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsView),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.j)(this,hostRef),this.sdkError=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.e)(this,"sdkError",7),this.endpoint=_VerdocsEndpoint_dac04424_js__WEBPACK_IMPORTED_MODULE_32__.a.getDefault(),this.envelopeId=""}var _handleFieldChange,_componentDidLoad;return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsView,[{key:"componentWillLoad",value:function componentWillLoad(){this.endpoint.loadSession()}},{key:"componentDidLoad",value:(_componentDidLoad=_asyncToGenerator(_regeneratorRuntime().mark((function _callee3(){var _a,_b,_c;return _regeneratorRuntime().wrap((function _callee3$(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:if(this.envelopeId){_context3.next=3;break}return console.error("[VIEW] Missing reuqired envelopeId"),_context3.abrupt("return");case 3:return _context3.prev=3,_context3.next=6,getEnvelopeById(this.endpoint,this.envelopeId);case 6:_context3.next=11;break;case 8:_context3.prev=8,_context3.t0=_context3.catch(3),null===(_a=this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_35__.a(_context3.t0.message,null===(_b=_context3.t0.response)||void 0===_b?void 0:_b.status,null===(_c=_context3.t0.response)||void 0===_c?void 0:_c.data));case 11:case"end":return _context3.stop()}}),_callee3,this,[[3,8]])}))),function componentDidLoad(){return _componentDidLoad.apply(this,arguments)})},{key:"handleFieldChange",value:(_handleFieldChange=_asyncToGenerator(_regeneratorRuntime().mark((function _callee4(field,e,optionId){var options,_this=this;return _regeneratorRuntime().wrap((function _callee4$(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:console.log("fieldChange",field,e),_context4.t0=field.type,_context4.next="textbox"===_context4.t0?4:"checkbox_group"===_context4.t0?6:"radio_button_group"===_context4.t0?8:"dropdown"===_context4.t0?11:"initial"===_context4.t0?13:"signature"===_context4.t0?15:17;break;case 4:return Object(_Envelopes_b031f847_js__WEBPACK_IMPORTED_MODULE_30__.d)(this.endpoint,this.envelopeId,field.name,{prepared:!1,value:e.detail}).then((function(r){return console.log("Update result",r)})).catch((function(e){var _a,_b,_c,_d,_e,_f;null===(_a=_this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_35__.a(e.message,null===(_b=e.response)||void 0===_b?void 0:_b.status,null===(_c=e.response)||void 0===_c?void 0:_c.data)),401===(null===(_d=e.response)||void 0===_d?void 0:_d.status)&&"jwt expired"===(null===(_f=null===(_e=e.response)||void 0===_e?void 0:_e.data)||void 0===_f?void 0:_f.error)&&console.log("jwt expired"),console.log("Error updating",e)})),_context4.abrupt("break",17);case 6:return Object(_Envelopes_b031f847_js__WEBPACK_IMPORTED_MODULE_30__.d)(this.endpoint,this.envelopeId,field.name,{prepared:!1,value:{options:[{id:optionId,checked:e.detail}]}}).then((function(r){return console.log("Update result",r)})).catch((function(e){var _a,_b,_c;null===(_a=_this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_35__.a(e.message,null===(_b=e.response)||void 0===_b?void 0:_b.status,null===(_c=e.response)||void 0===_c?void 0:_c.data)),console.log("Error updating",e)})),_context4.abrupt("break",17);case 8:return options=field.settings.options.map((function(option){return{id:option.id,selected:optionId===option.id}})),Object(_Envelopes_b031f847_js__WEBPACK_IMPORTED_MODULE_30__.d)(this.endpoint,this.envelopeId,field.name,{prepared:!1,value:{options:options}}).then((function(r){return console.log("Update result",r)})).catch((function(e){var _a,_b,_c;null===(_a=_this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_35__.a(e.message,null===(_b=e.response)||void 0===_b?void 0:_b.status,null===(_c=e.response)||void 0===_c?void 0:_c.data)),console.log("Error updating",e)})),_context4.abrupt("break",17);case 11:return Object(_Envelopes_b031f847_js__WEBPACK_IMPORTED_MODULE_30__.d)(this.endpoint,this.envelopeId,field.name,{prepared:!1,value:e.detail}).then((function(r){return console.log("Update result",r)})).catch((function(e){var _a,_b,_c;null===(_a=_this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_35__.a(e.message,null===(_b=e.response)||void 0===_b?void 0:_b.status,null===(_c=e.response)||void 0===_c?void 0:_c.data)),console.log("Error updating",e)})),_context4.abrupt("break",17);case 13:return console.log("Got initial",e.detail),_context4.abrupt("break",17);case 15:return console.log("Got signature",e.detail),_context4.abrupt("break",17);case 17:case"end":return _context4.stop()}}),_callee4,this)}))),function handleFieldChange(_x4,_x5,_x6){return _handleFieldChange.apply(this,arguments)})},{key:"handlePageRendered",value:function handlePageRendered(e){var _this2=this,pageInfo=e.detail;console.log("[SIGN] Page rendered",pageInfo),state.envelope.recipients.map((function(recipient){var fields=recipient.fields.filter((function(field){return field.page===pageInfo.pageNumber}));console.log("[SIGN] Fields on page",fields),fields.forEach((function(field){var el=Object(_utils_99a3c1f0_js__WEBPACK_IMPORTED_MODULE_33__.g)(field,pageInfo,Object(_utils_99a3c1f0_js__WEBPACK_IMPORTED_MODULE_33__.a)(state.roleNames,field.recipient_role),_this2.handleFieldChange,!0,!1,!1);console.log("rendered element",el),el&&(el.addEventListener("recipientChanged",(function(e){el.setAttribute("roleindex",Object(_utils_99a3c1f0_js__WEBPACK_IMPORTED_MODULE_33__.a)(state.roleNames,e.detail))})),el.setAttribute("xScale",pageInfo.xScale),el.setAttribute("yScale",pageInfo.yScale))}))}))}},{key:"render",value:function render(){var _a,_this3=this;return console.log("[VIEW] Rendering",state.error,state.loading,state.envelope),state.loading||!state.envelope?Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.b,null,Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.h)("verdocs-loader",null)):state.error?Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.b,null,Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.h)("div",null,state.error)):Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.b,null,((null===(_a=state.envelope)||void 0===_a?void 0:_a.documents)||[]).map((function(envelopeDocument){var pages=_toConsumableArray((null==envelopeDocument?void 0:envelopeDocument.pages)||[]);return pages.sort((function(a,b){return a.sequence-b.sequence})),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.a,null,pages.map((function(page){return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.h)("verdocs-document-page",{pageImageUri:page.display_uri,virtualWidth:612,virtualHeight:792,pageNumber:page.sequence,onPageRendered:function onPageRendered(e){return _this3.handlePageRendered(e)},layers:[{name:"page",type:"canvas"},{name:"controls",type:"div"}]})})))})))}},{key:"component",get:function get(){return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_29__.c)(this)}}]),VerdocsView}();VerdocsView.style='verdocs-view{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;display:-ms-flexbox;display:flex;padding:15px;row-gap:15px;min-height:200px;position:relative;-ms-flex-align:center;align-items:center;-webkit-box-sizing:border-box;box-sizing:border-box;-ms-flex-direction:column;flex-direction:column}verdocs-view div,verdocs-view canvas{-webkit-box-sizing:border-box;box-sizing:border-box}'},"./node_modules/core-js/modules/es.array.reduce.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),$reduce=__webpack_require__("./node_modules/core-js/internals/array-reduce.js").left,arrayMethodIsStrict=__webpack_require__("./node_modules/core-js/internals/array-method-is-strict.js"),CHROME_VERSION=__webpack_require__("./node_modules/core-js/internals/engine-v8-version.js"),IS_NODE=__webpack_require__("./node_modules/core-js/internals/engine-is-node.js");$({target:"Array",proto:!0,forced:!arrayMethodIsStrict("reduce")||!IS_NODE&&CHROME_VERSION>79&&CHROME_VERSION<83},{reduce:function reduce(callbackfn){var length=arguments.length;return $reduce(this,callbackfn,length,length>1?arguments[1]:void 0)}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL0B2ZXJkb2NzL2pzLXNkay9FbnZlbG9wZXMvRW52ZWxvcGVzLmpzIiwid2VicGFjazovLy9zcmMvdXRpbHMvZXJyb3JzLnRzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvQHN0ZW5jaWwvc3RvcmUvZGlzdC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9AdmVyZG9jcy9qcy1zZGsvVXRpbHMvRmllbGRzLmpzIiwid2VicGFjazovLy9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vL3NyYy91dGlscy9lbnZlbG9wZVN0b3JlLnRzIiwid2VicGFjazovLy9zcmMvdXRpbHMvRW52ZWxvcGVzLnRzIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy12aWV3L3ZlcmRvY3Mtdmlldy50c3giLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL2VtYmVkcy92ZXJkb2NzLXZpZXcvdmVyZG9jcy12aWV3LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsImFkb3B0IiwidGhlbiIsImFwcGx5IiwiX19nZW5lcmF0b3IiLCJib2R5IiwiZiIsInkiLCJ0IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidGhpcyIsIm4iLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJjYWxsIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImdldFNpZ25pbmdTZXNzaW9uIiwiZW5kcG9pbnQiLCJwYXJhbXMiLCJfYSIsImFwaSIsImdldCIsImNvbmNhdCIsImVudmVsb3BlSWQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyb2xlSWQiLCJpbnZpdGVDb2RlIiwiciIsInNpZ25lclRva2VuIiwiaGVhZGVycyIsInNpZ25lcl90b2tlbiIsInNlc3Npb24iLCJkZWNvZGVBY2Nlc3NUb2tlbkJvZHkiLCJzZXRUb2tlbiIsInJlY2lwaWVudCIsImRhdGEiLCJnZXRFbnZlbG9wZSIsImdldEVudmVsb3BlRmlsZSIsImRvY3VtZW50SWQiLCJyZXNwb25zZVR5cGUiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJ1cGRhdGVFbnZlbG9wZUZpZWxkIiwiZmllbGROYW1lIiwicHV0IiwiU0RLRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzQ29kZSIsInJlc3BvbnNlIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJFcnJvciIsImlzQ29ubmVjdGVkIiwibWF5YmVFbGVtZW50IiwiY2xlYW51cEVsZW1lbnRzIiwiZGVib3VuY2UiLCJmbiIsIm1zIiwidGltZW91dElkIiwiYXJncyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJtYXAiLCJrZXlzIiwia2V5Iiwic2V0IiwiZmlsdGVyIiwidW53cmFwIiwidmFsIiwicmVtb3ZlRnJvbUFycmF5IiwiYXJyYXkiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwiY3JlYXRlU3RvcmUiLCJkZWZhdWx0U3RhdGUiLCJzaG91bGRVcGRhdGUiLCJjcmVhdGVPYnNlcnZhYmxlTWFwIiwiYSIsImIiLCJ1bndyYXBwZWRTdGF0ZSIsInN0YXRlcyIsIk1hcCIsImVudHJpZXMiLCJoYW5kbGVycyIsImRpc3Bvc2UiLCJyZXNldCIsImZvckVhY2giLCJjYiIsInByb3BOYW1lIiwib2xkVmFsdWUiLCJzdGF0ZSIsIlByb3h5Iiwib3duS2V5cyIsIkFycmF5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImhhcyIsIm9uIiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJvbkNoYW5nZSIsInVuU2V0IiwibmV3VmFsdWUiLCJ1blJlc2V0IiwidXNlIiwic3Vic2NyaXB0aW9ucyIsInVuc3VicyIsInJlZHVjZSIsInN1YnNjcmlwdGlvbiIsInVuc3ViIiwiZm9yY2VVcGRhdGUiLCJzdGVuY2lsU3Vic2NyaXB0aW9uIiwiZ2V0UmVuZGVyaW5nUmVmIiwiZWxtc1RvVXBkYXRlIiwiY2xlYXIiLCJlbG0iLCJhcHBlbmRUb01hcCIsIml0ZW1zIiwiaW5jbHVkZXMiLCJlbGVtZW50cyIsImVsbXMiLCJyZXNjYWxlIiwiaW50ZWdlclNlcXVlbmNlIiwic3RhcnQiLCJjb3VudCIsImZpbGwiLCJmdWxsTmFtZVRvSW5pdGlhbHMiLCJuYW1lIiwic3BsaXQiLCJ3b3JkIiwiam9pbiIsInNldENvbnRyb2xTdHlsZXMiLCJlbCIsImZpZWxkIiwieFNjYWxlIiwieVNjYWxlIiwib3B0aW9uIiwic2V0dGluZ3MiLCJzZXR0aW5nIiwieCIsIndpZHRoIiwiZGVmYXVsdFdpZHRoIiwidHlwZSIsImhlaWdodCIsImRlZmF1bHRIZWlnaHQiLCJvcHRpb25TZXR0aW5ncyIsInVuZGVmaW5lZCIsIm9wdGlvbnMiLCJzdHlsZSIsInBvc2l0aW9uIiwibGVmdCIsImJvdHRvbSIsInRyYW5zZm9ybSIsImdldEZpZWxkSWQiLCJnZXRGaWVsZE9wdGlvbklkIiwicmVuZGVyRG9jdW1lbnRGaWVsZCIsImRvY1BhZ2UiLCJyb2xlSW5kZXgiLCJoYW5kbGVGaWVsZENoYW5nZSIsImRpc2FibGVkIiwiZWRpdGFibGUiLCJkcmFnZ2FibGUiLCJjb250cm9sc0RpdiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250YWluZXJJZCIsImlkIiwiZXhpc3RpbmdGaWVsZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwiYXBwZW5kQ2hpbGQiLCJjaGVja2JveEluZGV4IiwiY2JFbCIsImJ1dHRvbkluZGV4IiwiY29uc29sZSIsImxvZyIsImdldFJvbGVJbmRleCIsInJvbGVzIiwicm9sZSIsImdldEZpZWxkU2V0dGluZ3MiLCJyZXF1aXJlZCIsInVwZGF0ZUNzc1RyYW5zZm9ybSIsImNvbXBvbmVudHMiLCJtYXRjaEFsbCIsImNvbXBvbmVudCIsImVudmVsb3BlIiwibG9hZFByb2dyZXNzIiwibG9hZGluZyIsImVycm9yIiwicm9sZU5hbWVzIiwiZGlydHkiLCJuZXdFbnZlbG9wZSIsInJlY2lwaWVudHMiLCJyb2xlX25hbWUiLCJnZXRFbnZlbG9wZUJ5SWQiLCJFbnZlbG9wZVN0b3JlIiwic3RhdHVzIiwiVmVyZG9jc1ZpZXciLCJWZXJkb2NzRW5kcG9pbnQiLCJnZXREZWZhdWx0IiwiY29tcG9uZW50V2lsbExvYWQiLCJsb2FkU2Vzc2lvbiIsInNka0Vycm9yIiwiZW1pdCIsIm9wdGlvbklkIiwiRW52ZWxvcGVzLnVwZGF0ZUVudmVsb3BlRmllbGQiLCJwcmVwYXJlZCIsImRldGFpbCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsImhhbmRsZVBhZ2VSZW5kZXJlZCIsInBhZ2VJbmZvIiwiZmllbGRzIiwicGFnZSIsInBhZ2VOdW1iZXIiLCJyZWNpcGllbnRfcm9sZSIsInJlbmRlciIsImgiLCJIb3N0IiwiZG9jdW1lbnRzIiwiZW52ZWxvcGVEb2N1bWVudCIsInBhZ2VzIiwic29ydCIsInNlcXVlbmNlIiwiRnJhZ21lbnQiLCJwYWdlSW1hZ2VVcmkiLCJkaXNwbGF5X3VyaSIsInZpcnR1YWxXaWR0aCIsInZpcnR1YWxIZWlnaHQiLCJvblBhZ2VSZW5kZXJlZCIsImxheWVycyIsIiQiLCIkcmVkdWNlIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsIkNIUk9NRV9WRVJTSU9OIiwiSVNfTk9ERSIsInRhcmdldCIsInByb3RvIiwiZm9yY2VkIiwiY2FsbGJhY2tmbiIsImFyZ3VtZW50cyJdLCJtYXBwaW5ncyI6IjtpOENBQUlBLFVBQXdDLFNBQVVDLFFBQVNDLFdBQVlDLEVBQUdDLFdBRTFFLE9BQU8s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InNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5pbXBvcnQgeyBkZWNvZGVBY2Nlc3NUb2tlbkJvZHkgfSBmcm9tICcuLi9VdGlscy9Ub2tlbic7XG4vKipcbiAqIENyZWF0ZSBhbiBlbnZlbG9wZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7RW52ZWxvcGVzLCBJQ3JlYXRlRW52ZWxvcGVSb2xlLCBJQ3JlYXRlRW52ZWxvcGVSZXF1ZXN0fSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvRW52ZWxvcGVzJztcbiAqXG4gKiBjb25zdCByb2xlMTogSUNyZWF0ZUVudmVsb3BlUm9sZSA9IHtcbiAqICAgdHlwZTogJ3NpZ25lcicsXG4gKiAgIG5hbWU6ICdTZWxsZXInLFxuICogICBmdWxsX25hbWU6ICdQYWlnZSBUdXJuZXInLFxuICogICBlbWFpbDogJ3BhaWdlLnR1cm5lckBub21haWwuY29tJyxcbiAqICAgcGhvbmU6ICcnLFxuICogICBzZXF1ZW5jZTogMSxcbiAqICAgZGVsZWdhdG9yOiBmYWxzZSxcbiAqICAgbWVzc2FnZTogJycsXG4gKiB9O1xuICpcbiAqIGNvbnN0IHJvbGUyOiBJQ3JlYXRlRW52ZWxvcGVSb2xlID0ge1xuICogICB0eXBlOiAnc2lnbmVyJyxcbiAqICAgbmFtZTogJ0J1eWVyJyxcbiAqICAgZnVsbF9uYW1lOiAnV2lsbCBQb3dlcicsXG4gKiAgIGVtYWlsOiAnd2lsbC5wb3dlckBub21haWwuY29tJyxcbiAqICAgcGhvbmU6ICcnLFxuICogICBzZXF1ZW5jZTogMixcbiAqICAgZGVsZWdhdG9yOiBmYWxzZSxcbiAqICAgbWVzc2FnZTogJycsXG4gKiB9O1xuICpcbiAqIGNvbnN0IHJlcXVlc3Q6IElDcmVhdGVFbnZlbG9wZVJlcXVlc3QgPSB7dGVtcGxhdGVfaWQ6ICdkMjMzODc0Mi1mM2ExLTQ2NWItODU5Mi04MDY1ODc0MTNjYzEnLCBuYW1lOiAnQmlsbCBvZiBTYWxlJywgcm9sZXM6IFtyb2xlMSwgcm9sZTJdfTtcbiAqIGNvbnN0IHtpZCwgcmVjaXBpZW50c30gPSBhd2FpdCBFbnZlbG9wZXMuY3JlYXRlRW52ZWxvcGUoVmVyZG9jc0VuZHBvaW50LmdldERlZmF1bHQoKSwgcmVxdWVzdCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBjcmVhdGVFbnZlbG9wZSA9IGZ1bmN0aW9uIChlbmRwb2ludCwgcmVxdWVzdCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBlbmRwb2ludC5hcGkgLy9cbiAgICAgICAgICAgICAgICAucG9zdCgnL2VudmVsb3BlcycsIHJlcXVlc3QpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZGF0YTsgfSldO1xuICAgIH0pO1xufSk7IH07XG4vKipcbiAqIEdldCBhIHN1bW1hcnkgb2YgY3VycmVudGx5IGFjdGl2ZSBlbnZlbG9wZXMuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHtFbnZlbG9wZXN9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9FbnZlbG9wZXMnO1xuICpcbiAqIGNvbnN0IHthY3Rpb25fcmVxdWlyZWQsIGNvbXBsZXRlZCwgd2FpdGluZ19vbl9vdGhlcnN9ID0gYXdhaXQgRW52ZWxvcGVzLmdldFN1bW1hcnkoVmVyZG9jc0VuZHBvaW50LmdldERlZmF1bHQoKSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBnZXRTdW1tYXJ5ID0gZnVuY3Rpb24gKGVuZHBvaW50LCBwYWdlKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVuZHBvaW50LmFwaSAvL1xuICAgICAgICAgICAgICAgIC5wb3N0KCcvZW52ZWxvcGVzL3N1bW1hcnknLCB7IHBhZ2U6IHBhZ2UgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KV07XG4gICAgfSk7XG59KTsgfTtcbi8qKlxuICogU2VhcmNoIGZvciBlbnZlbG9wZXMgbWF0Y2hpbmcgdmFyaW91cyBjcml0ZXJpYS5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQge0VudmVsb3Blc30gZnJvbSAnQHZlcmRvY3MvanMtc2RrL0VudmVsb3Blcyc7XG4gKlxuICogY29uc3Qge3Jlc3VsdCwgcGFnZSwgdG90YWx9ID0gYXdhaXQgRW52ZWxvcGVzLnNlYXJjaChWZXJkb2NzRW5kcG9pbnQuZ2V0RGVmYXVsdCgpLCB7IC4uLiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgdmFyIHNlYXJjaEVudmVsb3BlcyA9IGZ1bmN0aW9uIChlbmRwb2ludCwgcGFyYW1zKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVuZHBvaW50LmFwaSAvL1xuICAgICAgICAgICAgICAgIC5wb3N0KCcvZW52ZWxvcGVzL3NlYXJjaCcsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KV07XG4gICAgfSk7XG59KTsgfTtcbi8qKlxuICogR2V0IGEgc2lnbmluZyBzZXNzaW9uIGZvciBhbiBFbnZlbG9wZS5cbiAqL1xuZXhwb3J0IHZhciBnZXRTaWduaW5nU2Vzc2lvbiA9IGZ1bmN0aW9uIChlbmRwb2ludCwgcGFyYW1zKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVuZHBvaW50LmFwaSAvL1xuICAgICAgICAgICAgICAgIC5nZXQoXCIvZW52ZWxvcGVzL1wiLmNvbmNhdChwYXJhbXMuZW52ZWxvcGVJZCwgXCIvcmVjaXBpZW50cy9cIikuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXMucm9sZUlkKSwgXCIvaW52aXRhdGlvbi9cIikuY29uY2F0KHBhcmFtcy5pbnZpdGVDb2RlKSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAvLyBBdm9pZGluZyBhIGpzb253ZWJ0b2tlbiBkZXBlbmRlbmN5IGhlcmUgLSB3ZSBkb24ndCBhY3R1YWxseSBuZWVkIHRoZSB3aG9sZSBsaWJyYXJ5XG4gICAgICAgICAgICAgICAgdmFyIHNpZ25lclRva2VuID0gKChfYSA9IHIuaGVhZGVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNpZ25lcl90b2tlbikgfHwgJyc7XG4gICAgICAgICAgICAgICAgdmFyIHNlc3Npb24gPSBkZWNvZGVBY2Nlc3NUb2tlbkJvZHkoc2lnbmVyVG9rZW4pO1xuICAgICAgICAgICAgICAgIGVuZHBvaW50LnNldFRva2VuKHNpZ25lclRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyByZWNpcGllbnQ6IHIuZGF0YSwgc2Vzc2lvbjogc2Vzc2lvbiwgc2lnbmVyVG9rZW46IHNpZ25lclRva2VuIH07XG4gICAgICAgICAgICB9KV07XG4gICAgfSk7XG59KTsgfTtcbi8qKlxuICogR2V0IHRoZSBsaXN0IG9mIHJlY2lwaWVudHMgZm9yIGFuIEVudmVsb3BlLlxuICovXG5leHBvcnQgdmFyIGdldEVudmVsb3BlUmVjaXBpZW50cyA9IGZ1bmN0aW9uIChlbmRwb2ludCwgZW52ZWxvcGVJZCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBlbmRwb2ludC5hcGkgLy9cbiAgICAgICAgICAgICAgICAuZ2V0KFwiL2VudmVsb3Blcy9cIi5jb25jYXQoZW52ZWxvcGVJZCwgXCIvcmVjaXBpZW50c1wiKSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KV07XG4gICAgfSk7XG59KTsgfTtcbi8qKlxuICogR2V0IGFsbCBtZXRhZGF0YSBmb3IgYW4gRW52ZWxvcGUuXG4gKi9cbmV4cG9ydCB2YXIgZ2V0RW52ZWxvcGUgPSBmdW5jdGlvbiAoZW5kcG9pbnQsIGVudmVsb3BlSWQpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZW5kcG9pbnQuYXBpIC8vXG4gICAgICAgICAgICAgICAgLmdldChcIi9lbnZlbG9wZXMvXCIuY29uY2F0KGVudmVsb3BlSWQpKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmRhdGE7IH0pXTtcbiAgICB9KTtcbn0pOyB9O1xuLyoqXG4gKiBHZXQgYWxsIG1ldGFkYXRhIGZvciBhbiBFbnZlbG9wZS5cbiAqL1xuZXhwb3J0IHZhciBnZXRFbnZlbG9wZURvY3VtZW50ID0gZnVuY3Rpb24gKGVuZHBvaW50LCBlbnZlbG9wZUlkLCBkb2N1bWVudElkKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVuZHBvaW50LmFwaSAvL1xuICAgICAgICAgICAgICAgIC5nZXQoXCIvZW52ZWxvcGVzL1wiLmNvbmNhdChlbnZlbG9wZUlkLCBcIi9lbnZlbG9wZV9kb2N1bWVudHMvXCIpLmNvbmNhdChkb2N1bWVudElkKSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KV07XG4gICAgfSk7XG59KTsgfTtcbi8qKlxuICogQ2FuY2VsIGFuIEVudmVsb3BlLlxuICovXG5leHBvcnQgdmFyIGNhbmNlbEVudmVsb3BlID0gZnVuY3Rpb24gKGVuZHBvaW50LCBlbnZlbG9wZUlkKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVuZHBvaW50LmFwaSAvL1xuICAgICAgICAgICAgICAgIC5wdXQoXCIvZW52ZWxvcGVzL1wiLmNvbmNhdChlbnZlbG9wZUlkKSwgeyBhY3Rpb246ICdjYW5jZWwnIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZGF0YTsgfSldO1xuICAgIH0pO1xufSk7IH07XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcmVjaXBpZW50IGhhcyBhIHBlbmRpbmcgYWN0aW9uLiBOb3RlIHRoYXQgdGhpcyBkb2VzIG5vdCBuZWNlc3NhcmlseSBtZWFuIHRoZSByZWNpcGllbnQgY2FuIGFjdCAoeWV0KS5cbiAqL1xuZXhwb3J0IHZhciByZWNpcGllbnRIYXNBY3Rpb24gPSBmdW5jdGlvbiAocmVjaXBpZW50KSB7IHJldHVybiAhWydzdWJtaXR0ZWQnLCAnY2FuY2VsZWQnLCAnZGVjbGluZWQnXS5pbmNsdWRlcyhyZWNpcGllbnQuc3RhdHVzKTsgfTtcbi8qKlxuICogUmV0dXJucyB0aGUgcmVjaXBpZW50cyB3aG8gc3RpbGwgaGF2ZSBhIHBlbmRpbmcgYWN0aW9uLiBOb3RlIHRoYXQgbm90IGFsbCBvZiB0aGVzZSByZWNpcGllbnRzIG1heSBiZSBhYmxlIHRvIGFjdCAoeWV0KS5cbiAqL1xuZXhwb3J0IHZhciBnZXRSZWNpcGllbnRzV2l0aEFjdGlvbnMgPSBmdW5jdGlvbiAoZW52ZWxvcGUpIHsgcmV0dXJuICgoZW52ZWxvcGUgPT09IG51bGwgfHwgZW52ZWxvcGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVudmVsb3BlLnJlY2lwaWVudHMpIHx8IFtdKS5maWx0ZXIocmVjaXBpZW50SGFzQWN0aW9uKTsgfTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSByZWNpcGllbnQgY2FuIGFjdC5cbiAqL1xuZXhwb3J0IHZhciByZWNpcGllbnRDYW5BY3QgPSBmdW5jdGlvbiAocmVjaXBpZW50LCByZWNpcGllbnRzV2l0aEFjdGlvbnMpIHsgdmFyIF9hOyByZXR1cm4gcmVjaXBpZW50LnNlcXVlbmNlID09PSAoKF9hID0gcmVjaXBpZW50c1dpdGhBY3Rpb25zID09PSBudWxsIHx8IHJlY2lwaWVudHNXaXRoQWN0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVjaXBpZW50c1dpdGhBY3Rpb25zWzBdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2VxdWVuY2UpOyB9O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHVzZXIgY2FuIGFjdC5cbiAqL1xuZXhwb3J0IHZhciB1c2VyQ2FuQWN0ID0gZnVuY3Rpb24gKGVtYWlsLCByZWNpcGllbnRzV2l0aEFjdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHJlY2lwaWVudCA9IHJlY2lwaWVudHNXaXRoQWN0aW9ucy5maW5kKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmVtYWlsID09PSBlbWFpbDsgfSk7XG4gICAgcmV0dXJuIHJlY2lwaWVudCAmJiByZWNpcGllbnQuc2VxdWVuY2UgPT09ICgoX2EgPSByZWNpcGllbnRzV2l0aEFjdGlvbnMgPT09IG51bGwgfHwgcmVjaXBpZW50c1dpdGhBY3Rpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWNpcGllbnRzV2l0aEFjdGlvbnNbMF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXF1ZW5jZSk7XG59O1xuLyoqXG4gKiBHZXQgKGJpbmFyeSBkb3dubG9hZCkgYSBmaWxlIGF0dGFjaGVkIHRvIGFuIEVudmVsb3BlLiBJdCBpcyBpbXBvcnRhbnQgdG8gdXNlIHRoaXMgbWV0aG9kXG4gKiByYXRoZXIgdGhhbiBhIGRpcmVjdCBBIEhSRUYgb3Igc2ltaWxhciBsaW5rIHRvIHNldCB0aGUgYXV0aG9yaXphdGlvbiBoZWFkZXJzIGZvciB0aGVcbiAqIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCB2YXIgZ2V0RW52ZWxvcGVGaWxlID0gZnVuY3Rpb24gKGVuZHBvaW50LCBlbnZlbG9wZUlkLCBkb2N1bWVudElkKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVuZHBvaW50LmFwaSAvL1xuICAgICAgICAgICAgICAgIC5nZXQoXCIvZW52ZWxvcGVzL1wiLmNvbmNhdChlbnZlbG9wZUlkLCBcIi9lbnZlbG9wZV9kb2N1bWVudHMvXCIpLmNvbmNhdChkb2N1bWVudElkLCBcIj9maWxlPXRydWVcIiksIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyKSB7IHJldHVybiBCdWZmZXIuZnJvbShyLmRhdGEsICdiaW5hcnknKS50b1N0cmluZygnYmFzZTY0Jyk7IH0pXTtcbiAgICB9KTtcbn0pOyB9O1xuLyoqXG4gKiBVcGRhdGUgYSBEb2N1bWVudCBmaWVsZC4gVHlwaWNhbGx5IGNhbGxlZCBkdXJpbmcgdGhlIHNpZ25pbmcgcHJvY2VzcyBhcyBhIFJlY2lwaWVudCBmaWxscyBpbiBmaWVsZHMuXG4gKi9cbmV4cG9ydCB2YXIgdXBkYXRlRW52ZWxvcGVGaWVsZCA9IGZ1bmN0aW9uIChlbmRwb2ludCwgZW52ZWxvcGVJZCwgZmllbGROYW1lLCB2YWx1ZSkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBlbmRwb2ludC5hcGkgLy9cbiAgICAgICAgICAgICAgICAucHV0KFwiL2VudmVsb3Blcy9cIi5jb25jYXQoZW52ZWxvcGVJZCwgXCIvZmllbGRzL1wiKS5jb25jYXQoZmllbGROYW1lKSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZGF0YTsgfSldO1xuICAgIH0pO1xufSk7IH07XG4vKipcbiAqIFVwZGF0ZSBhIERvY3VtZW50IHNpZ25hdHVyZSBmaWVsZC4gU2lnbmF0dXJlIGZpZWxkcyBhcmUgSUQtZHJpdmVuLiBDYWxsIGBEb2N1bWVudC5jcmVhdGVTaWduYXR1cmUoKWAgZmlyc3QgdG8gY3JlYXRlIGFcbiAqIHNpZ25hdHVyZSBmb3IgYSBSZWNpcGllbnQsIHRoZW4gY2FsbCBgRG9jdW1lbnRzLnVwZGF0ZURvY3VtZW50RmllbGRTaWduYXR1cmUoKWAgdG8gYXR0YWNoIGl0IHRvIGEgZmllbGQuXG4gKi9cbmV4cG9ydCB2YXIgdXBkYXRlRW52ZWxvcGVGaWVsZFNpZ25hdHVyZSA9IGZ1bmN0aW9uIChlbmRwb2ludCwgZW52ZWxvcGVJZCwgZmllbGROYW1lLCBzaWduYXR1cmVJZCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBlbmRwb2ludC5hcGkgLy9cbiAgICAgICAgICAgICAgICAucHV0KFwiL2VudmVsb3Blcy9cIi5jb25jYXQoZW52ZWxvcGVJZCwgXCIvZmllbGRzL1wiKS5jb25jYXQoZmllbGROYW1lLCBcIi9zaWduYXR1cmUvXCIpLmNvbmNhdChzaWduYXR1cmVJZCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZGF0YTsgfSldO1xuICAgIH0pO1xufSk7IH07XG4iLCIvKipcbiAqIFBhc3NlZCB0byBwYXJlbnQgY29tcG9uZW50cyBpbiBjZXJ0YWluIGNhbGxiYWNrcyB3aXRoIHRoZSBsb3dlci1sZXZlbCBKUy1TREsgZW1pdHMgYW4gZXJyb3JcbiAqL1xuZXhwb3J0IGNsYXNzIFNES0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb2RlO1xuICBzdGF0dXNDb2RlO1xuICByZXNwb25zZTtcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIHN0YXR1c0NvZGU6IG51bWJlciwgcmVzcG9uc2U6IGFueSkge1xuICAgIHN1cGVyKG1lc3NhZ2UgfHwgJ1NESyBFcnJvcicpO1xuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBuZXcudGFyZ2V0LnByb3RvdHlwZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGdldFJlbmRlcmluZ1JlZiwgZm9yY2VVcGRhdGUgfSBmcm9tICdAc3RlbmNpbC9jb3JlJztcblxuY29uc3QgYXBwZW5kVG9NYXAgPSAobWFwLCBwcm9wTmFtZSwgdmFsdWUpID0+IHtcbiAgICBjb25zdCBpdGVtcyA9IG1hcC5nZXQocHJvcE5hbWUpO1xuICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgbWFwLnNldChwcm9wTmFtZSwgW3ZhbHVlXSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpdGVtcy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XG4gICAgfVxufTtcbmNvbnN0IGRlYm91bmNlID0gKGZuLCBtcykgPT4ge1xuICAgIGxldCB0aW1lb3V0SWQ7XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmICh0aW1lb3V0SWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGltZW91dElkID0gMDtcbiAgICAgICAgICAgIGZuKC4uLmFyZ3MpO1xuICAgICAgICB9LCBtcyk7XG4gICAgfTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBwb3NzaWJsZSBlbGVtZW50IGlzQ29ubmVjdGVkLlxuICogVGhlIHByb3BlcnR5IG1pZ2h0IG5vdCBiZSB0aGVyZSwgc28gd2UgY2hlY2sgZm9yIGl0LlxuICpcbiAqIFdlIHdhbnQgaXQgdG8gcmV0dXJuIHRydWUgaWYgaXNDb25uZWN0ZWQgaXMgbm90IGEgcHJvcGVydHksXG4gKiBvdGhlcndpc2Ugd2Ugd291bGQgcmVtb3ZlIHRoZXNlIGVsZW1lbnRzIGFuZCB3b3VsZCBub3QgdXBkYXRlLlxuICpcbiAqIEJldHRlciBsZWFrIGluIEVkZ2UgdGhhbiB0byBiZSB1c2VsZXNzLlxuICovXG5jb25zdCBpc0Nvbm5lY3RlZCA9IChtYXliZUVsZW1lbnQpID0+ICEoJ2lzQ29ubmVjdGVkJyBpbiBtYXliZUVsZW1lbnQpIHx8IG1heWJlRWxlbWVudC5pc0Nvbm5lY3RlZDtcbmNvbnN0IGNsZWFudXBFbGVtZW50cyA9IGRlYm91bmNlKChtYXApID0+IHtcbiAgICBmb3IgKGxldCBrZXkgb2YgbWFwLmtleXMoKSkge1xuICAgICAgICBtYXAuc2V0KGtleSwgbWFwLmdldChrZXkpLmZpbHRlcihpc0Nvbm5lY3RlZCkpO1xuICAgIH1cbn0sIDIwMDApO1xuY29uc3Qgc3RlbmNpbFN1YnNjcmlwdGlvbiA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdldFJlbmRlcmluZ1JlZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgbm90IGluIGEgc3RlbmNpbCBwcm9qZWN0LCB3ZSBkbyBub3RoaW5nLlxuICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIG5vdCByZWFsbHkgZXhwb3J0ZWQgYnkgQHN0ZW5jaWwvY29yZS5cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCBlbG1zVG9VcGRhdGUgPSBuZXcgTWFwKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogKCkgPT4gZWxtc1RvVXBkYXRlLmNsZWFyKCksXG4gICAgICAgIGdldDogKHByb3BOYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbG0gPSBnZXRSZW5kZXJpbmdSZWYoKTtcbiAgICAgICAgICAgIGlmIChlbG0pIHtcbiAgICAgICAgICAgICAgICBhcHBlbmRUb01hcChlbG1zVG9VcGRhdGUsIHByb3BOYW1lLCBlbG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IChwcm9wTmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBlbG1zVG9VcGRhdGUuZ2V0KHByb3BOYW1lKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50cykge1xuICAgICAgICAgICAgICAgIGVsbXNUb1VwZGF0ZS5zZXQocHJvcE5hbWUsIGVsZW1lbnRzLmZpbHRlcihmb3JjZVVwZGF0ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xlYW51cEVsZW1lbnRzKGVsbXNUb1VwZGF0ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiAoKSA9PiB7XG4gICAgICAgICAgICBlbG1zVG9VcGRhdGUuZm9yRWFjaCgoZWxtcykgPT4gZWxtcy5mb3JFYWNoKGZvcmNlVXBkYXRlKSk7XG4gICAgICAgICAgICBjbGVhbnVwRWxlbWVudHMoZWxtc1RvVXBkYXRlKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuY29uc3QgdW53cmFwID0gKHZhbCkgPT4gKHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgPyB2YWwoKSA6IHZhbCk7XG5jb25zdCBjcmVhdGVPYnNlcnZhYmxlTWFwID0gKGRlZmF1bHRTdGF0ZSwgc2hvdWxkVXBkYXRlID0gKGEsIGIpID0+IGEgIT09IGIpID0+IHtcbiAgICBjb25zdCB1bndyYXBwZWRTdGF0ZSA9IHVud3JhcChkZWZhdWx0U3RhdGUpO1xuICAgIGxldCBzdGF0ZXMgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKHVud3JhcHBlZFN0YXRlICE9PSBudWxsICYmIHVud3JhcHBlZFN0YXRlICE9PSB2b2lkIDAgPyB1bndyYXBwZWRTdGF0ZSA6IHt9KSk7XG4gICAgY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgICAgIGRpc3Bvc2U6IFtdLFxuICAgICAgICBnZXQ6IFtdLFxuICAgICAgICBzZXQ6IFtdLFxuICAgICAgICByZXNldDogW10sXG4gICAgfTtcbiAgICBjb25zdCByZXNldCA9ICgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyBXaGVuIHJlc2V0dGluZyB0aGUgc3RhdGUsIHRoZSBkZWZhdWx0IHN0YXRlIG1heSBiZSBhIGZ1bmN0aW9uIC0gdW53cmFwIGl0IHRvIGludm9rZSBpdC5cbiAgICAgICAgLy8gb3RoZXJ3aXNlLCB0aGUgc3RhdGUgd29uJ3QgYmUgcHJvcGVybHkgcmVzZXRcbiAgICAgICAgc3RhdGVzID0gbmV3IE1hcChPYmplY3QuZW50cmllcygoX2EgPSB1bndyYXAoZGVmYXVsdFN0YXRlKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKTtcbiAgICAgICAgaGFuZGxlcnMucmVzZXQuZm9yRWFjaCgoY2IpID0+IGNiKCkpO1xuICAgIH07XG4gICAgY29uc3QgZGlzcG9zZSA9ICgpID0+IHtcbiAgICAgICAgLy8gQ2FsbCBmaXJzdCBkaXNwb3NlIGFzIHJlc2V0dGluZyB0aGUgc3RhdGUgd291bGRcbiAgICAgICAgLy8gY2F1c2UgbGVzcyB1cGRhdGVzIDspXG4gICAgICAgIGhhbmRsZXJzLmRpc3Bvc2UuZm9yRWFjaCgoY2IpID0+IGNiKCkpO1xuICAgICAgICByZXNldCgpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0ID0gKHByb3BOYW1lKSA9PiB7XG4gICAgICAgIGhhbmRsZXJzLmdldC5mb3JFYWNoKChjYikgPT4gY2IocHJvcE5hbWUpKTtcbiAgICAgICAgcmV0dXJuIHN0YXRlcy5nZXQocHJvcE5hbWUpO1xuICAgIH07XG4gICAgY29uc3Qgc2V0ID0gKHByb3BOYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHN0YXRlcy5nZXQocHJvcE5hbWUpO1xuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKHZhbHVlLCBvbGRWYWx1ZSwgcHJvcE5hbWUpKSB7XG4gICAgICAgICAgICBzdGF0ZXMuc2V0KHByb3BOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zZXQuZm9yRWFjaCgoY2IpID0+IGNiKHByb3BOYW1lLCB2YWx1ZSwgb2xkVmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc3RhdGUgPSAodHlwZW9mIFByb3h5ID09PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IHt9XG4gICAgICAgIDogbmV3IFByb3h5KHVud3JhcHBlZFN0YXRlLCB7XG4gICAgICAgICAgICBnZXQoXywgcHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0KHByb3BOYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvd25LZXlzKF8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShzdGF0ZXMua2V5cygpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzKF8sIHByb3BOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlcy5oYXMocHJvcE5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldChfLCBwcm9wTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZXQocHJvcE5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICBjb25zdCBvbiA9IChldmVudE5hbWUsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGhhbmRsZXJzW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmVGcm9tQXJyYXkoaGFuZGxlcnNbZXZlbnROYW1lXSwgY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3Qgb25DaGFuZ2UgPSAocHJvcE5hbWUsIGNiKSA9PiB7XG4gICAgICAgIGNvbnN0IHVuU2V0ID0gb24oJ3NldCcsIChrZXksIG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIGNiKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gdW53cmFwIHRoZSBkZWZhdWx0U3RhdGUgYmVjYXVzZSBpdCBtaWdodCBiZSBhIGZ1bmN0aW9uLlxuICAgICAgICAvLyBPdGhlcndpc2Ugd2UgbWlnaHQgbm90IGJlIHNlbmRpbmcgdGhlIHJpZ2h0IHJlc2V0IHZhbHVlLlxuICAgICAgICBjb25zdCB1blJlc2V0ID0gb24oJ3Jlc2V0JywgKCkgPT4gY2IodW53cmFwKGRlZmF1bHRTdGF0ZSlbcHJvcE5hbWVdKSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB1blNldCgpO1xuICAgICAgICAgICAgdW5SZXNldCgpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdXNlID0gKC4uLnN1YnNjcmlwdGlvbnMpID0+IHtcbiAgICAgICAgY29uc3QgdW5zdWJzID0gc3Vic2NyaXB0aW9ucy5yZWR1Y2UoKHVuc3Vicywgc3Vic2NyaXB0aW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnNldCkge1xuICAgICAgICAgICAgICAgIHVuc3Vicy5wdXNoKG9uKCdzZXQnLCBzdWJzY3JpcHRpb24uc2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLmdldCkge1xuICAgICAgICAgICAgICAgIHVuc3Vicy5wdXNoKG9uKCdnZXQnLCBzdWJzY3JpcHRpb24uZ2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnJlc2V0KSB7XG4gICAgICAgICAgICAgICAgdW5zdWJzLnB1c2gob24oJ3Jlc2V0Jywgc3Vic2NyaXB0aW9uLnJlc2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLmRpc3Bvc2UpIHtcbiAgICAgICAgICAgICAgICB1bnN1YnMucHVzaChvbignZGlzcG9zZScsIHN1YnNjcmlwdGlvbi5kaXNwb3NlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5zdWJzO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB1bnN1YnMuZm9yRWFjaCgodW5zdWIpID0+IHVuc3ViKCkpO1xuICAgIH07XG4gICAgY29uc3QgZm9yY2VVcGRhdGUgPSAoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gc3RhdGVzLmdldChrZXkpO1xuICAgICAgICBoYW5kbGVycy5zZXQuZm9yRWFjaCgoY2IpID0+IGNiKGtleSwgb2xkVmFsdWUsIG9sZFZhbHVlKSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgZ2V0LFxuICAgICAgICBzZXQsXG4gICAgICAgIG9uLFxuICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgdXNlLFxuICAgICAgICBkaXNwb3NlLFxuICAgICAgICByZXNldCxcbiAgICAgICAgZm9yY2VVcGRhdGUsXG4gICAgfTtcbn07XG5jb25zdCByZW1vdmVGcm9tQXJyYXkgPSAoYXJyYXksIGl0ZW0pID0+IHtcbiAgICBjb25zdCBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgICAgIGFycmF5Lmxlbmd0aC0tO1xuICAgIH1cbn07XG5cbmNvbnN0IGNyZWF0ZVN0b3JlID0gKGRlZmF1bHRTdGF0ZSwgc2hvdWxkVXBkYXRlKSA9PiB7XG4gICAgY29uc3QgbWFwID0gY3JlYXRlT2JzZXJ2YWJsZU1hcChkZWZhdWx0U3RhdGUsIHNob3VsZFVwZGF0ZSk7XG4gICAgbWFwLnVzZShzdGVuY2lsU3Vic2NyaXB0aW9uKCkpO1xuICAgIHJldHVybiBtYXA7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVPYnNlcnZhYmxlTWFwLCBjcmVhdGVTdG9yZSB9O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFJUb3AoeSwgZmllbGRIZWlnaHQsIGlUZXh0SGVpZ2h0LCB5UmF0aW8pIHtcbiAgICByZXR1cm4gaVRleHRIZWlnaHQgLSAoeSArIGZpZWxkSGVpZ2h0KSAqIHlSYXRpbztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRSTGVmdCh4LCByYXRpbykge1xuICAgIHJldHVybiB4ICogcmF0aW87XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UlZhbHVlKHksIHJhdGlvKSB7XG4gICAgcmV0dXJuIHkgKiByYXRpbztcbn1cbmV4cG9ydCBmdW5jdGlvbiBibG9iVG9CYXNlNjQoaW1hZ2UpIHtcbiAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZmlsZVJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ1Byb2JsZW0gcmVhZGluZyBibG9iLicpKTtcbiAgICAgICAgfTtcbiAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXNvbHZlKGZpbGVSZWFkZXIucmVzdWx0KTtcbiAgICAgICAgfTtcbiAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGltYWdlKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNjYWxlKHIsIG4pIHtcbiAgICByZXR1cm4gciAqIG47XG59XG4iLCIvLyBUaGVzZSBzaG91bGQgcHJvYmFibHkgYWxsIG1vdmUgdG8gSlMtU0RLXG5pbXBvcnQge3Jlc2NhbGV9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9VdGlscy9GaWVsZHMnO1xuLy8gaW1wb3J0IHtnZXRSR0JBfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvVXRpbHMvQ29sb3JzJztcbmltcG9ydCB7SVRlbXBsYXRlRmllbGR9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9UZW1wbGF0ZXMvVHlwZXMnO1xuaW1wb3J0IHtJRG9jdW1lbnRGaWVsZH0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL0VudmVsb3Blcy9UeXBlcyc7XG5pbXBvcnQge0lEb2N1bWVudFBhZ2VJbmZvfSBmcm9tICcuL1R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGludGVnZXJTZXF1ZW5jZSA9IChzdGFydDogbnVtYmVyLCBjb3VudDogbnVtYmVyKTogbnVtYmVyW10gPT5cbiAgQXJyYXkoY291bnQpXG4gICAgLmZpbGwoMSlcbiAgICAubWFwKChfLCBpbmRleCkgPT4gaW5kZXggKyBzdGFydCk7XG5cbmV4cG9ydCBjb25zdCBmdWxsTmFtZVRvSW5pdGlhbHMgPSAobmFtZTogc3RyaW5nKSA9PlxuICBuYW1lXG4gICAgLnNwbGl0KCcgJylcbiAgICAubWFwKHdvcmQgPT4gd29yZFswXSlcbiAgICAuam9pbignJyk7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0V2lkdGggPSAoZmllbGQ6IElUZW1wbGF0ZUZpZWxkIHwgSURvY3VtZW50RmllbGQpID0+IHtcbiAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgY2FzZSAnYXR0YWNobWVudCc6XG4gICAgY2FzZSAncGF5bWVudCc6XG4gICAgICByZXR1cm4gMjQ7XG4gICAgY2FzZSAnY2hlY2tib3gnOlxuICAgIGNhc2UgJ2NoZWNrYm94X2dyb3VwJzpcbiAgICBjYXNlICdyYWRpb19idXR0b25fZ3JvdXAnOlxuICAgICAgcmV0dXJuIDE0O1xuICAgIGNhc2UgJ3NpZ25hdHVyZSc6XG4gICAgY2FzZSAnaW5pdGlhbCc6XG4gICAgICByZXR1cm4gODI7XG4gIH1cblxuICByZXR1cm4gMTUwO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRIZWlnaHQgPSAoZmllbGQ6IElUZW1wbGF0ZUZpZWxkIHwgSURvY3VtZW50RmllbGQpID0+IHtcbiAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgY2FzZSAnYXR0YWNobWVudCc6XG4gICAgY2FzZSAncGF5bWVudCc6XG4gICAgICByZXR1cm4gMjQ7XG4gICAgY2FzZSAnY2hlY2tib3gnOlxuICAgIGNhc2UgJ2NoZWNrYm94X2dyb3VwJzpcbiAgICBjYXNlICdyYWRpb19idXR0b25fZ3JvdXAnOlxuICAgICAgcmV0dXJuIDE0O1xuICAgIGNhc2UgJ3NpZ25hdHVyZSc6XG4gICAgY2FzZSAnaW5pdGlhbCc6XG4gICAgICByZXR1cm4gNDE7XG4gIH1cblxuICByZXR1cm4gNTA7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0Q29udHJvbFN0eWxlcyA9IChlbDogSFRNTEVsZW1lbnQsIGZpZWxkOiBJVGVtcGxhdGVGaWVsZCB8IElEb2N1bWVudEZpZWxkLCB4U2NhbGU6IG51bWJlciwgeVNjYWxlOiBudW1iZXIsIG9wdGlvbj86IG51bWJlcikgPT4ge1xuICBjb25zdCBzZXR0aW5ncyA9IChmaWVsZCBhcyBJVGVtcGxhdGVGaWVsZCkuc2V0dGluZyB8fCAoZmllbGQgYXMgSURvY3VtZW50RmllbGQpLnNldHRpbmdzO1xuICBsZXQge3ggPSAwLCB5ID0gMCwgd2lkdGggPSBkZWZhdWx0V2lkdGgoZmllbGQpLCBoZWlnaHQgPSBkZWZhdWx0SGVpZ2h0KGZpZWxkKX0gPSBzZXR0aW5ncztcblxuICBjb25zdCBvcHRpb25TZXR0aW5ncyA9IG9wdGlvbiAhPT0gdW5kZWZpbmVkICYmIHNldHRpbmdzLm9wdGlvbnNbb3B0aW9uXSA/IHNldHRpbmdzLm9wdGlvbnNbb3B0aW9uXSA6IG51bGw7XG4gIGlmIChvcHRpb25TZXR0aW5ncykge1xuICAgIHggPSBvcHRpb25TZXR0aW5ncy54ID8/IHg7XG4gICAgeSA9IG9wdGlvblNldHRpbmdzLnkgPz8geTtcbiAgICB3aWR0aCA9IG9wdGlvblNldHRpbmdzLndpZHRoID8/IHdpZHRoO1xuICAgIGhlaWdodCA9IG9wdGlvblNldHRpbmdzLmhlaWdodCA/PyBoZWlnaHQ7XG4gIH1cblxuICBlbC5zdHlsZS53aWR0aCA9IGAke3dpZHRofXB4YDtcbiAgZWwuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDtcbiAgZWwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICBlbC5zdHlsZS5sZWZ0ID0gYCR7cmVzY2FsZSh4U2NhbGUsIHgpfXB4YDtcbiAgZWwuc3R5bGUuYm90dG9tID0gYCR7cmVzY2FsZSh5U2NhbGUsIHkpfXB4YDtcbiAgZWwuc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlKCR7eFNjYWxlfSwgJHt5U2NhbGV9KWA7XG4gIC8vIGVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGZpZWxkWydyZ2JhJ10gfHwgZ2V0UkdCQShyb2xlSW5kZXgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEZpZWxkSWQgPSAoZmllbGQ6IElUZW1wbGF0ZUZpZWxkIHwgSURvY3VtZW50RmllbGQpID0+IHtcbiAgcmV0dXJuIGB2ZXJkb2NzLWRvYy1mbGQtJHtmaWVsZC5uYW1lfWA7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RmllbGRPcHRpb25JZCA9IChmaWVsZDogSVRlbXBsYXRlRmllbGQgfCBJRG9jdW1lbnRGaWVsZCwgaW5kZXg6IG51bWJlcikgPT4ge1xuICByZXR1cm4gYHZlcmRvY3MtZG9jLWZsZC0ke2ZpZWxkLm5hbWV9LSR7aW5kZXh9YDtcbn07XG5cbmV4cG9ydCBjb25zdCByZW5kZXJEb2N1bWVudEZpZWxkID0gKFxuICBmaWVsZDogSVRlbXBsYXRlRmllbGQgfCBJRG9jdW1lbnRGaWVsZCxcbiAgZG9jUGFnZTogSURvY3VtZW50UGFnZUluZm8sXG4gIHJvbGVJbmRleDogbnVtYmVyLFxuICBoYW5kbGVGaWVsZENoYW5nZTogKGZpZWxkOiBJVGVtcGxhdGVGaWVsZCB8IElEb2N1bWVudEZpZWxkLCBlOiBhbnksIG9wdGlvbklkPzogc3RyaW5nKSA9PiB2b2lkLFxuICBkaXNhYmxlZDogYm9vbGVhbixcbiAgZWRpdGFibGU6IGJvb2xlYW4gPSBmYWxzZSxcbiAgZHJhZ2dhYmxlOiBib29sZWFuID0gZmFsc2UsXG4pID0+IHtcbiAgY29uc3QgY29udHJvbHNEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkb2NQYWdlLmNvbnRhaW5lcklkICsgJy1jb250cm9scycpO1xuICBpZiAoIWNvbnRyb2xzRGl2KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgY2FzZSAnYXR0YWNobWVudCc6XG4gICAgY2FzZSAnZGF0ZSc6XG4gICAgY2FzZSAnZHJvcGRvd24nOlxuICAgIGNhc2UgJ2luaXRpYWwnOlxuICAgIGNhc2UgJ3BheW1lbnQnOlxuICAgIGNhc2UgJ3NpZ25hdHVyZSc6XG4gICAgY2FzZSAndGltZXN0YW1wJzpcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgY2FzZSAndGV4dGJveCc6IHtcbiAgICAgIGNvbnN0IGlkID0gZ2V0RmllbGRJZChmaWVsZCk7XG4gICAgICBjb25zdCBleGlzdGluZ0ZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgaWYgKGV4aXN0aW5nRmllbGQpIHtcbiAgICAgICAgc2V0Q29udHJvbFN0eWxlcyhleGlzdGluZ0ZpZWxkLCBmaWVsZCwgZG9jUGFnZS54U2NhbGUsIGRvY1BhZ2UueVNjYWxlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBlbDogYW55ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgdmVyZG9jcy1maWVsZC0ke2ZpZWxkLnR5cGV9YCk7XG4gICAgICBlbC5maWVsZCA9IGZpZWxkO1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgncm9sZWluZGV4Jywgcm9sZUluZGV4KTtcbiAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoZWRpdGFibGUpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdlZGl0YWJsZScsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKGRyYWdnYWJsZSkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RyYWdnYWJsZScsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignZmllbGRDaGFuZ2UnLCBlID0+IGhhbmRsZUZpZWxkQ2hhbmdlKGZpZWxkLCBlKSk7XG4gICAgICBzZXRDb250cm9sU3R5bGVzKGVsLCBmaWVsZCwgZG9jUGFnZS54U2NhbGUsIGRvY1BhZ2UueVNjYWxlKTtcbiAgICAgIGNvbnRyb2xzRGl2LmFwcGVuZENoaWxkKGVsKTtcblxuICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIGNhc2UgJ2NoZWNrYm94X2dyb3VwJzpcbiAgICAgICgoZmllbGQgYXMgYW55KS5zZXR0aW5ncyB8fCAoZmllbGQgYXMgYW55KS5zZXR0aW5nIHx8IHt9KS5vcHRpb25zLmZvckVhY2goKF8sIGNoZWNrYm94SW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBnZXRGaWVsZE9wdGlvbklkKGZpZWxkLCBjaGVja2JveEluZGV4KTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICAgICAgaWYgKGV4aXN0aW5nRmllbGQpIHtcbiAgICAgICAgICBzZXRDb250cm9sU3R5bGVzKGV4aXN0aW5nRmllbGQsIGZpZWxkLCBkb2NQYWdlLnhTY2FsZSwgZG9jUGFnZS55U2NhbGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNiRWw6IGFueSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYHZlcmRvY3MtZmllbGQtY2hlY2tib3hgKTtcbiAgICAgICAgY2JFbC5maWVsZCA9IGZpZWxkO1xuICAgICAgICBjYkVsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICAgIGNiRWwuc2V0QXR0cmlidXRlKCdyb2xlaW5kZXgnLCByb2xlSW5kZXgpO1xuICAgICAgICBjYkVsLnNldEF0dHJpYnV0ZSgnb3B0aW9uJywgY2hlY2tib3hJbmRleCk7XG4gICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgIGNiRWwuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGNiRWwuYWRkRXZlbnRMaXN0ZW5lcignZmllbGRDaGFuZ2UnLCBlID0+IGhhbmRsZUZpZWxkQ2hhbmdlKGZpZWxkLCBlKSk7XG4gICAgICAgIHNldENvbnRyb2xTdHlsZXMoY2JFbCwgZmllbGQsIGRvY1BhZ2UueFNjYWxlLCBkb2NQYWdlLnlTY2FsZSk7XG4gICAgICAgIGNvbnRyb2xzRGl2LmFwcGVuZENoaWxkKGNiRWwpO1xuXG4gICAgICAgIHJldHVybiBjYkVsO1xuICAgICAgfSk7XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncmFkaW9fYnV0dG9uX2dyb3VwJzpcbiAgICAgICgoZmllbGQgYXMgYW55KS5zZXR0aW5ncyB8fCAoZmllbGQgYXMgYW55KS5zZXR0aW5nIHx8IHt9KS5vcHRpb25zLmZvckVhY2goKF8sIGJ1dHRvbkluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gZ2V0RmllbGRPcHRpb25JZChmaWVsZCwgYnV0dG9uSW5kZXgpO1xuICAgICAgICBjb25zdCBleGlzdGluZ0ZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgICBpZiAoZXhpc3RpbmdGaWVsZCkge1xuICAgICAgICAgIHNldENvbnRyb2xTdHlsZXMoZXhpc3RpbmdGaWVsZCwgZmllbGQsIGRvY1BhZ2UueFNjYWxlLCBkb2NQYWdlLnlTY2FsZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2JFbDogYW55ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgdmVyZG9jcy1maWVsZC1yYWRpby1idXR0b25gKTtcbiAgICAgICAgY2JFbC5maWVsZCA9IGZpZWxkO1xuICAgICAgICBjYkVsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICAgIGNiRWwuc2V0QXR0cmlidXRlKCdyb2xlaW5kZXgnLCByb2xlSW5kZXgpO1xuICAgICAgICBjYkVsLnNldEF0dHJpYnV0ZSgnb3B0aW9uJywgYnV0dG9uSW5kZXgpO1xuICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICBjYkVsLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZpZWxkQ2hhbmdlJywgZSA9PiBoYW5kbGVGaWVsZENoYW5nZShmaWVsZCwgZSkpO1xuICAgICAgICBzZXRDb250cm9sU3R5bGVzKGNiRWwsIGZpZWxkLCBkb2NQYWdlLnhTY2FsZSwgZG9jUGFnZS55U2NhbGUsIGJ1dHRvbkluZGV4KTtcbiAgICAgICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQoY2JFbCk7XG5cbiAgICAgICAgcmV0dXJuIGNiRWw7XG4gICAgICB9KTtcblxuICAgICAgYnJlYWs7XG5cbiAgICAvLyBjYXNlICdhdHRhY2htZW50JzpcbiAgICAvLyAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmVyZG9jcy1maWVsZC1hdHRhY2htZW50Jyk7XG4gICAgLy8gICBlbC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgcmVzdWx0IHx8ICcnKTtcbiAgICAvLyAgIGJyZWFrO1xuICAgIC8vIGNhc2UgJ3BheW1lbnQnOlxuICAgIC8vICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2ZXJkb2NzLWZpZWxkLXBheW1lbnQnKTtcbiAgICAvLyAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zb2xlLmxvZygnW1BSRVZJRVddIFNraXBwaW5nIHVuc3VwcG9ydGVkIGZpZWxkIHR5cGUnLCBmaWVsZCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldFJvbGVJbmRleCA9IChyb2xlczogc3RyaW5nW10sIHJvbGU6IHN0cmluZykgPT4gcm9sZXMuaW5kZXhPZihyb2xlKSB8fCAwO1xuXG4vLyBUT0RPOiBXZSBjYW4gY2xlYW4gdGhpcyB1cCBhIGxvdCBpZiB3ZSBhbHRlciB0aGUgQVBJIHRvIGVtaXQgYm90aCBzZXR0aW5nIGFuZCBzZXR0aW5ncyByZWdhcmRsZXNzIG9mIHRoZSBzb3VyY2UgdHlwZSxcbi8vICAgYnV0IHRoZW4gbWVyZ2UgdGhlIFNESyB0eXBlcyB0byBlbmNvdXJhZ2UgZGV2ZWxvcGVycyB0byB1c2UganVzdCBgc2V0dGluZ3NgLlxuZXhwb3J0IGNvbnN0IGdldEZpZWxkU2V0dGluZ3MgPSAoZmllbGQ6IElUZW1wbGF0ZUZpZWxkIHwgSURvY3VtZW50RmllbGQpID0+IHtcbiAgaWYgKChmaWVsZCBhcyBJVGVtcGxhdGVGaWVsZCkuc2V0dGluZykge1xuICAgIHJldHVybiAoZmllbGQgYXMgSVRlbXBsYXRlRmllbGQpLnNldHRpbmc7XG4gIH1cblxuICBpZiAoKGZpZWxkIGFzIElEb2N1bWVudEZpZWxkKS5zZXR0aW5ncykge1xuICAgIHJldHVybiAoZmllbGQgYXMgSURvY3VtZW50RmllbGQpLnNldHRpbmdzO1xuICB9XG5cbiAgcmV0dXJuIHt4OiAwLCB5OiAwLCByZXF1aXJlZDogZmFsc2UsIGRpc2FibGVkOiBmYWxzZSwgcmVzdWx0OiAnJywgdmFsdWU6ICcnfTtcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHNhZmVseSBzZXQvdXBkYXRlIGNvbXBvbmVudHMgaW4gYSBDU1MgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gVHJhbnNmb3JtIGlzIG5vcm1hbGx5IHNldCBhcyBhIHN0cmluZyBvZlxuICogYG9wZXJhdGlvbjEocGFyYW0pIG9wZXJhdGlvbjIocGFyYW0pIC4uLmAgY29tcG9uZW50cywgd2hpY2ggbWFrZXMgdXBkYXRpbmcgdGhlbSBhIGJpdCBvZiBhIHBhaW4uIFRoaXMgd2lsbCByZW1vdmUgdGhlXG4gKiBzcGVjaWZpZWQgY29tcG9uZW50IGlmIGl0J3MgYWxyZWFkeSBzZXQgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgbmV3IHZhbHVlLCB3aXRob3V0IHRvdWNoaW5nIHRoZSBvdGhlciBjb21wb25lbnRzIHRoYXRcbiAqIG1heSBhbHJlYWR5IGJlIHNldC4gTm90ZSB0aGF0IHRoaXMgb3BlcmF0aW9uIG1vdmVzIHRoZSBjb21wb25lbnQgdG8gdGhlIGVuZCBvZiB0aGUgdHJhbnNmb3JtIGNoYWluIHNvIGl0J3Mgbm90IG1lYW50XG4gKiB0byBiZSB1c2VkIGZvciBvcmRlci1zZW5zaXRpdmUgY29tcG9uZW50cyBlLmcuIHRyYW5zbGF0ZS10aGVuLXJvdGF0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHVwZGF0ZUNzc1RyYW5zZm9ybSA9IChlbDogSFRNTEVsZW1lbnQsIGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIC8vIGUuZy4gJ3NjYWxlKDEuODc5MDgsIDEuODc5MDgpIHRyYW5zbGF0ZSgwcHgsIDBweCk7J1xuICBjb25zdCBjdXJyZW50VHJhbnNmb3JtID0gZWwuc3R5bGUudHJhbnNmb3JtO1xuICAvLyBlLmcuIFsnc2NhbGUoMS44NzkwOCwgMS44NzkwOCknLCAnc2NhbGUnLCAnMS44NzkwOCwgMS44NzkwOCcsIC4uLl0sIFsgJ3RyYW5zbGF0ZSgwcHgsIDBweCknLCAndHJhbnNsYXRlJywgJzBweCwgMHB4J11dXG4gIGNvbnN0IGNvbXBvbmVudHMgPSBbLi4uY3VycmVudFRyYW5zZm9ybS5tYXRjaEFsbCgvKFxcdyspXFwoKFteKV0qKVxcKS9naSldO1xuICBlbC5zdHlsZS50cmFuc2Zvcm0gPSBbXG4gICAgY29tcG9uZW50cyAvL1xuICAgICAgLmZpbHRlcihjb21wb25lbnQgPT4gY29tcG9uZW50WzFdICE9PSBrZXkpIC8vIFJlbW92ZSB0aGUgZW50cnkgaWYgaXQncyBhbHJlYWR5IHNldFxuICAgICAgLm1hcChjb21wb25lbnQgPT4gY29tcG9uZW50WzBdKSwgLy8gQ29udmVydCBiYWNrIHRoZSByZW1haW5pbmcgZW50cmllc1xuICAgIGAke2tleX0oJHt2YWx1ZX0pYCxcbiAgXS5qb2luKCcgJyk7XG59O1xuIiwiLy8gTk9URTogRG8gbm90IGF0dGVtcHQgdG8gY29udmVydCB0aGlzIHRvIGEgbmFtZWQtZXhwb3J0IG1vZHVsZS4gSXQgdHJpZ2dlcnMgY29tcGlsYXRpb24gaXNzdWVzIGluIFJvbGx1cCB0aGF0IEkgc3BlbnQgZGF5cyB0cnlpbmcgdG9cbi8vIHJlc29sdmUuIFRoaXMgbmVlZHMgdG8gZXhwb3J0IGEgc2luZ2xlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHN0b3JlJ3Mgc3RhdGUuIEFueSBoZWxwZXIgZnVuY3Rpb25zIHNob3VsZCBnbyBpbiBUZW1wbGF0ZXMudHMgaGVyZS5cblxuaW1wb3J0IHtjcmVhdGVTdG9yZX0gZnJvbSAnQHN0ZW5jaWwvc3RvcmUnO1xuaW1wb3J0IHtJRW52ZWxvcGV9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9FbnZlbG9wZXMvVHlwZXMnO1xuXG5jb25zdCB7c3RhdGUsIG9uQ2hhbmdlfSA9IGNyZWF0ZVN0b3JlKHtcbiAgZW52ZWxvcGU6IG51bGwgYXMgSUVudmVsb3BlIHwgbnVsbCxcbiAgbG9hZFByb2dyZXNzOiAwLFxuICBsb2FkaW5nOiB0cnVlLFxuICBlcnJvcjogJycsXG5cbiAgcm9sZU5hbWVzOiBbXSBhcyBzdHJpbmdbXSxcbiAgZGlydHk6IGZhbHNlLFxufSk7XG5cbm9uQ2hhbmdlKCdlbnZlbG9wZScsIGFzeW5jIG5ld0VudmVsb3BlID0+IHtcbiAgaWYgKCFuZXdFbnZlbG9wZSkge1xuICAgIGNvbnNvbGUubG9nKCdbRU5WRUxPUEVTVE9SRV0gQ2xlYXJpbmcgZW52ZWxvcGUnKTtcbiAgICBzdGF0ZS5yb2xlTmFtZXMgPSBbXTtcbiAgICBzdGF0ZS5kaXJ0eSA9IGZhbHNlO1xuICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICBzdGF0ZS5lcnJvciA9ICcnO1xuICAgIHN0YXRlLmxvYWRQcm9ncmVzcyA9IDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc29sZS5sb2coJ1tFTlZFTE9QRVNUT1JFXSBMb2FkZWQgZW52ZWxvcGUnLCBuZXdFbnZlbG9wZSk7XG5cbiAgc3RhdGUucm9sZU5hbWVzID0gbmV3RW52ZWxvcGUucmVjaXBpZW50cy5tYXAocmVjaXBpZW50ID0+IHJlY2lwaWVudC5yb2xlX25hbWUpO1xuICBuZXdFbnZlbG9wZS5yZWNpcGllbnRzO1xuICBjb25zb2xlLmxvZygnW0VOVkVMT1BFU1RPUkVdIExvYWRlZCByb2xlcycsIHN0YXRlLnJvbGVOYW1lcyk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3RhdGU7XG4iLCJpbXBvcnQge1ZlcmRvY3NFbmRwb2ludH0gZnJvbSAnQHZlcmRvY3MvanMtc2RrJztcbmltcG9ydCB7Z2V0RW52ZWxvcGV9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9FbnZlbG9wZXMvRW52ZWxvcGVzJztcbmltcG9ydCBFbnZlbG9wZVN0b3JlIGZyb20gJy4vZW52ZWxvcGVTdG9yZSc7XG5cbi8vIEFsbG93cyBlbnZlbG9wZSBkYXRhIHRvIGJlIGNhY2hlZCBmb3IgcmV1c2UgYmV0d2VlbiBjb21wb25lbnRzLCB3aXRob3V0IHBhcmVudCBjb21wb25lbnRzIGhhdmluZyB0byBwcm9wLWRyaWxsIGVudGlyZSBlbnZlbG9wZXMgaW50b1xuLy8gY2hpbGQgZWxlbWVudHMuXG5leHBvcnQgY29uc3QgZ2V0RW52ZWxvcGVCeUlkID0gYXN5bmMgKGVuZHBvaW50OiBWZXJkb2NzRW5kcG9pbnQsIGVudmVsb3BlSWQ6IHN0cmluZykgPT4ge1xuICBFbnZlbG9wZVN0b3JlLmVudmVsb3BlID0gbnVsbDtcblxuICBpZiAoIWVudmVsb3BlSWQpIHtcbiAgICBjb25zb2xlLmxvZyhgW0VOVkVMT1BFU10gTWlzc2luZyByZXF1aXJlZCBlbnZlbG9wZSBJRGApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIEVudmVsb3BlU3RvcmUuZXJyb3IgPSAnJztcbiAgRW52ZWxvcGVTdG9yZS5sb2FkaW5nID0gdHJ1ZTtcblxuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKGBbRU5WRUxPUEVTXSBMb2FkaW5nIGVudmVsb3BlICR7ZW52ZWxvcGVJZH1gKTtcbiAgICBjb25zdCBlbnZlbG9wZSA9IGF3YWl0IGdldEVudmVsb3BlKGVuZHBvaW50LCBlbnZlbG9wZUlkKTtcbiAgICBpZiAoIWVudmVsb3BlKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0VOVkVMT1BFU10gVW5hYmxlIHRvIGxvYWQgZW52ZWxvcGUnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBFbnZlbG9wZVN0b3JlLmVudmVsb3BlID0gZW52ZWxvcGU7XG4gICAgRW52ZWxvcGVTdG9yZS5sb2FkaW5nID0gZmFsc2U7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBFbnZlbG9wZVN0b3JlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICBFbnZlbG9wZVN0b3JlLmVycm9yID0gZT8ucmVzcG9uc2U/LnN0YXR1cyA9PT0gNDAxID8gJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyA6IGUubWVzc2FnZTtcbiAgICBjb25zb2xlLmxvZygnW0VOVkVMT1BFU10gRXJyb3IgbG9hZGluZyBlbnZlbG9wZScsIGUpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCJpbXBvcnQge1ZlcmRvY3NFbmRwb2ludH0gZnJvbSAnQHZlcmRvY3MvanMtc2RrJztcbmltcG9ydCB7RW52ZWxvcGVzfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvRW52ZWxvcGVzJztcbmltcG9ydCB7SURvY3VtZW50RmllbGR9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9FbnZlbG9wZXMvVHlwZXMnO1xuaW1wb3J0IHtDb21wb25lbnQsIGgsIEVsZW1lbnQsIEV2ZW50LCBIb3N0LCBQcm9wLCBFdmVudEVtaXR0ZXIsIEZyYWdtZW50fSBmcm9tICdAc3RlbmNpbC9jb3JlJztcbmltcG9ydCB7Z2V0Um9sZUluZGV4LCByZW5kZXJEb2N1bWVudEZpZWxkfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQge2dldEVudmVsb3BlQnlJZH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvRW52ZWxvcGVzJztcbmltcG9ydCBFbnZlbG9wZVN0b3JlIGZyb20gJy4uLy4uLy4uL3V0aWxzL2VudmVsb3BlU3RvcmUnO1xuaW1wb3J0IHtJRG9jdW1lbnRQYWdlSW5mb30gZnJvbSAnLi4vLi4vLi4vdXRpbHMvVHlwZXMnO1xuaW1wb3J0IHtTREtFcnJvcn0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZXJyb3JzJztcblxuZXhwb3J0IGludGVyZmFjZSBJU291cmNlUGFnZU1ldHJpY3Mge1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUGFnZVJlbmRlckV2ZW50IHtcbiAgcmVuZGVyZWRQYWdlOiBJRG9jdW1lbnRQYWdlSW5mbztcbiAgc291cmNlUGFnZU1ldHJpY3M6IElTb3VyY2VQYWdlTWV0cmljcztcbiAgcGFnZXM6IFJlY29yZDxudW1iZXIsIElEb2N1bWVudFBhZ2VJbmZvPjtcbn1cblxuLyoqXG4gKiBSZW5kZXIgdGhlIGRvY3VtZW50cyBhdHRhY2hlZCB0byBhbiBlbnZlbG9wZSBpbiByZWFkLW9ubHkgKHZpZXcpIG1vZGUuIEFsbCBkb2N1bWVudHMgYXJlIGRpc3BsYXllZCBpbiBvcmRlci5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHRhZzogJ3ZlcmRvY3MtdmlldycsXG4gIHN0eWxlVXJsOiAndmVyZG9jcy12aWV3LnNjc3MnLFxuICBzaGFkb3c6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBWZXJkb2NzVmlldyB7XG4gIEBFbGVtZW50KCkgY29tcG9uZW50OiBIVE1MRWxlbWVudDtcblxuICAvKipcbiAgICogVGhlIGVuZHBvaW50IHRvIHVzZSB0byBjb21tdW5pY2F0ZSB3aXRoIFZlcmRvY3MuIElmIG5vdCBzZXQsIHRoZSBkZWZhdWx0IGVuZHBvaW50IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIEBQcm9wKCkgZW5kcG9pbnQ6IFZlcmRvY3NFbmRwb2ludCA9IFZlcmRvY3NFbmRwb2ludC5nZXREZWZhdWx0KCk7XG5cbiAgLyoqXG4gICAqIFRoZSBlbnZlbG9wZSBJRCB0byByZW5kZXIuIFNldCBPTkUgT0YgdGVtcGxhdGVJZCBvciBlbnZlbG9wZUlkLiBJZiBib3RoIGFyZSBzZXQsIGVudmVsb3BlSWQgd2lsbCBiZSBpZ25vcmVkLlxuICAgKi9cbiAgQFByb3AoKSBlbnZlbG9wZUlkOiBzdHJpbmcgPSAnJztcblxuICAvKipcbiAgICogRXZlbnQgZmlyZWQgaWYgYW4gZXJyb3Igb2NjdXJzLiBUaGUgZXZlbnQgZGV0YWlscyB3aWxsIGNvbnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVycm9yLiBNb3N0IGVycm9ycyB3aWxsXG4gICAqIHRlcm1pbmF0ZSB0aGUgcHJvY2VzcywgYW5kIHRoZSBjYWxsaW5nIGFwcGxpY2F0aW9uIHNob3VsZCBjb3JyZWN0IHRoZSBjb25kaXRpb24gYW5kIHJlLXJlbmRlciB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgQEV2ZW50KHtjb21wb3NlZDogdHJ1ZX0pIHNka0Vycm9yOiBFdmVudEVtaXR0ZXI8U0RLRXJyb3I+O1xuXG4gIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHRoaXMuZW5kcG9pbnQubG9hZFNlc3Npb24oKTtcbiAgfVxuXG4gIC8vIFRPRE86IEhhbmRsaW5nIHNpZ25pbmcgdnMgcHJldmlldy1hcy11c2VyIGNhc2VzXG4gIC8vIFRPRE86IEhhbmRsZSBhbm9ueW1vdXMgY2FzZSBhbmQgZmFpbHVyZSB0byBsb2FkIGR1ZSB0byBub3QgYmVpbmcgbG9nZ2VkIGluXG4gIGFzeW5jIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgaWYgKCF0aGlzLmVudmVsb3BlSWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFtWSUVXXSBNaXNzaW5nIHJldXFpcmVkIGVudmVsb3BlSWRgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgZ2V0RW52ZWxvcGVCeUlkKHRoaXMuZW5kcG9pbnQsIHRoaXMuZW52ZWxvcGVJZCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5zZGtFcnJvcj8uZW1pdChuZXcgU0RLRXJyb3IoZS5tZXNzYWdlLCBlLnJlc3BvbnNlPy5zdGF0dXMsIGUucmVzcG9uc2U/LmRhdGEpKTtcbiAgICB9XG4gIH1cblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciBhIHBhZ2UgaXMgXCJyb3RhdGVkXCIgKGluIGVpdGhlciBkaXJlY3Rpb24pXG4gIC8vIGlzUm90YXRlZChyb3RhdGlvbikge1xuICAvLyAgIHJldHVybiByb3RhdGlvbiAhPT0gMCAmJiByb3RhdGlvbiAlIDE4MCAhPT0gMDtcbiAgLy8gfVxuXG4gIC8vIFJlbmRlciBvbmUgZG9jdW1lbnQgcGFnZS4gTm90ZSB0aGF0IHBhZ2VOdW1iZXIgaXMgMS1iYXNlZC5cbiAgLy8gYXN5bmMgcmVuZGVyUGFnZShwYWdlTnVtYmVyOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgLy8gICBjb25zdCBkb21QYWdlID0gdGhpcy5kb21QYWdlc1twYWdlTnVtYmVyXTtcbiAgLy9cbiAgLy8gICAvLyBUd28gYXN5bmMgb3BlcmF0aW9ucyBoYXBwZW4gaGVyZSwgbG9hZGluZyB0aGUgUERGIGFuZCByZW5kZXJpbmcgdGhlIERPTSBkaXYvY2FudmFzIHBsYWNlaG9sZGVycyB0byBkcmF3IHRoZSBwYWdlcyBvbi5cbiAgLy8gICBpZiAoIWRvbVBhZ2UpIHtcbiAgLy8gICAgIGNvbnNvbGUubG9nKCdbVklFV10gU2tpcHBpbmcgcmVuZGVyaW5nIHBhZ2Ugbm90IHlldCBpbiBET00nLCB7cGFnZU51bWJlcn0pO1xuICAvLyAgICAgcmV0dXJuO1xuICAvLyAgIH1cbiAgLy9cbiAgLy8gICBjb25zdCBwYWdlTWV0cmljcyA9IHRoaXMuc291cmNlUGFnZU1ldHJpY3NbcGFnZU51bWJlcl07XG4gIC8vXG4gIC8vICAgY29uc29sZS5sb2coJ1tWSUVXXSBSZW5kZXJpbmcgcGFnZScsIHtwYWdlTnVtYmVyLCBwYWdlTWV0cmljcywgZG9tUGFnZX0pO1xuICAvLyAgIHRyeSB7XG4gIC8vICAgICAvLyBjb25zdCBwZGZQYWdlID0gYXdhaXQgdGhpcy5wZGZEb2N1bWVudC5nZXRQYWdlKHBhZ2VOdW1iZXIpO1xuICAvLyAgICAgLy8gY29uc3Qgdmlld3BvcnQgPSBwZGZQYWdlLmdldFZpZXdwb3J0KHtzY2FsZTogZG9tUGFnZS54U2NhbGV9KTtcbiAgLy8gICAgIC8vIGNvbnNvbGUubG9nKCdbVklFV10gUGFnZSB2aWV3cG9ydCcsIGRvbVBhZ2UueFNjYWxlLCB2aWV3cG9ydCk7XG4gIC8vXG4gIC8vICAgICAvLyBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtkb21QYWdlLmNvbnRhaW5lcklkfS1wYWdlYCkgYXMgSFRNTENhbnZhc0VsZW1lbnQgfCBudWxsO1xuICAvLyAgICAgLy8gaWYgKCFjYW52YXMpIHtcbiAgLy8gICAgIC8vICAgY29uc29sZS5sb2coJ1tWSUVXXSBVbmFibGUgdG8gZmluZCBjYW52YXMgZWxlbWVudCcpO1xuICAvLyAgICAgLy8gICByZXR1cm47XG4gIC8vICAgICAvLyB9XG4gIC8vICAgICAvL1xuICAvLyAgICAgLy8gY2FudmFzLndpZHRoID0gZG9tUGFnZS5yZW5kZXJlZFdpZHRoO1xuICAvLyAgICAgLy8gY2FudmFzLmhlaWdodCA9IGRvbVBhZ2UucmVuZGVyZWRIZWlnaHQ7XG4gIC8vICAgICAvLyBjb25zdCBjYW52YXNDb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIC8vICAgICAvLyBjYW52YXNDb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBkb21QYWdlLnJlbmRlcmVkV2lkdGgsIGRvbVBhZ2UucmVuZGVyZWRIZWlnaHQpO1xuICAvLyAgICAgLy8gYXdhaXQgcGRmUGFnZS5yZW5kZXIoe2NhbnZhc0NvbnRleHQsIHZpZXdwb3J0fSk7XG4gIC8vXG4gIC8vICAgICB0aGlzLnBhZ2VSZW5kZXJlZC5lbWl0KHtcbiAgLy8gICAgICAgcmVuZGVyZWRQYWdlOiBkb21QYWdlLFxuICAvLyAgICAgICBzb3VyY2VQYWdlTWV0cmljczogcGFnZU1ldHJpY3MsXG4gIC8vICAgICAgIHBhZ2VzOiB0aGlzLmRvbVBhZ2VzLFxuICAvLyAgICAgfSk7XG4gIC8vICAgfSBjYXRjaCAoZSkge1xuICAvLyAgICAgdGhpcy5zZGtFcnJvcj8uZW1pdChuZXcgU0RLRXJyb3IoZS5tZXNzYWdlLCBlLnJlc3BvbnNlPy5zdGF0dXMsIGUucmVzcG9uc2U/LmRhdGEpKTtcbiAgLy8gICAgIGNvbnNvbGUud2FybignW1ZJRVddIEVycm9yIHJlbmRlcmluZyBwYWdlJywgZSk7XG4gIC8vICAgfVxuICAvLyB9XG5cbiAgLy8gYXN5bmMgcmVuZGVyUGFnZXMoKTogUHJvbWlzZTx2b2lkPiB7XG4gIC8vICAgY29uc3QgcGFnZU51bWJlcnNUb1JlbmRlciA9IGludGVnZXJTZXF1ZW5jZSgxLCB0aGlzLm51bVBhZ2VzKTtcbiAgLy8gICBmb3IgYXdhaXQgKGxldCBwYWdlTnVtYmVyIG9mIHBhZ2VOdW1iZXJzVG9SZW5kZXIpIHtcbiAgLy8gICAgIHRyeSB7XG4gIC8vICAgICAgIGF3YWl0IHRoaXMucmVuZGVyUGFnZShwYWdlTnVtYmVyKTtcbiAgLy8gICAgIH0gY2F0Y2ggKGUpIHtcbiAgLy8gICAgICAgdGhpcy5zZGtFcnJvcj8uZW1pdChuZXcgU0RLRXJyb3IoZS5tZXNzYWdlLCBlLnJlc3BvbnNlPy5zdGF0dXMsIGUucmVzcG9uc2U/LmRhdGEpKTtcbiAgLy8gICAgICAgY29uc29sZS53YXJuKCdbVklFV10gRXJyb3IgcmVuZGVyaW5nIHBhZ2VzJywgZSk7XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyB9XG5cbiAgLy8gb25Qcm9ncmVzcyhwcm9ncmVzczogT25Qcm9ncmVzc1BhcmFtZXRlcnMpIHtcbiAgLy8gICBjb25zb2xlLmxvZyhgW1ZJRVddIFByb2dyZXNzICR7TWF0aC5mbG9vcigocHJvZ3Jlc3MubG9hZGVkIC8gcHJvZ3Jlc3MudG90YWwpICogMTAwKX0gKCR7cHJvZ3Jlc3MubG9hZGVkfSAvICR7cHJvZ3Jlc3MudG90YWx9KWApO1xuICAvLyAgIHRoaXMubG9hZFByb2dyZXNzID0gTWF0aC5mbG9vcigoMTAwICogcHJvZ3Jlc3MubG9hZGVkKSAvIHByb2dyZXNzLnRvdGFsKTtcbiAgLy8gfVxuXG4gIC8vIEFmdGVyIGEgZG9jdW1lbnQgaXMgZG9uZSBsb2FkaW5nLCBnbyB0aHJvdWdoIGl0cyBwYWdlcyB0byBnZXQgdGhlaXIgZGltZW5zaW9uc1xuICAvLyBhc3luYyBwYXJzZVBhZ2VNZXRyaWNzKHBkZkRvY3VtZW50OiBwZGZqc0xpYi5QREZEb2N1bWVudFByb3h5KSB7XG4gIC8vICAgY29uc3QgcGFnZU51bWJlcnNUb1JlbmRlciA9IGludGVnZXJTZXF1ZW5jZSgxLCBwZGZEb2N1bWVudC5udW1QYWdlcyk7XG4gIC8vXG4gIC8vICAgZm9yIGF3YWl0IChsZXQgcGFnZU51bWJlciBvZiBwYWdlTnVtYmVyc1RvUmVuZGVyKSB7XG4gIC8vICAgICBjb25zdCBwZGZQYWdlID0gYXdhaXQgcGRmRG9jdW1lbnQuZ2V0UGFnZSgxKTtcbiAgLy8gICAgIGNvbnN0IFtwYWdlWDAsIHBhZ2VZMCwgcGFnZVgxLCBwYWdlWTFdID0gcGRmUGFnZS52aWV3O1xuICAvLyAgICAgdGhpcy5zb3VyY2VQYWdlTWV0cmljc1twYWdlTnVtYmVyXSA9IHt3aWR0aDogcGFnZVgxIC0gcGFnZVgwLCBoZWlnaHQ6IHBhZ2VZMSAtIHBhZ2VZMH07XG4gIC8vICAgfVxuICAvL1xuICAvLyAgIGNvbnNvbGUubG9nKCdbVklFV10gUGFyc2VkIHBhZ2UgbWV0cmljcycsIHRoaXMuc291cmNlUGFnZU1ldHJpY3MpO1xuICAvLyB9XG5cbiAgLy8gbG9hZEFuZFJlbmRlcihzcmM6IHN0cmluZyk6IHZvaWQge1xuICAvLyAgIGNvbnNvbGUubG9nKCdbVklFV10gTG9hZGluZycsIHNyYyk7XG4gIC8vXG4gIC8vICAgY29uc3QgdG9rZW4gPSB0aGlzLmVuZHBvaW50LmdldFRva2VuKCk7XG4gIC8vICAgY29uc3QgaHR0cEhlYWRlcnMgPSB0b2tlbiA/IHtBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW59YH0gOiB7fTtcbiAgLy9cbiAgLy8gICBjb25zdCBzb3VyY2UgPSB7XG4gIC8vICAgICB1cmw6IHNyYyxcbiAgLy8gICAgIGNNYXBVcmw6IENNQVBTX1VSTCxcbiAgLy8gICAgIGNNYXBQYWNrZWQ6IHRydWUsXG4gIC8vICAgICBodHRwSGVhZGVycyxcbiAgLy8gICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcbiAgLy8gICAgIHN0b3BBdEVycm9yczogdHJ1ZSxcbiAgLy8gICAgIHZlcmJvc2l0eTogcGRmanNMaWIuVmVyYm9zaXR5TGV2ZWwuV0FSTklOR1MsXG4gIC8vICAgICAvLyB2ZXJib3NpdHk6IHBkZmpzTGliLlZlcmJvc2l0eUxldmVsLklORk9TLFxuICAvLyAgIH0gYXMgRG9jdW1lbnRJbml0UGFyYW1ldGVycztcbiAgLy9cbiAgLy8gICAvLyBAdHMtaWdub3JlXG4gIC8vICAgY29uc3QgbG9hZGluZ1Rhc2sgPSBwZGYuZ2V0RG9jdW1lbnQoc291cmNlLCBudWxsLCBudWxsLCB0aGlzLm9uUHJvZ3Jlc3MpO1xuICAvLyAgIGxvYWRpbmdUYXNrLm9uUHJvZ3Jlc3MgPSB0aGlzLm9uUHJvZ3Jlc3M7XG4gIC8vICAgbG9hZGluZ1Rhc2sucHJvbWlzZVxuICAvLyAgICAgLnRoZW4oYXN5bmMgKHBkZkRvY3VtZW50OiBwZGZqc0xpYi5QREZEb2N1bWVudFByb3h5KSA9PiB7XG4gIC8vICAgICAgIGF3YWl0IHRoaXMucGFyc2VQYWdlTWV0cmljcyhwZGZEb2N1bWVudCk7XG4gIC8vXG4gIC8vICAgICAgIHRoaXMucGRmRG9jdW1lbnQgPSBwZGZEb2N1bWVudDtcbiAgLy8gICAgICAgdGhpcy5udW1QYWdlcyA9IHBkZkRvY3VtZW50Lm51bVBhZ2VzO1xuICAvLyAgICAgICB0aGlzLmZpbmdlcnByaW50cyA9IHBkZkRvY3VtZW50LmZpbmdlcnByaW50cztcbiAgLy8gICAgICAgY29uc29sZS5sb2coYFtWSUVXXSBHb3QgUERGIGRvY3VtZW50IGZpbmdlcnByaW50cyBcIiR7dGhpcy5maW5nZXJwcmludHMuam9pbignLCAnKX1cIiwgJHt0aGlzLm51bVBhZ2VzfSBwYWdlKHMpYCk7XG4gIC8vXG4gIC8vICAgICAgIC8vIFdlIGRvbid0IHRyeSB0byByZW5kZXIgdGhlIHBhZ2VzIGhlcmUsIHNldHRpbmcgbG9hZFByb3RyZXNzIHRyaWdnZXJzIHRoYXQgYnkgYWRkaW5nIHRoZSBpbmRpdmlkdWFsIHBhZ2UgZW50cmllcyBpblxuICAvLyAgICAgICAvLyBET00gaW4gcmVuZGVyKCkgYmVsb3cuIEVhY2ggcGFnZSB0aGVuIGZpcmVzIG9uUGFnZVJlbmRlcmVkIHdoZW4gaXQgaXMgcmVhZHkgdG8gcmVjZWl2ZSBjb250ZW50LlxuICAvLyAgICAgICB0aGlzLmxvYWRQcm9ncmVzcyA9IDEwMDtcbiAgLy8gICAgIH0pXG4gIC8vICAgICAuY2F0Y2goZSA9PiB7XG4gIC8vICAgICAgIHRoaXMuc2RrRXJyb3I/LmVtaXQobmV3IFNES0Vycm9yKGUubWVzc2FnZSwgZS5yZXNwb25zZT8uc3RhdHVzLCBlLnJlc3BvbnNlPy5kYXRhKSk7XG4gIC8vICAgICAgIGNvbnNvbGUubG9nKCdbVklFV10gTG9hZGluZyBlcnJvcicsIGUpO1xuICAvLyAgICAgfSk7XG4gIC8vIH1cblxuICAvLyBhc3luYyBoYW5kbGVQYWdlUmVuZGVyZWQoZTogYW55KSB7XG4gIC8vICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgLy9cbiAgLy8gICBjb25zdCBkb21QYWdlID0gZS5kZXRhaWwgYXMgSURvY3VtZW50UGFnZUluZm87XG4gIC8vICAgdGhpcy5kb21QYWdlc1tkb21QYWdlLnBhZ2VOdW1iZXJdID0gZG9tUGFnZTtcbiAgLy8gICBhd2FpdCB0aGlzLnJlbmRlclBhZ2UoZG9tUGFnZS5wYWdlTnVtYmVyKTtcbiAgLy8gfVxuXG4gIGFzeW5jIGhhbmRsZUZpZWxkQ2hhbmdlKGZpZWxkOiBJRG9jdW1lbnRGaWVsZCwgZTogYW55LCBvcHRpb25JZD86IHN0cmluZykge1xuICAgIGNvbnNvbGUubG9nKCdmaWVsZENoYW5nZScsIGZpZWxkLCBlKTtcbiAgICBzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3RleHRib3gnOlxuICAgICAgICBFbnZlbG9wZXMudXBkYXRlRW52ZWxvcGVGaWVsZCh0aGlzLmVuZHBvaW50LCB0aGlzLmVudmVsb3BlSWQsIGZpZWxkLm5hbWUsIHtwcmVwYXJlZDogZmFsc2UsIHZhbHVlOiBlLmRldGFpbH0pXG4gICAgICAgICAgLnRoZW4ociA9PiBjb25zb2xlLmxvZygnVXBkYXRlIHJlc3VsdCcsIHIpKVxuICAgICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2RrRXJyb3I/LmVtaXQobmV3IFNES0Vycm9yKGUubWVzc2FnZSwgZS5yZXNwb25zZT8uc3RhdHVzLCBlLnJlc3BvbnNlPy5kYXRhKSk7XG4gICAgICAgICAgICBpZiAoZS5yZXNwb25zZT8uc3RhdHVzID09PSA0MDEgJiYgZS5yZXNwb25zZT8uZGF0YT8uZXJyb3IgPT09ICdqd3QgZXhwaXJlZCcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2p3dCBleHBpcmVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgdXBkYXRpbmcnLCBlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2NoZWNrYm94X2dyb3VwJzpcbiAgICAgICAgRW52ZWxvcGVzLnVwZGF0ZUVudmVsb3BlRmllbGQodGhpcy5lbmRwb2ludCwgdGhpcy5lbnZlbG9wZUlkLCBmaWVsZC5uYW1lLCB7cHJlcGFyZWQ6IGZhbHNlLCB2YWx1ZToge29wdGlvbnM6IFt7aWQ6IG9wdGlvbklkLCBjaGVja2VkOiBlLmRldGFpbH1dfX0pXG4gICAgICAgICAgLnRoZW4ociA9PiBjb25zb2xlLmxvZygnVXBkYXRlIHJlc3VsdCcsIHIpKVxuICAgICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2RrRXJyb3I/LmVtaXQobmV3IFNES0Vycm9yKGUubWVzc2FnZSwgZS5yZXNwb25zZT8uc3RhdHVzLCBlLnJlc3BvbnNlPy5kYXRhKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgdXBkYXRpbmcnLCBlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3JhZGlvX2J1dHRvbl9ncm91cCc6XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBmaWVsZC5zZXR0aW5ncy5vcHRpb25zLm1hcChvcHRpb24gPT4gKHtpZDogb3B0aW9uLmlkLCBzZWxlY3RlZDogb3B0aW9uSWQgPT09IG9wdGlvbi5pZH0pKTtcbiAgICAgICAgRW52ZWxvcGVzLnVwZGF0ZUVudmVsb3BlRmllbGQodGhpcy5lbmRwb2ludCwgdGhpcy5lbnZlbG9wZUlkLCBmaWVsZC5uYW1lLCB7cHJlcGFyZWQ6IGZhbHNlLCB2YWx1ZToge29wdGlvbnN9fSlcbiAgICAgICAgICAudGhlbihyID0+IGNvbnNvbGUubG9nKCdVcGRhdGUgcmVzdWx0JywgcikpXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZGtFcnJvcj8uZW1pdChuZXcgU0RLRXJyb3IoZS5tZXNzYWdlLCBlLnJlc3BvbnNlPy5zdGF0dXMsIGUucmVzcG9uc2U/LmRhdGEpKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciB1cGRhdGluZycsIGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZHJvcGRvd24nOlxuICAgICAgICBFbnZlbG9wZXMudXBkYXRlRW52ZWxvcGVGaWVsZCh0aGlzLmVuZHBvaW50LCB0aGlzLmVudmVsb3BlSWQsIGZpZWxkLm5hbWUsIHtwcmVwYXJlZDogZmFsc2UsIHZhbHVlOiBlLmRldGFpbH0pXG4gICAgICAgICAgLnRoZW4ociA9PiBjb25zb2xlLmxvZygnVXBkYXRlIHJlc3VsdCcsIHIpKVxuICAgICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2RrRXJyb3I/LmVtaXQobmV3IFNES0Vycm9yKGUubWVzc2FnZSwgZS5yZXNwb25zZT8uc3RhdHVzLCBlLnJlc3BvbnNlPy5kYXRhKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgdXBkYXRpbmcnLCBlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2luaXRpYWwnOlxuICAgICAgICBjb25zb2xlLmxvZygnR290IGluaXRpYWwnLCBlLmRldGFpbCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzaWduYXR1cmUnOlxuICAgICAgICBjb25zb2xlLmxvZygnR290IHNpZ25hdHVyZScsIGUuZGV0YWlsKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlUGFnZVJlbmRlcmVkKGUpIHtcbiAgICBjb25zdCBwYWdlSW5mbyA9IGUuZGV0YWlsIGFzIElEb2N1bWVudFBhZ2VJbmZvO1xuICAgIGNvbnNvbGUubG9nKCdbU0lHTl0gUGFnZSByZW5kZXJlZCcsIHBhZ2VJbmZvKTtcblxuICAgIEVudmVsb3BlU3RvcmUuZW52ZWxvcGUucmVjaXBpZW50cy5tYXAocmVjaXBpZW50ID0+IHtcbiAgICAgIGNvbnN0IGZpZWxkcyA9IHJlY2lwaWVudC5maWVsZHMuZmlsdGVyKGZpZWxkID0+IGZpZWxkLnBhZ2UgPT09IHBhZ2VJbmZvLnBhZ2VOdW1iZXIpO1xuICAgICAgLy8gY29uc3QgZmllbGRzID0gdGhpcy5maWVsZHMuZmlsdGVyKGZpZWxkID0+IGZpZWxkLnBhZ2Vfc2VxdWVuY2UgPT09IHBhZ2VJbmZvLnJlbmRlcmVkUGFnZS5wYWdlTnVtYmVyKTtcbiAgICAgIGNvbnNvbGUubG9nKCdbU0lHTl0gRmllbGRzIG9uIHBhZ2UnLCBmaWVsZHMpO1xuICAgICAgZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IHJlbmRlckRvY3VtZW50RmllbGQoZmllbGQsIHBhZ2VJbmZvLCBnZXRSb2xlSW5kZXgoRW52ZWxvcGVTdG9yZS5yb2xlTmFtZXMsIGZpZWxkLnJlY2lwaWVudF9yb2xlKSwgdGhpcy5oYW5kbGVGaWVsZENoYW5nZSwgdHJ1ZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3JlbmRlcmVkIGVsZW1lbnQnLCBlbCk7XG4gICAgICAgIC8vIGNvbnN0IGVsID0gcmVuZGVyRG9jdW1lbnRGaWVsZChmaWVsZCwgcGFnZUluZm8ucmVuZGVyZWRQYWdlLCBnZXRSb2xlSW5kZXgodGhpcy5yb2xlcywgZmllbGQucm9sZV9uYW1lKSwgdGhpcy5oYW5kbGVGaWVsZENoYW5nZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIGlmICghZWwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdyZWNpcGllbnRDaGFuZ2VkJywgZSA9PiB7XG4gICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdyb2xlaW5kZXgnLCBnZXRSb2xlSW5kZXgoRW52ZWxvcGVTdG9yZS5yb2xlTmFtZXMsIGUuZGV0YWlsKSk7XG4gICAgICAgICAgLy8gZWwuc2V0QXR0cmlidXRlKCdyb2xlaW5kZXgnLCBnZXRSb2xlSW5kZXgodGhpcy5yb2xlcywgZS5kZXRhaWwpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCd4U2NhbGUnLCBwYWdlSW5mby54U2NhbGUpO1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3lTY2FsZScsIHBhZ2VJbmZvLnlTY2FsZSk7XG5cbiAgICAgICAgLy8gaW50ZXJhY3QoZWwpLmRyYWdnYWJsZSh7XG4gICAgICAgIC8vICAgbGlzdGVuZXJzOiB7XG4gICAgICAgIC8vICAgICBzdGFydChldmVudCkge1xuICAgICAgICAvLyAgICAgICBjb25zb2xlLmxvZygnW0ZJRUxEU10gRHJhZyBzdGFydGVkJywgZXZlbnQudHlwZSwgZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgICBtb3ZlKGV2ZW50KSB7XG4gICAgICAgIC8vICAgICAgIGNvbnN0IG9sZFggPSArKGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3Bvc1gnKSB8fCAwKTtcbiAgICAgICAgLy8gICAgICAgY29uc3Qgb2xkWSA9ICsoZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgncG9zWScpIHx8IDApO1xuICAgICAgICAvLyAgICAgICBjb25zdCB4U2NhbGUgPSArKGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3hTY2FsZScpIHx8IDEpO1xuICAgICAgICAvLyAgICAgICBjb25zdCB5U2NhbGUgPSArKGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3lTY2FsZScpIHx8IDEpO1xuICAgICAgICAvLyAgICAgICBjb25zdCBuZXdYID0gZXZlbnQuZHggLyB4U2NhbGUgKyBvbGRYO1xuICAgICAgICAvLyAgICAgICBjb25zdCBuZXdZID0gZXZlbnQuZHkgLyB5U2NhbGUgKyBvbGRZO1xuICAgICAgICAvLyAgICAgICBldmVudC50YXJnZXQuc2V0QXR0cmlidXRlKCdwb3NYJywgbmV3WCk7XG4gICAgICAgIC8vICAgICAgIGV2ZW50LnRhcmdldC5zZXRBdHRyaWJ1dGUoJ3Bvc3knLCBuZXdZKTtcbiAgICAgICAgLy8gICAgICAgdXBkYXRlQ3NzVHJhbnNmb3JtKGV2ZW50LnRhcmdldCwgJ3RyYW5zbGF0ZScsIGAke25ld1h9cHgsICR7bmV3WX1weGApO1xuICAgICAgICAvLyAgICAgfSxcbiAgICAgICAgLy8gICAgIGVuZChldmVudCkge1xuICAgICAgICAvLyAgICAgICBjb25zb2xlLmxvZygnW0ZJRUxEU10gRHJhZyBlbmRlZCcsIGV2ZW50KTtcbiAgICAgICAgLy8gICAgICAgLy8gZXZlbnQudGFyZ2V0LnNldEF0dHJpYnV0ZSgncG9zWCcsIDApO1xuICAgICAgICAvLyAgICAgICAvLyBldmVudC50YXJnZXQuc2V0QXR0cmlidXRlKCdwb3N5JywgMCk7XG4gICAgICAgIC8vICAgICAgIC8vIHVwZGF0ZUNzc1RyYW5zZm9ybShldmVudC50YXJnZXQsICd0cmFuc2xhdGUnLCBgJHswfXB4LCAkezB9cHhgKTtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgfSxcbiAgICAgICAgLy8gfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zb2xlLmxvZygnW1ZJRVddIFJlbmRlcmluZycsIEVudmVsb3BlU3RvcmUuZXJyb3IsIEVudmVsb3BlU3RvcmUubG9hZGluZywgRW52ZWxvcGVTdG9yZS5lbnZlbG9wZSk7XG4gICAgaWYgKEVudmVsb3BlU3RvcmUubG9hZGluZyB8fCAhRW52ZWxvcGVTdG9yZS5lbnZlbG9wZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEhvc3Q+XG4gICAgICAgICAgPHZlcmRvY3MtbG9hZGVyIC8+XG4gICAgICAgIDwvSG9zdD5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKEVudmVsb3BlU3RvcmUuZXJyb3IpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxIb3N0PlxuICAgICAgICAgIDxkaXY+e0VudmVsb3BlU3RvcmUuZXJyb3J9PC9kaXY+XG4gICAgICAgIDwvSG9zdD5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxIb3N0PlxuICAgICAgICB7KEVudmVsb3BlU3RvcmUuZW52ZWxvcGU/LmRvY3VtZW50cyB8fCBbXSkubWFwKGVudmVsb3BlRG9jdW1lbnQgPT4ge1xuICAgICAgICAgIGNvbnN0IHBhZ2VzID0gWy4uLihlbnZlbG9wZURvY3VtZW50Py5wYWdlcyB8fCBbXSldO1xuICAgICAgICAgIHBhZ2VzLnNvcnQoKGEsIGIpID0+IGEuc2VxdWVuY2UgLSBiLnNlcXVlbmNlKTtcblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgICAgIHtwYWdlcy5tYXAocGFnZSA9PiAoXG4gICAgICAgICAgICAgICAgPHZlcmRvY3MtZG9jdW1lbnQtcGFnZVxuICAgICAgICAgICAgICAgICAgcGFnZUltYWdlVXJpPXtwYWdlLmRpc3BsYXlfdXJpfVxuICAgICAgICAgICAgICAgICAgdmlydHVhbFdpZHRoPXs2MTJ9XG4gICAgICAgICAgICAgICAgICB2aXJ0dWFsSGVpZ2h0PXs3OTJ9XG4gICAgICAgICAgICAgICAgICBwYWdlTnVtYmVyPXtwYWdlLnNlcXVlbmNlfVxuICAgICAgICAgICAgICAgICAgb25QYWdlUmVuZGVyZWQ9e2UgPT4gdGhpcy5oYW5kbGVQYWdlUmVuZGVyZWQoZSl9XG4gICAgICAgICAgICAgICAgICBsYXllcnM9e1tcbiAgICAgICAgICAgICAgICAgICAge25hbWU6ICdwYWdlJywgdHlwZTogJ2NhbnZhcyd9LFxuICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ2NvbnRyb2xzJywgdHlwZTogJ2Rpdid9LFxuICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSl9XG4gICAgICA8L0hvc3Q+XG4gICAgKTtcbiAgfVxufVxuIiwiQGltcG9ydCAnLi4vLi4vLi4vdGhlbWUuc2Nzcyc7XG5cbnZlcmRvY3MtdmlldyB7XG4gIGZvbnQtZmFtaWx5OiAkdmVyZG9jcy1wcmltYXJ5LWZvbnQ7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBhZGRpbmc6IDE1cHg7XG4gIHJvdy1nYXA6IDE1cHg7XG4gIG1pbi1oZWlnaHQ6IDIwMHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cbiAgZGl2LFxuICBjYW52YXMge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2UnKTtcbi8vIENocm9tZSA4MC04MiBoYXMgYSBjcml0aWNhbCBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcbnZhciBDSFJPTUVfQlVHID0gIUlTX05PREUgJiYgQ0hST01FX1ZFUlNJT04gPiA3OSAmJiBDSFJPTUVfVkVSU0lPTiA8IDgzO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgbGVuZ3RoLCBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9