/*! For license information please see main.97136ef3.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"./.storybook/preview.js-generated-config-entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,"parameters",(function(){return parameters}));__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-properties.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var ClientApi=__webpack_require__("./node_modules/@storybook/client-api/dist/esm/ClientApi.js"),index_f78d163d=(__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./dist/esm/index-f78d163d.js")),dist=__webpack_require__("./node_modules/@pxtrn/storybook-addon-docs-stencil/dist/index.js"),docs=__webpack_require__("./dist/docs.json");!function defineCustomElements(win,options){"undefined"==typeof window?Promise.resolve():function patchEsm(){return Object(index_f78d163d.i)()}().then((function(){return Object(index_f78d163d.d)([["verdocs-build",[[0,"verdocs-build",{endpoint:[16],templateId:[1,"template-id"],step:[32],pdfUrl:[32],template:[32]}]]],["verdocs-sign",[[0,"verdocs-sign",{envelopeId:[1,"envelope-id"],roleId:[1,"role-id"],inviteCode:[1,"invite-code"],recipient:[32],signerToken:[32],hasSignature:[32],nextButtonLabel:[32],nextSubmits:[32],errorMessage:[32],focusedField:[32],isDone:[32],showDone:[32],finishLater:[32],showFinishLater:[32],agreed:[32]}]]],["verdocs-field-initial",[[0,"verdocs-field-initial",{field:[16],disabled:[4],initials:[1],editable:[4],moveable:[4],done:[4],roleindex:[2],tempInitials:[32],focusField:[64]}]]],["verdocs-auth",[[0,"verdocs-auth",{endpoint:[16],visible:[4],logo:[1],isAuthenticated:[32],displayMode:[32],username:[32],password:[32],loggingIn:[32],activeSession:[32],loginError:[32]}]]],["verdocs-field-date",[[0,"verdocs-field-date",{field:[16],disabled:[4],editable:[4],moveable:[4],done:[4],roleindex:[2],containerId:[32],focusField:[64]}]]],["verdocs-field-textarea",[[0,"verdocs-field-textarea",{field:[16],disabled:[4],editable:[4],moveable:[4],done:[4],roleindex:[2],focusField:[64]}]]],["verdocs-field-textbox",[[0,"verdocs-field-textbox",{field:[16],disabled:[4],editable:[4],moveable:[4],done:[4],roleindex:[2],focusField:[64]}]]],["verdocs-field-timestamp",[[0,"verdocs-field-timestamp",{field:[16],disabled:[4],editable:[4],moveable:[4],done:[4],roleindex:[2],focusField:[64]}]]],["verdocs-search",[[0,"verdocs-search",{endpoint:[16]}]]],["verdocs-send",[[0,"verdocs-send",{endpoint:[16],templateId:[1,"template-id"],template:[32],pdfUrl:[32],containerId:[32],rolesAtLevel:[32],showPickerForId:[32],sessionContacts:[32],recipientsAssigned:[32]}]]],["verdocs-field-attachment",[[0,"verdocs-field-attachment",{field:[16],disabled:[4],roleIndex:[2,"role-index"],focusField:[64]}]]],["verdocs-preview",[[0,"verdocs-preview",{endpoint:[16],templateId:[1,"template-id"]}]]],["verdocs-kba-dialog",[[0,"verdocs-kba-dialog",{step:[2],steps:[2],helptitle:[1],helptext:[1],mode:[1],label:[1],placeholder:[1],choices:[16],response:[32]}]]],["verdocs-field-checkbox",[[0,"verdocs-field-checkbox",{field:[16],option:[2],disabled:[4],done:[4],roleindex:[2]}]]],["verdocs-field-dropdown",[[0,"verdocs-field-dropdown",{field:[16],disabled:[4],roleindex:[2],focusField:[64]}]]],["verdocs-field-payment",[[0,"verdocs-field-payment",{field:[16],disabled:[4],fields:[16],pageNum:[2,"page-num"],roleName:[1,"role-name"],fieldId:[1,"field-id"],recipients:[8],selectedRoleName:[1,"selected-role-name"],pdfPages:[16],currentSignature:[1,"current-signature"],currentSignatureId:[1,"current-signature-id"],currentInitial:[1,"current-initial"],currentInitialId:[1,"current-initial-id"],focused:[4],signed:[4],roleindex:[2],preparedMessage:[32],signatureUrl:[32]}]]],["verdocs-field-radio-button",[[0,"verdocs-field-radio-button",{field:[16],option:[2],disabled:[4],done:[4],roleindex:[2]}]]],["verdocs-organization-card",[[0,"verdocs-organization-card",{organization:[16]}]]],["verdocs-search-tabs",[[0,"verdocs-search-tabs",{selected:[32]}]]],["verdocs-status-indicator",[[0,"verdocs-status-indicator",{size:[1],theme:[1],status:[1],envelope:[16],isOpen:[32],recipientStatusIcons:[32],containerId:[32]}]]],["verdocs-template-card",[[0,"verdocs-template-card",{template:[16]}]]],["verdocs-template-tags",[[0,"verdocs-template-tags",{tags:[16]}]]],["verdocs-toggle",[[0,"verdocs-toggle",{options:[16],theme:[1],selectedOption:[32]}]]],["verdocs-button",[[0,"verdocs-button",{label:[1],startIcon:[1,"start-icon"],endIcon:[1,"end-icon"],size:[1],type:[1],variant:[1],disabled:[4]}]]],["verdocs-contact-picker",[[0,"verdocs-contact-picker",{endpoint:[16],templateRole:[16],contactSuggestions:[16],name:[32],email:[32],phone:[32],message:[32],showSuggestions:[32],showMessage:[32],delegator:[32]}]]],["verdocs-initial-dialog",[[0,"verdocs-initial-dialog",{initials:[1],fontLoaded:[32],enteredInitials:[32],mode:[32]}]]],["verdocs-upload-dialog",[[0,"verdocs-upload-dialog",{draggingOver:[32],decodedFiles:[32]}]]],["verdocs-document-page_2",[[0,"verdocs-document-page",{pageImageUri:[1,"page-image-uri"],pageNumber:[2,"page-number"],virtualWidth:[2,"virtual-width"],virtualHeight:[1026,"virtual-height"],layers:[16],containerId:[32],renderedWidth:[32],renderedHeight:[32],naturalWidth:[32],naturalHeight:[32],aspectRatio:[32],skipFirstNotification:[32]}],[0,"verdocs-loader"]]],["verdocs-dropdown_2",[[0,"verdocs-view",{endpoint:[16],envelopeId:[1,"envelope-id"]}],[0,"verdocs-dropdown",{options:[16],open:[32]}]]],["verdocs-ok-dialog",[[0,"verdocs-ok-dialog",{heading:[1],message:[1],showCancel:[4,"show-cancel"]}]]],["verdocs-toggle-button",[[0,"verdocs-toggle-button",{active:[4],icon:[1],label:[1],size:[1],_active:[32]}]]],["verdocs-quick-functions_3",[[0,"verdocs-quick-functions",{endpoint:[16]}],[0,"verdocs-search-activity",{endpoint:[16],type:[1],options:[8],emptyMessage:[32],authFailure:[32],title:[32],recent:[32],saved:[32],starred:[32]}],[0,"verdocs-search-box",{endpoint:[16],placeholder:[1],type:[1],query:[1],grabsFocus:[4,"grabs-focus"],focusField:[64]}]]],["verdocs-checkbox",[[0,"verdocs-checkbox",{checked:[4],name:[1],label:[1],value:[1],theme:[1],disabled:[4]}]]],["verdocs-radio-button",[[0,"verdocs-radio-button",{checked:[4],name:[1],value:[1],disabled:[4]}]]],["verdocs-help-icon_2",[[0,"verdocs-template-sender-dialog",{value:[1],newValue:[32]}],[0,"verdocs-help-icon",{text:[1],containerId:[32]}]]],["verdocs-button-panel_3",[[4,"verdocs-button-panel",{icon:[1]}],[0,"verdocs-select-input",{value:[1],label:[1],options:[16],disabled:[4]}],[0,"verdocs-text-input",{value:[1],label:[1],placeholder:[1],autocomplete:[1],type:[1],disabled:[4]}]]],["verdocs-field-signature_3",[[0,"verdocs-field-signature",{field:[16],name:[1],disabled:[4],editable:[4],moveable:[4],done:[4],roleindex:[2],tempSignature:[32],focusField:[64]}],[0,"verdocs-toolbar-icon",{text:[1],icon:[1],containerId:[32]}],[0,"verdocs-signature-dialog",{name:[1],fontLoaded:[32],enteredName:[32],mode:[32]}]]],["verdocs-template-create_4",[[0,"verdocs-template-fields",{endpoint:[16],templateId:[1,"template-id"]}],[0,"verdocs-template-properties",{endpoint:[16],templateId:[1,"template-id"],template:[32],name:[32],visibility:[32],sendReminders:[32],firstReminderDays:[32],reminderDays:[32]}],[0,"verdocs-template-recipients",{endpoint:[16],templateRole:[16],contactSuggestions:[16],name:[32],email:[32],phone:[32],message:[32],showSuggestions:[32],showMessage:[32],delegator:[32],sender:[32],showingSenderDialog:[32],orderedRoles:[32]}],[0,"verdocs-template-create",{endpoint:[16],file:[32]}]]]],options)}))}(),docs&&Object(dist.setStencilDocJson)(docs);var parameters={controls:{hideNoControlsWarning:!0,matchers:{color:/(background|color)$/i,date:/Date$/}},viewMode:"docs",docs:{iframeHeight:500,extractArgTypes:dist.extractArgTypes,extractComponentDescription:dist.extractComponentDescription},layout:"centered",backgrounds:{default:"light",values:[{name:"light",value:"#eeeeee"},{name:"medium",value:"#5c6575"},{name:"dark",value:"#33364b"}]}};function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}window.addEventListener("load",(function clickDocsButtonOnFirstLoad(){window.removeEventListener("load",clickDocsButtonOnFirstLoad);try{window.parent.document.evaluate("//button[contains(., 'Docs')]",window.parent.document,null,XPathResult.ANY_TYPE,null).iterateNext().click()}catch(error){}})),Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":return Object(ClientApi.d)(value);case"argTypes":return Object(ClientApi.b)(value);case"decorators":return value.forEach((function(decorator){return Object(ClientApi.f)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return Object(ClientApi.g)(loader,!1)}));case"parameters":return Object(ClientApi.h)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return Object(ClientApi.c)(enhancer)}));case"argsEnhancers":return value.forEach((function(enhancer){return Object(ClientApi.e)(enhancer)}));case"render":return Object(ClientApi.i)(value);case"globals":case"globalTypes":var v={};return v[key]=value,Object(ClientApi.h)(v,!1);case"__namedExportsOrder":case"decorateStory":case"renderToDOM":return null;default:return console.log(key+" was not supported :( !")}}))},"./dist/docs.json":function(module){module.exports=JSON.parse('{"timestamp":"2023-01-19T14:55:42","compiler":{"name":"@stencil/core","version":"2.20.0","typescriptVersion":"4.8.4"},"components":[{"filePath":"./src/components/embeds/verdocs-auth/verdocs-auth.tsx","encapsulation":"none","tag":"verdocs-auth","docs":"Display an authentication dialog that allows the user to login or sign up. Callbacks are provided for events that\\noccur during the process (especially successful completion). The success callback will be fired immediately if the\\nuser is already authenticated with a valid session, so this component may not always display visibly.\\n\\nTo simplify some types of authentication flows, a visibility flag can force this component to never display. This\\nallows you to susbcribe to notifications from the\\n\\nThis embed is responsive / mobile-friendly, but the calling application should provide at least a 300px wide\\ncontainer to allow sufficient space for the required forms.\\n\\nAs noted below, the primary event is `authenticated`. This will always be fired at least once, immediately after\\nthe widget is rendered and the user\'s status has been checked. It may be fired again as the user completes (or\\ncancels) authentication steps.\\n\\nAuthentication is required to demonstrate this Element. You may do this in Storybook by using the Auth\\nembed. This Element will reuse the same session produced by logging in via that Embed.\\n\\n```typescript\\ninterface IAuthStatus {\\n  // If true, the user is authenticated with a valid session\\n  authenticated: boolean;\\n\\n  // Details for the user\'s session\\n  session: IActiveSession | null;\\n}\\n```","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"logo","type":"string","mutable":false,"attr":"logo","reflectToAttr":false,"docs":"By default, a Verdocs logo will be displayed above the login/signup forms. This may be used to\\noverride its source. (Alternatively, you may simply hide it via CSS overrides.) Logos should be\\nin SVG format for best results.","docsTags":[],"default":"\'https://verdocs.com/assets/blue-logo.svg\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"visible","type":"boolean","mutable":false,"attr":"visible","reflectToAttr":false,"docs":"Normally, if the user has a valid session, this embed will be invisible, otherwise it will display\\nlogin / signup forms. If this is set to false, this embed will be invisible in both cases. Apps may\\nuse this to verify if a user has a valid session without needing a separate call to Verdocs JS SDK.","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"authenticated","detail":"IAuthStatus","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when session authentication process has completed. Check the event contents for completion status.","docsTags":[]},{"event":"sdkError","detail":"SDKError","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired if an error occurs. The event details will contain information about the error. Most errors will\\nterminate the process, and the calling application should correct the condition and re-render the component.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-button","verdocs-text-input","verdocs-ok-dialog"],"dependencyGraph":{"verdocs-auth":["verdocs-button","verdocs-text-input","verdocs-ok-dialog"],"verdocs-ok-dialog":["verdocs-button"]}},{"filePath":"./src/components/embeds/verdocs-build/verdocs-build.tsx","encapsulation":"none","tag":"verdocs-build","docs":"Display a template building experience.","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"templateId","type":"string","mutable":false,"attr":"template-id","reflectToAttr":false,"docs":"The ID of the template to create the document from.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"sdkError","detail":"SDKError","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired if an error occurs. The event details will contain information about the error. Most errors will\\nterminate the process, and the calling application should correct the condition and re-render the component.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-template-create","verdocs-template-properties","verdocs-template-recipients","verdocs-template-fields"],"dependencyGraph":{"verdocs-build":["verdocs-template-create","verdocs-template-properties","verdocs-template-recipients","verdocs-template-fields"],"verdocs-template-create":["verdocs-button"],"verdocs-template-properties":["verdocs-text-input","verdocs-checkbox","verdocs-radio-button","verdocs-button"],"verdocs-template-recipients":["verdocs-button","verdocs-template-sender-dialog"],"verdocs-template-sender-dialog":["verdocs-radio-button","verdocs-help-icon","verdocs-button"],"verdocs-template-fields":["verdocs-loader","verdocs-toolbar-icon","verdocs-field-signature","verdocs-document-page"],"verdocs-field-signature":["verdocs-signature-dialog","verdocs-button-panel","verdocs-select-input","verdocs-text-input"],"verdocs-signature-dialog":["verdocs-text-input","verdocs-button"]}},{"filePath":"./src/components/controls/verdocs-button/verdocs-button.tsx","encapsulation":"none","tag":"verdocs-button","docs":"Display a simple button.\\n\\nThree variants are supported. `standard` and `outline` buttons look like traditional form buttons and are ideal candidates for \'Ok\' and\\n\'Cancel\' options in most cases. `text` buttons are intended to be used inline in content blocks or for more subtle button options.\\n(Auth uses text buttons for the Forgot Password and Sign Up options.)\\n\\nFour sizes are also supported. Most use cases will call for the `normal` size, but a `small` size is ideal for more subtle controls, such\\nas pagination or other secondary functions. `medium` buttons are slightly larger to provide balance in forms where other items are also\\nbigger, and `large` buttons are for cases where the page has mostly white-space and the buttons need to fill more space.\\n\\nIcons may be placed either before (\\"start\\") or after (\\"end\\") the button label. Icons should be SVG objects passed as strings and will\\nbe rendered as HTML inside the button label area. It is important that the root <SVG> tag contains a default `fill=\\"#ffffff\\"` setting\\nfor the base color, and that child elements below it do not. This allows the button color to carry into the icon properly.\\n\\n```html\\n<verdocs-button label=\\"OK\\" onClick={() => (console.log(\'OK clicked\'))} />\\n```","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"Whether the button should be disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"endIcon","type":"string","mutable":false,"attr":"end-icon","reflectToAttr":false,"docs":"If desired, a suffix icon for the button.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"The label for the button.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":true},{"name":"size","type":"\\"large\\" | \\"medium\\" | \\"normal\\" | \\"small\\"","mutable":false,"attr":"size","reflectToAttr":false,"docs":"The size (height) of the button.","docsTags":[],"default":"\'normal\'","values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"normal","type":"string"},{"value":"small","type":"string"}],"optional":false,"required":false},{"name":"startIcon","type":"string","mutable":false,"attr":"start-icon","reflectToAttr":false,"docs":"If desired, a prefix icon for the button.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false},{"name":"type","type":"\\"button\\" | \\"reset\\" | \\"submit\\"","mutable":false,"attr":"type","reflectToAttr":false,"docs":"The type of the button.","docsTags":[],"default":"\'button\'","values":[{"value":"button","type":"string"},{"value":"reset","type":"string"},{"value":"submit","type":"string"}],"optional":false,"required":false},{"name":"variant","type":"\\"outline\\" | \\"standard\\" | \\"text\\"","mutable":false,"attr":"variant","reflectToAttr":false,"docs":"The display variant of the button.","docsTags":[],"default":"\'standard\'","values":[{"value":"outline","type":"string"},{"value":"standard","type":"string"},{"value":"text","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-auth","verdocs-contact-picker","verdocs-initial-dialog","verdocs-kba-dialog","verdocs-ok-dialog","verdocs-send","verdocs-sign","verdocs-signature-dialog","verdocs-template-create","verdocs-template-properties","verdocs-template-recipients","verdocs-template-sender-dialog","verdocs-upload-dialog"],"dependencies":[],"dependencyGraph":{"verdocs-auth":["verdocs-button"],"verdocs-contact-picker":["verdocs-button"],"verdocs-initial-dialog":["verdocs-button"],"verdocs-kba-dialog":["verdocs-button"],"verdocs-ok-dialog":["verdocs-button"],"verdocs-send":["verdocs-button"],"verdocs-sign":["verdocs-button"],"verdocs-signature-dialog":["verdocs-button"],"verdocs-template-create":["verdocs-button"],"verdocs-template-properties":["verdocs-button"],"verdocs-template-recipients":["verdocs-button"],"verdocs-template-sender-dialog":["verdocs-button"],"verdocs-upload-dialog":["verdocs-button"]}},{"filePath":"./src/components/controls/verdocs-button-panel/verdocs-button-panel.tsx","encapsulation":"none","tag":"verdocs-button-panel","docs":"Displays a clickable icon suitable for display in a toolbar. When clicked, a customizable drop-down panel will be\\ndisplayed.\\n\\n*\\n```html\\n<verdocs-button-panel icon=\\"<svg.../>\\">\\n  <form>...</form>\\n</verdocs-button-panel>\\n```","docsTags":[],"usage":{},"props":[{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"SVG icon to display","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-field-date","verdocs-field-initial","verdocs-field-signature","verdocs-field-textarea","verdocs-field-textbox","verdocs-field-timestamp"],"dependencies":[],"dependencyGraph":{"verdocs-field-date":["verdocs-button-panel"],"verdocs-field-initial":["verdocs-button-panel"],"verdocs-field-signature":["verdocs-button-panel"],"verdocs-field-textarea":["verdocs-button-panel"],"verdocs-field-textbox":["verdocs-button-panel"],"verdocs-field-timestamp":["verdocs-button-panel"]}},{"filePath":"./src/components/controls/verdocs-checkbox/verdocs-checkbox.tsx","encapsulation":"none","tag":"verdocs-checkbox","docs":"Displays a check box. Note that this is different from the `verdocs-field-checkbox` component, which is designed\\nto be used in signing experiences and contains settings that connect to template fields. This is just a simple check\\nbox for UI displays e.g. dialog boxes.\\n\\nThis control encapsulates a standard HTML checkbox. To subscribe to change events, connect an `onChange`\\nhandler. Sample usage:\\n\\n```html\\n<verdocs-checkbox\\n   value=\\"on\\"\\n   name=\\"thingEnabled\\"\\n   checked={this.thingEnabled}\\n   onInput={(e: any) => (this.thingEnabled = e.target.checked)}\\n/>\\n```","docsTags":[],"usage":{},"props":[{"name":"checked","type":"boolean","mutable":false,"attr":"checked","reflectToAttr":false,"docs":"Whether the radio button is currently selected.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, the button will still be displayed but not selectable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"Label to display. Leave blank for no label. The label will be displayed to the right of the checkbox, but may be\\nrepositioned with CSS.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"name","type":"string","mutable":false,"attr":"name","reflectToAttr":false,"docs":"HTML form field name for the input.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"theme","type":"\\"dark\\" | \\"light\\"","mutable":false,"attr":"theme","reflectToAttr":false,"docs":"Style of checkbox to render. Use \'dark\' when rendering on a dark background.","docsTags":[],"default":"\'light\'","values":[{"value":"dark","type":"string"},{"value":"light","type":"string"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"Value to track with the input. Value is not used internally by this component but is sometimes useful to set\\nbecause it can be retrieved in event handlers via e.target.value. This can be used to identify which\\ncheckbox was clicked in a checkbox group.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-sign","verdocs-template-properties"],"dependencies":[],"dependencyGraph":{"verdocs-sign":["verdocs-checkbox"],"verdocs-template-properties":["verdocs-checkbox"]}},{"filePath":"./src/components/elements/verdocs-contact-picker/verdocs-contact-picker.tsx","encapsulation":"none","tag":"verdocs-contact-picker","docs":"Displays a contact picker suitable for filling out Recipient objects when sending Documents.\\n\\nThis picker can also be integrated with a backend to provide contact list / suggestion / address-book style behavior. As the\\nuser interacts with the component, the text entered in the name field is sent back to the parent via the `searchContacts` event.\\nThe parent can use that text as a query string to call a backend to obtain appropriate contacts to show. This list may also be\\nhard-coded ahead of time to provide the user with smart suggestions on initial display, such as \\"Recently Used\\" contacts, or\\nto always display the user\'s own contact record.","docsTags":[],"usage":{},"props":[{"name":"contactSuggestions","type":"(IEmailContact | IPhoneContact)[]","mutable":false,"reflectToAttr":false,"docs":"If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number\\nof suggestions be limited to the 5 best matching records.","docsTags":[],"default":"[]","values":[{"type":"(IEmailContact"},{"type":"IPhoneContact)[]"}],"optional":false,"required":false},{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"templateRole","type":"IRole","mutable":false,"reflectToAttr":false,"docs":"The role that this contact will be assigned to.","docsTags":[],"default":"null","values":[{"type":"IRole"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user cancels the dialog.","docsTags":[]},{"event":"next","detail":"IContactSelectEvent","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user changes the type.","docsTags":[]},{"event":"searchContacts","detail":"IContactSearchEvent","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user enters text in the search field. The calling application may use this to update\\nthe `contactSuggestions` property.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-send"],"dependencies":["verdocs-toggle-button","verdocs-button"],"dependencyGraph":{"verdocs-contact-picker":["verdocs-toggle-button","verdocs-button"],"verdocs-send":["verdocs-contact-picker"]}},{"filePath":"./src/components/elements/verdocs-document-page/verdocs-document-page.tsx","encapsulation":"none","tag":"verdocs-document-page","docs":"Represents one document page. This is primarily a layout container used to coordinate positions of\\npage-related layers such as the page itself, signature fields, etc. It is not intended to be used\\non its own as an individual component.","docsTags":[],"usage":{},"props":[{"name":"layers","type":"IPageLayer[]","mutable":false,"reflectToAttr":false,"docs":"The layers that will be rendered. The DOM structure will be a DIV container with one child DIV for each layer.\\nThe parent DIV will have a unique ID, and each child DIV will have that ID with the layer name appended, e.g.\\nif `pages` was [\'page\', \'fields\'] the structure will be:\\n\\n```\\n    <div id=\\"verdocs-document-page-ker2fr1p9\\">\\n      <div id=\\"verdocs-document-page-ker2fr1p9-page\\"></div>\\n      <div id=\\"verdocs-document-page-ker2fr1p9-fields\\"></div>\\n    </div>\\n```","docsTags":[],"default":"[{name: \'page\', type: \'canvas\'}]","values":[{"type":"IPageLayer[]"}],"optional":false,"required":false},{"name":"pageImageUri","type":"string","mutable":false,"attr":"page-image-uri","reflectToAttr":false,"docs":"The URL of the image to render as the page background.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"pageNumber","type":"number","mutable":false,"attr":"page-number","reflectToAttr":false,"docs":"The page number being rendered. Not used internally, but included in callbacks/events beacuse page numbers\\nare used everywhere in document handling. (Reminder: page numbers are 1-based.)","docsTags":[],"default":"1","values":[{"type":"number"}],"optional":false,"required":false},{"name":"virtualHeight","type":"number","mutable":true,"attr":"virtual-height","reflectToAttr":false,"docs":"The \\"virtual\\" height of the page canvas.  Defaults to 792 which at 72dpi is 11\\" tall. This is used to compute\\nthe aspect ratio of the final rendered element when scaling up/down.","docsTags":[],"default":"792","values":[{"type":"number"}],"optional":false,"required":false},{"name":"virtualWidth","type":"number","mutable":false,"attr":"virtual-width","reflectToAttr":false,"docs":"The \\"virtual\\" width of the page canvas. Defaults to 612 which at 72dpi is 8.5\\" wide. This is used to compute\\nthe aspect ratio of the final rendered element when scaling up/down.","docsTags":[],"default":"612","values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"pageRendered","detail":"IDocumentPageInfo","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a page has been rendered. This is also fired when the page is resized.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-preview","verdocs-sign","verdocs-template-fields","verdocs-view"],"dependencies":[],"dependencyGraph":{"verdocs-preview":["verdocs-document-page"],"verdocs-sign":["verdocs-document-page"],"verdocs-template-fields":["verdocs-document-page"],"verdocs-view":["verdocs-document-page"]}},{"filePath":"./src/components/controls/verdocs-dropdown/verdocs-dropdown.tsx","encapsulation":"none","tag":"verdocs-dropdown","docs":"Display a drop-down menu button. A menu of the specified options will be displayed when the button is pressed. The menu will be hidden\\nwhen the button is pressed again, or an option is selected.\\n\\n```html\\n<verdocs-dropdown\\n  options={[\\n    {label: \'Option 1\', disabled: true},\\n    {label: \'Option 2\', id: \'2\'}\\n   ]}\\n  label=\\"OK\\" onClick={() => (console.log(\'OK clicked\'))}\\n/>\\n```","docsTags":[],"usage":{},"props":[{"name":"options","type":"IMenuOption[]","mutable":false,"reflectToAttr":false,"docs":"The menu options to display.","docsTags":[],"default":"[]","values":[{"type":"IMenuOption[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"optionSelected","detail":"IMenuOption","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when a menu option is clicked.\\nWeb Component events need to be \\"composed\\" to cross the Shadow DOM and be received by parent frameworks.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-sign"],"dependencies":[],"dependencyGraph":{"verdocs-sign":["verdocs-dropdown"]}},{"filePath":"./src/components/elements/verdocs-field-attachment/verdocs-field-attachment.tsx","encapsulation":"none","tag":"verdocs-field-attachment","docs":"Displays a signature field. Various field types are supported, including traditional Signature and Initials types as well as\\ninput types like text and checkbox.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"roleIndex","type":"number","mutable":false,"attr":"role-index","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[{"name":"focusField","returns":{"type":"Promise<void>","docs":""},"signature":"focusField() => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-upload-dialog"],"dependencyGraph":{"verdocs-field-attachment":["verdocs-upload-dialog"],"verdocs-upload-dialog":["verdocs-button"]}},{"filePath":"./src/components/elements/verdocs-field-checkbox/verdocs-field-checkbox.tsx","encapsulation":"none","tag":"verdocs-field-checkbox","docs":"Displays a checkbox.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"done","type":"boolean","mutable":false,"attr":"done","reflectToAttr":false,"docs":"If set, the field is considered \\"done\\" and is drawn in a display-final-value state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"option","type":"number","mutable":false,"attr":"option","reflectToAttr":false,"docs":"The index of the settings option this particular checkbox is for","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":false,"required":false},{"name":"roleindex","type":"number","mutable":false,"attr":"roleindex","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":[],"dependencyGraph":{}},{"filePath":"./src/components/elements/verdocs-field-date/verdocs-field-date.tsx","encapsulation":"none","tag":"verdocs-field-date","docs":"Displays a date field. When tapped or clicked, the input element will display a date picker component.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"done","type":"boolean","mutable":false,"attr":"done","reflectToAttr":false,"docs":"If set, the field is considered \\"done\\" and is drawn in a display-final-value state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"editable","type":"boolean","mutable":false,"attr":"editable","reflectToAttr":false,"docs":"If set, a settings icon will be displayed on hover. The settings shown allow the field\'s recipient and other settings to be\\nchanged, so it should typically only be enabled in the Builder.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"moveable","type":"boolean","mutable":false,"attr":"moveable","reflectToAttr":false,"docs":"If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"roleindex","type":"number","mutable":false,"attr":"roleindex","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[{"name":"focusField","returns":{"type":"Promise<void>","docs":""},"signature":"focusField() => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[{"event":"settingsPress","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired on every character entered into / deleted from the field.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-button-panel","verdocs-select-input","verdocs-text-input"],"dependencyGraph":{"verdocs-field-date":["verdocs-button-panel","verdocs-select-input","verdocs-text-input"]}},{"filePath":"./src/components/elements/verdocs-field-dropdown/verdocs-field-dropdown.tsx","encapsulation":"none","tag":"verdocs-field-dropdown","docs":"Displays a signature field. Various field types are supported, including traditional Signature and Initials types as well as\\ninput types like text and checkbox.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"roleindex","type":"number","mutable":false,"attr":"roleindex","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[{"name":"focusField","returns":{"type":"Promise<void>","docs":""},"signature":"focusField() => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[{"event":"fieldChange","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc.\\nIt is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every\\nkeypress.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":[],"dependencyGraph":{}},{"filePath":"./src/components/elements/verdocs-field-initial/verdocs-field-initial.tsx","encapsulation":"none","tag":"verdocs-field-initial","docs":"Displays an initial field. If an initial already exists, it will be displayed and the field will be disabled. Otherwise, a placeholder\\nbutton will be shown. Clicking the button will show a dialog to adopt an initial.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"done","type":"boolean","mutable":false,"attr":"done","reflectToAttr":false,"docs":"If set, the field is considered \\"done\\" and is drawn in a display-final-value state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"editable","type":"boolean","mutable":false,"attr":"editable","reflectToAttr":false,"docs":"If set, a settings icon will be displayed on hover. The settings shown allow the field\'s recipient and other settings to be\\nchanged, so it should typically only be enabled in the Builder.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"initials","type":"string","mutable":false,"attr":"initials","reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"moveable","type":"boolean","mutable":false,"attr":"moveable","reflectToAttr":false,"docs":"If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"roleindex","type":"number","mutable":false,"attr":"roleindex","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[{"name":"focusField","returns":{"type":"Promise<void>","docs":""},"signature":"focusField() => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[{"event":"adopt","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Event emitted when an initial block is adopted by the user. The event detail will contain the base64 string of the initial image.","docsTags":[]},{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event emitted when the user cancels the process.","docsTags":[]},{"event":"fieldChange","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the input field value changes. Note that this will only be fired on blur, tab-out, ENTER key press, etc.\\nIt is generally the best event to subscribe to than `input` for most cases EXCEPT autocomplete fields that need to see every\\nkeypress.","docsTags":[]},{"event":"settingsPress","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired on every character entered into / deleted from the field.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-initial-dialog","verdocs-button-panel","verdocs-select-input","verdocs-text-input"],"dependencyGraph":{"verdocs-field-initial":["verdocs-initial-dialog","verdocs-button-panel","verdocs-select-input","verdocs-text-input"],"verdocs-initial-dialog":["verdocs-text-input","verdocs-button"]}},{"filePath":"./src/components/elements/verdocs-field-payment/verdocs-field-payment.tsx","encapsulation":"none","tag":"verdocs-field-payment","docs":"Displays a signature field. Various field types are supported, including traditional Signature and Initials types as well as\\ninput types like text and checkbox.","docsTags":[],"usage":{},"props":[{"name":"currentInitial","type":"string","mutable":false,"attr":"current-initial","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"currentInitialId","type":"string","mutable":false,"attr":"current-initial-id","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"currentSignature","type":"string","mutable":false,"attr":"current-signature","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"currentSignatureId","type":"string","mutable":false,"attr":"current-signature-id","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"fieldId","type":"string","mutable":false,"attr":"field-id","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"fields","type":"any[]","mutable":false,"reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any[]"}],"optional":false,"required":false},{"name":"focused","type":"boolean","mutable":false,"attr":"focused","reflectToAttr":false,"docs":"","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"pageNum","type":"number","mutable":false,"attr":"page-num","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"pdfPages","type":"any[]","mutable":false,"reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any[]"}],"optional":false,"required":false},{"name":"recipients","type":"any","mutable":false,"attr":"recipients","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false},{"name":"roleName","type":"string","mutable":false,"attr":"role-name","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"roleindex","type":"number","mutable":false,"attr":"roleindex","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false},{"name":"selectedRoleName","type":"string","mutable":false,"attr":"selected-role-name","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"signed","type":"boolean","mutable":false,"attr":"signed","reflectToAttr":false,"docs":"","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"initialComplete","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"","docsTags":[]},{"event":"signatureComplete","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":[],"dependencyGraph":{}},{"filePath":"./src/components/elements/verdocs-field-radio-button-group/verdocs-field-radio-button.tsx","encapsulation":"none","tag":"verdocs-field-radio-button","docs":"Displays a radio button.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"done","type":"boolean","mutable":false,"attr":"done","reflectToAttr":false,"docs":"If set, the field is considered \\"done\\" and is drawn in a display-final-value state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"option","type":"number","mutable":false,"attr":"option","reflectToAttr":false,"docs":"The index of the settings option this particular checkbox is for","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":false,"required":false},{"name":"roleindex","type":"number","mutable":false,"attr":"roleindex","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":[],"dependencyGraph":{}},{"filePath":"./src/components/elements/verdocs-field-signature/verdocs-field-signature.tsx","encapsulation":"none","tag":"verdocs-field-signature","docs":"Displays a signature field. If a signature already exists, it will be displayed and the field will be disabled. Otherwise, a placeholder\\nbutton will be shown. Clicking the button will show a dialog to adopt a signature.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"done","type":"boolean","mutable":false,"attr":"done","reflectToAttr":false,"docs":"If set, the field is considered \\"done\\" and is drawn in a display-final-value state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"editable","type":"boolean","mutable":false,"attr":"editable","reflectToAttr":false,"docs":"If set, a settings icon will be displayed on hover. The settings shown allow the field\'s recipient and other settings to be\\nchanged, so it should typically only be enabled in the Builder.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"moveable","type":"boolean","mutable":false,"attr":"moveable","reflectToAttr":false,"docs":"If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"name","type":"string","mutable":false,"attr":"name","reflectToAttr":false,"docs":"If set, the signature creation dialog will be initialized with this text.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":true,"required":false},{"name":"roleindex","type":"number","mutable":false,"attr":"roleindex","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[{"name":"focusField","returns":{"type":"Promise<void>","docs":""},"signature":"focusField() => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[{"event":"fieldChange","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Event emitted when the field has changed.","docsTags":[]},{"event":"settingsPress","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired on every character entered into / deleted from the field.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-template-fields"],"dependencies":["verdocs-signature-dialog","verdocs-button-panel","verdocs-select-input","verdocs-text-input"],"dependencyGraph":{"verdocs-field-signature":["verdocs-signature-dialog","verdocs-button-panel","verdocs-select-input","verdocs-text-input"],"verdocs-signature-dialog":["verdocs-text-input","verdocs-button"],"verdocs-template-fields":["verdocs-field-signature"]}},{"filePath":"./src/components/elements/verdocs-field-textarea/verdocs-field-textarea.tsx","encapsulation":"none","tag":"verdocs-field-textarea","docs":"Display a multi-line text input field.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"done","type":"boolean","mutable":false,"attr":"done","reflectToAttr":false,"docs":"If set, the field is considered \\"done\\" and is drawn in a display-final-value state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"editable","type":"boolean","mutable":false,"attr":"editable","reflectToAttr":false,"docs":"If set, a settings icon will be displayed on hover. The settings shown allow the field\'s recipient and other settings to be\\nchanged, so it should typically only be enabled in the Builder.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"moveable","type":"boolean","mutable":false,"attr":"moveable","reflectToAttr":false,"docs":"If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"roleindex","type":"number","mutable":false,"attr":"roleindex","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[{"name":"focusField","returns":{"type":"Promise<void>","docs":""},"signature":"focusField() => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-button-panel","verdocs-select-input","verdocs-text-input"],"dependencyGraph":{"verdocs-field-textarea":["verdocs-button-panel","verdocs-select-input","verdocs-text-input"]}},{"filePath":"./src/components/elements/verdocs-field-textbox/verdocs-field-textbox.tsx","encapsulation":"none","tag":"verdocs-field-textbox","docs":"Display a text input field.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"done","type":"boolean","mutable":false,"attr":"done","reflectToAttr":false,"docs":"If set, the field is considered \\"done\\" and is drawn in a display-final-value state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"editable","type":"boolean","mutable":false,"attr":"editable","reflectToAttr":false,"docs":"If set, a settings icon will be displayed on hover. The settings shown allow the field\'s recipient and other settings to be\\nchanged, so it should typically only be enabled in the Builder.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"moveable","type":"boolean","mutable":false,"attr":"moveable","reflectToAttr":false,"docs":"If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"roleindex","type":"number","mutable":false,"attr":"roleindex","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[{"name":"focusField","returns":{"type":"Promise<void>","docs":""},"signature":"focusField() => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[{"event":"recipientChanged","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired if the field is configurable when the recipient has changed.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-button-panel","verdocs-select-input","verdocs-text-input"],"dependencyGraph":{"verdocs-field-textbox":["verdocs-button-panel","verdocs-select-input","verdocs-text-input"]}},{"filePath":"./src/components/elements/verdocs-field-timestamp/verdocs-field-timestamp.tsx","encapsulation":"none","tag":"verdocs-field-timestamp","docs":"Display a timestamp field.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, overrides the field\'s settings object. Primarily used to support \\"preview\\" modes where all fields are disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"done","type":"boolean","mutable":false,"attr":"done","reflectToAttr":false,"docs":"If set, the field is considered \\"done\\" and is drawn in a display-final-value state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"editable","type":"boolean","mutable":false,"attr":"editable","reflectToAttr":false,"docs":"If set, a settings icon will be displayed on hover. The settings shown allow the field\'s recipient and other settings to be\\nchanged, so it should typically only be enabled in the Builder.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"field","type":"IDocumentField | ITemplateField","mutable":false,"reflectToAttr":false,"docs":"The document or template field to display.","docsTags":[],"default":"null","values":[{"type":"IDocumentField"},{"type":"ITemplateField"}],"optional":false,"required":false},{"name":"moveable","type":"boolean","mutable":false,"attr":"moveable","reflectToAttr":false,"docs":"If set, the field may be dragged to a new location. This should only be enabled in the Builder, or for self-placed fields.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"roleindex","type":"number","mutable":false,"attr":"roleindex","reflectToAttr":false,"docs":"If set, the field will be colored using this index value to select the background color.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[{"name":"focusField","returns":{"type":"Promise<void>","docs":""},"signature":"focusField() => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-button-panel","verdocs-select-input","verdocs-text-input"],"dependencyGraph":{"verdocs-field-timestamp":["verdocs-button-panel","verdocs-select-input","verdocs-text-input"]}},{"filePath":"./src/components/controls/verdocs-help-icon/verdocs-help-icon.tsx","encapsulation":"none","tag":"verdocs-help-icon","docs":"Displays a simple help icon. Upon hover or focus, a tooltip will be displayed with help text.","docsTags":[],"usage":{},"props":[{"name":"text","type":"string","mutable":false,"attr":"text","reflectToAttr":false,"docs":"Help text to display on hover/focus","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-template-sender-dialog"],"dependencies":[],"dependencyGraph":{"verdocs-template-sender-dialog":["verdocs-help-icon"]}},{"filePath":"./src/components/dialogs/verdocs-initial-dialog/verdocs-initial-dialog.tsx","encapsulation":"none","tag":"verdocs-initial-dialog","docs":"Display a dialog that allows the user to specify an initials image, either by using a signature-font-generated image\\nbased on their full name, or by hand-drawing their initials with a mouse or tablet.","docsTags":[],"usage":{},"props":[{"name":"initials","type":"string","mutable":false,"attr":"initials","reflectToAttr":false,"docs":"Initial signature text","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the step is cancelled.","docsTags":[]},{"event":"next","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the initials are adopted.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-field-initial"],"dependencies":["verdocs-text-input","verdocs-button"],"dependencyGraph":{"verdocs-initial-dialog":["verdocs-text-input","verdocs-button"],"verdocs-field-initial":["verdocs-initial-dialog"]}},{"filePath":"./src/components/dialogs/verdocs-kba-dialog/verdocs-kba-dialog.tsx","encapsulation":"none","tag":"verdocs-kba-dialog","docs":"Display a text input field. This adds a partially-transparent overlay and screen-centered dialog\\nbox with a message and optional header/title. An OK button is shown that will dismiss the message.\\nIt can also be dismissed by clicking the background overlay.","docsTags":[],"usage":{},"props":[{"name":"choices","type":"string[]","mutable":false,"reflectToAttr":false,"docs":"For choice challenges, a set of choices to choose from. 6 choices is recommended to fit most screen sizes.","docsTags":[],"default":"[\'553 Arbor Dr\', \'18 Lacey Ln\', \'23A Ball Ct\', \'2375 Cavallo Blvd\', \'23-1 RR-7\', \'151 Boulder Rd\']","values":[{"type":"string[]"}],"optional":false,"required":false},{"name":"helptext","type":"string","mutable":false,"attr":"helptext","reflectToAttr":false,"docs":"If set, a help/instructions box will be displayed with this text","docsTags":[],"default":"\'Please check your text messages for a security code, and enter the code below.\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"helptitle","type":"string","mutable":false,"attr":"helptitle","reflectToAttr":false,"docs":"If set, a help/instructions box will be displayed with this title","docsTags":[],"default":"\'One Time Code\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"For text input challenges, the label to display next to the input field.","docsTags":[],"default":"\'PIN\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"mode","type":"\\"choice\\" | \\"text\\"","mutable":false,"attr":"mode","reflectToAttr":false,"docs":"Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.","docsTags":[],"default":"\'choice\'","values":[{"value":"choice","type":"string"},{"value":"text","type":"string"}],"optional":false,"required":false},{"name":"placeholder","type":"string","mutable":false,"attr":"placeholder","reflectToAttr":false,"docs":"For text input challenges, the placeholder to display inside the input field.","docsTags":[],"default":"\'Enter your PIN...\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"step","type":"number","mutable":false,"attr":"step","reflectToAttr":false,"docs":"Which step this confirmation is for, in a multi-step process. Ignored if `steps` is < 2.","docsTags":[],"default":"1","values":[{"type":"number"}],"optional":false,"required":false},{"name":"steps","type":"number","mutable":false,"attr":"steps","reflectToAttr":false,"docs":"How many steps exist in a multi-step process. Set to 1 for a single-step process (hides the indicator).","docsTags":[],"default":"3","values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the dialog is closed. The event data will contain the closure reason.","docsTags":[]},{"event":"next","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the dialog is closed. The event data will contain the value selected.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-button"],"dependencyGraph":{"verdocs-kba-dialog":["verdocs-button"]}},{"filePath":"./src/components/controls/verdocs-loader/verdocs-loader.tsx","encapsulation":"none","tag":"verdocs-loader","docs":"Animated loader placeholder. There are currently no configuration options for this control.","docsTags":[],"usage":{},"props":[],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-preview","verdocs-sign","verdocs-template-fields","verdocs-view"],"dependencies":[],"dependencyGraph":{"verdocs-preview":["verdocs-loader"],"verdocs-sign":["verdocs-loader"],"verdocs-template-fields":["verdocs-loader"],"verdocs-view":["verdocs-loader"]}},{"filePath":"./src/components/dialogs/verdocs-ok-dialog/verdocs-ok-dialog.tsx","encapsulation":"none","tag":"verdocs-ok-dialog","docs":"Display a simple text dialog box with an Ok button. This adds a partially-transparent overlay and screen-centered dialog\\nbox with a message and optional header/title. An OK button is shown that will dismiss the message.\\nIt can also be dismissed by clicking the background overlay.","docsTags":[],"usage":{},"props":[{"name":"heading","type":"string","mutable":false,"attr":"heading","reflectToAttr":false,"docs":"The title of the dialog. \\"title\\" is a reserved word, so we use heading.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"message","type":"string","mutable":false,"attr":"message","reflectToAttr":false,"docs":"The message content to display.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"showCancel","type":"boolean","mutable":false,"attr":"show-cancel","reflectToAttr":false,"docs":"If set, a cancel button will also be displayed. Note that the dialog is always cancelable by clicking the background\\noverlay to dismiss it.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user clicks the background overlay or Cancel button.","docsTags":[]},{"event":"next","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user clicks the OK button.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-auth","verdocs-sign"],"dependencies":["verdocs-button"],"dependencyGraph":{"verdocs-ok-dialog":["verdocs-button"],"verdocs-auth":["verdocs-ok-dialog"],"verdocs-sign":["verdocs-ok-dialog"]}},{"filePath":"./src/components/controls/verdocs-organization-card/verdocs-organization-card.tsx","encapsulation":"none","tag":"verdocs-organization-card","docs":"Display a small summary card describing an organization","docsTags":[],"usage":{},"props":[{"name":"organization","type":"IOrganization","mutable":false,"reflectToAttr":false,"docs":"The organization to display","docsTags":[],"values":[{"type":"IOrganization"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":[],"dependencyGraph":{}},{"filePath":"./src/components/embeds/verdocs-preview/verdocs-preview.tsx","encapsulation":"none","tag":"verdocs-preview","docs":"Display a template preview experience. This will display the template\'s attached\\ndocuments with signing fields overlaid on each page. Fields will be color-coded\\nby recipient, and will be read-only (cannot be filled, moved, or altered).","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"templateId","type":"string","mutable":false,"attr":"template-id","reflectToAttr":false,"docs":"The ID of the template to create the document from.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"sdkError","detail":"SDKError","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired if an error occurs. The event details will contain information about the error. Most errors will\\nterminate the process, and the calling application should correct the condition and re-render the component.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-loader","verdocs-document-page"],"dependencyGraph":{"verdocs-preview":["verdocs-loader","verdocs-document-page"]}},{"filePath":"./src/components/elements/verdocs-quick-functions/verdocs-quick-functions.tsx","encapsulation":"none","tag":"verdocs-quick-functions","docs":"Display quick-function buttons for creating templates and documents.\\n\\nAuthentication is required to demonstrate this Element. You may do this in Storybook by using the Auth\\nembed. This Element will reuse the same session produced by logging in via that Embed.","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"createDocument","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when an entry is clicked.","docsTags":[]},{"event":"createTemplate","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when an entry is clicked.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-search"],"dependencies":[],"dependencyGraph":{"verdocs-search":["verdocs-quick-functions"]}},{"filePath":"./src/components/controls/verdocs-radio-button/verdocs-radio-button.tsx","encapsulation":"none","tag":"verdocs-radio-button","docs":"Displays a radio button. Note that this is different from the `verdocs-field-radio-button` component, which is\\ndesigned to be used in signing experiences and contains settings that connect to template fields. This is just a\\nsimple radio button for UI displays e.g. dialog boxes.\\n\\nThis control encapsulates a standard HTML radio button. To subscribe to change events, connect an `onChange`\\nhandler. Sample usage:\\n\\n```html\\n<verdocs-radio-button\\n   value=\\"val1\\"\\n   name=\\"someProperty\\"\\n   checked={this.someProperty === \'val1\'}\\n   onInput={(e: any) => { this.someProperty = \'val1\' }}\\n   disabled={false}\\n/>\\n```","docsTags":[],"usage":{},"props":[{"name":"checked","type":"boolean","mutable":false,"attr":"checked","reflectToAttr":false,"docs":"Whether the radio button is currently selected.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"If set, the button will still be displayed but not selectable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"name","type":"string","mutable":false,"attr":"name","reflectToAttr":false,"docs":"HTML form field name for the input.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"Value to track with the input.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-template-properties","verdocs-template-sender-dialog"],"dependencies":[],"dependencyGraph":{"verdocs-template-properties":["verdocs-radio-button"],"verdocs-template-sender-dialog":["verdocs-radio-button"]}},{"filePath":"./src/components/embeds/verdocs-search/verdocs-search.tsx","encapsulation":"none","tag":"verdocs-search","docs":"","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-search-box","verdocs-search-activity","verdocs-quick-functions"],"dependencyGraph":{"verdocs-search":["verdocs-search-box","verdocs-search-activity","verdocs-quick-functions"]}},{"filePath":"./src/components/elements/verdocs-search-activity/verdocs-search-activity.tsx","encapsulation":"none","tag":"verdocs-search-activity","docs":"Display a list of starred items.\\n\\nAuthentication is required to demonstrate this Element. You may do this in Storybook by using the Auth\\nembed. This Element will reuse the same session produced by logging in via that Embed.","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"options","type":"any","mutable":false,"attr":"options","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false},{"name":"type","type":"\\"recent\\" | \\"saved\\" | \\"starred\\"","mutable":false,"attr":"type","reflectToAttr":false,"docs":"","docsTags":[],"default":"\'recent\'","values":[{"value":"recent","type":"string"},{"value":"saved","type":"string"},{"value":"starred","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"entrySelected","detail":"IRecentSearch","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when an entry is clicked.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-search"],"dependencies":[],"dependencyGraph":{"verdocs-search":["verdocs-search-activity"]}},{"filePath":"./src/components/elements/verdocs-search-box/verdocs-search-box.tsx","encapsulation":"none","tag":"verdocs-search-box","docs":"Displays a customizable input box for search queries.\\n\\nAuthentication is required to demonstrate this Element. You may do this in Storybook by using the Auth\\nembed. This Element will reuse the same session produced by logging in via that Embed.","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"grabsFocus","type":"boolean","mutable":false,"attr":"grabs-focus","reflectToAttr":false,"docs":"If set, the input field will attempt to \\"grab\\" focus after being rendered.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"placeholder","type":"string","mutable":false,"attr":"placeholder","reflectToAttr":false,"docs":"The placeholder to display in the input field.","docsTags":[],"default":"\'search documents, templates, people...\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"query","type":"string","mutable":false,"attr":"query","reflectToAttr":false,"docs":"The text search string entered by the user.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"type","type":"\\"all\\" | \\"document\\" | \\"organization\\" | \\"template\\"","mutable":false,"attr":"type","reflectToAttr":false,"docs":"If set to a value other than \'all\', a removeable filter indicator will be displayed.","docsTags":[],"default":"\'all\'","values":[{"value":"all","type":"string"},{"value":"document","type":"string"},{"value":"organization","type":"string"},{"value":"template","type":"string"}],"optional":false,"required":false}],"methods":[{"name":"focusField","returns":{"type":"Promise<void>","docs":""},"signature":"focusField() => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[{"event":"queryChanged","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user changes the query string.","docsTags":[]},{"event":"searchClicked","detail":"ISearchEvent","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user changes the type.","docsTags":[]},{"event":"typeChanged","detail":"\\"all\\" | \\"document\\" | \\"organization\\" | \\"template\\"","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user changes the type.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-search"],"dependencies":[],"dependencyGraph":{"verdocs-search":["verdocs-search-box"]}},{"filePath":"./src/components/elements/verdocs-search-tabs/verdocs-search-tabs.tsx","encapsulation":"none","tag":"verdocs-search-tabs","docs":"","docsTags":[],"usage":{},"props":[],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":[],"dependencyGraph":{}},{"filePath":"./src/components/controls/verdocs-select-input/verdocs-select-input.tsx","encapsulation":"none","tag":"verdocs-select-input","docs":"Display a text input field. This is just a standard HTML input field with minimal markup to fit the\\nvisual styles of the other components. Note that events \\"bubble\\" from the input field to the container,\\nso you can subscribe to the same DOM events (input, blur, etc) that a normal input would emmit.","docsTags":[],"usage":{},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"Should the field be disabled?","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"The label for the field.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"options","type":"{ label: string; value: string; }[]","mutable":false,"reflectToAttr":false,"docs":"The options to list.","docsTags":[],"values":[{"type":"{ label: string; value: string; }[]"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The initial value for the input field.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-field-date","verdocs-field-initial","verdocs-field-signature","verdocs-field-textarea","verdocs-field-textbox","verdocs-field-timestamp"],"dependencies":[],"dependencyGraph":{"verdocs-field-date":["verdocs-select-input"],"verdocs-field-initial":["verdocs-select-input"],"verdocs-field-signature":["verdocs-select-input"],"verdocs-field-textarea":["verdocs-select-input"],"verdocs-field-textbox":["verdocs-select-input"],"verdocs-field-timestamp":["verdocs-select-input"]}},{"filePath":"./src/components/embeds/verdocs-send/verdocs-send.tsx","encapsulation":"none","tag":"verdocs-send","docs":"Display a form to collect recipient information for a new Document. If used anonymously, the specified `templateId` must be public.\\nIf the user is authenticated","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"templateId","type":"string","mutable":false,"attr":"template-id","reflectToAttr":false,"docs":"The ID of the template to create the document from.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"The user canceled the process.","docsTags":[]},{"event":"sdkError","detail":"SDKError","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired if an error occurs. The event details will contain information about the error. Most errors will\\nterminate the process, and the calling application should correct the condition and re-render the component.","docsTags":[]},{"event":"send","detail":"{ recipientsAssigned: IRole[]; }","bubbles":true,"cancelable":true,"composed":true,"docs":"The user completed the form and clicked send.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-contact-picker","verdocs-button"],"dependencyGraph":{"verdocs-send":["verdocs-contact-picker","verdocs-button"],"verdocs-contact-picker":["verdocs-toggle-button","verdocs-button"]}},{"filePath":"./src/components/embeds/verdocs-sign/verdocs-sign.tsx","encapsulation":"none","tag":"verdocs-sign","docs":"Display an envelope signing experience. This will display the envelope\'s attached\\ndocuments with signing fields overlaid on each page.\\n\\nThe component will attempt to initiate a signing session and load the specified\\nenvelope. If successful, the recipient\'s fields will be enabled and the user will\\nbe able to sign the envelope\'s attached documents. If not, an `sdkError` will be\\nthrown and the component will be blank/empty. To provide the best user experience,\\napplications should capture and handle this error to provide the user with\\ninstructions/options for next steps based on the application\'s design and workflow.\\n\\nUnlike other components, this will always create its own endpoint to manage the\\nsession session. This endpoint will be included in event callbacks for the\\nconvenience of host applications that may wish to make server calls using the\\nsigner\'s credentials once signing is complete (e.g. to obtain copies of\\nthe signed attachments.)","docsTags":[],"usage":{},"props":[{"name":"envelopeId","type":"string","mutable":false,"attr":"envelope-id","reflectToAttr":false,"docs":"The ID of the envelope to sign.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false},{"name":"inviteCode","type":"string","mutable":false,"attr":"invite-code","reflectToAttr":false,"docs":"The invite code for the signer.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false},{"name":"roleId","type":"string","mutable":false,"attr":"role-id","reflectToAttr":false,"docs":"The ID of the role that will be signing e.g. \'Recipient 1\'","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"envelopeLoaded","detail":"{ endpoint: VerdocsEndpoint; envelope: IEnvelope; }","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the envelope is updated in any way.","docsTags":[]},{"event":"envelopeUpdated","detail":"{ endpoint: VerdocsEndpoint; envelope: IEnvelope; event: string; }","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the envelope is updated in any way.","docsTags":[]},{"event":"sdkError","detail":"SDKError","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired if an error occurs. The event details will contain information about the error. Most errors will\\nterminate the process, and the calling application should correct the condition and re-render the component.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":["verdocs-loader","verdocs-dropdown","verdocs-checkbox","verdocs-button","verdocs-view","verdocs-document-page","verdocs-ok-dialog"],"dependencyGraph":{"verdocs-sign":["verdocs-loader","verdocs-dropdown","verdocs-checkbox","verdocs-button","verdocs-view","verdocs-document-page","verdocs-ok-dialog"],"verdocs-view":["verdocs-loader","verdocs-document-page"],"verdocs-ok-dialog":["verdocs-button"]}},{"filePath":"./src/components/dialogs/verdocs-signature-dialog/verdocs-signature-dialog.tsx","encapsulation":"none","tag":"verdocs-signature-dialog","docs":"Display a dialog that allows the user to specify a signature image, either by using a signature-font-generated image\\nbased on their full name, or by hand-drawing their signature with a mouse or tablet.","docsTags":[],"usage":{},"props":[{"name":"name","type":"string","mutable":false,"attr":"name","reflectToAttr":false,"docs":"Initial signature text","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired if the user cancels the dialog.","docsTags":[]},{"event":"next","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when the user completes the dialog and clicks Adopt. The event detail will contain a base64-encoded string\\nrepresentation of the signature adopted.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-field-signature"],"dependencies":["verdocs-text-input","verdocs-button"],"dependencyGraph":{"verdocs-signature-dialog":["verdocs-text-input","verdocs-button"],"verdocs-field-signature":["verdocs-signature-dialog"]}},{"filePath":"./src/components/controls/verdocs-status-indicator/verdocs-status-indicator.tsx","encapsulation":"none","tag":"verdocs-status-indicator","docs":"Displays an icon and message describing a document\'s completion status. For convenience, the status may be passed in either\\ndirectly as a status field or the whole document object may be passed in.\\n\\nIf the document is provided, the status flag will indicate the document\'s overall status. This also makes the component clickable\\nto display a popup panel with per-recipient status data.\\n\\nIf the status is provided as a string it can be either a `TRecipientStatus` or `TDocumentStatus` value.","docsTags":[],"usage":{},"props":[{"name":"envelope","type":"IEnvelope","mutable":false,"reflectToAttr":false,"docs":"The document to display status for. Ignored if `status` is set directly.","docsTags":[],"values":[{"type":"IEnvelope"}],"optional":true,"required":false},{"name":"size","type":"\\"normal\\" | \\"small\\"","mutable":false,"attr":"size","reflectToAttr":false,"docs":"The size (height) of the indicator. The small variant is suitable for use in densely populated components such as table rows.","docsTags":[],"default":"\'normal\'","values":[{"value":"normal","type":"string"},{"value":"small","type":"string"}],"optional":false,"required":false},{"name":"status","type":"\\"accepted\\" | \\"canceled\\" | \\"complete\\" | \\"declined\\" | \\"in progress\\" | \\"invited\\" | \\"opened\\" | \\"pending\\" | \\"signed\\" | \\"submitted\\"","mutable":false,"attr":"status","reflectToAttr":false,"docs":"The status to display.","docsTags":[],"values":[{"value":"accepted","type":"string"},{"value":"canceled","type":"string"},{"value":"complete","type":"string"},{"value":"declined","type":"string"},{"value":"in progress","type":"string"},{"value":"invited","type":"string"},{"value":"opened","type":"string"},{"value":"pending","type":"string"},{"value":"signed","type":"string"},{"value":"submitted","type":"string"}],"optional":true,"required":false},{"name":"theme","type":"\\"dark\\" | \\"light\\"","mutable":false,"attr":"theme","reflectToAttr":false,"docs":"The theme to use for diplay.","docsTags":[],"default":"\'light\'","values":[{"value":"dark","type":"string"},{"value":"light","type":"string"}],"optional":true,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":[],"dependencyGraph":{}},{"filePath":"./src/components/controls/verdocs-template-card/verdocs-template-card.tsx","encapsulation":"none","tag":"verdocs-template-card","docs":"Displays a summary of a template","docsTags":[],"usage":{},"props":[{"name":"template","type":"ITemplate","mutable":false,"reflectToAttr":false,"docs":"The template for which the card will be rendered.","docsTags":[],"values":[{"type":"ITemplate"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":[],"dependencyGraph":{}},{"filePath":"./src/components/elements/verdocs-template-create/verdocs-template-create.tsx","encapsulation":"none","tag":"verdocs-template-create","docs":"Displays a file upload mechanism suitable for the first step of creating a template.\\nThis is typically the first step in a template creation workflow.","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user cancels the dialog.","docsTags":[]},{"event":"next","detail":"ITemplate","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user changes the type.","docsTags":[]},{"event":"sdkError","detail":"SDKError","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired if an error occurs. The event details will contain information about the error. Most errors will\\nterminate the process, and the calling application should correct the condition and re-render the component.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-build"],"dependencies":["verdocs-button"],"dependencyGraph":{"verdocs-template-create":["verdocs-button"],"verdocs-build":["verdocs-template-create"]}},{"filePath":"./src/components/elements/verdocs-template-fields/verdocs-template-fields.tsx","encapsulation":"none","tag":"verdocs-template-fields","docs":"Displays a builder experience for laying out fields in a template. Note that this experience requires a large display area to\\npresent all of the required controls, so it is primarily intended to be used in desktop environments.","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"templateId","type":"string","mutable":false,"attr":"template-id","reflectToAttr":false,"docs":"The ID of the template to create the document from.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user cancels the dialog.","docsTags":[]},{"event":"next","detail":"ITemplate","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user completes the step.","docsTags":[]},{"event":"sdkError","detail":"SDKError","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired if an error occurs. The event details will contain information about the error. Most errors will\\nterminate the process, and the calling application should correct the condition and re-render the component.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-build"],"dependencies":["verdocs-loader","verdocs-toolbar-icon","verdocs-field-signature","verdocs-document-page"],"dependencyGraph":{"verdocs-template-fields":["verdocs-loader","verdocs-toolbar-icon","verdocs-field-signature","verdocs-document-page"],"verdocs-field-signature":["verdocs-signature-dialog","verdocs-button-panel","verdocs-select-input","verdocs-text-input"],"verdocs-signature-dialog":["verdocs-text-input","verdocs-button"],"verdocs-build":["verdocs-template-fields"]}},{"filePath":"./src/components/elements/verdocs-template-properties/verdocs-template-properties.tsx","encapsulation":"none","tag":"verdocs-template-properties","docs":"Displays a collection of settings boxes that allow a user to configure a template\'s behavior.","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"templateId","type":"string","mutable":false,"attr":"template-id","reflectToAttr":false,"docs":"The template ID to edit.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user cancels the dialog.","docsTags":[]},{"event":"next","detail":"{ name: string; sendReminders: boolean; firstReminderDays: number; reminderDays: number; }","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user completes the step.","docsTags":[]},{"event":"sdkError","detail":"SDKError","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired if an error occurs. The event details will contain information about the error. Most errors will\\nterminate the process, and the calling application should correct the condition and re-render the component.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-build"],"dependencies":["verdocs-text-input","verdocs-checkbox","verdocs-radio-button","verdocs-button"],"dependencyGraph":{"verdocs-template-properties":["verdocs-text-input","verdocs-checkbox","verdocs-radio-button","verdocs-button"],"verdocs-build":["verdocs-template-properties"]}},{"filePath":"./src/components/elements/verdocs-template-recipients/verdocs-template-recipients.tsx","encapsulation":"none","tag":"verdocs-template-recipients","docs":"Displays a contact picker suitable for filling out Recipient objects when sending Documents.\\n\\nThis picker can also be integrated with a backend to provide contact list / suggestion / address-book style behavior. As the\\nuser interacts with the component, the text entered in the name field is sent back to the parent via the `searchContacts` event.\\nThe parent can use that text as a query string to call a backend to obtain appropriate contacts to show. This list may also be\\nhard-coded ahead of time to provide the user with smart suggestions on initial display, such as \\"Recently Used\\" contacts, or\\nto always display the user\'s own contact record.","docsTags":[],"usage":{},"props":[{"name":"contactSuggestions","type":"(IEmailContact | IPhoneContact)[]","mutable":false,"reflectToAttr":false,"docs":"If set, suggestions will be displayed in a drop-down list to the user. It is recommended that the number\\nof suggestions be limited to the 5 best matching records.","docsTags":[],"default":"[]","values":[{"type":"(IEmailContact"},{"type":"IPhoneContact)[]"}],"optional":false,"required":false},{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"templateRole","type":"IRole","mutable":false,"reflectToAttr":false,"docs":"The role that this contact will be assigned to.","docsTags":[],"default":"null","values":[{"type":"IRole"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user cancels the dialog.","docsTags":[]},{"event":"next","detail":"IContactSelectEvent","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user selects a contact.","docsTags":[]},{"event":"searchContacts","detail":"IContactSearchEvent","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the user enters text in the search field. The calling application may use this to update\\nthe `contactSuggestions` property.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-build"],"dependencies":["verdocs-button","verdocs-template-sender-dialog"],"dependencyGraph":{"verdocs-template-recipients":["verdocs-button","verdocs-template-sender-dialog"],"verdocs-template-sender-dialog":["verdocs-radio-button","verdocs-help-icon","verdocs-button"],"verdocs-build":["verdocs-template-recipients"]}},{"filePath":"./src/components/dialogs/verdocs-template-sender-dialog/verdocs-template-sender-dialog.tsx","encapsulation":"none","tag":"verdocs-template-sender-dialog","docs":"Display a dialog that allows a template sender to be selected.","docsTags":[],"usage":{},"props":[{"name":"value","type":"TemplateSenderTypes.CREATOR | TemplateSenderTypes.EVERYONE | TemplateSenderTypes.EVERYONE_AS_CREATOR | TemplateSenderTypes.ORGANIZATION_MEMBER | TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR","mutable":false,"attr":"value","reflectToAttr":false,"docs":"Whether the dialog is currently being displayed. This allows it to be added to the DOM before being displayed.","docsTags":[],"default":"TemplateSenderTypes.EVERYONE","values":[{"type":"TemplateSenderTypes.CREATOR"},{"type":"TemplateSenderTypes.EVERYONE"},{"type":"TemplateSenderTypes.EVERYONE_AS_CREATOR"},{"type":"TemplateSenderTypes.ORGANIZATION_MEMBER"},{"type":"TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the dialog is closed. The event data will contain the closure reason.","docsTags":[]},{"event":"next","detail":"TemplateSenderTypes.CREATOR | TemplateSenderTypes.EVERYONE | TemplateSenderTypes.EVERYONE_AS_CREATOR | TemplateSenderTypes.ORGANIZATION_MEMBER | TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the dialog is closed. The event data will contain the selected value.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-template-recipients"],"dependencies":["verdocs-radio-button","verdocs-help-icon","verdocs-button"],"dependencyGraph":{"verdocs-template-sender-dialog":["verdocs-radio-button","verdocs-help-icon","verdocs-button"],"verdocs-template-recipients":["verdocs-template-sender-dialog"]}},{"filePath":"./src/components/controls/verdocs-template-tags/verdocs-template-tags.tsx","encapsulation":"none","tag":"verdocs-template-tags","docs":"Displays a message listing a template\'s tags.","docsTags":[],"usage":{},"props":[{"name":"tags","type":"any[]","mutable":false,"reflectToAttr":false,"docs":"The tags to display","docsTags":[],"values":[{"type":"any[]"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":[],"dependencyGraph":{}},{"filePath":"./src/components/controls/verdocs-text-input/verdocs-text-input.tsx","encapsulation":"none","tag":"verdocs-text-input","docs":"Display a text input field. This is just a standard HTML input field with minimal markup to fit the\\nvisual styles of the other components. Note that events \\"bubble\\" from the input field to the container,\\nso you can subscribe to the same DOM events (input, blur, etc) that a normal input would emmit.","docsTags":[],"usage":{},"props":[{"name":"autocomplete","type":"string","mutable":false,"attr":"autocomplete","reflectToAttr":false,"docs":"If desired, the autocomplete attribute to set.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"Should the field be disabled?","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"The label for the field.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"placeholder","type":"string","mutable":false,"attr":"placeholder","reflectToAttr":false,"docs":"The placeholder for the field.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"type","type":"\\"email\\" | \\"number\\" | \\"password\\" | \\"search\\" | \\"tel\\" | \\"text\\" | \\"url\\"","mutable":false,"attr":"type","reflectToAttr":false,"docs":"The type of field to render. Only text-type fields are allowed here for the current styling. Additional types\\n(e.g. a date picker) will be supported by other controls in the future.","docsTags":[],"default":"\'text\'","values":[{"value":"email","type":"string"},{"value":"number","type":"string"},{"value":"password","type":"string"},{"value":"search","type":"string"},{"value":"tel","type":"string"},{"value":"text","type":"string"},{"value":"url","type":"string"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The initial value for the input field.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-auth","verdocs-field-date","verdocs-field-initial","verdocs-field-signature","verdocs-field-textarea","verdocs-field-textbox","verdocs-field-timestamp","verdocs-initial-dialog","verdocs-signature-dialog","verdocs-template-properties"],"dependencies":[],"dependencyGraph":{"verdocs-auth":["verdocs-text-input"],"verdocs-field-date":["verdocs-text-input"],"verdocs-field-initial":["verdocs-text-input"],"verdocs-field-signature":["verdocs-text-input"],"verdocs-field-textarea":["verdocs-text-input"],"verdocs-field-textbox":["verdocs-text-input"],"verdocs-field-timestamp":["verdocs-text-input"],"verdocs-initial-dialog":["verdocs-text-input"],"verdocs-signature-dialog":["verdocs-text-input"],"verdocs-template-properties":["verdocs-text-input"]}},{"filePath":"./src/components/controls/verdocs-toggle/verdocs-toggle.tsx","encapsulation":"none","tag":"verdocs-toggle","docs":"Displays a label and a set of buttons, also allowing a default selection of a button","docsTags":[],"usage":{},"props":[{"name":"options","type":"IToggleIconButtons","mutable":false,"reflectToAttr":false,"docs":"The tags to display","docsTags":[],"values":[{"type":"IToggleIconButtons"}],"optional":false,"required":false},{"name":"theme","type":"\\"dark\\" | \\"light\\"","mutable":false,"attr":"theme","reflectToAttr":false,"docs":"The \\"theme\\" to be used","docsTags":[],"values":[{"value":"dark","type":"string"},{"value":"light","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":[],"dependencies":[],"dependencyGraph":{}},{"filePath":"./src/components/controls/verdocs-toggle-button/verdocs-toggle-button.tsx","encapsulation":"none","tag":"verdocs-toggle-button","docs":"Displays a single button that can be toggled on or off by clicking it.","docsTags":[],"usage":{},"props":[{"name":"active","type":"boolean","mutable":false,"attr":"active","reflectToAttr":false,"docs":"","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"If set, should be an SVG object. This will be rendered as the button\'s visible element. If icon is supplied, label is ignored.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"If set, should be an SVG object. This will be rendered as the button\'s visible element. If icon is supplied, label is ignored.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":true,"required":false},{"name":"size","type":"\\"normal\\" | \\"small\\"","mutable":false,"attr":"size","reflectToAttr":false,"docs":"How large the button should be. Small buttons are intended for dialog boxes and other smaller scale UI regions.","docsTags":[],"default":"\'normal\'","values":[{"value":"normal","type":"string"},{"value":"small","type":"string"}],"optional":true,"required":false}],"methods":[],"events":[{"event":"toggle","detail":"{ active: boolean; }","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the button is pressed.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-contact-picker"],"dependencies":[],"dependencyGraph":{"verdocs-contact-picker":["verdocs-toggle-button"]}},{"filePath":"./src/components/controls/verdocs-toolbar-icon/verdocs-toolbar-icon.tsx","encapsulation":"none","tag":"verdocs-toolbar-icon","docs":"Displays a simple help icon. Upon hover or focus, a tooltip will be displayed with help text.","docsTags":[],"usage":{},"props":[{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"SVG icon to display","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"text","type":"string","mutable":false,"attr":"text","reflectToAttr":false,"docs":"Help text to display on hover/focus","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-template-fields"],"dependencies":[],"dependencyGraph":{"verdocs-template-fields":["verdocs-toolbar-icon"]}},{"filePath":"./src/components/dialogs/verdocs-upload-dialog/verdocs-upload-dialog.tsx","encapsulation":"none","tag":"verdocs-upload-dialog","docs":"Display a file upload tool. Note that the file is not actually transmitted, so it may be used by\\ncallers with a variety of workflows. Instead, data about the chosen file will be passed to the\\ncaller via the onNext event handler.","docsTags":[],"usage":{},"props":[],"methods":[],"events":[{"event":"cancel","detail":"any","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the dialog is cancelled.","docsTags":[]},{"event":"next","detail":"FileWithData[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired when the dialog is closed. The event data will contain the file selected.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-field-attachment"],"dependencies":["verdocs-button"],"dependencyGraph":{"verdocs-upload-dialog":["verdocs-button"],"verdocs-field-attachment":["verdocs-upload-dialog"]}},{"filePath":"./src/components/embeds/verdocs-view/verdocs-view.tsx","encapsulation":"none","tag":"verdocs-view","docs":"Render the documents attached to an envelope in read-only (view) mode. All documents are displayed in order.","docsTags":[],"usage":{},"props":[{"name":"endpoint","type":"VerdocsEndpoint","mutable":false,"reflectToAttr":false,"docs":"The endpoint to use to communicate with Verdocs. If not set, the default endpoint will be used.","docsTags":[],"default":"VerdocsEndpoint.getDefault()","values":[{"type":"VerdocsEndpoint"}],"optional":false,"required":false},{"name":"envelopeId","type":"string","mutable":false,"attr":"envelope-id","reflectToAttr":false,"docs":"The envelope ID to render. Set ONE OF templateId or envelopeId. If both are set, envelopeId will be ignored.","docsTags":[],"default":"\'\'","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"sdkError","detail":"SDKError","bubbles":true,"cancelable":true,"composed":true,"docs":"Event fired if an error occurs. The event details will contain information about the error. Most errors will\\nterminate the process, and the calling application should correct the condition and re-render the component.","docsTags":[]}],"listeners":[],"styles":[],"slots":[],"parts":[],"dependents":["verdocs-sign"],"dependencies":["verdocs-loader","verdocs-document-page"],"dependencyGraph":{"verdocs-view":["verdocs-loader","verdocs-document-page"],"verdocs-sign":["verdocs-view"]}}]}')},"./dist/esm lazy recursive ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$":function(module,exports,__webpack_require__){var map={"./verdocs-auth.entry.js":["./dist/esm/verdocs-auth.entry.js",0,2,3,27],"./verdocs-build.entry.js":["./dist/esm/verdocs-build.entry.js",0,2,1,3,20],"./verdocs-button-panel_3.entry.js":["./dist/esm/verdocs-button-panel_3.entry.js",5,39],"./verdocs-button.entry.js":["./dist/esm/verdocs-button.entry.js",43],"./verdocs-checkbox.entry.js":["./dist/esm/verdocs-checkbox.entry.js",44],"./verdocs-contact-picker.entry.js":["./dist/esm/verdocs-contact-picker.entry.js",0,2,3,37],"./verdocs-document-page_2.entry.js":["./dist/esm/verdocs-document-page_2.entry.js",0,1,45],"./verdocs-dropdown_2.entry.js":["./dist/esm/verdocs-dropdown_2.entry.js",0,2,1,3,18],"./verdocs-field-attachment.entry.js":["./dist/esm/verdocs-field-attachment.entry.js",30],"./verdocs-field-checkbox.entry.js":["./dist/esm/verdocs-field-checkbox.entry.js",0,1,31],"./verdocs-field-date.entry.js":["./dist/esm/verdocs-field-date.entry.js",0,1,7,15],"./verdocs-field-dropdown.entry.js":["./dist/esm/verdocs-field-dropdown.entry.js",0,1,32],"./verdocs-field-initial.entry.js":["./dist/esm/verdocs-field-initial.entry.js",0,1,33],"./verdocs-field-payment.entry.js":["./dist/esm/verdocs-field-payment.entry.js",0,1,34],"./verdocs-field-radio-button.entry.js":["./dist/esm/verdocs-field-radio-button.entry.js",0,1,35],"./verdocs-field-signature_3.entry.js":["./dist/esm/verdocs-field-signature_3.entry.js",0,1,5,25],"./verdocs-field-textarea.entry.js":["./dist/esm/verdocs-field-textarea.entry.js",0,1,36],"./verdocs-field-textbox.entry.js":["./dist/esm/verdocs-field-textbox.entry.js",0,1,22],"./verdocs-field-timestamp.entry.js":["./dist/esm/verdocs-field-timestamp.entry.js",0,1,7,23],"./verdocs-help-icon_2.entry.js":["./dist/esm/verdocs-help-icon_2.entry.js",5,28],"./verdocs-initial-dialog.entry.js":["./dist/esm/verdocs-initial-dialog.entry.js",46],"./verdocs-kba-dialog.entry.js":["./dist/esm/verdocs-kba-dialog.entry.js",47],"./verdocs-ok-dialog.entry.js":["./dist/esm/verdocs-ok-dialog.entry.js",48],"./verdocs-organization-card.entry.js":["./dist/esm/verdocs-organization-card.entry.js",7,49],"./verdocs-preview.entry.js":["./dist/esm/verdocs-preview.entry.js",0,2,1,3,21],"./verdocs-quick-functions_3.entry.js":["./dist/esm/verdocs-quick-functions_3.entry.js",0,2,3,26],"./verdocs-radio-button.entry.js":["./dist/esm/verdocs-radio-button.entry.js",50],"./verdocs-search-tabs.entry.js":["./dist/esm/verdocs-search-tabs.entry.js",51],"./verdocs-search.entry.js":["./dist/esm/verdocs-search.entry.js",0,2,3,38],"./verdocs-send.entry.js":["./dist/esm/verdocs-send.entry.js",0,2,1,3,24],"./verdocs-sign.entry.js":["./dist/esm/verdocs-sign.entry.js",0,2,1,3,17],"./verdocs-status-indicator.entry.js":["./dist/esm/verdocs-status-indicator.entry.js",5,19],"./verdocs-template-card.entry.js":["./dist/esm/verdocs-template-card.entry.js",52],"./verdocs-template-create_4.entry.js":["./dist/esm/verdocs-template-create_4.entry.js",0,2,1,3,16],"./verdocs-template-tags.entry.js":["./dist/esm/verdocs-template-tags.entry.js",53],"./verdocs-toggle-button.entry.js":["./dist/esm/verdocs-toggle-button.entry.js",54],"./verdocs-toggle.entry.js":["./dist/esm/verdocs-toggle.entry.js",55],"./verdocs-upload-dialog.entry.js":["./dist/esm/verdocs-upload-dialog.entry.js",29]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((function(){return __webpack_require__(id)}))}webpackAsyncContext.keys=function webpackAsyncContextKeys(){return Object.keys(map)},webpackAsyncContext.id="./dist/esm lazy recursive ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$",module.exports=webpackAsyncContext},"./dist/esm/index-f78d163d.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return Fragment})),__webpack_require__.d(__webpack_exports__,"b",(function(){return Host})),__webpack_require__.d(__webpack_exports__,"c",(function(){return getElement})),__webpack_require__.d(__webpack_exports__,"d",(function(){return bootstrapLazy})),__webpack_require__.d(__webpack_exports__,"e",(function(){return createEvent})),__webpack_require__.d(__webpack_exports__,"f",(function(){return forceUpdate})),__webpack_require__.d(__webpack_exports__,"g",(function(){return getRenderingRef})),__webpack_require__.d(__webpack_exports__,"h",(function(){return h})),__webpack_require__.d(__webpack_exports__,"i",(function(){return promiseResolve})),__webpack_require__.d(__webpack_exports__,"j",(function(){return registerInstance}));__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.parse-float.js"),__webpack_require__("./node_modules/core-js/modules/es.weak-map.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.set.js"),__webpack_require__("./node_modules/core-js/modules/es.array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.string.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.string.trim.js"),__webpack_require__("./node_modules/core-js/modules/es.array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.array.some.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.number.is-nan.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.entries.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.map.js"),__webpack_require__("./node_modules/core-js/modules/web.url.js"),__webpack_require__("./node_modules/core-js/modules/web.timers.js"),__webpack_require__("./node_modules/core-js/modules/es.string.replace.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.async-iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.reflect.construct.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js");function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"==typeof call||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(self)}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _wrapNativeSuper(Class){var _cache="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function _wrapNativeSuper(Class){if(null===Class||!function _isNativeFunction(fn){return-1!==Function.toString.call(fn).indexOf("[native code]")}(Class))return Class;if("function"!=typeof Class)throw new TypeError("Super expression must either be null or a function");if(void 0!==_cache){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper)}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper,Class)},_wrapNativeSuper(Class)}function _construct(Parent,args,Class){return _construct=_isNativeReflectConstruct()?Reflect.construct.bind():function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var instance=new(Function.bind.apply(Parent,a));return Class&&_setPrototypeOf(instance,Class.prototype),instance},_construct.apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)},_getPrototypeOf(o)}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&null!=_i.return&&(_r=_i.return(),Object(_r)!==_r))return}finally{if(_d)throw _e}}return _arr}}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function define(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(void 0===method)return context.delegate=null,"throw"===methodName&&delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var contentRef,hostTagName,useNativeShadowDom=!1,checkSlotFallbackVisibility=!1,checkSlotRelocate=!1,isSvgMode=!1,renderingRef=null,queuePending=!1,HYDRATED_CSS="{visibility:hidden}.hydrated{visibility:inherit}",EMPTY_OBJ={},isComplexType=function isComplexType(o){return"object"===(o=typeof o)||"function"===o},h=function h(nodeName,vnodeData){for(var child=null,key=null,slotName=null,simple=!1,lastSimple=!1,vNodeChildren=[],walk=function walk(c){for(var i=0;i<c.length;i++)child=c[i],Array.isArray(child)?walk(child):null!=child&&"boolean"!=typeof child&&((simple="function"!=typeof nodeName&&!isComplexType(child))&&(child=String(child)),simple&&lastSimple?vNodeChildren[vNodeChildren.length-1].$text$+=child:vNodeChildren.push(simple?newVNode(null,child):child),lastSimple=simple)},_len=arguments.length,children=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++)children[_key-2]=arguments[_key];if(walk(children),vnodeData){vnodeData.key&&(key=vnodeData.key),vnodeData.name&&(slotName=vnodeData.name);var classData=vnodeData.className||vnodeData.class;classData&&(vnodeData.class="object"!=typeof classData?classData:Object.keys(classData).filter((function(k){return classData[k]})).join(" "))}if("function"==typeof nodeName)return nodeName(null===vnodeData?{}:vnodeData,vNodeChildren,vdomFnUtils);var vnode=newVNode(nodeName,null);return vnode.$attrs$=vnodeData,vNodeChildren.length>0&&(vnode.$children$=vNodeChildren),vnode.$key$=key,vnode.$name$=slotName,vnode},newVNode=function newVNode(tag,text){var vnode={$flags$:0,$tag$:tag,$text$:text,$elm$:null,$children$:null,$attrs$:null,$key$:null,$name$:null};return vnode},Host={},vdomFnUtils={forEach:function forEach(children,cb){return children.map(convertToPublic).forEach(cb)},map:function map(children,cb){return children.map(convertToPublic).map(cb).map(convertToPrivate)}},convertToPublic=function convertToPublic(node){return{vattrs:node.$attrs$,vchildren:node.$children$,vkey:node.$key$,vname:node.$name$,vtag:node.$tag$,vtext:node.$text$}},convertToPrivate=function convertToPrivate(node){if("function"==typeof node.vtag){var vnodeData=Object.assign({},node.vattrs);return node.vkey&&(vnodeData.key=node.vkey),node.vname&&(vnodeData.name=node.vname),h.apply(void 0,[node.vtag,vnodeData].concat(_toConsumableArray(node.vchildren||[])))}var vnode=newVNode(node.vtag,node.vtext);return vnode.$attrs$=node.vattrs,vnode.$children$=node.vchildren,vnode.$key$=node.vkey,vnode.$name$=node.vname,vnode},getElement=function getElement(ref){return getHostRef(ref).$hostElement$},createEvent=function createEvent(ref,name,flags){var elm=getElement(ref);return{emit:function emit(detail){return emitEvent(elm,name,{bubbles:!!(4&flags),composed:!!(2&flags),cancelable:!!(1&flags),detail:detail})}}},emitEvent=function emitEvent(elm,name,opts){var ev=plt.ce(name,opts);return elm.dispatchEvent(ev),ev},rootAppliedStyles=new WeakMap,registerStyle=function registerStyle(scopeId,cssText,allowCS){var style=styles.get(scopeId);supportsConstructableStylesheets&&allowCS?"string"==typeof(style=style||new CSSStyleSheet)?style=cssText:style.replaceSync(cssText):style=cssText,styles.set(scopeId,style)},attachStyles=function attachStyles(hostRef){var cmpMeta=hostRef.$cmpMeta$,elm=hostRef.$hostElement$,endAttachStyles=(cmpMeta.$tagName$,function(){});!function addStyle(styleContainerNode,cmpMeta,mode,hostElm){var scopeId=getScopeId(cmpMeta),style=styles.get(scopeId);if(styleContainerNode=11===styleContainerNode.nodeType?styleContainerNode:doc,style)if("string"==typeof style){styleContainerNode=styleContainerNode.head||styleContainerNode;var styleElm,appliedStyles=rootAppliedStyles.get(styleContainerNode);appliedStyles||rootAppliedStyles.set(styleContainerNode,appliedStyles=new Set),appliedStyles.has(scopeId)||((styleElm=doc.createElement("style")).innerHTML=style,styleContainerNode.insertBefore(styleElm,styleContainerNode.querySelector("link")),appliedStyles&&appliedStyles.add(scopeId))}else styleContainerNode.adoptedStyleSheets.includes(style)||(styleContainerNode.adoptedStyleSheets=[].concat(_toConsumableArray(styleContainerNode.adoptedStyleSheets),[style]))}(elm.getRootNode(),cmpMeta),endAttachStyles()},getScopeId=function getScopeId(cmp,mode){return"sc-"+cmp.$tagName$},setAccessor=function setAccessor(elm,memberName,oldValue,newValue,isSvg,flags){if(oldValue!==newValue){var isProp=isMemberInElement(elm,memberName),ln=memberName.toLowerCase();if("class"===memberName){var classList=elm.classList,oldClasses=parseClassList(oldValue),newClasses=parseClassList(newValue);classList.remove.apply(classList,_toConsumableArray(oldClasses.filter((function(c){return c&&!newClasses.includes(c)})))),classList.add.apply(classList,_toConsumableArray(newClasses.filter((function(c){return c&&!oldClasses.includes(c)}))))}else if("style"===memberName){for(var prop in oldValue)newValue&&null!=newValue[prop]||(prop.includes("-")?elm.style.removeProperty(prop):elm.style[prop]="");for(var _prop in newValue)oldValue&&newValue[_prop]===oldValue[_prop]||(_prop.includes("-")?elm.style.setProperty(_prop,newValue[_prop]):elm.style[_prop]=newValue[_prop])}else if("key"===memberName);else if("ref"===memberName)newValue&&newValue(elm);else if(isProp||"o"!==memberName[0]||"n"!==memberName[1]){var isComplex=isComplexType(newValue);if((isProp||isComplex&&null!==newValue)&&!isSvg)try{if(elm.tagName.includes("-"))elm[memberName]=newValue;else{var n=null==newValue?"":newValue;"list"===memberName?isProp=!1:null!=oldValue&&elm[memberName]==n||(elm[memberName]=n)}}catch(e){}null==newValue||!1===newValue?!1===newValue&&""!==elm.getAttribute(memberName)||elm.removeAttribute(memberName):(!isProp||4&flags||isSvg)&&!isComplex&&(newValue=!0===newValue?"":newValue,elm.setAttribute(memberName,newValue))}else memberName="-"===memberName[2]?memberName.slice(3):isMemberInElement(win,ln)?ln.slice(2):ln[2]+memberName.slice(3),oldValue&&plt.rel(elm,memberName,oldValue,!1),newValue&&plt.ael(elm,memberName,newValue,!1)}},parseClassListRegex=/\s/,parseClassList=function parseClassList(value){return value?value.split(parseClassListRegex):[]},updateElement=function updateElement(oldVnode,newVnode,isSvgMode,memberName){var elm=11===newVnode.$elm$.nodeType&&newVnode.$elm$.host?newVnode.$elm$.host:newVnode.$elm$,oldVnodeAttrs=oldVnode&&oldVnode.$attrs$||EMPTY_OBJ,newVnodeAttrs=newVnode.$attrs$||EMPTY_OBJ;for(memberName in oldVnodeAttrs)memberName in newVnodeAttrs||setAccessor(elm,memberName,oldVnodeAttrs[memberName],void 0,isSvgMode,newVnode.$flags$);for(memberName in newVnodeAttrs)setAccessor(elm,memberName,oldVnodeAttrs[memberName],newVnodeAttrs[memberName],isSvgMode,newVnode.$flags$)},createElm=function createElm(oldParentVNode,newParentVNode,childIndex,parentElm){var elm,childNode,oldVNode,newVNode=newParentVNode.$children$[childIndex],i=0;if(useNativeShadowDom||(checkSlotRelocate=!0,"slot"===newVNode.$tag$&&(newVNode.$flags$|=newVNode.$children$?2:1)),null!==newVNode.$text$)elm=newVNode.$elm$=doc.createTextNode(newVNode.$text$);else if(1&newVNode.$flags$)elm=newVNode.$elm$=doc.createTextNode("");else{if(isSvgMode||(isSvgMode="svg"===newVNode.$tag$),elm=newVNode.$elm$=doc.createElementNS(isSvgMode?"http://www.w3.org/2000/svg":"http://www.w3.org/1999/xhtml",2&newVNode.$flags$?"slot-fb":newVNode.$tag$),isSvgMode&&"foreignObject"===newVNode.$tag$&&(isSvgMode=!1),updateElement(null,newVNode,isSvgMode),newVNode.$children$)for(i=0;i<newVNode.$children$.length;++i)(childNode=createElm(oldParentVNode,newVNode,i))&&elm.appendChild(childNode);"svg"===newVNode.$tag$?isSvgMode=!1:"foreignObject"===elm.tagName&&(isSvgMode=!0)}return elm["s-hn"]=hostTagName,3&newVNode.$flags$&&(elm["s-sr"]=!0,elm["s-cr"]=contentRef,elm["s-sn"]=newVNode.$name$||"",(oldVNode=oldParentVNode&&oldParentVNode.$children$&&oldParentVNode.$children$[childIndex])&&oldVNode.$tag$===newVNode.$tag$&&oldParentVNode.$elm$&&putBackInOriginalLocation(oldParentVNode.$elm$,!1)),elm},putBackInOriginalLocation=function putBackInOriginalLocation(parentElm,recursive){plt.$flags$|=1;for(var oldSlotChildNodes=parentElm.childNodes,i=oldSlotChildNodes.length-1;i>=0;i--){var childNode=oldSlotChildNodes[i];childNode["s-hn"]!==hostTagName&&childNode["s-ol"]&&(parentReferenceNode(childNode).insertBefore(childNode,referenceNode(childNode)),childNode["s-ol"].remove(),childNode["s-ol"]=void 0,checkSlotRelocate=!0),recursive&&putBackInOriginalLocation(childNode,recursive)}plt.$flags$&=-2},addVnodes=function addVnodes(parentElm,before,parentVNode,vnodes,startIdx,endIdx){for(var childNode,containerElm=parentElm["s-cr"]&&parentElm["s-cr"].parentNode||parentElm;startIdx<=endIdx;++startIdx)vnodes[startIdx]&&(childNode=createElm(null,parentVNode,startIdx))&&(vnodes[startIdx].$elm$=childNode,containerElm.insertBefore(childNode,referenceNode(before)))},removeVnodes=function removeVnodes(vnodes,startIdx,endIdx,vnode,elm){for(;startIdx<=endIdx;++startIdx)(vnode=vnodes[startIdx])&&(elm=vnode.$elm$,callNodeRefs(vnode),checkSlotFallbackVisibility=!0,elm["s-ol"]?elm["s-ol"].remove():putBackInOriginalLocation(elm,!0),elm.remove())},updateChildren=function updateChildren(parentElm,oldCh,newVNode,newCh){for(var node,elmToMove,oldStartIdx=0,newStartIdx=0,idxInOld=0,i=0,oldEndIdx=oldCh.length-1,oldStartVnode=oldCh[0],oldEndVnode=oldCh[oldEndIdx],newEndIdx=newCh.length-1,newStartVnode=newCh[0],newEndVnode=newCh[newEndIdx];oldStartIdx<=oldEndIdx&&newStartIdx<=newEndIdx;)if(null==oldStartVnode)oldStartVnode=oldCh[++oldStartIdx];else if(null==oldEndVnode)oldEndVnode=oldCh[--oldEndIdx];else if(null==newStartVnode)newStartVnode=newCh[++newStartIdx];else if(null==newEndVnode)newEndVnode=newCh[--newEndIdx];else if(isSameVnode(oldStartVnode,newStartVnode))patch(oldStartVnode,newStartVnode),oldStartVnode=oldCh[++oldStartIdx],newStartVnode=newCh[++newStartIdx];else if(isSameVnode(oldEndVnode,newEndVnode))patch(oldEndVnode,newEndVnode),oldEndVnode=oldCh[--oldEndIdx],newEndVnode=newCh[--newEndIdx];else if(isSameVnode(oldStartVnode,newEndVnode))"slot"!==oldStartVnode.$tag$&&"slot"!==newEndVnode.$tag$||putBackInOriginalLocation(oldStartVnode.$elm$.parentNode,!1),patch(oldStartVnode,newEndVnode),parentElm.insertBefore(oldStartVnode.$elm$,oldEndVnode.$elm$.nextSibling),oldStartVnode=oldCh[++oldStartIdx],newEndVnode=newCh[--newEndIdx];else if(isSameVnode(oldEndVnode,newStartVnode))"slot"!==oldStartVnode.$tag$&&"slot"!==newEndVnode.$tag$||putBackInOriginalLocation(oldEndVnode.$elm$.parentNode,!1),patch(oldEndVnode,newStartVnode),parentElm.insertBefore(oldEndVnode.$elm$,oldStartVnode.$elm$),oldEndVnode=oldCh[--oldEndIdx],newStartVnode=newCh[++newStartIdx];else{for(idxInOld=-1,i=oldStartIdx;i<=oldEndIdx;++i)if(oldCh[i]&&null!==oldCh[i].$key$&&oldCh[i].$key$===newStartVnode.$key$){idxInOld=i;break}idxInOld>=0?((elmToMove=oldCh[idxInOld]).$tag$!==newStartVnode.$tag$?node=createElm(oldCh&&oldCh[newStartIdx],newVNode,idxInOld):(patch(elmToMove,newStartVnode),oldCh[idxInOld]=void 0,node=elmToMove.$elm$),newStartVnode=newCh[++newStartIdx]):(node=createElm(oldCh&&oldCh[newStartIdx],newVNode,newStartIdx),newStartVnode=newCh[++newStartIdx]),node&&parentReferenceNode(oldStartVnode.$elm$).insertBefore(node,referenceNode(oldStartVnode.$elm$))}oldStartIdx>oldEndIdx?addVnodes(parentElm,null==newCh[newEndIdx+1]?null:newCh[newEndIdx+1].$elm$,newVNode,newCh,newStartIdx,newEndIdx):newStartIdx>newEndIdx&&removeVnodes(oldCh,oldStartIdx,oldEndIdx)},isSameVnode=function isSameVnode(leftVNode,rightVNode){return leftVNode.$tag$===rightVNode.$tag$&&("slot"===leftVNode.$tag$?leftVNode.$name$===rightVNode.$name$:leftVNode.$key$===rightVNode.$key$)},referenceNode=function referenceNode(node){return node&&node["s-ol"]||node},parentReferenceNode=function parentReferenceNode(node){return(node["s-ol"]?node["s-ol"]:node).parentNode},patch=function patch(oldVNode,newVNode){var defaultHolder,elm=newVNode.$elm$=oldVNode.$elm$,oldChildren=oldVNode.$children$,newChildren=newVNode.$children$,tag=newVNode.$tag$,text=newVNode.$text$;null===text?(isSvgMode="svg"===tag||"foreignObject"!==tag&&isSvgMode,"slot"===tag||updateElement(oldVNode,newVNode,isSvgMode),null!==oldChildren&&null!==newChildren?updateChildren(elm,oldChildren,newVNode,newChildren):null!==newChildren?(null!==oldVNode.$text$&&(elm.textContent=""),addVnodes(elm,null,newVNode,newChildren,0,newChildren.length-1)):null!==oldChildren&&removeVnodes(oldChildren,0,oldChildren.length-1),isSvgMode&&"svg"===tag&&(isSvgMode=!1)):(defaultHolder=elm["s-cr"])?defaultHolder.parentNode.textContent=text:oldVNode.$text$!==text&&(elm.data=text)},updateFallbackSlotVisibility=function updateFallbackSlotVisibility(elm){var childNode,i,ilen,j,slotNameAttr,nodeType,childNodes=elm.childNodes;for(i=0,ilen=childNodes.length;i<ilen;i++)if(1===(childNode=childNodes[i]).nodeType){if(childNode["s-sr"])for(slotNameAttr=childNode["s-sn"],childNode.hidden=!1,j=0;j<ilen;j++)if(nodeType=childNodes[j].nodeType,childNodes[j]["s-hn"]!==childNode["s-hn"]||""!==slotNameAttr){if(1===nodeType&&slotNameAttr===childNodes[j].getAttribute("slot")){childNode.hidden=!0;break}}else if(1===nodeType||3===nodeType&&""!==childNodes[j].textContent.trim()){childNode.hidden=!0;break}updateFallbackSlotVisibility(childNode)}},relocateNodes=[],relocateSlotContent=function relocateSlotContent(elm){for(var childNode,node,hostContentNodes,slotNameAttr,relocateNodeData,j,i=0,childNodes=elm.childNodes,ilen=childNodes.length;i<ilen;i++){if((childNode=childNodes[i])["s-sr"]&&(node=childNode["s-cr"])&&node.parentNode)for(hostContentNodes=node.parentNode.childNodes,slotNameAttr=childNode["s-sn"],j=hostContentNodes.length-1;j>=0;j--)(node=hostContentNodes[j])["s-cn"]||node["s-nr"]||node["s-hn"]===childNode["s-hn"]||(isNodeLocatedInSlot(node,slotNameAttr)?(relocateNodeData=relocateNodes.find((function(r){return r.$nodeToRelocate$===node})),checkSlotFallbackVisibility=!0,node["s-sn"]=node["s-sn"]||slotNameAttr,relocateNodeData?relocateNodeData.$slotRefNode$=childNode:relocateNodes.push({$slotRefNode$:childNode,$nodeToRelocate$:node}),node["s-sr"]&&relocateNodes.map((function(relocateNode){isNodeLocatedInSlot(relocateNode.$nodeToRelocate$,node["s-sn"])&&(relocateNodeData=relocateNodes.find((function(r){return r.$nodeToRelocate$===node})))&&!relocateNode.$slotRefNode$&&(relocateNode.$slotRefNode$=relocateNodeData.$slotRefNode$)}))):relocateNodes.some((function(r){return r.$nodeToRelocate$===node}))||relocateNodes.push({$nodeToRelocate$:node}));1===childNode.nodeType&&relocateSlotContent(childNode)}},isNodeLocatedInSlot=function isNodeLocatedInSlot(nodeToRelocate,slotNameAttr){return 1===nodeToRelocate.nodeType?null===nodeToRelocate.getAttribute("slot")&&""===slotNameAttr||nodeToRelocate.getAttribute("slot")===slotNameAttr:nodeToRelocate["s-sn"]===slotNameAttr||""===slotNameAttr},callNodeRefs=function callNodeRefs(vNode){vNode.$attrs$&&vNode.$attrs$.ref&&vNode.$attrs$.ref(null),vNode.$children$&&vNode.$children$.map(callNodeRefs)},renderVdom=function renderVdom(hostRef,renderFnResults){var hostElm=hostRef.$hostElement$,cmpMeta=hostRef.$cmpMeta$,oldVNode=hostRef.$vnode$||newVNode(null,null),rootVnode=function isHost(node){return node&&node.$tag$===Host}(renderFnResults)?renderFnResults:h(null,null,renderFnResults);if(hostTagName=hostElm.tagName,rootVnode.$tag$=null,rootVnode.$flags$|=4,hostRef.$vnode$=rootVnode,rootVnode.$elm$=oldVNode.$elm$=hostElm,contentRef=hostElm["s-cr"],useNativeShadowDom=0!=(1&cmpMeta.$flags$),checkSlotFallbackVisibility=!1,patch(oldVNode,rootVnode),plt.$flags$|=1,checkSlotRelocate){var relocateData,nodeToRelocate,orgLocationNode,parentNodeRef,insertBeforeNode,refNode;relocateSlotContent(rootVnode.$elm$);for(var i=0;i<relocateNodes.length;i++)(nodeToRelocate=(relocateData=relocateNodes[i]).$nodeToRelocate$)["s-ol"]||((orgLocationNode=doc.createTextNode(""))["s-nr"]=nodeToRelocate,nodeToRelocate.parentNode.insertBefore(nodeToRelocate["s-ol"]=orgLocationNode,nodeToRelocate));for(i=0;i<relocateNodes.length;i++)if(nodeToRelocate=(relocateData=relocateNodes[i]).$nodeToRelocate$,relocateData.$slotRefNode$){for(parentNodeRef=relocateData.$slotRefNode$.parentNode,insertBeforeNode=relocateData.$slotRefNode$.nextSibling,orgLocationNode=nodeToRelocate["s-ol"];orgLocationNode=orgLocationNode.previousSibling;)if((refNode=orgLocationNode["s-nr"])&&refNode["s-sn"]===nodeToRelocate["s-sn"]&&parentNodeRef===refNode.parentNode&&(!(refNode=refNode.nextSibling)||!refNode["s-nr"])){insertBeforeNode=refNode;break}(!insertBeforeNode&&parentNodeRef!==nodeToRelocate.parentNode||nodeToRelocate.nextSibling!==insertBeforeNode)&&nodeToRelocate!==insertBeforeNode&&(!nodeToRelocate["s-hn"]&&nodeToRelocate["s-ol"]&&(nodeToRelocate["s-hn"]=nodeToRelocate["s-ol"].parentNode.nodeName),parentNodeRef.insertBefore(nodeToRelocate,insertBeforeNode))}else 1===nodeToRelocate.nodeType&&(nodeToRelocate.hidden=!0)}checkSlotFallbackVisibility&&updateFallbackSlotVisibility(rootVnode.$elm$),plt.$flags$&=-2,relocateNodes.length=0},attachToAncestor=function attachToAncestor(hostRef,ancestorComponent){ancestorComponent&&!hostRef.$onRenderResolve$&&ancestorComponent["s-p"]&&ancestorComponent["s-p"].push(new Promise((function(r){return hostRef.$onRenderResolve$=r})))},scheduleUpdate=function scheduleUpdate(hostRef,isInitialLoad){if(hostRef.$flags$|=16,!(4&hostRef.$flags$)){attachToAncestor(hostRef,hostRef.$ancestorComponent$);return writeTask((function dispatch(){return dispatchHooks(hostRef,isInitialLoad)}))}hostRef.$flags$|=512},dispatchHooks=function dispatchHooks(hostRef,isInitialLoad){var promise,endSchedule=(hostRef.$cmpMeta$.$tagName$,function(){}),instance=hostRef.$lazyInstance$;return isInitialLoad&&(promise=safeCall(instance,"componentWillLoad")),endSchedule(),then(promise,(function(){return updateComponent(hostRef,instance,isInitialLoad)}))},updateComponent=function(){var _ref=_asyncToGenerator(_regeneratorRuntime().mark((function _callee(hostRef,instance,isInitialLoad){var elm,endUpdate,rc,endRender,childrenPromises,postUpdate;return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:elm=hostRef.$hostElement$,hostRef.$cmpMeta$.$tagName$,endUpdate=function(){},rc=elm["s-rc"],isInitialLoad&&attachStyles(hostRef),hostRef.$cmpMeta$.$tagName$,endRender=function(){},callRender(hostRef,instance),rc&&(rc.map((function(cb){return cb()})),elm["s-rc"]=void 0),endRender(),endUpdate(),childrenPromises=elm["s-p"],postUpdate=function postUpdate(){return postUpdateComponent(hostRef)},0===childrenPromises.length?postUpdate():(Promise.all(childrenPromises).then(postUpdate),hostRef.$flags$|=4,childrenPromises.length=0);case 12:case"end":return _context.stop()}}),_callee)})));return function updateComponent(_x,_x2,_x3){return _ref.apply(this,arguments)}}(),callRender=function callRender(hostRef,instance,elm){try{renderingRef=instance,instance=instance.render(),hostRef.$flags$&=-17,hostRef.$flags$|=2,renderVdom(hostRef,instance)}catch(e){consoleError(e,hostRef.$hostElement$)}return renderingRef=null,null},getRenderingRef=function getRenderingRef(){return renderingRef},postUpdateComponent=function postUpdateComponent(hostRef){hostRef.$cmpMeta$.$tagName$;var elm=hostRef.$hostElement$,endPostUpdate=function(){},instance=hostRef.$lazyInstance$,ancestorComponent=hostRef.$ancestorComponent$;safeCall(instance,"componentDidRender"),64&hostRef.$flags$?(safeCall(instance,"componentDidUpdate"),endPostUpdate()):(hostRef.$flags$|=64,addHydratedFlag(elm),safeCall(instance,"componentDidLoad"),endPostUpdate(),hostRef.$onReadyResolve$(elm),ancestorComponent||appDidLoad()),hostRef.$onInstanceResolve$(elm),hostRef.$onRenderResolve$&&(hostRef.$onRenderResolve$(),hostRef.$onRenderResolve$=void 0),512&hostRef.$flags$&&nextTick((function(){return scheduleUpdate(hostRef,!1)})),hostRef.$flags$&=-517},forceUpdate=function forceUpdate(ref){var hostRef=getHostRef(ref),isConnected=hostRef.$hostElement$.isConnected;return isConnected&&2==(18&hostRef.$flags$)&&scheduleUpdate(hostRef,!1),isConnected},appDidLoad=function appDidLoad(who){addHydratedFlag(doc.documentElement),nextTick((function(){return emitEvent(win,"appload",{detail:{namespace:"verdocs-web-sdk"}})}))},safeCall=function safeCall(instance,method,arg){if(instance&&instance[method])try{return instance[method](arg)}catch(e){consoleError(e)}},then=function then(promise,thenFn){return promise&&promise.then?promise.then(thenFn):thenFn()},addHydratedFlag=function addHydratedFlag(elm){return elm.classList.add("hydrated")},setValue=function setValue(ref,propName,newVal,cmpMeta){var hostRef=getHostRef(ref),oldVal=hostRef.$instanceValues$.get(propName),flags=hostRef.$flags$,instance=hostRef.$lazyInstance$;newVal=function parsePropertyValue(propValue,propType){return null==propValue||isComplexType(propValue)?propValue:4&propType?"false"!==propValue&&(""===propValue||!!propValue):2&propType?parseFloat(propValue):1&propType?String(propValue):propValue}(newVal,cmpMeta.$members$[propName][0]);var areBothNaN=Number.isNaN(oldVal)&&Number.isNaN(newVal);8&flags&&void 0!==oldVal||!(newVal!==oldVal&&!areBothNaN)||(hostRef.$instanceValues$.set(propName,newVal),instance&&2==(18&flags)&&scheduleUpdate(hostRef,!1))},proxyComponent=function proxyComponent(Cstr,cmpMeta,flags){if(cmpMeta.$members$){var members=Object.entries(cmpMeta.$members$),prototype=Cstr.prototype;if(members.map((function(_ref2){var _ref3=_slicedToArray(_ref2,2),memberName=_ref3[0],memberFlags=_slicedToArray(_ref3[1],1)[0];31&memberFlags||2&flags&&32&memberFlags?Object.defineProperty(prototype,memberName,{get:function get(){return function getValue(ref,propName){return getHostRef(ref).$instanceValues$.get(propName)}(this,memberName)},set:function set(newValue){setValue(this,memberName,newValue,cmpMeta)},configurable:!0,enumerable:!0}):1&flags&&64&memberFlags&&Object.defineProperty(prototype,memberName,{value:function value(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];var ref=getHostRef(this);return ref.$onInstancePromise$.then((function(){var _ref$$lazyInstance$;return(_ref$$lazyInstance$=ref.$lazyInstance$)[memberName].apply(_ref$$lazyInstance$,args)}))}})})),1&flags){var attrNameToPropName=new Map;prototype.attributeChangedCallback=function(attrName,_oldValue,newValue){var _this=this;plt.jmp((function(){var propName=attrNameToPropName.get(attrName);if(_this.hasOwnProperty(propName))newValue=_this[propName],delete _this[propName];else if(prototype.hasOwnProperty(propName)&&"number"==typeof _this[propName]&&_this[propName]==newValue)return;_this[propName]=(null!==newValue||"boolean"!=typeof _this[propName])&&newValue}))},Cstr.observedAttributes=members.filter((function(_ref4){var _ref5=_slicedToArray(_ref4,2);_ref5[0];return 15&_ref5[1][0]})).map((function(_ref6){var _ref7=_slicedToArray(_ref6,2),propName=_ref7[0],attrName=_ref7[1][1]||propName;return attrNameToPropName.set(attrName,propName),attrName}))}}return Cstr},initializeComponent=function(){var _ref8=_asyncToGenerator(_regeneratorRuntime().mark((function _callee2(elm,hostRef,cmpMeta,hmrVersionId,Cstr){var endLoad,endNewInstance,style,scopeId,endRegisterStyles,ancestorComponent,schedule;return _regeneratorRuntime().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:if(0!=(32&hostRef.$flags$)){_context2.next=16;break}if(hostRef.$flags$|=32,!(Cstr=loadModule(cmpMeta)).then){_context2.next=9;break}return endLoad=function(){},_context2.next=7,Cstr;case 7:Cstr=_context2.sent,endLoad();case 9:Cstr.isProxied||(proxyComponent(Cstr,cmpMeta,2),Cstr.isProxied=!0),cmpMeta.$tagName$,endNewInstance=function(){},hostRef.$flags$|=8;try{new Cstr(hostRef)}catch(e){consoleError(e)}hostRef.$flags$&=-9,endNewInstance(),Cstr.style&&(style=Cstr.style,scopeId=getScopeId(cmpMeta),styles.has(scopeId)||(cmpMeta.$tagName$,endRegisterStyles=function(){},registerStyle(scopeId,style,!!(1&cmpMeta.$flags$)),endRegisterStyles()));case 16:ancestorComponent=hostRef.$ancestorComponent$,schedule=function schedule(){return scheduleUpdate(hostRef,!0)},ancestorComponent&&ancestorComponent["s-rc"]?ancestorComponent["s-rc"].push(schedule):schedule();case 19:case"end":return _context2.stop()}}),_callee2)})));return function initializeComponent(_x4,_x5,_x6,_x7,_x8){return _ref8.apply(this,arguments)}}(),_connectedCallback=function connectedCallback(elm){if(0==(1&plt.$flags$)){var hostRef=getHostRef(elm),cmpMeta=hostRef.$cmpMeta$,endConnected=(cmpMeta.$tagName$,function(){});if(!(1&hostRef.$flags$)){hostRef.$flags$|=1,12&cmpMeta.$flags$&&setContentReference(elm);for(var ancestorComponent=elm;ancestorComponent=ancestorComponent.parentNode||ancestorComponent.host;)if(ancestorComponent["s-p"]){attachToAncestor(hostRef,hostRef.$ancestorComponent$=ancestorComponent);break}cmpMeta.$members$&&Object.entries(cmpMeta.$members$).map((function(_ref9){var _ref10=_slicedToArray(_ref9,2),memberName=_ref10[0];if(31&_slicedToArray(_ref10[1],1)[0]&&elm.hasOwnProperty(memberName)){var value=elm[memberName];delete elm[memberName],elm[memberName]=value}})),initializeComponent(elm,hostRef,cmpMeta)}endConnected()}},setContentReference=function setContentReference(elm){var contentRefElm=elm["s-cr"]=doc.createComment("");contentRefElm["s-cn"]=!0,elm.insertBefore(contentRefElm,elm.firstChild)},_disconnectedCallback=function disconnectedCallback(elm){if(0==(1&plt.$flags$)){var instance=getHostRef(elm).$lazyInstance$;safeCall(instance,"disconnectedCallback")}},bootstrapLazy=function bootstrapLazy(lazyBundles){var appLoadFallback,options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},endBootstrap=function(){},cmpTags=[],exclude=options.exclude||[],customElements=win.customElements,head=doc.head,metaCharset=head.querySelector("meta[charset]"),visibilityStyle=doc.createElement("style"),deferredConnectedCallbacks=[],isBootstrapping=!0;Object.assign(plt,options),plt.$resourcesUrl$=new URL(options.resourcesUrl||"./",doc.baseURI).href,lazyBundles.map((function(lazyBundle){lazyBundle[1].map((function(compactMeta){var cmpMeta={$flags$:compactMeta[0],$tagName$:compactMeta[1],$members$:compactMeta[2],$listeners$:compactMeta[3]};cmpMeta.$members$=compactMeta[2];var tagName=cmpMeta.$tagName$,HostElement=function(_HTMLElement){_inherits(HostElement,_HTMLElement);var _super=_createSuper(HostElement);function HostElement(self){var _this2;return _classCallCheck(this,HostElement),self=_assertThisInitialized(_this2=_super.call(this,self)),registerHost(self,cmpMeta),_this2}return _createClass(HostElement,[{key:"connectedCallback",value:function connectedCallback(){var _this3=this;appLoadFallback&&(clearTimeout(appLoadFallback),appLoadFallback=null),isBootstrapping?deferredConnectedCallbacks.push(this):plt.jmp((function(){return _connectedCallback(_this3)}))}},{key:"disconnectedCallback",value:function disconnectedCallback(){var _this4=this;plt.jmp((function(){return _disconnectedCallback(_this4)}))}},{key:"componentOnReady",value:function componentOnReady(){return getHostRef(this).$onReadyPromise$}}]),HostElement}(_wrapNativeSuper(HTMLElement));cmpMeta.$lazyBundleId$=lazyBundle[0],exclude.includes(tagName)||customElements.get(tagName)||(cmpTags.push(tagName),customElements.define(tagName,proxyComponent(HostElement,cmpMeta,1)))}))})),visibilityStyle.innerHTML=cmpTags+HYDRATED_CSS,visibilityStyle.setAttribute("data-styles",""),head.insertBefore(visibilityStyle,metaCharset?metaCharset.nextSibling:head.firstChild),isBootstrapping=!1,deferredConnectedCallbacks.length?deferredConnectedCallbacks.map((function(host){return host.connectedCallback()})):plt.jmp((function(){return appLoadFallback=setTimeout(appDidLoad,30)})),endBootstrap()},Fragment=function Fragment(_,children){return children},hostRefs=new WeakMap,getHostRef=function getHostRef(ref){return hostRefs.get(ref)},registerInstance=function registerInstance(lazyInstance,hostRef){return hostRefs.set(hostRef.$lazyInstance$=lazyInstance,hostRef)},registerHost=function registerHost(elm,cmpMeta){var hostRef={$flags$:0,$hostElement$:elm,$cmpMeta$:cmpMeta,$instanceValues$:new Map};return hostRef.$onInstancePromise$=new Promise((function(r){return hostRef.$onInstanceResolve$=r})),hostRef.$onReadyPromise$=new Promise((function(r){return hostRef.$onReadyResolve$=r})),elm["s-p"]=[],elm["s-rc"]=[],hostRefs.set(elm,hostRef)},isMemberInElement=function isMemberInElement(elm,memberName){return memberName in elm},consoleError=function consoleError(e,el){return(0,console.error)(e,el)},cmpModules=new Map,loadModule=function loadModule(cmpMeta,hostRef,hmrVersionId){var exportName=cmpMeta.$tagName$.replace(/-/g,"_"),bundleId=cmpMeta.$lazyBundleId$,module=cmpModules.get(bundleId);return module?module[exportName]:__webpack_require__("./dist/esm lazy recursive ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$")("./"+bundleId+".entry.js").then((function(importedModule){return cmpModules.set(bundleId,importedModule),importedModule[exportName]}),consoleError)},styles=new Map,win="undefined"!=typeof window?window:{},doc=win.document||{head:{}},plt={$flags$:0,$resourcesUrl$:"",jmp:function jmp(h){return h()},raf:function raf(h){return requestAnimationFrame(h)},ael:function ael(el,eventName,listener,opts){return el.addEventListener(eventName,listener,opts)},rel:function rel(el,eventName,listener,opts){return el.removeEventListener(eventName,listener,opts)},ce:function ce(eventName,opts){return new CustomEvent(eventName,opts)}},promiseResolve=function promiseResolve(v){return Promise.resolve(v)},supportsConstructableStylesheets=function(){try{return new CSSStyleSheet,"function"==typeof(new CSSStyleSheet).replaceSync}catch(e){}return!1}(),queueDomReads=[],queueDomWrites=[],queueTask=function queueTask(queue,write){return function(cb){queue.push(cb),queuePending||(queuePending=!0,write&&4&plt.$flags$?nextTick(flush):plt.raf(flush))}},consume=function consume(queue){for(var i=0;i<queue.length;i++)try{queue[i](performance.now())}catch(e){consoleError(e)}queue.length=0},flush=function flush(){consume(queueDomReads),consume(queueDomWrites),(queuePending=queueDomReads.length>0)&&plt.raf(flush)},nextTick=function nextTick(cb){return promiseResolve().then(cb)},writeTask=queueTask(queueDomWrites,!0)},"./generated-stories-entry.js":function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__("./node_modules/@storybook/web-components/dist/esm/client/index.js").configure)([__webpack_require__("./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.mdx)$"),__webpack_require__("./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(js|jsx|ts|tsx))$")],module,!1)}).call(this,__webpack_require__("./node_modules/@storybook/builder-webpack4/node_modules/webpack/buildin/module.js")(module))},"./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(js|jsx|ts|tsx))$":function(module,exports,__webpack_require__){var map={"./components/controls/verdocs-button-panel/verdocs-button-panel.stories.tsx":"./src/components/controls/verdocs-button-panel/verdocs-button-panel.stories.tsx","./components/controls/verdocs-button/verdocs-button.stories.tsx":"./src/components/controls/verdocs-button/verdocs-button.stories.tsx","./components/controls/verdocs-checkbox/verdocs-checkbox.stories.tsx":"./src/components/controls/verdocs-checkbox/verdocs-checkbox.stories.tsx","./components/controls/verdocs-dropdown/verdocs-dropdown.stories.tsx":"./src/components/controls/verdocs-dropdown/verdocs-dropdown.stories.tsx","./components/controls/verdocs-help-icon/verdocs-help-icon.stories.tsx":"./src/components/controls/verdocs-help-icon/verdocs-help-icon.stories.tsx","./components/controls/verdocs-loader/verdocs-loader.stories.tsx":"./src/components/controls/verdocs-loader/verdocs-loader.stories.tsx","./components/controls/verdocs-organization-card/verdocs-organization-card.stories.tsx":"./src/components/controls/verdocs-organization-card/verdocs-organization-card.stories.tsx","./components/controls/verdocs-radio-button/verdocs-radio-button.stories.tsx":"./src/components/controls/verdocs-radio-button/verdocs-radio-button.stories.tsx","./components/controls/verdocs-select-input/verdocs-select-input.stories.tsx":"./src/components/controls/verdocs-select-input/verdocs-select-input.stories.tsx","./components/controls/verdocs-status-indicator/verdocs-status-indicator.stories.tsx":"./src/components/controls/verdocs-status-indicator/verdocs-status-indicator.stories.tsx","./components/controls/verdocs-template-card/verdocs-template-card.stories.tsx":"./src/components/controls/verdocs-template-card/verdocs-template-card.stories.tsx","./components/controls/verdocs-template-tags/verdocs-template-tags.stories.tsx":"./src/components/controls/verdocs-template-tags/verdocs-template-tags.stories.tsx","./components/controls/verdocs-text-input/verdocs-text-input.stories.tsx":"./src/components/controls/verdocs-text-input/verdocs-text-input.stories.tsx","./components/controls/verdocs-toggle-button/verdocs-toggle-button.stories.tsx":"./src/components/controls/verdocs-toggle-button/verdocs-toggle-button.stories.tsx","./components/controls/verdocs-toggle/verdocs-toggle.stories.tsx":"./src/components/controls/verdocs-toggle/verdocs-toggle.stories.tsx","./components/controls/verdocs-toolbar-icon/verdocs-toolbar-icon.stories.tsx":"./src/components/controls/verdocs-toolbar-icon/verdocs-toolbar-icon.stories.tsx","./components/dialogs/verdocs-initial-dialog/verdocs-initial-dialog.stories.tsx":"./src/components/dialogs/verdocs-initial-dialog/verdocs-initial-dialog.stories.tsx","./components/dialogs/verdocs-kba-dialog/verdocs-kba-dialog.stories.tsx":"./src/components/dialogs/verdocs-kba-dialog/verdocs-kba-dialog.stories.tsx","./components/dialogs/verdocs-ok-dialog/verdocs-ok-dialog.stories.tsx":"./src/components/dialogs/verdocs-ok-dialog/verdocs-ok-dialog.stories.tsx","./components/dialogs/verdocs-signature-dialog/verdocs-signature-dialog.stories.tsx":"./src/components/dialogs/verdocs-signature-dialog/verdocs-signature-dialog.stories.tsx","./components/dialogs/verdocs-template-sender-dialog/verdocs-template-sender-dialog.stories.tsx":"./src/components/dialogs/verdocs-template-sender-dialog/verdocs-template-sender-dialog.stories.tsx","./components/dialogs/verdocs-upload-dialog/verdocs-upload-dialog.stories.tsx":"./src/components/dialogs/verdocs-upload-dialog/verdocs-upload-dialog.stories.tsx","./components/elements/verdocs-contact-picker/verdocs-contact-picker.stories.tsx":"./src/components/elements/verdocs-contact-picker/verdocs-contact-picker.stories.tsx","./components/elements/verdocs-field-attachment/verdocs-field-attachment.stories.tsx":"./src/components/elements/verdocs-field-attachment/verdocs-field-attachment.stories.tsx","./components/elements/verdocs-field-checkbox/verdocs-field-checkbox.stories.tsx":"./src/components/elements/verdocs-field-checkbox/verdocs-field-checkbox.stories.tsx","./components/elements/verdocs-field-date/verdocs-field-date.stories.tsx":"./src/components/elements/verdocs-field-date/verdocs-field-date.stories.tsx","./components/elements/verdocs-field-dropdown/verdocs-field-dropdown.stories.tsx":"./src/components/elements/verdocs-field-dropdown/verdocs-field-dropdown.stories.tsx","./components/elements/verdocs-field-initial/verdocs-field-initial.stories.tsx":"./src/components/elements/verdocs-field-initial/verdocs-field-initial.stories.tsx","./components/elements/verdocs-field-payment/verdocs-field-payment.stories.tsx":"./src/components/elements/verdocs-field-payment/verdocs-field-payment.stories.tsx","./components/elements/verdocs-field-radio-button-group/verdocs-field-radio-button.stories.tsx":"./src/components/elements/verdocs-field-radio-button-group/verdocs-field-radio-button.stories.tsx","./components/elements/verdocs-field-signature/verdocs-field-signature.stories.tsx":"./src/components/elements/verdocs-field-signature/verdocs-field-signature.stories.tsx","./components/elements/verdocs-field-textarea/verdocs-field-textarea.stories.tsx":"./src/components/elements/verdocs-field-textarea/verdocs-field-textarea.stories.tsx","./components/elements/verdocs-field-textbox/verdocs-field-textbox.stories.tsx":"./src/components/elements/verdocs-field-textbox/verdocs-field-textbox.stories.tsx","./components/elements/verdocs-field-timestamp/verdocs-field-timestamp.stories.tsx":"./src/components/elements/verdocs-field-timestamp/verdocs-field-timestamp.stories.tsx","./components/elements/verdocs-quick-functions/verdocs-quick-functions.stories.tsx":"./src/components/elements/verdocs-quick-functions/verdocs-quick-functions.stories.tsx","./components/elements/verdocs-search-activity/verdocs-search-activity.stories.tsx":"./src/components/elements/verdocs-search-activity/verdocs-search-activity.stories.tsx","./components/elements/verdocs-search-box/verdocs-search-box.stories.tsx":"./src/components/elements/verdocs-search-box/verdocs-search-box.stories.tsx","./components/elements/verdocs-search-tabs/verdocs-search-tabs.stories.tsx":"./src/components/elements/verdocs-search-tabs/verdocs-search-tabs.stories.tsx","./components/elements/verdocs-template-create/verdocs-template-create.stories.tsx":"./src/components/elements/verdocs-template-create/verdocs-template-create.stories.tsx","./components/elements/verdocs-template-fields/verdocs-template-fields.stories.tsx":"./src/components/elements/verdocs-template-fields/verdocs-template-fields.stories.tsx","./components/elements/verdocs-template-properties/verdocs-template-properties.stories.tsx":"./src/components/elements/verdocs-template-properties/verdocs-template-properties.stories.tsx","./components/elements/verdocs-template-recipients/verdocs-template-recipients.stories.tsx":"./src/components/elements/verdocs-template-recipients/verdocs-template-recipients.stories.tsx","./components/embeds/verdocs-auth/verdocs-auth.stories.tsx":"./src/components/embeds/verdocs-auth/verdocs-auth.stories.tsx","./components/embeds/verdocs-build/verdocs-build.stories.tsx":"./src/components/embeds/verdocs-build/verdocs-build.stories.tsx","./components/embeds/verdocs-preview/verdocs-preview.stories.tsx":"./src/components/embeds/verdocs-preview/verdocs-preview.stories.tsx","./components/embeds/verdocs-search/verdocs-search.stories.tsx":"./src/components/embeds/verdocs-search/verdocs-search.stories.tsx","./components/embeds/verdocs-send/verdocs-send.stories.tsx":"./src/components/embeds/verdocs-send/verdocs-send.stories.tsx","./components/embeds/verdocs-sign/verdocs-sign.stories.tsx":"./src/components/embeds/verdocs-sign/verdocs-sign.stories.tsx","./components/embeds/verdocs-view/verdocs-view.stories.tsx":"./src/components/embeds/verdocs-view/verdocs-view.stories.tsx"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(js|jsx|ts|tsx))$"},"./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.mdx)$":function(module,exports){function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=function(){return[]},webpackEmptyContext.resolve=webpackEmptyContext,module.exports=webpackEmptyContext,webpackEmptyContext.id="./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.mdx)$"},"./src/components/controls/verdocs-button-panel/verdocs-button-panel.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ButtonPanel",(function(){return ButtonPanel}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Button Panel",component:"verdocs-button-panel",args:{icon:'<svg xmlns="http://www.w3.org/2000/svg" height="24" width="24" fill="#000000"><path d="M7.6 13.925q-.55 0-.925-.375t-.375-.925q0-.55.375-.937.375-.388.925-.388t.925.388q.375.387.375.937t-.375.925q-.375.375-.925.375Zm4.4 0q-.55 0-.925-.375t-.375-.925q0-.55.375-.937.375-.388.925-.388t.925.388q.375.387.375.937t-.375.925q-.375.375-.925.375Zm4.4 0q-.55 0-.925-.375t-.375-.925q0-.55.375-.937.375-.388.925-.388t.925.388q.375.387.375.937t-.375.925q-.375.375-.925.375ZM5.3 22.85q-1.325 0-2.238-.912-.912-.913-.912-2.238V6.3q0-1.325.912-2.238.913-.912 2.238-.912H6v-2h2.575v2h6.85v-2H18v2h.7q1.325 0 2.238.912.912.913.912 2.238v13.4q0 1.325-.912 2.238-.913.912-2.238.912Zm0-3.15h13.4V10H5.3v9.7ZM5.3 8h13.4V6.3H5.3Zm0 0V6.3 8Z"/></svg>'},argTypes:{},parameters:{layout:"fullscreen"}};var ButtonPanel=function ButtonPanel(_ref){var icon=_ref.icon;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["\n  <verdocs-button-panel .icon=",'>\n    <h6>Field Settings</h6>\n    <form>\n      <label>Field 1</label>\n      <input type="text" placeholder="Field 1..." />\n      <label>Field 2</label>\n      <input type="text" placeholder="Field 2..." />\n    </form>\n  </verdocs-button-panel>\n'])),icon)};ButtonPanel.parameters=Object.assign({storySource:{source:'({icon}) => html`\n  <verdocs-button-panel .icon=${icon}>\n    <h6>Field Settings</h6>\n    <form>\n      <label>Field 1</label>\n      <input type="text" placeholder="Field 1..." />\n      <label>Field 2</label>\n      <input type="text" placeholder="Field 2..." />\n    </form>\n  </verdocs-button-panel>\n`'}},ButtonPanel.parameters)},"./src/components/controls/verdocs-button/verdocs-button.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Button",(function(){return Button}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Button",component:"verdocs-button",args:{label:"Click Me",type:"button",size:"normal",variant:"standard",disabled:!1},argTypes:{startIcon:{defaultValue:!1,control:{type:"boolean"}},endIcon:{defaultValue:!1,control:{type:"boolean"}},click:{action:"click",description:"Fired when the user clicks the button."}}};var Button=function Button(_ref){var label=_ref.label,size=_ref.size,variant=_ref.variant,disabled=_ref.disabled,startIcon=_ref.startIcon,endIcon=_ref.endIcon,click=_ref.click;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-button\n    .label=","\n    .size=","\n    .variant=","\n    .disabled=","\n    .startIcon=","\n    .endIcon=","\n    @click=","\n  />"])),label,size,variant,disabled,startIcon?'\n  <svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24px" viewBox="0 0 24 24" width="24px" fill="#ffffff">\n    <g>\n      <rect fill="none" height="24" width="24"/>\n    </g>\n    <g>\n      <g>\n        <path d="M12,2C6.48,2,2,6.48,2,12c0,5.52,4.48,10,10,10s10-4.48,10-10C22,6.48,17.52,2,12,2z M12,20c-4.42,0-8-3.58-8-8 c0-4.42,3.58-8,8-8s8,3.58,8,8C20,16.42,16.42,20,12,20z"/>\n        <circle cx="7" cy="12" r="1.5"/>\n        <circle cx="12" cy="12" r="1.5"/>\n        <circle cx="17" cy="12" r="1.5"/>\n      </g>\n    </g>\n  </svg>\n':null,endIcon?'\n<svg width="10" height="26" viewBox="0 0 10 26" fill="#ffffff" xmlns="http://www.w3.org/2000/svg">\n<g clip-path="url(#clip0_31568_3647)">\n<path d="M9.64682 13.431L2.10645 20.9466C1.86503 21.1853 1.47466 21.1853 1.23324 20.9466L0.216218 19.9411C-0.0251976 19.7025 -0.0251976 19.3165 0.216218 19.0778L6.30296 12.9993L0.216218 6.9208C-0.0251976 6.68213 -0.0251976 6.29619 0.216218 6.05752L1.23324 5.05205C1.47466 4.81338 1.86503 4.81338 2.10645 5.05205L9.64682 12.5677C9.88824 12.8064 9.88824 13.1923 9.64682 13.431Z"/>\n</g>\n<defs>\n<clipPath id="clip0_31568_3647">\n<rect width="9.86207" height="26"/>\n</clipPath>\n</defs>\n</svg>\n':null,click)};Button.parameters=Object.assign({storySource:{source:"({label, size, variant, disabled, startIcon, endIcon, click}) =>\n  html`<verdocs-button\n    .label=${label}\n    .size=${size}\n    .variant=${variant}\n    .disabled=${disabled}\n    .startIcon=${startIcon ? CircleIcon : null}\n    .endIcon=${endIcon ? ArrowIcon : null}\n    @click=${click}\n  />`"}},Button.parameters)},"./src/components/controls/verdocs-checkbox/verdocs-checkbox.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Checkbox",(function(){return Checkbox}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Checkbox",component:"verdocs-checkbox",args:{label:"Sample checkbox",name:"test",theme:"light",checked:!1,disabled:!1,value:"1"},argTypes:{input:{action:"input",description:"Fired when the checkbox is clicked. e.target.checked will indicate the current status (true if checked)."}}};var Checkbox=function Checkbox(_ref){var checked=_ref.checked,label=_ref.label,name=_ref.name,value=_ref.value,disabled=_ref.disabled,theme=_ref.theme,input=_ref.input;return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}([" <verdocs-checkbox .checked="," .label="," .name="," .value="," .disabled="," .theme="," @input="," /> "])),checked,label,name,value,disabled,theme,input)};Checkbox.parameters=Object.assign({storySource:{source:"({checked, label, name, value, disabled, theme, input}) =>\n  html` <verdocs-checkbox .checked=${checked} .label=${label} .name=${name} .value=${value} .disabled=${disabled} .theme=${theme} @input=${input} /> `"}},Checkbox.parameters)},"./src/components/controls/verdocs-dropdown/verdocs-dropdown.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DropdownMenu",(function(){return DropdownMenu}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Dropdown Menu",component:"verdocs-dropdown",args:{options:[{label:"Option 1"},{label:"Disabled Option",disabled:!0},{label:"Option 2"}]},argTypes:{optionSelected:{action:"optionSelected",table:{disable:!0}}}};var DropdownMenu=function DropdownMenu(_ref){var options=_ref.options,optionSelected=_ref.optionSelected;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-dropdown .options="," @optionSelected="," />"])),options,optionSelected)};DropdownMenu.parameters=Object.assign({storySource:{source:"({options, optionSelected}) => html`<verdocs-dropdown .options=${options} @optionSelected=${optionSelected} />`"}},DropdownMenu.parameters)},"./src/components/controls/verdocs-help-icon/verdocs-help-icon.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"HelpIcon",(function(){return HelpIcon}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Help Icon",component:"verdocs-help-icon",args:{text:"Sample help text"},argTypes:{},parameters:{layout:"fullscreen"}};var HelpIcon=function HelpIcon(_ref){var text=_ref.text;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-help-icon .text="," /> "])),text)};HelpIcon.parameters=Object.assign({storySource:{source:"({text}) => html`<verdocs-help-icon .text=${text} /> `"}},HelpIcon.parameters)},"./src/components/controls/verdocs-loader/verdocs-loader.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Loader",(function(){return Loader}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Loader",component:"verdocs-loader",args:{},argTypes:{}};var Loader=function Loader(_ref){return function _objectDestructuringEmpty(obj){if(null==obj)throw new TypeError("Cannot destructure "+obj)}(_ref),Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-loader />"])))};Loader.parameters=Object.assign({storySource:{source:"({}) => html`<verdocs-loader />`"}},Loader.parameters)},"./src/components/controls/verdocs-organization-card/verdocs-organization-card.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"OrganizationCard",(function(){return OrganizationCard}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Organization Card",component:"verdocs-organization-card",args:{organization:{id:"21643fd6-4097-47c0-9780-62dc0c01ddce",name:"Verdocs, LLC",url:"https://verdocs.com/",address:null,phone:null,business_name:null,is_business:!0,address2:null,contact_email:null,timezone:null,envelope_responsible:!1,created_at:"2022-12-21 20:16:50.262113+00"}},argTypes:{}};var OrganizationCard=function OrganizationCard(_ref){var organization=_ref.organization;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-organization-card .organization="," />"])),organization)};OrganizationCard.parameters=Object.assign({storySource:{source:"({organization}) => html`<verdocs-organization-card .organization=${organization} />`"}},OrganizationCard.parameters)},"./src/components/controls/verdocs-radio-button/verdocs-radio-button.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"RadioButton",(function(){return RadioButton}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Radio Button",component:"verdocs-radio-button",args:{checked:!1,name:"test",value:"1",disabled:!1},argTypes:{input:{action:"input",description:"Fired when the radio button is clicked. e.target.checked will always be true, because radio button onChange events are fired only when the radio button is clicked to select it."}}};var RadioButton=function RadioButton(_ref){var checked=_ref.checked,name=_ref.name,value=_ref.value,disabled=_ref.disabled,input=_ref.input;return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}([" <verdocs-radio-button .checked="," .name="," .value=",' .disabled="','" @input='," /> "])),checked,name,value,disabled,input)};RadioButton.parameters=Object.assign({storySource:{source:'({checked, name, value, disabled, input}) =>\n  html` <verdocs-radio-button .checked=${checked} .name=${name} .value=${value} .disabled="${disabled}" @input=${input} /> `'}},RadioButton.parameters)},"./src/components/controls/verdocs-select-input/verdocs-select-input.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"SelectInput",(function(){return SelectInput}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Select Input",component:"verdocs-select-input",args:{label:"Name",value:"",options:[{label:"Option 1",value:"1"},{label:"Option 2",value:"2"},{label:"Option 3",value:"3"}]},argTypes:{input:{action:"input",description:"Fired when a new value is selected. e.target.value will contain the selected value."}}};var SelectInput=function SelectInput(_ref){var type=_ref.type,label=_ref.label,value=_ref.value,placeholder=_ref.placeholder,options=_ref.options,disabled=_ref.disabled,input=_ref.input;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-select-input .type="," .label="," .placeholder="," .value="," .options="," .disabled="," @input="," />"])),type,label,placeholder,value,options,disabled,input)};SelectInput.parameters=Object.assign({storySource:{source:"({type, label, value, placeholder, options, disabled, input}) =>\n  html`<verdocs-select-input .type=${type} .label=${label} .placeholder=${placeholder} .value=${value} .options=${options} .disabled=${disabled} @input=${input} />`"}},SelectInput.parameters)},"./src/components/controls/verdocs-status-indicator/verdocs-status-indicator.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"StatusIndicator",(function(){return StatusIndicator}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Status Indicator",component:"verdocs-status-indicator",args:{document:0,status:"complete",theme:"light",size:"normal"},argTypes:{document:{options:[0,1],mapping:{0:{id:"1234",status:"complete",recipients:[{role_name:"Tax Preparer",status:"submitted",full_name:"Bill Board",sequence:1,type:"signer"},{role_name:"Recipient 1",status:"submitted",full_name:"Ante Bellum",sequence:2,type:"signer"},{role_name:"Recipient 2",status:"opened",full_name:"Sarah Bellum",sequence:2,type:"signer"},{role_name:"Office Manager",status:"pending",full_name:"Paige Turner",sequence:3,type:"approver"}]},1:null},control:{type:"select",labels:{0:"Sample Document",1:"Not Set"}}},status:{defaultValue:"",options:[0,"complete","pending","in progress","declined","canceled","invited","opened","accepted","signed","submitted"],mapping:{0:null,complete:"complete",pending:"pending","in progress":"in progress",declined:"declined",canceled:"canceled",invited:"invited",opened:"opened",accepted:"accepted",signed:"signed",submitted:"submitted"},control:{type:"select",labels:{0:"Not Set",complete:"Complete",pending:"Pending","in progress":"In Progress",declined:"Declined",canceled:"Canceled",invited:"Invited",opened:"Opened",accepted:"Accepted",signed:"Signed",submitted:"Submitted"}}}}};var StatusIndicator=function StatusIndicator(_ref){var theme=_ref.theme,size=_ref.size,status=_ref.status,envelope=_ref.envelope;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(['<verdocs-status-indicator .theme="','" .size="','" .status="','" .envelope="','" />'])),theme,size,status,envelope)};StatusIndicator.parameters=Object.assign({storySource:{source:'({theme, size, status, envelope}) =>\n  html`<verdocs-status-indicator .theme="${theme}" .size="${size}" .status="${status}" .envelope="${envelope}" />`'}},StatusIndicator.parameters)},"./src/components/controls/verdocs-template-card/verdocs-template-card.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TemplateCard",(function(){return TemplateCard}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Template Card",component:"verdocs-template-card",args:{template:{counter:2,star_counter:10,name:"IRS Form I-9",id:"1",profile_id:"2",created_at:"2021-11-14T13:57:21Z",updated_at:"2021-11-14T13:57:21Z",last_used_at:"2021-11-14T13:57:21Z",organization_id:"3",is_personal:!1,is_public:!0,sender:"creator",description:"IRS Form I-9",organization:{id:"3",name:"ACME Widgets, LLC",address:null,phone:null,business_name:null,is_business:!0,address2:null,contact_email:null,timezone:null,envelope_responsible:!1},template_document:{url:"url",name:"IRS Form I-9",page_numbers:3,id:"4",updated_at:"2021-11-14T13:57:21Z",created_at:"2021-11-14T13:57:21Z",template_id:"1",mime:"application/pdf",thumbnail_url:"https://verdocs.com/en/wp-content/uploads/2021/12/Screen-Shot-2021-12-30-at-2.26.08-PM-e1640892536786.png"}}},argTypes:{}};var TemplateCard=function TemplateCard(_ref){var template=_ref.template;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-template-card .template="," />"])),template)};TemplateCard.parameters=Object.assign({storySource:{source:"({template}) => html`<verdocs-template-card .template=${template} />`"}},TemplateCard.parameters)},"./src/components/controls/verdocs-template-tags/verdocs-template-tags.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TemplateTags",(function(){return TemplateTags}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Template Tags",component:"verdocs-template-tags",args:{tags:["contractors","taxes","irs"]},argTypes:{}};var TemplateTags=function TemplateTags(_ref){var tags=_ref.tags,theme=_ref.theme;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(['<verdocs-template-tags .tags="','" .theme="','" />'])),tags,theme)};TemplateTags.parameters=Object.assign({storySource:{source:'({tags, theme}) => html`<verdocs-template-tags .tags="${tags}" .theme="${theme}" />`'}},TemplateTags.parameters)},"./src/components/controls/verdocs-text-input/verdocs-text-input.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TextInput",(function(){return TextInput}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Text Input",component:"verdocs-text-input",args:{label:"Name",value:"",placeholder:"Enter your name..."},argTypes:{input:{action:"input",description:"Fired for each character entered in the field. e.target.value will contain the current text value."}}};var TextInput=function TextInput(_ref){var type=_ref.type,label=_ref.label,value=_ref.value,placeholder=_ref.placeholder,disabled=_ref.disabled,input=_ref.input;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-text-input .type="," .label="," .placeholder="," .value="," .disabled="," @input="," />"])),type,label,placeholder,value,disabled,input)};TextInput.parameters=Object.assign({storySource:{source:"({type, label, value, placeholder, disabled, input}) =>\n  html`<verdocs-text-input .type=${type} .label=${label} .placeholder=${placeholder} .value=${value} .disabled=${disabled} @input=${input} />`"}},TextInput.parameters)},"./src/components/controls/verdocs-toggle-button/verdocs-toggle-button.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ToggleButton",(function(){return ToggleButton}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Toggle Button",component:"verdocs-toggle-button",args:{icon:'<svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium MuiBox-root css-1om0hkc" focusable="false" aria-hidden="true" viewBox="0 0 24 24"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"></path></svg>',label:"Use",size:"normal",active:!1}};var ToggleButton=function ToggleButton(_ref){var icon=_ref.icon,label=_ref.label,size=_ref.size,active=_ref.active;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-toggle-button .icon="," .label="," .size="," .active="," />"])),icon,label,size,active)};ToggleButton.parameters=Object.assign({storySource:{source:"({icon, label, size, active}) => html`<verdocs-toggle-button .icon=${icon} .label=${label} .size=${size} .active=${active} />`"}},ToggleButton.parameters)},"./src/components/controls/verdocs-toggle/verdocs-toggle.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Toggle",(function(){return Toggle}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Toggle",component:"verdocs-toggle",args:{options:{label:"View as",defaultSelection:1,buttons:[{id:"list-view",icon:'<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000"><rect fill="none" height="24" width="24"/><path d="M3,5v14h18V5H3z M7,7v2H5V7H7z M5,13v-2h2v2H5z M5,15h2v2H5V15z M19,17H9v-2h10V17z M19,13H9v-2h10V13z M19,9H9V7h10V9z"/></svg>'},{id:"grid-view",icon:'<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M3 5v14h19V5H3zm17 4h-2.25V7H20v2zM9.25 11h2.25v2H9.25v-2zm-2 2H5v-2h2.25v2zm4.25-4H9.25V7h2.25v2zm2-2h2.25v2H13.5V7zm-2 8v2H9.25v-2h2.25zm2 0h2.25v2H13.5v-2zm0-2v-2h2.25v2H13.5zm4.25-2H20v2h-2.25v-2zM7.25 7v2H5V7h2.25zM5 15h2.25v2H5v-2zm12.75 2v-2H20v2h-2.25z"/></svg>'}]}}};var Toggle=function Toggle(_ref){var options=_ref.options,theme=_ref.theme;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-toggle .options="," .theme=","></verdocs-toggle>"])),options,theme)};Toggle.parameters=Object.assign({storySource:{source:"({options, theme}) => html`<verdocs-toggle .options=${options} .theme=${theme}></verdocs-toggle>`"}},Toggle.parameters)},"./src/components/controls/verdocs-toolbar-icon/verdocs-toolbar-icon.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ToolbarIcon",(function(){return ToolbarIcon}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Controls/Toolbar Icon",component:"verdocs-toolbar-icon",args:{text:"Sample tooltip text",icon:'<svg xmlns="http://www.w3.org/2000/svg" height="24" width="24"><path d="M7.6 13.925q-.55 0-.925-.375t-.375-.925q0-.55.375-.937.375-.388.925-.388t.925.388q.375.387.375.937t-.375.925q-.375.375-.925.375Zm4.4 0q-.55 0-.925-.375t-.375-.925q0-.55.375-.937.375-.388.925-.388t.925.388q.375.387.375.937t-.375.925q-.375.375-.925.375Zm4.4 0q-.55 0-.925-.375t-.375-.925q0-.55.375-.937.375-.388.925-.388t.925.388q.375.387.375.937t-.375.925q-.375.375-.925.375ZM5.3 22.85q-1.325 0-2.238-.912-.912-.913-.912-2.238V6.3q0-1.325.912-2.238.913-.912 2.238-.912H6v-2h2.575v2h6.85v-2H18v2h.7q1.325 0 2.238.912.912.913.912 2.238v13.4q0 1.325-.912 2.238-.913.912-2.238.912Zm0-3.15h13.4V10H5.3v9.7ZM5.3 8h13.4V6.3H5.3Zm0 0V6.3 8Z"/></svg>'},argTypes:{},parameters:{layout:"fullscreen"}};var ToolbarIcon=function ToolbarIcon(_ref){var text=_ref.text,icon=_ref.icon;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-toolbar-icon .text="," .icon="," /> "])),text,icon)};ToolbarIcon.parameters=Object.assign({storySource:{source:"({text, icon}) => html`<verdocs-toolbar-icon .text=${text} .icon=${icon} /> `"}},ToolbarIcon.parameters)},"./src/components/dialogs/verdocs-initial-dialog/verdocs-initial-dialog.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"InitialDialog",(function(){return InitialDialog}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Dialogs/Initial Dialog",component:"verdocs-initial-dialog",args:{initials:"PT"},argTypes:{onNext:{action:"next",description:"Fired when the user completes the dialog and clicks Adopt. The event detail will contain a base64-encoded string representation of the initials adopted."},onCancel:{action:"cancel",description:"Fired if the user cancels the dialog."}}};var InitialDialog=function InitialDialog(_ref){var initials=_ref.initials,onNext=_ref.onNext,onCancel=_ref.onCancel;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-initial-dialog .initials="," @cancel="," @next="," />"])),initials,onCancel,onNext)};InitialDialog.parameters=Object.assign({storySource:{source:"({initials, onNext, onCancel}) => html`<verdocs-initial-dialog .initials=${initials} @cancel=${onCancel} @next=${onNext} />`"}},InitialDialog.parameters)},"./src/components/dialogs/verdocs-kba-dialog/verdocs-kba-dialog.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"KBADialog",(function(){return KBADialog}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Dialogs/KBA Dialog",component:"verdocs-kba-dialog",args:{mode:"choice",helptitle:"One Time Code",helptext:"Please check your text messages for a security code, and enter the code below.",label:"PIN",placeholder:"Enter your PIN...",step:1,steps:3,choices:["553 Arbor Dr","18 Lacey Ln","23A Ball Ct","2375 Cavallo Blvd","23-1 RR-7","151 Boulder Rd"]},argTypes:{onNext:{action:"next",table:{disable:!0}},onCancel:{action:"cancel",table:{disable:!0}}}};var KBADialog=function KBADialog(_ref){var helptitle=_ref.helptitle,helptext=_ref.helptext,label=_ref.label,placeholder=_ref.placeholder,mode=_ref.mode,step=_ref.step,steps=_ref.steps,choices=_ref.choices,onNext=_ref.onNext,onCancel=_ref.onCancel;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-kba-dialog\n    .mode=","\n    .helptitle=","\n    .helptext=","\n    .label=","\n    .placeholder=","\n    .step=","\n    .steps=","\n    .choices=","\n    @next=","\n    @cancel=","\n  />"])),mode,helptitle,helptext,label,placeholder,step,steps,choices,onNext,onCancel)};KBADialog.parameters=Object.assign({storySource:{source:"({helptitle, helptext, label, placeholder, mode, step, steps, choices, onNext, onCancel}) =>\n  html`<verdocs-kba-dialog\n    .mode=${mode}\n    .helptitle=${helptitle}\n    .helptext=${helptext}\n    .label=${label}\n    .placeholder=${placeholder}\n    .step=${step}\n    .steps=${steps}\n    .choices=${choices}\n    @next=${onNext}\n    @cancel=${onCancel}\n  />`"}},KBADialog.parameters)},"./src/components/dialogs/verdocs-ok-dialog/verdocs-ok-dialog.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"OkDialog",(function(){return OkDialog}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Dialogs/Ok Dialog",component:"verdocs-ok-dialog",args:{showCancel:!0,heading:"Login Error",message:"Login failed. Please check your username and password and try again."},argTypes:{onNext:{action:"next",table:{disable:!0}},onCancel:{action:"cancel",table:{disable:!0}}}};var OkDialog=function OkDialog(_ref){var heading=_ref.heading,message=_ref.message,showCancel=_ref.showCancel,onNext=_ref.onNext,onCancel=_ref.onCancel;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-ok-dialog .heading="," .message="," .showCancel="," @cancel="," @next="," />"])),heading,message,showCancel,onCancel,onNext)};OkDialog.parameters=Object.assign({storySource:{source:"({heading, message, showCancel, onNext, onCancel}) =>\n  html`<verdocs-ok-dialog .heading=${heading} .message=${message} .showCancel=${showCancel} @cancel=${onCancel} @next=${onNext} />`"}},OkDialog.parameters)},"./src/components/dialogs/verdocs-signature-dialog/verdocs-signature-dialog.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"SignatureDialog",(function(){return SignatureDialog}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Dialogs/Signature Dialog",component:"verdocs-signature-dialog",args:{name:"Paige Turner"},argTypes:{onNext:{action:"next",table:{disable:!0}},onCancel:{action:"cancel",table:{disable:!0}}}};var SignatureDialog=function SignatureDialog(_ref){var name=_ref.name,onCancel=_ref.onCancel,onNext=_ref.onNext;return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-signature-dialog .name="," @cancel="," @next="," />"])),name,onCancel,onNext)};SignatureDialog.parameters=Object.assign({storySource:{source:"({name, onCancel, onNext}) => html`<verdocs-signature-dialog .name=${name} @cancel=${onCancel} @next=${onNext} />`"}},SignatureDialog.parameters)},"./src/components/dialogs/verdocs-template-sender-dialog/verdocs-template-sender-dialog.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TemplateSenderDialog",(function(){return TemplateSenderDialog}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _mapping,_labels,_templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js"),_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@verdocs/js-sdk/Templates/Types.js");__webpack_exports__.default={title:"Dialogs/Template Sender Dialog",component:"verdocs-template-sender-dialog",args:{value:"everyone"},argTypes:{value:{options:[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.CREATOR,_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.ORGANIZATION_MEMBER,_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.ORGANIZATION_MEMBER_AS_CREATOR,_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.EVERYONE,_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.EVERYONE_AS_CREATOR],mapping:(_mapping={},_mapping[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.CREATOR]="creator",_mapping[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.ORGANIZATION_MEMBER]="organization_member",_mapping[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.ORGANIZATION_MEMBER_AS_CREATOR]="organization_member_as_creator",_mapping[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.EVERYONE]="everyone",_mapping[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.EVERYONE_AS_CREATOR]="everyone_as_creator",_mapping),control:{type:"select",labels:(_labels={},_labels[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.CREATOR]="creator",_labels[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.ORGANIZATION_MEMBER]="organization_member",_labels[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.ORGANIZATION_MEMBER_AS_CREATOR]="organization_member_as_creator",_labels[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.EVERYONE]="everyone",_labels[_verdocs_js_sdk_Templates_Types__WEBPACK_IMPORTED_MODULE_3__.a.EVERYONE_AS_CREATOR]="everyone_as_creator",_labels)}},onNext:{action:"next",table:{disable:!0}},onCancel:{action:"cancel",table:{disable:!0}}}};var TemplateSenderDialog=function TemplateSenderDialog(_ref){var value=_ref.value,onCancel=_ref.onCancel,onNext=_ref.onNext;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-template-sender-dialog .value="," @cancel="," @next="," />"])),value,onCancel,onNext)};TemplateSenderDialog.parameters=Object.assign({storySource:{source:"({value, onCancel, onNext}) => html`<verdocs-template-sender-dialog .value=${value} @cancel=${onCancel} @next=${onNext} />`"}},TemplateSenderDialog.parameters)},"./src/components/dialogs/verdocs-upload-dialog/verdocs-upload-dialog.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"UploadDialog",(function(){return UploadDialog}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Dialogs/Upload Dialog",component:"verdocs-upload-dialog",args:{open:!0,message:"Login failed. Please check your username and password and try again."},argTypes:{closed:{action:"closed",table:{disable:!0}}}};var UploadDialog=function UploadDialog(_ref){var message=_ref.message,open=_ref.open,closed=_ref.closed;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-upload-dialog .message="," .open="," @closed="," />"])),message,open,closed)};UploadDialog.parameters=Object.assign({storySource:{source:"({message, open, closed}) => html`<verdocs-upload-dialog .message=${message} .open=${open} @closed=${closed} />`"}},UploadDialog.parameters)},"./src/components/elements/verdocs-contact-picker/verdocs-contact-picker.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ContactPicker",(function(){return ContactPicker}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Elements/Contact Picker",component:"verdocs-contact-picker",args:{templateRole:{template_id:"65cbba07-d0ac-4b62-afe3-25d186238938",name:"Recipient 1",full_name:"",email:"",phone:"",type:"signer",sequence:1,message:""},contactSuggestions:[{name:"Me",email:"myuser@nomail.com",phone:"212-555-6664"},{name:"Will Power",email:"will.power@nomail.com",avatar:"https://i.pravatar.cc/48?img=59"},{name:"Paige Turner",email:"paige.turner@nomail.com",phone:"212-555-6664",avatar:"https://i.pravatar.cc/48?img=41"},{name:"Bill Board",phone:"212-555-6664"}]},argTypes:{searchContacts:{action:"searchContacts"},onCancel:{action:"cancel"},onNext:{action:"next"}}};var ContactPicker=function ContactPicker(_ref){var templateRole=_ref.templateRole,contactSuggestions=_ref.contactSuggestions,searchContacts=_ref.searchContacts,onCancel=_ref.onCancel,onNext=_ref.onNext;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-contact-picker .templateRole="," .contactSuggestions="," @searchContacts="," @cancel="," @next="," />"])),templateRole,contactSuggestions,searchContacts,onCancel,onNext)};ContactPicker.parameters=Object.assign({storySource:{source:"({templateRole, contactSuggestions, searchContacts, onCancel, onNext}) =>\n  html`<verdocs-contact-picker .templateRole=${templateRole} .contactSuggestions=${contactSuggestions} @searchContacts=${searchContacts} @cancel=${onCancel} @next=${onNext} />`"}},ContactPicker.parameters)},"./src/components/elements/verdocs-field-attachment/verdocs-field-attachment.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Attachment",(function(){return Attachment}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Attachment",component:"verdocs-field-attachment",args:{field:{x:0,y:0},disabled:!1},argTypes:{}};var Attachment=function Attachment(_ref){var field=_ref.field,disabled=_ref.disabled;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-field-attachment .field="," .disabled="," />"])),field,disabled)};Attachment.parameters=Object.assign({storySource:{source:"({field, disabled}) => html`<verdocs-field-attachment .field=${field} .disabled=${disabled} />`"}},Attachment.parameters)},"./src/components/elements/verdocs-field-checkbox/verdocs-field-checkbox.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Checkbox",(function(){return Checkbox}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Checkbox",component:"verdocs-field-checkbox",args:{field:{settings:{x:0,y:0}},option:0,disabled:!1},argTypes:{}};var Checkbox=function Checkbox(_ref){var field=_ref.field,option=_ref.option,disabled=_ref.disabled;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-field-checkbox .field="," .option="," .disabled="," />"])),field,option,disabled)};Checkbox.parameters=Object.assign({storySource:{source:"({field, option, disabled}) => html`<verdocs-field-checkbox .field=${field} .option=${option} .disabled=${disabled} />`"}},Checkbox.parameters)},"./src/components/elements/verdocs-field-date/verdocs-field-date.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Date",(function(){return Date}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Date",component:"verdocs-field-date",args:{field:{settings:{x:0,y:0}},disabled:!1},argTypes:{}};var Date=function Date(_ref){var field=_ref.field,disabled=_ref.disabled;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(['<verdocs-field-date .field="','.disabled" ='," />"])),field,disabled)};Date.parameters=Object.assign({storySource:{source:'({field, disabled}) => html`<verdocs-field-date .field="${field}.disabled" =${disabled} />`'}},Date.parameters)},"./src/components/elements/verdocs-field-dropdown/verdocs-field-dropdown.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Dropdown",(function(){return Dropdown}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Dropdown",component:"verdocs-field-dropdown",args:{field:{settings:{x:0,y:0,options:[{id:"id1",value:"Option 1"}]}}},argTypes:{}};var Dropdown=function Dropdown(_ref){var field=_ref.field;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-field-dropdown .field="," />"])),field)};Dropdown.parameters=Object.assign({storySource:{source:"({field}) => html`<verdocs-field-dropdown .field=${field} />`"}},Dropdown.parameters)},"./src/components/elements/verdocs-field-initial/verdocs-field-initial.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Initial",(function(){return Initial}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Initial",component:"verdocs-field-initial",args:{initials:"PT",field:{settings:{x:0,y:0}}},argTypes:{}};var Initial=function Initial(_ref){var initials=_ref.initials,field=_ref.field;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-field-initial .field="," .initials="," />"])),field,initials)};Initial.parameters=Object.assign({storySource:{source:"({initials, field}) => html`<verdocs-field-initial .field=${field} .initials=${initials} />`"}},Initial.parameters)},"./src/components/elements/verdocs-field-payment/verdocs-field-payment.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Payment",(function(){return Payment}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Payment",component:"verdocs-field-payment",args:{field:{settings:{x:0,y:0}}},argTypes:{}};var Payment=function Payment(_ref){var field=_ref.field;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-field-payment .field="," />"])),field)};Payment.parameters=Object.assign({storySource:{source:"({field}) => html`<verdocs-field-payment .field=${field} />`"}},Payment.parameters)},"./src/components/elements/verdocs-field-radio-button-group/verdocs-field-radio-button.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"RadioButton",(function(){return RadioButton}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Radio Button",component:"verdocs-field-radio-button",args:{field:{settings:{x:0,y:0,checked:!1,name:"radio-1"}}},argTypes:{}};var RadioButton=function RadioButton(_ref){var field=_ref.field;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-field-radio-button .field="," />"])),field)};RadioButton.parameters=Object.assign({storySource:{source:"({field}) => html`<verdocs-field-radio-button .field=${field} />`"}},RadioButton.parameters)},"./src/components/elements/verdocs-field-signature/verdocs-field-signature.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Signature",(function(){return Signature}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Signature",component:"verdocs-field-signature",args:{name:"Paige Turner",field:{settings:{x:0,y:0}}},argTypes:{}};var Signature=function Signature(_ref){var name=_ref.name,field=_ref.field;return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-field-signature .name="," .field="," />"])),name,field)};Signature.parameters=Object.assign({storySource:{source:"({name, field}) => html`<verdocs-field-signature .name=${name} .field=${field} />`"}},Signature.parameters)},"./src/components/elements/verdocs-field-textarea/verdocs-field-textarea.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Textarea",(function(){return Textarea}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Textarea",component:"verdocs-field-textarea",args:{field:{settings:{placeholder:"Email address...",x:0,y:0}}},argTypes:{}};var Textarea=function Textarea(_ref){var field=_ref.field;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-field-textarea .field="," />"])),field)};Textarea.parameters=Object.assign({storySource:{source:"({field}) => html`<verdocs-field-textarea .field=${field} />`"}},Textarea.parameters)},"./src/components/elements/verdocs-field-textbox/verdocs-field-textbox.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Textbox",(function(){return Textbox}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Textbox",component:"verdocs-field-textbox",args:{field:{settings:{x:0,y:0}},disabled:!1},argTypes:{input:{action:"input",description:"Fired for each character entered in the field. e.target.value will contain the current text value."}}};var Textbox=function Textbox(_ref){var field=_ref.field,disabled=_ref.disabled,input=_ref.input;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-field-textbox .field="," .disabled="," @input="," />"])),field,disabled,input)};Textbox.parameters=Object.assign({storySource:{source:"({field, disabled, input}) => html`<verdocs-field-textbox .field=${field} .disabled=${disabled} @input=${input} />`"}},Textbox.parameters)},"./src/components/elements/verdocs-field-timestamp/verdocs-field-timestamp.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Timestamp",(function(){return Timestamp}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Fields/Timestamp",component:"verdocs-field-timestamp",args:{field:{name:"timestampP1-8",recipient_role:"Recipient 2",envelope_id:"96ccc2e9-1bb8-4be8-9dbd-7113107383ee",page:1,type:"timestamp",required:!0,settings:{x:426.99999999999994,y:493.25,width:64,height:15},validator:null,label:null,prepared:!1,recipients:[]}},argTypes:{}};var Timestamp=function Timestamp(_ref){var field=_ref.field;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-field-timestamp .field="," />"])),field)};Timestamp.parameters=Object.assign({storySource:{source:"({field}) => html`<verdocs-field-timestamp .field=${field} />`"}},Timestamp.parameters)},"./src/components/elements/verdocs-quick-functions/verdocs-quick-functions.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"QuickFunctions",(function(){return QuickFunctions}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Search/Quick Functions",component:"verdocs-quick-functions",args:{options:{title:"Quick Create"}},argTypes:{createTemplate:{action:"createTemplate"},createDocument:{action:"createDocument"}}};var QuickFunctions=function QuickFunctions(_ref){var options=_ref.options,createTemplate=_ref.createTemplate,createDocument=_ref.createDocument;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-quick-functions .options="," @createTemplate="," @createDocument="," tall />"])),options,createTemplate,createDocument)};QuickFunctions.parameters=Object.assign({storySource:{source:"({options, createTemplate, createDocument}) =>\n  html`<verdocs-quick-functions .options=${options} @createTemplate=${createTemplate} @createDocument=${createDocument} tall />`"}},QuickFunctions.parameters)},"./src/components/elements/verdocs-search-activity/verdocs-search-activity.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"SearchActivity",(function(){return SearchActivity}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Search/Search Activity",component:"verdocs-search-activity",args:{},argTypes:{type:{defaultValue:"recent"},entrySelected:{action:"entrySelected"}}};var SearchActivity=function SearchActivity(_ref){var type=_ref.type,entrySelected=_ref.entrySelected;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-search-activity .type="," @entrySelected="," tall />"])),type,entrySelected)};SearchActivity.parameters=Object.assign({storySource:{source:"({type, entrySelected}) => html`<verdocs-search-activity .type=${type} @entrySelected=${entrySelected} tall />`"}},SearchActivity.parameters)},"./src/components/elements/verdocs-search-box/verdocs-search-box.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"SearchBox",(function(){return SearchBox}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Search/Search Box",component:"verdocs-search-box",args:{type:"all"},argTypes:{searchClicked:{action:"searchClicked"},typeChanged:{action:"typeChanged"},queryChanged:{action:"queryChanged"},type:{type:"string",control:"radio",options:["all","document","template","organization"]}},parameters:{layout:"fullscreen"}};var SearchBox=function SearchBox(_ref){var type=_ref.type,searchClicked=_ref.searchClicked,typeChanged=_ref.typeChanged,queryChanged=_ref.queryChanged;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-search-box .type="," @searchClicked="," @typeChanged="," @queryChanged="," />"])),type,searchClicked,typeChanged,queryChanged)};SearchBox.parameters=Object.assign({storySource:{source:"({type, searchClicked, typeChanged, queryChanged}) =>\n  html`<verdocs-search-box .type=${type} @searchClicked=${searchClicked} @typeChanged=${typeChanged} @queryChanged=${queryChanged} />`"}},SearchBox.parameters)},"./src/components/elements/verdocs-search-tabs/verdocs-search-tabs.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Tabs",(function(){return Tabs}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js"),_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/esm/index.js");__webpack_exports__.default={title:"Search/Tabs",component:"verdocs-search-tabs",args:{},argTypes:{}};var listener={handleEvent:function handleEvent(e){Object(_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_3__.action)("selected",e)},capture:!0},Tabs=function Tabs(_ref){var options=_ref.options;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-search-tabs .options="," @optionSelected="," tall />"])),options,listener)};Tabs.parameters=Object.assign({storySource:{source:"({options}) => html`<verdocs-search-tabs .options=${options} @optionSelected=${listener} tall />`"}},Tabs.parameters)},"./src/components/elements/verdocs-template-create/verdocs-template-create.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TemplateCreate",(function(){return TemplateCreate}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Elements/Template Create",component:"verdocs-template-create",args:{templateRole:{template_id:"65cbba07-d0ac-4b62-afe3-25d186238938",name:"Recipient 1",full_name:"",email:"",phone:"",type:"signer",sequence:1,message:""},contactSuggestions:[{name:"Me",email:"myuser@nomail.com",phone:"212-555-6664"},{name:"Will Power",email:"will.power@nomail.com",avatar:"https://i.pravatar.cc/48?img=59"},{name:"Paige Turner",email:"paige.turner@nomail.com",phone:"212-555-6664",avatar:"https://i.pravatar.cc/48?img=41"},{name:"Bill Board",phone:"212-555-6664"}]},argTypes:{searchContacts:{action:"searchContacts"},cancel:{action:"cancel"},contactSelected:{action:"contactSelected"}}};var TemplateCreate=function TemplateCreate(_ref){var templateRole=_ref.templateRole,contactSuggestions=_ref.contactSuggestions,searchContacts=_ref.searchContacts,cancel=_ref.cancel,contactSelected=_ref.contactSelected;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-template-create\n    .templateRole=","\n    .contactSuggestions=","\n    @searchContacts=","\n    @cancel=","\n    @contactSelected=","\n  />"])),templateRole,contactSuggestions,searchContacts,cancel,contactSelected)};TemplateCreate.parameters=Object.assign({storySource:{source:"({templateRole, contactSuggestions, searchContacts, cancel, contactSelected}) =>\n  html`<verdocs-template-create\n    .templateRole=${templateRole}\n    .contactSuggestions=${contactSuggestions}\n    @searchContacts=${searchContacts}\n    @cancel=${cancel}\n    @contactSelected=${contactSelected}\n  />`"}},TemplateCreate.parameters)},"./src/components/elements/verdocs-template-fields/verdocs-template-fields.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TemplateFields",(function(){return TemplateFields}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Elements/Template Fields",component:"verdocs-template-fields",args:{templateId:"d2338742-f3a1-465b-8592-806587413cc1"},argTypes:{onCancel:{action:"cancel"},onNext:{action:"next"}},parameters:{layout:"fullscreen"}};var TemplateFields=function TemplateFields(_ref){var templateId=_ref.templateId,onCancel=_ref.onCancel,onNext=_ref.onNext;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(['<div style="height: 600px">\n  <verdocs-template-fields .templateId='," @cancel="," @next="," />\n</div>"])),templateId,onCancel,onNext)};TemplateFields.parameters=Object.assign({storySource:{source:'({templateId, onCancel, onNext}) => html`<div style="height: 600px">\n  <verdocs-template-fields .templateId=${templateId} @cancel=${onCancel} @next=${onNext} />\n</div>`'}},TemplateFields.parameters)},"./src/components/elements/verdocs-template-properties/verdocs-template-properties.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TemplateProperties",(function(){return TemplateProperties}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Elements/Template Properties",component:"verdocs-template-properties",args:{templateId:"951016b0-c5ef-450d-b628-9a0c5b84b163"},argTypes:{onCancel:{action:"cancel"},onNext:{action:"next"}}};var TemplateProperties=function TemplateProperties(_ref){var onCancel=_ref.onCancel,onNext=_ref.onNext,templateId=_ref.templateId;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-template-properties .templateId="," @cancel="," @next="," />"])),templateId,onCancel,onNext)};TemplateProperties.parameters=Object.assign({storySource:{source:"({onCancel, onNext, templateId}) => html`<verdocs-template-properties .templateId=${templateId} @cancel=${onCancel} @next=${onNext} />`"}},TemplateProperties.parameters)},"./src/components/elements/verdocs-template-recipients/verdocs-template-recipients.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TemplateRecipients",(function(){return TemplateRecipients}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Elements/Template Recipients",component:"verdocs-template-recipients",args:{templateRole:{template_id:"65cbba07-d0ac-4b62-afe3-25d186238938",name:"Recipient 1",full_name:"",email:"",phone:"",type:"signer",sequence:1,message:""},contactSuggestions:[{name:"Me",email:"myuser@nomail.com",phone:"212-555-6664"},{name:"Will Power",email:"will.power@nomail.com",avatar:"https://i.pravatar.cc/48?img=59"},{name:"Paige Turner",email:"paige.turner@nomail.com",phone:"212-555-6664",avatar:"https://i.pravatar.cc/48?img=41"},{name:"Bill Board",phone:"212-555-6664"}]},argTypes:{searchContacts:{action:"searchContacts"},cancel:{action:"cancel"},contactSelected:{action:"contactSelected"}}};var TemplateRecipients=function TemplateRecipients(_ref){var templateRole=_ref.templateRole,contactSuggestions=_ref.contactSuggestions,searchContacts=_ref.searchContacts,cancel=_ref.cancel,contactSelected=_ref.contactSelected;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-template-recipients\n    .templateRole=","\n    .contactSuggestions=","\n    @searchContacts=","\n    @cancel=","\n    @contactSelected=","\n  />"])),templateRole,contactSuggestions,searchContacts,cancel,contactSelected)};TemplateRecipients.parameters=Object.assign({storySource:{source:"({templateRole, contactSuggestions, searchContacts, cancel, contactSelected}) =>\n  html`<verdocs-template-recipients\n    .templateRole=${templateRole}\n    .contactSuggestions=${contactSuggestions}\n    @searchContacts=${searchContacts}\n    @cancel=${cancel}\n    @contactSelected=${contactSelected}\n  />`"}},TemplateRecipients.parameters)},"./src/components/embeds/verdocs-auth/verdocs-auth.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Auth",(function(){return Auth}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Embeds/Auth",component:"verdocs-auth",args:{visible:!0,logo:"https://verdocs.com/assets/blue-logo.svg"},argTypes:{sdkError:{action:"error",table:{disable:!0}},authenticated:{action:"authenticated",table:{disable:!0}}}};var Auth=function Auth(_ref){var visible=_ref.visible,logo=_ref.logo,authenticated=_ref.authenticated,sdkError=_ref.sdkError;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-auth .visible="," .logo="," @authenticated="," @sdkError="," />"])),visible,logo,authenticated,sdkError)};Auth.parameters=Object.assign({storySource:{source:"({visible, logo, authenticated, sdkError}) => html`<verdocs-auth .visible=${visible} .logo=${logo} @authenticated=${authenticated} @sdkError=${sdkError} />`"}},Auth.parameters)},"./src/components/embeds/verdocs-build/verdocs-build.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Build",(function(){return Build}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Embeds/Build",component:"verdocs-build",parameters:{layout:"fullscreen"}};var Build=function Build(_ref){return function _objectDestructuringEmpty(obj){if(null==obj)throw new TypeError("Cannot destructure "+obj)}(_ref),Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-build />"])))};Build.parameters=Object.assign({storySource:{source:"({}) => html`<verdocs-build />`"}},Build.parameters)},"./src/components/embeds/verdocs-preview/verdocs-preview.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Preview",(function(){return Preview}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Embeds/Preview",component:"verdocs-preview",args:{templateId:"d2338742-f3a1-465b-8592-806587413cc1"},argTypes:{templateId:{control:{type:"string"}}},parameters:{layout:"fullscreen"}};var Preview=function Preview(_ref){var templateId=_ref.templateId;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-preview .templateId="," />"])),templateId)};Preview.parameters=Object.assign({storySource:{source:"({templateId}) => html`<verdocs-preview .templateId=${templateId} />`"}},Preview.parameters)},"./src/components/embeds/verdocs-search/verdocs-search.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Search",(function(){return Search}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js"),_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/esm/index.js");__webpack_exports__.default={title:"Embeds/Search",component:"verdocs-search",args:{},argTypes:{}};var listener={handleEvent:function handleEvent(e){Object(_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_3__.action)("selected",e)},capture:!0},Search=function Search(_ref){var options=_ref.options;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-search .options="," @optionSelected="," tall />"])),options,listener)};Search.parameters=Object.assign({storySource:{source:"({options}) => html`<verdocs-search .options=${options} @optionSelected=${listener} tall />`"}},Search.parameters)},"./src/components/embeds/verdocs-send/verdocs-send.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Send",(function(){return Send}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Embeds/Send",component:"verdocs-send",args:{templateId:"d2338742-f3a1-465b-8592-806587413cc1"},argTypes:{templateId:{control:{type:"string"}}},parameters:{layout:"fullscreen"}};var Send=function Send(_ref){var templateId=_ref.templateId;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-send .templateId="," />"])),templateId)};Send.parameters=Object.assign({storySource:{source:"({templateId}) => html`<verdocs-send .templateId=${templateId} />`"}},Send.parameters)},"./src/components/embeds/verdocs-sign/verdocs-sign.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Sign",(function(){return Sign}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Embeds/Sign",component:"verdocs-sign",args:{envelopeId:"b4a03f7e-8a2b-4752-ac65-621114a1f878",roleId:"Seller",inviteCode:"e4bee24c3d2795f340ceeb53f6fefc1a"},argTypes:{},parameters:{layout:"fullscreen"}};var Sign=function Sign(_ref){var envelopeId=_ref.envelopeId,roleId=_ref.roleId,inviteCode=_ref.inviteCode;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-sign .envelopeId="," .roleId="," .inviteCode="," />"])),envelopeId,roleId,inviteCode)};Sign.parameters=Object.assign({storySource:{source:"({envelopeId, roleId, inviteCode}) => html`<verdocs-sign .envelopeId=${envelopeId} .roleId=${roleId} .inviteCode=${inviteCode} />`"}},Sign.parameters)},"./src/components/embeds/verdocs-view/verdocs-view.stories.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"View",(function(){return View}));__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _templateObject,lit_html__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lit-html/lit-html.js");__webpack_exports__.default={title:"Embeds/View",component:"verdocs-view",args:{envelopeId:"92f3dd1e-9ff2-44c3-8c96-32a5b650ed6d"},argTypes:{},parameters:{layout:"fullscreen"}};var View=function View(_ref){var envelopeId=_ref.envelopeId;return Object(lit_html__WEBPACK_IMPORTED_MODULE_2__.b)(_templateObject||(_templateObject=function _taggedTemplateLiteralLoose(strings,raw){return raw||(raw=strings.slice(0)),strings.raw=raw,strings}(["<verdocs-view .envelopeId="," />"])),envelopeId)};View.parameters=Object.assign({storySource:{source:"({envelopeId}) => html`<verdocs-view .envelopeId=${envelopeId} />`"}},View.parameters)},"./storybook-init-framework-entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__("./node_modules/@storybook/web-components/dist/esm/client/index.js")},0:function(module,exports,__webpack_require__){__webpack_require__("./node_modules/@storybook/core-client/dist/esm/globals/polyfills.js"),__webpack_require__("./node_modules/@storybook/core-client/dist/esm/globals/globals.js"),__webpack_require__("./storybook-init-framework-entry.js"),__webpack_require__("./node_modules/@pxtrn/storybook-addon-docs-stencil/dist/config.js-generated-config-entry.js"),__webpack_require__("./node_modules/@storybook/web-components/dist/esm/client/preview/config-generated-config-entry.js"),__webpack_require__("./node_modules/@storybook/web-components/dist/esm/client/docs/config-generated-config-entry.js"),__webpack_require__("./node_modules/@storybook/addon-links/preview.js-generated-config-entry.js"),__webpack_require__("./node_modules/@storybook/addon-docs/preview.js-generated-config-entry.js"),__webpack_require__("./node_modules/@storybook/addon-actions/preview.js-generated-config-entry.js"),__webpack_require__("./node_modules/@storybook/addon-backgrounds/preview.js-generated-config-entry.js"),__webpack_require__("./node_modules/@storybook/addon-measure/preview.js-generated-config-entry.js"),__webpack_require__("./node_modules/@storybook/addon-outline/preview.js-generated-config-entry.js"),__webpack_require__("./.storybook/preview.js-generated-config-entry.js"),module.exports=__webpack_require__("./generated-stories-entry.js")},1:function(module,exports){}},[[0,12,13]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQGxhenktZXh0ZXJuYWwtZW50cnlwb2ludCIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL0BzdGVuY2lsL2NvcmUvaW50ZXJuYWwvY2xpZW50L3BhdGNoLWVzbS5qcyIsIndlYnBhY2s6Ly8vLi8uc3Rvcnlib29rL3ByZXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vLnN0b3J5Ym9vay9wcmV2aWV3LmpzLWdlbmVyYXRlZC1jb25maWctZW50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9lc20gbGF6eSBeXFwuXFwvLipcXC5lbnRyeVxcLmpzJCBpbmNsdWRlOiBcXC5lbnRyeVxcLmpzJCBleGNsdWRlOiBcXC5zeXN0ZW1cXC5lbnRyeVxcLmpzJCBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy9Ac3RlbmNpbC9jb3JlL2ludGVybmFsL2FwcC1kYXRhIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9jbGllbnQiLCJ3ZWJwYWNrOi8vLy4vZ2VuZXJhdGVkLXN0b3JpZXMtZW50cnkuanMiLCJ3ZWJwYWNrOi8vL1xcLikoPzQzYTAiLCJ3ZWJwYWNrOi8vL1xcLikoIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtYnV0dG9uLXBhbmVsL3ZlcmRvY3MtYnV0dG9uLXBhbmVsLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtYnV0dG9uL3ZlcmRvY3MtYnV0dG9uLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtY2hlY2tib3gvdmVyZG9jcy1jaGVja2JveC5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLWRyb3Bkb3duL3ZlcmRvY3MtZHJvcGRvd24uc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1oZWxwLWljb24vdmVyZG9jcy1oZWxwLWljb24uc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1sb2FkZXIvdmVyZG9jcy1sb2FkZXIuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1vcmdhbml6YXRpb24tY2FyZC92ZXJkb2NzLW9yZ2FuaXphdGlvbi1jYXJkLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtcmFkaW8tYnV0dG9uL3ZlcmRvY3MtcmFkaW8tYnV0dG9uLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3Mtc2VsZWN0LWlucHV0L3ZlcmRvY3Mtc2VsZWN0LWlucHV0LnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3Mtc3RhdHVzLWluZGljYXRvci92ZXJkb2NzLXN0YXR1cy1pbmRpY2F0b3Iuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy10ZW1wbGF0ZS1jYXJkL3ZlcmRvY3MtdGVtcGxhdGUtY2FyZC5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLXRlbXBsYXRlLXRhZ3MvdmVyZG9jcy10ZW1wbGF0ZS10YWdzLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtdGV4dC1pbnB1dC92ZXJkb2NzLXRleHQtaW5wdXQuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy10b2dnbGUtYnV0dG9uL3ZlcmRvY3MtdG9nZ2xlLWJ1dHRvbi5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLXRvZ2dsZS92ZXJkb2NzLXRvZ2dsZS5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLXRvb2xiYXItaWNvbi92ZXJkb2NzLXRvb2xiYXItaWNvbi5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kaWFsb2dzL3ZlcmRvY3MtaW5pdGlhbC1kaWFsb2cvdmVyZG9jcy1pbml0aWFsLWRpYWxvZy5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kaWFsb2dzL3ZlcmRvY3Mta2JhLWRpYWxvZy92ZXJkb2NzLWtiYS1kaWFsb2cuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGlhbG9ncy92ZXJkb2NzLW9rLWRpYWxvZy92ZXJkb2NzLW9rLWRpYWxvZy5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kaWFsb2dzL3ZlcmRvY3Mtc2lnbmF0dXJlLWRpYWxvZy92ZXJkb2NzLXNpZ25hdHVyZS1kaWFsb2cuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGlhbG9ncy92ZXJkb2NzLXRlbXBsYXRlLXNlbmRlci1kaWFsb2cvdmVyZG9jcy10ZW1wbGF0ZS1zZW5kZXItZGlhbG9nLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2RpYWxvZ3MvdmVyZG9jcy11cGxvYWQtZGlhbG9nL3ZlcmRvY3MtdXBsb2FkLWRpYWxvZy5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWNvbnRhY3QtcGlja2VyL3ZlcmRvY3MtY29udGFjdC1waWNrZXIuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC1hdHRhY2htZW50L3ZlcmRvY3MtZmllbGQtYXR0YWNobWVudC5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLWNoZWNrYm94L3ZlcmRvY3MtZmllbGQtY2hlY2tib3guc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC1kYXRlL3ZlcmRvY3MtZmllbGQtZGF0ZS5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLWRyb3Bkb3duL3ZlcmRvY3MtZmllbGQtZHJvcGRvd24uc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC1pbml0aWFsL3ZlcmRvY3MtZmllbGQtaW5pdGlhbC5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLXBheW1lbnQvdmVyZG9jcy1maWVsZC1wYXltZW50LnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtZmllbGQtcmFkaW8tYnV0dG9uLWdyb3VwL3ZlcmRvY3MtZmllbGQtcmFkaW8tYnV0dG9uLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtZmllbGQtc2lnbmF0dXJlL3ZlcmRvY3MtZmllbGQtc2lnbmF0dXJlLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtZmllbGQtdGV4dGFyZWEvdmVyZG9jcy1maWVsZC10ZXh0YXJlYS5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLXRleHRib3gvdmVyZG9jcy1maWVsZC10ZXh0Ym94LnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtZmllbGQtdGltZXN0YW1wL3ZlcmRvY3MtZmllbGQtdGltZXN0YW1wLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtcXVpY2stZnVuY3Rpb25zL3ZlcmRvY3MtcXVpY2stZnVuY3Rpb25zLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3Mtc2VhcmNoLWFjdGl2aXR5L3ZlcmRvY3Mtc2VhcmNoLWFjdGl2aXR5LnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3Mtc2VhcmNoLWJveC92ZXJkb2NzLXNlYXJjaC1ib3guc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1zZWFyY2gtdGFicy92ZXJkb2NzLXNlYXJjaC10YWJzLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtdGVtcGxhdGUtY3JlYXRlL3ZlcmRvY3MtdGVtcGxhdGUtY3JlYXRlLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtdGVtcGxhdGUtZmllbGRzL3ZlcmRvY3MtdGVtcGxhdGUtZmllbGRzLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtdGVtcGxhdGUtcHJvcGVydGllcy92ZXJkb2NzLXRlbXBsYXRlLXByb3BlcnRpZXMuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy10ZW1wbGF0ZS1yZWNpcGllbnRzL3ZlcmRvY3MtdGVtcGxhdGUtcmVjaXBpZW50cy5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy1hdXRoL3ZlcmRvY3MtYXV0aC5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy1idWlsZC92ZXJkb2NzLWJ1aWxkLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VtYmVkcy92ZXJkb2NzLXByZXZpZXcvdmVyZG9jcy1wcmV2aWV3LnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2VtYmVkcy92ZXJkb2NzLXNlYXJjaC92ZXJkb2NzLXNlYXJjaC5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy1zZW5kL3ZlcmRvY3Mtc2VuZC5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy1zaWduL3ZlcmRvY3Mtc2lnbi5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy12aWV3L3ZlcmRvY3Mtdmlldy5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yeWJvb2staW5pdC1mcmFtZXdvcmstZW50cnkuanMiXSwibmFtZXMiOlsiZGVmaW5lQ3VzdG9tRWxlbWVudHMiLCJ3aW4iLCJvcHRpb25zIiwid2luZG93IiwiUHJvbWlzZSIsInJlc29sdmUiLCJwYXRjaEVzbSIsInByb21pc2VSZXNvbHZlIiwidGhlbiIsImJvb3RzdHJhcExhenkiLCJkb2NKc29uIiwic2V0U3RlbmNpbERvY0pzb24iLCJwYXJhbWV0ZXJzIiwiY29udHJvbHMiLCJoaWRlTm9Db250cm9sc1dhcm5pbmciLCJtYXRjaGVycyIsImNvbG9yIiwiZGF0ZSIsInZpZXdNb2RlIiwiZG9jcyIsImlmcmFtZUhlaWdodCIsImV4dHJhY3RBcmdUeXBlcyIsImV4dHJhY3RDb21wb25lbnREZXNjcmlwdGlvbiIsImxheW91dCIsImJhY2tncm91bmRzIiwiZGVmYXVsdCIsInZhbHVlcyIsIm5hbWUiLCJ2YWx1ZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xpY2tEb2NzQnV0dG9uT25GaXJzdExvYWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicGFyZW50IiwiZG9jdW1lbnQiLCJldmFsdWF0ZSIsIlhQYXRoUmVzdWx0IiwiQU5ZX1RZUEUiLCJpdGVyYXRlTmV4dCIsImNsaWNrIiwiZXJyb3IiLCJjb25maWciLCJmb3JFYWNoIiwiYWRkQXJncyIsImFkZEFyZ1R5cGVzIiwiZGVjb3JhdG9yIiwiYWRkRGVjb3JhdG9yIiwibG9hZGVyIiwiYWRkTG9hZGVyIiwiYWRkUGFyYW1ldGVycyIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJlbmhhbmNlciIsImFkZEFyZ1R5cGVzRW5oYW5jZXIiLCJhZGRBcmdzRW5oYW5jZXIiLCJzZXRHbG9iYWxSZW5kZXIiLCJ2IiwiY29uc29sZSIsImxvZyIsIm1hcCIsIndlYnBhY2tBc3luY0NvbnRleHQiLCJyZXEiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibyIsImUiLCJFcnJvciIsImNvZGUiLCJpZHMiLCJpZCIsImFsbCIsInNsaWNlIiwid2VicGFja0FzeW5jQ29udGV4dEtleXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29udGVudFJlZiIsImhvc3RUYWdOYW1lIiwidXNlTmF0aXZlU2hhZG93RG9tIiwiY2hlY2tTbG90RmFsbGJhY2tWaXNpYmlsaXR5IiwiY2hlY2tTbG90UmVsb2NhdGUiLCJpc1N2Z01vZGUiLCJyZW5kZXJpbmdSZWYiLCJxdWV1ZVBlbmRpbmciLCJIWURSQVRFRF9DU1MiLCJFTVBUWV9PQkoiLCJpc0NvbXBsZXhUeXBlIiwiaCIsIm5vZGVOYW1lIiwidm5vZGVEYXRhIiwiY2hpbGQiLCJzbG90TmFtZSIsInNpbXBsZSIsImxhc3RTaW1wbGUiLCJ2Tm9kZUNoaWxkcmVuIiwid2FsayIsImMiLCJBcnJheSIsImlzQXJyYXkiLCJTdHJpbmciLCIkdGV4dCQiLCJuZXdWTm9kZSIsImNoaWxkcmVuIiwiY2xhc3NEYXRhIiwiY2xhc3NOYW1lIiwiayIsImpvaW4iLCJ2ZG9tRm5VdGlscyIsInZub2RlIiwiJGF0dHJzJCIsIiRjaGlsZHJlbiQiLCIka2V5JCIsIiRuYW1lJCIsInRhZyIsInRleHQiLCIkZmxhZ3MkIiwiJHRhZyQiLCIkZWxtJCIsIkhvc3QiLCJjYiIsImNvbnZlcnRUb1B1YmxpYyIsImNvbnZlcnRUb1ByaXZhdGUiLCJub2RlIiwidmF0dHJzIiwidmNoaWxkcmVuIiwidmtleSIsInZuYW1lIiwidnRhZyIsInZ0ZXh0IiwiYXNzaWduIiwiZ2V0RWxlbWVudCIsInJlZiIsImdldEhvc3RSZWYiLCIkaG9zdEVsZW1lbnQkIiwiY3JlYXRlRXZlbnQiLCJmbGFncyIsImVsbSIsImVtaXQiLCJkZXRhaWwiLCJlbWl0RXZlbnQiLCJidWJibGVzIiwiY29tcG9zZWQiLCJjYW5jZWxhYmxlIiwib3B0cyIsImV2IiwicGx0IiwiY2UiLCJkaXNwYXRjaEV2ZW50Iiwicm9vdEFwcGxpZWRTdHlsZXMiLCJXZWFrTWFwIiwicmVnaXN0ZXJTdHlsZSIsInNjb3BlSWQiLCJjc3NUZXh0IiwiYWxsb3dDUyIsInN0eWxlIiwic3R5bGVzIiwiZ2V0Iiwic3VwcG9ydHNDb25zdHJ1Y3RhYmxlU3R5bGVzaGVldHMiLCJDU1NTdHlsZVNoZWV0IiwicmVwbGFjZVN5bmMiLCJzZXQiLCJhdHRhY2hTdHlsZXMiLCJob3N0UmVmIiwiY21wTWV0YSIsIiRjbXBNZXRhJCIsImVuZEF0dGFjaFN0eWxlcyIsIiR0YWdOYW1lJCIsImFkZFN0eWxlIiwic3R5bGVDb250YWluZXJOb2RlIiwibW9kZSIsImhvc3RFbG0iLCJnZXRTY29wZUlkIiwibm9kZVR5cGUiLCJkb2MiLCJoZWFkIiwic3R5bGVFbG0iLCJhcHBsaWVkU3R5bGVzIiwiU2V0IiwiaGFzIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImluc2VydEJlZm9yZSIsInF1ZXJ5U2VsZWN0b3IiLCJhZGQiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJpbmNsdWRlcyIsImdldFJvb3ROb2RlIiwiY21wIiwic2V0QWNjZXNzb3IiLCJtZW1iZXJOYW1lIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsImlzU3ZnIiwiaXNQcm9wIiwiaXNNZW1iZXJJbkVsZW1lbnQiLCJsbiIsInRvTG93ZXJDYXNlIiwiY2xhc3NMaXN0Iiwib2xkQ2xhc3NlcyIsInBhcnNlQ2xhc3NMaXN0IiwibmV3Q2xhc3NlcyIsInJlbW92ZSIsInByb3AiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiaXNDb21wbGV4IiwidGFnTmFtZSIsIm4iLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJyZWwiLCJhZWwiLCJwYXJzZUNsYXNzTGlzdFJlZ2V4Iiwic3BsaXQiLCJ1cGRhdGVFbGVtZW50Iiwib2xkVm5vZGUiLCJuZXdWbm9kZSIsImhvc3QiLCJvbGRWbm9kZUF0dHJzIiwibmV3Vm5vZGVBdHRycyIsInVuZGVmaW5lZCIsImNyZWF0ZUVsbSIsIm9sZFBhcmVudFZOb2RlIiwibmV3UGFyZW50Vk5vZGUiLCJjaGlsZEluZGV4IiwicGFyZW50RWxtIiwiY2hpbGROb2RlIiwib2xkVk5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUVsZW1lbnROUyIsImFwcGVuZENoaWxkIiwicHV0QmFja0luT3JpZ2luYWxMb2NhdGlvbiIsInJlY3Vyc2l2ZSIsIm9sZFNsb3RDaGlsZE5vZGVzIiwiY2hpbGROb2RlcyIsInBhcmVudFJlZmVyZW5jZU5vZGUiLCJyZWZlcmVuY2VOb2RlIiwiYWRkVm5vZGVzIiwiYmVmb3JlIiwicGFyZW50Vk5vZGUiLCJ2bm9kZXMiLCJzdGFydElkeCIsImVuZElkeCIsImNvbnRhaW5lckVsbSIsInBhcmVudE5vZGUiLCJyZW1vdmVWbm9kZXMiLCJjYWxsTm9kZVJlZnMiLCJ1cGRhdGVDaGlsZHJlbiIsIm9sZENoIiwibmV3Q2giLCJlbG1Ub01vdmUiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4IiwiaWR4SW5PbGQiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJpc1NhbWVWbm9kZSIsInBhdGNoIiwibmV4dFNpYmxpbmciLCJsZWZ0Vk5vZGUiLCJyaWdodFZOb2RlIiwiZGVmYXVsdEhvbGRlciIsIm9sZENoaWxkcmVuIiwibmV3Q2hpbGRyZW4iLCJ0ZXh0Q29udGVudCIsImRhdGEiLCJ1cGRhdGVGYWxsYmFja1Nsb3RWaXNpYmlsaXR5IiwiaWxlbiIsImoiLCJzbG90TmFtZUF0dHIiLCJoaWRkZW4iLCJ0cmltIiwicmVsb2NhdGVOb2RlcyIsInJlbG9jYXRlU2xvdENvbnRlbnQiLCJob3N0Q29udGVudE5vZGVzIiwicmVsb2NhdGVOb2RlRGF0YSIsImlzTm9kZUxvY2F0ZWRJblNsb3QiLCJmaW5kIiwiciIsIiRub2RlVG9SZWxvY2F0ZSQiLCIkc2xvdFJlZk5vZGUkIiwicmVsb2NhdGVOb2RlIiwic29tZSIsIm5vZGVUb1JlbG9jYXRlIiwidk5vZGUiLCJyZW5kZXJWZG9tIiwicmVuZGVyRm5SZXN1bHRzIiwiJHZub2RlJCIsInJvb3RWbm9kZSIsImlzSG9zdCIsInJlbG9jYXRlRGF0YSIsIm9yZ0xvY2F0aW9uTm9kZSIsInBhcmVudE5vZGVSZWYiLCJpbnNlcnRCZWZvcmVOb2RlIiwicmVmTm9kZSIsInByZXZpb3VzU2libGluZyIsImF0dGFjaFRvQW5jZXN0b3IiLCJhbmNlc3RvckNvbXBvbmVudCIsIiRvblJlbmRlclJlc29sdmUkIiwic2NoZWR1bGVVcGRhdGUiLCJpc0luaXRpYWxMb2FkIiwiJGFuY2VzdG9yQ29tcG9uZW50JCIsIndyaXRlVGFzayIsImRpc3BhdGNoIiwiZGlzcGF0Y2hIb29rcyIsInByb21pc2UiLCJlbmRTY2hlZHVsZSIsImluc3RhbmNlIiwiJGxhenlJbnN0YW5jZSQiLCJzYWZlQ2FsbCIsInVwZGF0ZUNvbXBvbmVudCIsImVuZFVwZGF0ZSIsInJjIiwiZW5kUmVuZGVyIiwiY2FsbFJlbmRlciIsImNoaWxkcmVuUHJvbWlzZXMiLCJwb3N0VXBkYXRlIiwicG9zdFVwZGF0ZUNvbXBvbmVudCIsInJlbmRlciIsImNvbnNvbGVFcnJvciIsImdldFJlbmRlcmluZ1JlZiIsImVuZFBvc3RVcGRhdGUiLCJhZGRIeWRyYXRlZEZsYWciLCIkb25SZWFkeVJlc29sdmUkIiwiYXBwRGlkTG9hZCIsIiRvbkluc3RhbmNlUmVzb2x2ZSQiLCJuZXh0VGljayIsImZvcmNlVXBkYXRlIiwiaXNDb25uZWN0ZWQiLCJ3aG8iLCJkb2N1bWVudEVsZW1lbnQiLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJhcmciLCJ0aGVuRm4iLCJzZXRWYWx1ZSIsInByb3BOYW1lIiwibmV3VmFsIiwib2xkVmFsIiwiJGluc3RhbmNlVmFsdWVzJCIsInBhcnNlUHJvcGVydHlWYWx1ZSIsInByb3BWYWx1ZSIsInByb3BUeXBlIiwicGFyc2VGbG9hdCIsIiRtZW1iZXJzJCIsImFyZUJvdGhOYU4iLCJOdW1iZXIiLCJpc05hTiIsInByb3h5Q29tcG9uZW50IiwiQ3N0ciIsIm1lbWJlcnMiLCJlbnRyaWVzIiwicHJvdG90eXBlIiwibWVtYmVyRmxhZ3MiLCJnZXRWYWx1ZSIsInRoaXMiLCJhcmdzIiwiJG9uSW5zdGFuY2VQcm9taXNlJCIsImF0dHJOYW1lVG9Qcm9wTmFtZSIsIk1hcCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsImF0dHJOYW1lIiwiX29sZFZhbHVlIiwiam1wIiwiaGFzT3duUHJvcGVydHkiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJpbml0aWFsaXplQ29tcG9uZW50IiwiaG1yVmVyc2lvbklkIiwibG9hZE1vZHVsZSIsImVuZExvYWQiLCJpc1Byb3hpZWQiLCJlbmROZXdJbnN0YW5jZSIsImVuZFJlZ2lzdGVyU3R5bGVzIiwic2NoZWR1bGUiLCJjb25uZWN0ZWRDYWxsYmFjayIsImVuZENvbm5lY3RlZCIsInNldENvbnRlbnRSZWZlcmVuY2UiLCJjb250ZW50UmVmRWxtIiwiY3JlYXRlQ29tbWVudCIsImZpcnN0Q2hpbGQiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImxhenlCdW5kbGVzIiwiYXBwTG9hZEZhbGxiYWNrIiwiZW5kQm9vdHN0cmFwIiwiY21wVGFncyIsImV4Y2x1ZGUiLCJjdXN0b21FbGVtZW50cyIsIm1ldGFDaGFyc2V0IiwidmlzaWJpbGl0eVN0eWxlIiwiZGVmZXJyZWRDb25uZWN0ZWRDYWxsYmFja3MiLCJpc0Jvb3RzdHJhcHBpbmciLCIkcmVzb3VyY2VzVXJsJCIsIlVSTCIsInJlc291cmNlc1VybCIsImJhc2VVUkkiLCJocmVmIiwibGF6eUJ1bmRsZSIsImNvbXBhY3RNZXRhIiwiJGxpc3RlbmVycyQiLCJIb3N0RWxlbWVudCIsInNlbGYiLCJyZWdpc3Rlckhvc3QiLCJjbGVhclRpbWVvdXQiLCJjb21wb25lbnRPblJlYWR5IiwiJG9uUmVhZHlQcm9taXNlJCIsIkhUTUxFbGVtZW50IiwiJGxhenlCdW5kbGVJZCQiLCJkZWZpbmUiLCJzZXRUaW1lb3V0IiwiRnJhZ21lbnQiLCJfIiwiaG9zdFJlZnMiLCJyZWdpc3Rlckluc3RhbmNlIiwibGF6eUluc3RhbmNlIiwiZWwiLCJjbXBNb2R1bGVzIiwiZXhwb3J0TmFtZSIsInJlcGxhY2UiLCJidW5kbGVJZCIsImltcG9ydGVkTW9kdWxlIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJDdXN0b21FdmVudCIsInF1ZXVlRG9tUmVhZHMiLCJxdWV1ZURvbVdyaXRlcyIsInF1ZXVlVGFzayIsInF1ZXVlIiwid3JpdGUiLCJmbHVzaCIsImNvbnN1bWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInJlcXVpcmUiLCJjb25maWd1cmUiLCJ3ZWJwYWNrQ29udGV4dCIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIndlYnBhY2tDb250ZXh0S2V5cyIsIndlYnBhY2tFbXB0eUNvbnRleHQiLCJ0aXRsZSIsImNvbXBvbmVudCIsImljb24iLCJhcmdUeXBlcyIsIkJ1dHRvblBhbmVsIiwiaHRtbCIsInN0b3J5U291cmNlIiwibGFiZWwiLCJ0eXBlIiwic2l6ZSIsInZhcmlhbnQiLCJkaXNhYmxlZCIsInN0YXJ0SWNvbiIsImRlZmF1bHRWYWx1ZSIsImNvbnRyb2wiLCJlbmRJY29uIiwiYWN0aW9uIiwiZGVzY3JpcHRpb24iLCJCdXR0b24iLCJ0aGVtZSIsImNoZWNrZWQiLCJpbnB1dCIsIkNoZWNrYm94Iiwib3B0aW9uU2VsZWN0ZWQiLCJ0YWJsZSIsImRpc2FibGUiLCJEcm9wZG93bk1lbnUiLCJIZWxwSWNvbiIsIkxvYWRlciIsIm9yZ2FuaXphdGlvbiIsInVybCIsImFkZHJlc3MiLCJwaG9uZSIsImJ1c2luZXNzX25hbWUiLCJpc19idXNpbmVzcyIsImFkZHJlc3MyIiwiY29udGFjdF9lbWFpbCIsInRpbWV6b25lIiwiZW52ZWxvcGVfcmVzcG9uc2libGUiLCJjcmVhdGVkX2F0IiwiT3JnYW5pemF0aW9uQ2FyZCIsIlJhZGlvQnV0dG9uIiwiU2VsZWN0SW5wdXQiLCJwbGFjZWhvbGRlciIsInN0YXR1cyIsIm1hcHBpbmciLCJyZWNpcGllbnRzIiwicm9sZV9uYW1lIiwiZnVsbF9uYW1lIiwic2VxdWVuY2UiLCJsYWJlbHMiLCJTdGF0dXNJbmRpY2F0b3IiLCJlbnZlbG9wZSIsInRlbXBsYXRlIiwiY291bnRlciIsInN0YXJfY291bnRlciIsInByb2ZpbGVfaWQiLCJ1cGRhdGVkX2F0IiwibGFzdF91c2VkX2F0Iiwib3JnYW5pemF0aW9uX2lkIiwiaXNfcGVyc29uYWwiLCJpc19wdWJsaWMiLCJzZW5kZXIiLCJ0ZW1wbGF0ZV9kb2N1bWVudCIsInBhZ2VfbnVtYmVycyIsInRlbXBsYXRlX2lkIiwibWltZSIsInRodW1ibmFpbF91cmwiLCJUZW1wbGF0ZUNhcmQiLCJ0YWdzIiwiVGVtcGxhdGVUYWdzIiwiVGV4dElucHV0IiwiYWN0aXZlIiwiVG9nZ2xlQnV0dG9uIiwiZGVmYXVsdFNlbGVjdGlvbiIsImJ1dHRvbnMiLCJUb2dnbGUiLCJUb29sYmFySWNvbiIsImluaXRpYWxzIiwib25OZXh0Iiwib25DYW5jZWwiLCJJbml0aWFsRGlhbG9nIiwiaGVscHRpdGxlIiwiaGVscHRleHQiLCJzdGVwIiwic3RlcHMiLCJjaG9pY2VzIiwiS0JBRGlhbG9nIiwic2hvd0NhbmNlbCIsImhlYWRpbmciLCJtZXNzYWdlIiwiT2tEaWFsb2ciLCJTaWduYXR1cmVEaWFsb2ciLCJUZW1wbGF0ZVNlbmRlclR5cGVzIiwiQ1JFQVRPUiIsIk9SR0FOSVpBVElPTl9NRU1CRVIiLCJPUkdBTklaQVRJT05fTUVNQkVSX0FTX0NSRUFUT1IiLCJFVkVSWU9ORSIsIkVWRVJZT05FX0FTX0NSRUFUT1IiLCJUZW1wbGF0ZVNlbmRlckRpYWxvZyIsIm9wZW4iLCJjbG9zZWQiLCJVcGxvYWREaWFsb2ciLCJ0ZW1wbGF0ZVJvbGUiLCJlbWFpbCIsImNvbnRhY3RTdWdnZXN0aW9ucyIsImF2YXRhciIsInNlYXJjaENvbnRhY3RzIiwiQ29udGFjdFBpY2tlciIsImZpZWxkIiwieCIsInkiLCJBdHRhY2htZW50Iiwic2V0dGluZ3MiLCJvcHRpb24iLCJEYXRlIiwiRHJvcGRvd24iLCJJbml0aWFsIiwiUGF5bWVudCIsIlNpZ25hdHVyZSIsIlRleHRhcmVhIiwiVGV4dGJveCIsInJlY2lwaWVudF9yb2xlIiwiZW52ZWxvcGVfaWQiLCJwYWdlIiwicmVxdWlyZWQiLCJ3aWR0aCIsImhlaWdodCIsInZhbGlkYXRvciIsInByZXBhcmVkIiwiVGltZXN0YW1wIiwiY3JlYXRlVGVtcGxhdGUiLCJjcmVhdGVEb2N1bWVudCIsIlF1aWNrRnVuY3Rpb25zIiwiZW50cnlTZWxlY3RlZCIsIlNlYXJjaEFjdGl2aXR5Iiwic2VhcmNoQ2xpY2tlZCIsInR5cGVDaGFuZ2VkIiwicXVlcnlDaGFuZ2VkIiwiU2VhcmNoQm94IiwiaGFuZGxlRXZlbnQiLCJjYXB0dXJlIiwiVGFicyIsImNhbmNlbCIsImNvbnRhY3RTZWxlY3RlZCIsIlRlbXBsYXRlQ3JlYXRlIiwidGVtcGxhdGVJZCIsIlRlbXBsYXRlRmllbGRzIiwiVGVtcGxhdGVQcm9wZXJ0aWVzIiwiVGVtcGxhdGVSZWNpcGllbnRzIiwidmlzaWJsZSIsImxvZ28iLCJzZGtFcnJvciIsImF1dGhlbnRpY2F0ZWQiLCJBdXRoIiwiQnVpbGQiLCJQcmV2aWV3IiwiU2VhcmNoIiwiU2VuZCIsImVudmVsb3BlSWQiLCJyb2xlSWQiLCJpbnZpdGVDb2RlIiwiU2lnbiIsIlZpZXciXSwibWFwcGluZ3MiOiI7c2lEQUdvQyxTQUF2QkEscUJBQXdCQyxJQUFLQyxTQUNsQixvQkFBWEMsT0FBK0JDLFFBQVFDLFVDQ25DLFNBQVhDLFdBZUYsT0FBT0MsMEJBQ1gsQ0RoQlNELEdBQVdFLE1BQUssV0FFdkIsT0FBT0MseUJBQWMsQ0FBQyxDQUFELG9DQUFzQyxDQUFDLGs2TUFDOUQsR0FDQSxDRU5BVCxHQUtJVSxNQUFTQywrQkFBa0JELE1BRXhCLElBQU1FLFdBQWEsQ0FFeEJDLFNBQVUsQ0FDUkMsdUJBQXVCLEVBRXZCQyxTQUFVLENBQ1JDLE1BQU8sdUJBQ1BDLEtBQU0sVUFLVkMsU0FBVSxPQUNWQyxLQUFNLENBQ0pDLGFBQWMsSUFDZEMscUNBQ0FDLDhEQUVGQyxPQUFRLFdBQ1JDLFlBQWEsQ0FDWEMsUUFBUyxRQUNUQyxPQUFRLENBQ04sQ0FDRUMsS0FBTSxRQUNOQyxNQUFPLFdBRVQsQ0FDRUQsS0FB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SixnREFBSSxrQyw2R0FBQSxvRUFBNkIwSixXQUFzQkMsT0FBc0JDLFdBQVUsRUFJakpDLEtBQUt6bUIsV0FBYSxPQUFILFFBQUs2YyxZQUFhLENBQUVoWixPQUFRLHVJQUEySTRpQixLQUFLem1CLFcsc2dCQ2xCNUssNkJBQ2J1YyxNQUFPLGNBQ1BDLFVBQVcsZUFDWHJGLEtBQU0sQ0FDSm1QLFdBQVksd0NBRWQ1SixTQUFVLENBQUMsRUFDWDFjLFdBQVksQ0FDVlcsT0FBUSxlQUlMLElBQU0rbEIsS0FBTyxTQUFQQSxLQUFJLFVBQUtKLFdBQVUsS0FBVkEsV0FBVSxPQUFNMUosZ0RBQUksa0MsNkdBQUEsd0NBQTZCMEosV0FBVSxFQUlqRkksS0FBSzFtQixXQUFhLE9BQUgsUUFBSzZjLFlBQWEsQ0FBRWhaLE9BQVEsdUVBQTJFNmlCLEtBQUsxbUIsVyw4R0MzQjNILG1JIiwiZmlsZSI6Im1haW4uOTcxMzZlZjMuaWZyYW1lLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJvb3RzdHJhcExhenkgfSBmcm9tICdAc3RlbmNpbC9jb3JlJztcbmltcG9ydCB7IHBhdGNoRXNtIH0gZnJvbSAnQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9jbGllbnQvcGF0Y2gtZXNtJztcbmltcG9ydCB7IGdsb2JhbFNjcmlwdHMgfSBmcm9tICdAc3RlbmNpbC9jb3JlL2ludGVybmFsL2FwcC1nbG9iYWxzJztcbmV4cG9ydCBjb25zdCBkZWZpbmVDdXN0b21FbGVtZW50cyA9ICh3aW4sIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHJldHVybiBwYXRjaEVzbSgpLnRoZW4oKCkgPT4ge1xuICBnbG9iYWxTY3JpcHRzKCk7XG4gIHJldHVybiBib290c3RyYXBMYXp5KFsvKiFfX1NURU5DSUxfTEFaWV9EQVRBX18qL10sIG9wdGlvbnMpO1xuICB9KTtcbn07XG4iLCIvKlxuIFN0ZW5jaWwgQ2xpZW50IFBhdGNoIEVzbSB2Mi4yMC4wIHwgTUlUIExpY2Vuc2VkIHwgaHR0cHM6Ly9zdGVuY2lsanMuY29tXG4gKi9cbmltcG9ydCB7IEJVSUxEIH0gZnJvbSAnQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9hcHAtZGF0YSc7XG5pbXBvcnQgeyBDU1MsIHBsdCwgd2luLCBwcm9taXNlUmVzb2x2ZSB9IGZyb20gJ0BzdGVuY2lsL2NvcmUnO1xuY29uc3QgcGF0Y2hFc20gPSAoKSA9PiB7XG4gICAgLy8gTk9URSEhIFRoaXMgZm4gY2Fubm90IHVzZSBhc3luYy9hd2FpdCFcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKEJVSUxELmNzc1ZhclNoaW0gJiYgIShDU1MgJiYgQ1NTLnN1cHBvcnRzICYmIENTUy5zdXBwb3J0cygnY29sb3InLCAndmFyKC0tYyknKSkpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6IFwicG9seWZpbGxzLWNzcy1zaGltXCIgKi8gJy4vY3NzLXNoaW0uanMnKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmICgocGx0LiRjc3NTaGltJCA9IHdpbi5fX2Nzc3NoaW0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsdC4kY3NzU2hpbSQuaSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZm9yIGJldHRlciBtaW5pZmljYXRpb25cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZSgpO1xufTtcbmV4cG9ydCB7IHBhdGNoRXNtIH07XG4iLCIvLyBpbXBvcnQgJy4uL3d3dy9idWlsZC92ZXJkb2NzLXdlYi1zZGsuY3NzJztcblxuaW1wb3J0IHtkZWZpbmVDdXN0b21FbGVtZW50c30gZnJvbSAnLi4vZGlzdC9lc20vbG9hZGVyJztcbmRlZmluZUN1c3RvbUVsZW1lbnRzKCk7XG5cbmltcG9ydCB7ZXh0cmFjdEFyZ1R5cGVzLCBleHRyYWN0Q29tcG9uZW50RGVzY3JpcHRpb24sIHNldFN0ZW5jaWxEb2NKc29ufSBmcm9tICdAcHh0cm4vc3Rvcnlib29rLWFkZG9uLWRvY3Mtc3RlbmNpbCc7XG5pbXBvcnQgZG9jSnNvbiBmcm9tICcuLi9kaXN0L2RvY3MuanNvbic7XG5cbmlmIChkb2NKc29uKSBzZXRTdGVuY2lsRG9jSnNvbihkb2NKc29uKTtcblxuZXhwb3J0IGNvbnN0IHBhcmFtZXRlcnMgPSB7XG4gIC8vIGFjdGlvbnM6IHthcmdUeXBlc1JlZ2V4OiAnXm9uW0EtWl0uKid9LFxuICBjb250cm9sczoge1xuICAgIGhpZGVOb0NvbnRyb2xzV2FybmluZzogdHJ1ZSxcbiAgICAvLyBBdXRvbWF0aWNhbGx5IGNvbnNpZGVyIGFyZ3MgdGhhdCBzdGFydCB3aXRoIGNvbG9yL2RhdGUgdG8gYmUgc3BlY2lhbCBjb250cm9sc1xuICAgIG1hdGNoZXJzOiB7XG4gICAgICBjb2xvcjogLyhiYWNrZ3JvdW5kfGNvbG9yKSQvaSxcbiAgICAgIGRhdGU6IC9EYXRlJC8sXG4gICAgfSxcbiAgfSxcbiAgLy8gQXV0b21hdGljYWxseSBjb25zaWRlciBhcmdzIHRoYXQgc3RhcnQgd2l0aCAnb24nIHRvIGJlIGFjdGlvbnNcbiAgLy8gYWN0aW9uczoge2FyZ1R5cGVzUmVnZXg6ICdeb24uKid9LFxuICB2aWV3TW9kZTogJ2RvY3MnLFxuICBkb2NzOiB7XG4gICAgaWZyYW1lSGVpZ2h0OiA1MDAsXG4gICAgZXh0cmFjdEFyZ1R5cGVzLFxuICAgIGV4dHJhY3RDb21wb25lbnREZXNjcmlwdGlvbixcbiAgfSxcbiAgbGF5b3V0OiAnY2VudGVyZWQnLFxuICBiYWNrZ3JvdW5kczoge1xuICAgIGRlZmF1bHQ6ICdsaWdodCcsXG4gICAgdmFsdWVzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdsaWdodCcsXG4gICAgICAgIHZhbHVlOiAnI2VlZWVlZScsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnbWVkaXVtJyxcbiAgICAgICAgdmFsdWU6ICcjNWM2NTc1JyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdkYXJrJyxcbiAgICAgICAgdmFsdWU6ICcjMzMzNjRiJyxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbn07XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vc3Rvcnlib29ranMvc3Rvcnlib29rL2lzc3Vlcy8xMzEyOCNpc3N1ZWNvbW1lbnQtNzk4OTI3MTc2XG5mdW5jdGlvbiBjbGlja0RvY3NCdXR0b25PbkZpcnN0TG9hZCgpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBjbGlja0RvY3NCdXR0b25PbkZpcnN0TG9hZCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBkb2NzQnV0dG9uU2VsZWN0b3IgPSB3aW5kb3cucGFyZW50LmRvY3VtZW50LmV2YWx1YXRlKFwiLy9idXR0b25bY29udGFpbnMoLiwgJ0RvY3MnKV1cIiwgd2luZG93LnBhcmVudC5kb2N1bWVudCwgbnVsbCwgWFBhdGhSZXN1bHQuQU5ZX1RZUEUsIG51bGwpO1xuXG4gICAgY29uc3QgYnV0dG9uID0gZG9jc0J1dHRvblNlbGVjdG9yLml0ZXJhdGVOZXh0KCk7XG5cbiAgICBidXR0b24uY2xpY2soKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBEbyBub3RoaW5nIGlmIGl0IHdhc24ndCBhYmxlIHRvIGNsaWNrIG9uIERvY3MgYnV0dG9uLlxuICB9XG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgY2xpY2tEb2NzQnV0dG9uT25GaXJzdExvYWQpO1xuIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLXVucmVzb2x2ZWQgKi9cbmltcG9ydCB7IGFkZERlY29yYXRvciwgYWRkUGFyYW1ldGVycywgYWRkTG9hZGVyLCBhZGRBcmdzLCBhZGRBcmdUeXBlcywgYWRkQXJnc0VuaGFuY2VyLCBhZGRBcmdUeXBlc0VuaGFuY2VyLCBzZXRHbG9iYWxSZW5kZXIgfSBmcm9tICcvaG9tZS9ydW5uZXIvd29yay93ZWItc2RrL3dlYi1zZGsvdmVyZG9jcy13ZWItc2RrL25vZGVfbW9kdWxlcy9Ac3Rvcnlib29rL2NsaWVudC1hcGknO1xuaW1wb3J0ICogYXMgY29uZmlnIGZyb20gJy9ob21lL3J1bm5lci93b3JrL3dlYi1zZGsvd2ViLXNkay92ZXJkb2NzLXdlYi1zZGsvLnN0b3J5Ym9vay9wcmV2aWV3LmpzJztcbk9iamVjdC5rZXlzKGNvbmZpZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIHZhciB2YWx1ZSA9IGNvbmZpZ1trZXldO1xuXG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYXJncyc6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBhZGRBcmdzKHZhbHVlKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2FyZ1R5cGVzJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGFkZEFyZ1R5cGVzKHZhbHVlKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2RlY29yYXRvcnMnOlxuICAgICAge1xuICAgICAgICByZXR1cm4gdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoZGVjb3JhdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIGFkZERlY29yYXRvcihkZWNvcmF0b3IsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICBjYXNlICdsb2FkZXJzJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKGxvYWRlcikge1xuICAgICAgICAgIHJldHVybiBhZGRMb2FkZXIobG9hZGVyLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgY2FzZSAncGFyYW1ldGVycyc6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBhZGRQYXJhbWV0ZXJzKF9vYmplY3RTcHJlYWQoe30sIHZhbHVlKSwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgY2FzZSAnYXJnVHlwZXNFbmhhbmNlcnMnOlxuICAgICAge1xuICAgICAgICByZXR1cm4gdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoZW5oYW5jZXIpIHtcbiAgICAgICAgICByZXR1cm4gYWRkQXJnVHlwZXNFbmhhbmNlcihlbmhhbmNlcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnYXJnc0VuaGFuY2Vycyc6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChlbmhhbmNlcikge1xuICAgICAgICAgIHJldHVybiBhZGRBcmdzRW5oYW5jZXIoZW5oYW5jZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ3JlbmRlcic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBzZXRHbG9iYWxSZW5kZXIodmFsdWUpO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZ2xvYmFscyc6XG4gICAgY2FzZSAnZ2xvYmFsVHlwZXMnOlxuICAgICAge1xuICAgICAgICB2YXIgdiA9IHt9O1xuICAgICAgICB2W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGFkZFBhcmFtZXRlcnModiwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgY2FzZSAnX19uYW1lZEV4cG9ydHNPcmRlcic6XG4gICAgY2FzZSAnZGVjb3JhdGVTdG9yeSc6XG4gICAgY2FzZSAncmVuZGVyVG9ET00nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gbnVsbDsgLy8gVGhpcyBrZXkgaXMgbm90IGhhbmRsZWQgZGlyZWN0bHkgaW4gdjYgbW9kZS5cbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGVcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGtleSArICcgd2FzIG5vdCBzdXBwb3J0ZWQgOiggIScpO1xuICAgICAgfVxuICB9XG59KTsiLCJ2YXIgbWFwID0ge1xuXHRcIi4vdmVyZG9jcy1hdXRoLmVudHJ5LmpzXCI6IFtcblx0XHRcIi4vZGlzdC9lc20vdmVyZG9jcy1hdXRoLmVudHJ5LmpzXCIsXG5cdFx0MCxcblx0XHQyLFxuXHRcdDMsXG5cdFx0Mjdcblx0XSxcblx0XCIuL3ZlcmRvY3MtYnVpbGQuZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLWJ1aWxkLmVudHJ5LmpzXCIsXG5cdFx0MCxcblx0XHQyLFxuXHRcdDEsXG5cdFx0Myxcblx0XHQyMFxuXHRdLFxuXHRcIi4vdmVyZG9jcy1idXR0b24tcGFuZWxfMy5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtYnV0dG9uLXBhbmVsXzMuZW50cnkuanNcIixcblx0XHQ1LFxuXHRcdDM5XG5cdF0sXG5cdFwiLi92ZXJkb2NzLWJ1dHRvbi5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtYnV0dG9uLmVudHJ5LmpzXCIsXG5cdFx0NDNcblx0XSxcblx0XCIuL3ZlcmRvY3MtY2hlY2tib3guZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLWNoZWNrYm94LmVudHJ5LmpzXCIsXG5cdFx0NDRcblx0XSxcblx0XCIuL3ZlcmRvY3MtY29udGFjdC1waWNrZXIuZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLWNvbnRhY3QtcGlja2VyLmVudHJ5LmpzXCIsXG5cdFx0MCxcblx0XHQyLFxuXHRcdDMsXG5cdFx0Mzdcblx0XSxcblx0XCIuL3ZlcmRvY3MtZG9jdW1lbnQtcGFnZV8yLmVudHJ5LmpzXCI6IFtcblx0XHRcIi4vZGlzdC9lc20vdmVyZG9jcy1kb2N1bWVudC1wYWdlXzIuZW50cnkuanNcIixcblx0XHQwLFxuXHRcdDEsXG5cdFx0NDVcblx0XSxcblx0XCIuL3ZlcmRvY3MtZHJvcGRvd25fMi5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtZHJvcGRvd25fMi5lbnRyeS5qc1wiLFxuXHRcdDAsXG5cdFx0Mixcblx0XHQxLFxuXHRcdDMsXG5cdFx0MThcblx0XSxcblx0XCIuL3ZlcmRvY3MtZmllbGQtYXR0YWNobWVudC5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtZmllbGQtYXR0YWNobWVudC5lbnRyeS5qc1wiLFxuXHRcdDMwXG5cdF0sXG5cdFwiLi92ZXJkb2NzLWZpZWxkLWNoZWNrYm94LmVudHJ5LmpzXCI6IFtcblx0XHRcIi4vZGlzdC9lc20vdmVyZG9jcy1maWVsZC1jaGVja2JveC5lbnRyeS5qc1wiLFxuXHRcdDAsXG5cdFx0MSxcblx0XHQzMVxuXHRdLFxuXHRcIi4vdmVyZG9jcy1maWVsZC1kYXRlLmVudHJ5LmpzXCI6IFtcblx0XHRcIi4vZGlzdC9lc20vdmVyZG9jcy1maWVsZC1kYXRlLmVudHJ5LmpzXCIsXG5cdFx0MCxcblx0XHQxLFxuXHRcdDcsXG5cdFx0MTVcblx0XSxcblx0XCIuL3ZlcmRvY3MtZmllbGQtZHJvcGRvd24uZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLWZpZWxkLWRyb3Bkb3duLmVudHJ5LmpzXCIsXG5cdFx0MCxcblx0XHQxLFxuXHRcdDMyXG5cdF0sXG5cdFwiLi92ZXJkb2NzLWZpZWxkLWluaXRpYWwuZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLWZpZWxkLWluaXRpYWwuZW50cnkuanNcIixcblx0XHQwLFxuXHRcdDEsXG5cdFx0MzNcblx0XSxcblx0XCIuL3ZlcmRvY3MtZmllbGQtcGF5bWVudC5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtZmllbGQtcGF5bWVudC5lbnRyeS5qc1wiLFxuXHRcdDAsXG5cdFx0MSxcblx0XHQzNFxuXHRdLFxuXHRcIi4vdmVyZG9jcy1maWVsZC1yYWRpby1idXR0b24uZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLWZpZWxkLXJhZGlvLWJ1dHRvbi5lbnRyeS5qc1wiLFxuXHRcdDAsXG5cdFx0MSxcblx0XHQzNVxuXHRdLFxuXHRcIi4vdmVyZG9jcy1maWVsZC1zaWduYXR1cmVfMy5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtZmllbGQtc2lnbmF0dXJlXzMuZW50cnkuanNcIixcblx0XHQwLFxuXHRcdDEsXG5cdFx0NSxcblx0XHQyNVxuXHRdLFxuXHRcIi4vdmVyZG9jcy1maWVsZC10ZXh0YXJlYS5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtZmllbGQtdGV4dGFyZWEuZW50cnkuanNcIixcblx0XHQwLFxuXHRcdDEsXG5cdFx0MzZcblx0XSxcblx0XCIuL3ZlcmRvY3MtZmllbGQtdGV4dGJveC5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtZmllbGQtdGV4dGJveC5lbnRyeS5qc1wiLFxuXHRcdDAsXG5cdFx0MSxcblx0XHQyMlxuXHRdLFxuXHRcIi4vdmVyZG9jcy1maWVsZC10aW1lc3RhbXAuZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLWZpZWxkLXRpbWVzdGFtcC5lbnRyeS5qc1wiLFxuXHRcdDAsXG5cdFx0MSxcblx0XHQ3LFxuXHRcdDIzXG5cdF0sXG5cdFwiLi92ZXJkb2NzLWhlbHAtaWNvbl8yLmVudHJ5LmpzXCI6IFtcblx0XHRcIi4vZGlzdC9lc20vdmVyZG9jcy1oZWxwLWljb25fMi5lbnRyeS5qc1wiLFxuXHRcdDUsXG5cdFx0Mjhcblx0XSxcblx0XCIuL3ZlcmRvY3MtaW5pdGlhbC1kaWFsb2cuZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLWluaXRpYWwtZGlhbG9nLmVudHJ5LmpzXCIsXG5cdFx0NDZcblx0XSxcblx0XCIuL3ZlcmRvY3Mta2JhLWRpYWxvZy5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3Mta2JhLWRpYWxvZy5lbnRyeS5qc1wiLFxuXHRcdDQ3XG5cdF0sXG5cdFwiLi92ZXJkb2NzLW9rLWRpYWxvZy5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3Mtb2stZGlhbG9nLmVudHJ5LmpzXCIsXG5cdFx0NDhcblx0XSxcblx0XCIuL3ZlcmRvY3Mtb3JnYW5pemF0aW9uLWNhcmQuZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLW9yZ2FuaXphdGlvbi1jYXJkLmVudHJ5LmpzXCIsXG5cdFx0Nyxcblx0XHQ0OVxuXHRdLFxuXHRcIi4vdmVyZG9jcy1wcmV2aWV3LmVudHJ5LmpzXCI6IFtcblx0XHRcIi4vZGlzdC9lc20vdmVyZG9jcy1wcmV2aWV3LmVudHJ5LmpzXCIsXG5cdFx0MCxcblx0XHQyLFxuXHRcdDEsXG5cdFx0Myxcblx0XHQyMVxuXHRdLFxuXHRcIi4vdmVyZG9jcy1xdWljay1mdW5jdGlvbnNfMy5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtcXVpY2stZnVuY3Rpb25zXzMuZW50cnkuanNcIixcblx0XHQwLFxuXHRcdDIsXG5cdFx0Myxcblx0XHQyNlxuXHRdLFxuXHRcIi4vdmVyZG9jcy1yYWRpby1idXR0b24uZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLXJhZGlvLWJ1dHRvbi5lbnRyeS5qc1wiLFxuXHRcdDUwXG5cdF0sXG5cdFwiLi92ZXJkb2NzLXNlYXJjaC10YWJzLmVudHJ5LmpzXCI6IFtcblx0XHRcIi4vZGlzdC9lc20vdmVyZG9jcy1zZWFyY2gtdGFicy5lbnRyeS5qc1wiLFxuXHRcdDUxXG5cdF0sXG5cdFwiLi92ZXJkb2NzLXNlYXJjaC5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3Mtc2VhcmNoLmVudHJ5LmpzXCIsXG5cdFx0MCxcblx0XHQyLFxuXHRcdDMsXG5cdFx0Mzhcblx0XSxcblx0XCIuL3ZlcmRvY3Mtc2VuZC5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3Mtc2VuZC5lbnRyeS5qc1wiLFxuXHRcdDAsXG5cdFx0Mixcblx0XHQxLFxuXHRcdDMsXG5cdFx0MjRcblx0XSxcblx0XCIuL3ZlcmRvY3Mtc2lnbi5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3Mtc2lnbi5lbnRyeS5qc1wiLFxuXHRcdDAsXG5cdFx0Mixcblx0XHQxLFxuXHRcdDMsXG5cdFx0MTdcblx0XSxcblx0XCIuL3ZlcmRvY3Mtc3RhdHVzLWluZGljYXRvci5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3Mtc3RhdHVzLWluZGljYXRvci5lbnRyeS5qc1wiLFxuXHRcdDUsXG5cdFx0MTlcblx0XSxcblx0XCIuL3ZlcmRvY3MtdGVtcGxhdGUtY2FyZC5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtdGVtcGxhdGUtY2FyZC5lbnRyeS5qc1wiLFxuXHRcdDUyXG5cdF0sXG5cdFwiLi92ZXJkb2NzLXRlbXBsYXRlLWNyZWF0ZV80LmVudHJ5LmpzXCI6IFtcblx0XHRcIi4vZGlzdC9lc20vdmVyZG9jcy10ZW1wbGF0ZS1jcmVhdGVfNC5lbnRyeS5qc1wiLFxuXHRcdDAsXG5cdFx0Mixcblx0XHQxLFxuXHRcdDMsXG5cdFx0MTZcblx0XSxcblx0XCIuL3ZlcmRvY3MtdGVtcGxhdGUtdGFncy5lbnRyeS5qc1wiOiBbXG5cdFx0XCIuL2Rpc3QvZXNtL3ZlcmRvY3MtdGVtcGxhdGUtdGFncy5lbnRyeS5qc1wiLFxuXHRcdDUzXG5cdF0sXG5cdFwiLi92ZXJkb2NzLXRvZ2dsZS1idXR0b24uZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLXRvZ2dsZS1idXR0b24uZW50cnkuanNcIixcblx0XHQ1NFxuXHRdLFxuXHRcIi4vdmVyZG9jcy10b2dnbGUuZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLXRvZ2dsZS5lbnRyeS5qc1wiLFxuXHRcdDU1XG5cdF0sXG5cdFwiLi92ZXJkb2NzLXVwbG9hZC1kaWFsb2cuZW50cnkuanNcIjogW1xuXHRcdFwiLi9kaXN0L2VzbS92ZXJkb2NzLXVwbG9hZC1kaWFsb2cuZW50cnkuanNcIixcblx0XHQyOVxuXHRdXG59O1xuZnVuY3Rpb24gd2VicGFja0FzeW5jQ29udGV4dChyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHRcdHRocm93IGU7XG5cdFx0fSk7XG5cdH1cblxuXHR2YXIgaWRzID0gbWFwW3JlcV0sIGlkID0gaWRzWzBdO1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoaWRzLnNsaWNlKDEpLm1hcChfX3dlYnBhY2tfcmVxdWlyZV9fLmUpKS50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcblx0fSk7XG59XG53ZWJwYWNrQXN5bmNDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQXN5bmNDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0FzeW5jQ29udGV4dC5pZCA9IFwiLi9kaXN0L2VzbSBsYXp5IHJlY3Vyc2l2ZSBeXFxcXC5cXFxcLy4qXFxcXC5lbnRyeVxcXFwuanMkIGluY2x1ZGU6IFxcXFwuZW50cnlcXFxcLmpzJCBleGNsdWRlOiBcXFxcLnN5c3RlbVxcXFwuZW50cnlcXFxcLmpzJFwiO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQXN5bmNDb250ZXh0OyIsImV4cG9ydCBjb25zdCBOQU1FU1BBQ0UgPSAndmVyZG9jcy13ZWItc2RrJztcbmV4cG9ydCBjb25zdCBCVUlMRCA9IC8qIHZlcmRvY3Mtd2ViLXNkayAqLyB7IGFsbFJlbmRlckZuOiB0cnVlLCBhcHBlbmRDaGlsZFNsb3RGaXg6IGZhbHNlLCBhc3luY0xvYWRpbmc6IHRydWUsIGFzeW5jUXVldWU6IGZhbHNlLCBhdHRhY2hTdHlsZXM6IHRydWUsIGNsb25lTm9kZUZpeDogZmFsc2UsIGNtcERpZExvYWQ6IHRydWUsIGNtcERpZFJlbmRlcjogdHJ1ZSwgY21wRGlkVW5sb2FkOiBmYWxzZSwgY21wRGlkVXBkYXRlOiB0cnVlLCBjbXBTaG91bGRVcGRhdGU6IGZhbHNlLCBjbXBXaWxsTG9hZDogdHJ1ZSwgY21wV2lsbFJlbmRlcjogZmFsc2UsIGNtcFdpbGxVcGRhdGU6IGZhbHNlLCBjb25uZWN0ZWRDYWxsYmFjazogZmFsc2UsIGNvbnN0cnVjdGFibGVDU1M6IHRydWUsIGNzc0Fubm90YXRpb25zOiB0cnVlLCBjc3NWYXJTaGltOiBmYWxzZSwgZGV2VG9vbHM6IGZhbHNlLCBkaXNjb25uZWN0ZWRDYWxsYmFjazogdHJ1ZSwgZHluYW1pY0ltcG9ydFNoaW06IGZhbHNlLCBlbGVtZW50OiBmYWxzZSwgZXZlbnQ6IHRydWUsIGhhc1JlbmRlckZuOiB0cnVlLCBob3N0TGlzdGVuZXI6IGZhbHNlLCBob3N0TGlzdGVuZXJUYXJnZXQ6IGZhbHNlLCBob3N0TGlzdGVuZXJUYXJnZXRCb2R5OiBmYWxzZSwgaG9zdExpc3RlbmVyVGFyZ2V0RG9jdW1lbnQ6IGZhbHNlLCBob3N0TGlzdGVuZXJUYXJnZXRQYXJlbnQ6IGZhbHNlLCBob3N0TGlzdGVuZXJUYXJnZXRXaW5kb3c6IGZhbHNlLCBob3RNb2R1bGVSZXBsYWNlbWVudDogZmFsc2UsIGh5ZHJhdGVDbGllbnRTaWRlOiBmYWxzZSwgaHlkcmF0ZVNlcnZlclNpZGU6IGZhbHNlLCBoeWRyYXRlZEF0dHJpYnV0ZTogZmFsc2UsIGh5ZHJhdGVkQ2xhc3M6IHRydWUsIGluaXRpYWxpemVOZXh0VGljazogZmFsc2UsIGludmlzaWJsZVByZWh5ZHJhdGlvbjogdHJ1ZSwgaXNEZWJ1ZzogZmFsc2UsIGlzRGV2OiBmYWxzZSwgaXNUZXN0aW5nOiBmYWxzZSwgbGF6eUxvYWQ6IHRydWUsIGxpZmVjeWNsZTogdHJ1ZSwgbGlmZWN5Y2xlRE9NRXZlbnRzOiBmYWxzZSwgbWVtYmVyOiB0cnVlLCBtZXRob2Q6IHRydWUsIG1vZGU6IGZhbHNlLCBvYnNlcnZlQXR0cmlidXRlOiB0cnVlLCBwcm9maWxlOiBmYWxzZSwgcHJvcDogdHJ1ZSwgcHJvcEJvb2xlYW46IHRydWUsIHByb3BNdXRhYmxlOiB0cnVlLCBwcm9wTnVtYmVyOiB0cnVlLCBwcm9wU3RyaW5nOiB0cnVlLCByZWZsZWN0OiBmYWxzZSwgc2FmYXJpMTA6IGZhbHNlLCBzY29wZWQ6IGZhbHNlLCBzY29wZWRTbG90VGV4dENvbnRlbnRGaXg6IGZhbHNlLCBzY3JpcHREYXRhT3B0czogZmFsc2UsIHNoYWRvd0RlbGVnYXRlc0ZvY3VzOiBmYWxzZSwgc2hhZG93RG9tOiBmYWxzZSwgc2hhZG93RG9tU2hpbTogZmFsc2UsIHNsb3Q6IHRydWUsIHNsb3RDaGlsZE5vZGVzRml4OiBmYWxzZSwgc2xvdFJlbG9jYXRpb246IHRydWUsIHN0YXRlOiB0cnVlLCBzdHlsZTogdHJ1ZSwgc3ZnOiB0cnVlLCB0YXNrUXVldWU6IHRydWUsIHRyYW5zZm9ybVRhZ05hbWU6IGZhbHNlLCB1cGRhdGFibGU6IHRydWUsIHZkb21BdHRyaWJ1dGU6IHRydWUsIHZkb21DbGFzczogdHJ1ZSwgdmRvbUZ1bmN0aW9uYWw6IHRydWUsIHZkb21LZXk6IHRydWUsIHZkb21MaXN0ZW5lcjogdHJ1ZSwgdmRvbVByb3BPckF0dHI6IHRydWUsIHZkb21SZWY6IHRydWUsIHZkb21SZW5kZXI6IHRydWUsIHZkb21TdHlsZTogdHJ1ZSwgdmRvbVRleHQ6IHRydWUsIHZkb21YbGluazogZmFsc2UsIHdhdGNoQ2FsbGJhY2s6IGZhbHNlIH07XG5leHBvcnQgY29uc3QgRW52ID0gLyogdmVyZG9jcy13ZWItc2RrICovIHt9O1xuIiwiLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3NuYWJiZG9tL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBNb2RpZmllZCBmb3IgU3RlbmNpbCdzIHJlbmRlcmVyIGFuZCBzbG90IHByb2plY3Rpb25cbiAqL1xubGV0IHNjb3BlSWQ7XG5sZXQgY29udGVudFJlZjtcbmxldCBob3N0VGFnTmFtZTtcbmxldCBjdXN0b21FcnJvcjtcbmxldCBpID0gMDtcbmxldCB1c2VOYXRpdmVTaGFkb3dEb20gPSBmYWxzZTtcbmxldCBjaGVja1Nsb3RGYWxsYmFja1Zpc2liaWxpdHkgPSBmYWxzZTtcbmxldCBjaGVja1Nsb3RSZWxvY2F0ZSA9IGZhbHNlO1xubGV0IGlzU3ZnTW9kZSA9IGZhbHNlO1xubGV0IHJlbmRlcmluZ1JlZiA9IG51bGw7XG5sZXQgcXVldWVDb25nZXN0aW9uID0gMDtcbmxldCBxdWV1ZVBlbmRpbmcgPSBmYWxzZTtcbi8qXG4gU3RlbmNpbCBDbGllbnQgUGxhdGZvcm0gdjIuMjAuMCB8IE1JVCBMaWNlbnNlZCB8IGh0dHBzOi8vc3RlbmNpbGpzLmNvbVxuICovXG5pbXBvcnQgeyBCVUlMRCwgTkFNRVNQQUNFIH0gZnJvbSAnQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9hcHAtZGF0YSc7XG5jb25zdCBCdWlsZCA9IHtcbiAgICBpc0RldjogQlVJTEQuaXNEZXYgPyB0cnVlIDogZmFsc2UsXG4gICAgaXNCcm93c2VyOiB0cnVlLFxuICAgIGlzU2VydmVyOiBmYWxzZSxcbiAgICBpc1Rlc3Rpbmc6IEJVSUxELmlzVGVzdGluZyA/IHRydWUgOiBmYWxzZSxcbn07XG5jb25zdCBDb250ZXh0ID0ge307XG5jb25zdCBnZXRBc3NldFBhdGggPSAocGF0aCkgPT4ge1xuICAgIGNvbnN0IGFzc2V0VXJsID0gbmV3IFVSTChwYXRoLCBwbHQuJHJlc291cmNlc1VybCQpO1xuICAgIHJldHVybiBhc3NldFVybC5vcmlnaW4gIT09IHdpbi5sb2NhdGlvbi5vcmlnaW4gPyBhc3NldFVybC5ocmVmIDogYXNzZXRVcmwucGF0aG5hbWU7XG59O1xuY29uc3Qgc2V0QXNzZXRQYXRoID0gKHBhdGgpID0+IChwbHQuJHJlc291cmNlc1VybCQgPSBwYXRoKTtcbmNvbnN0IGNyZWF0ZVRpbWUgPSAoZm5OYW1lLCB0YWdOYW1lID0gJycpID0+IHtcbiAgICBpZiAoQlVJTEQucHJvZmlsZSAmJiBwZXJmb3JtYW5jZS5tYXJrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGBzdDoke2ZuTmFtZX06JHt0YWdOYW1lfToke2krK31gO1xuICAgICAgICAvLyBTdGFydFxuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKGtleSk7XG4gICAgICAgIC8vIEVuZFxuICAgICAgICByZXR1cm4gKCkgPT4gcGVyZm9ybWFuY2UubWVhc3VyZShgW1N0ZW5jaWxdICR7Zm5OYW1lfSgpIDwke3RhZ05hbWV9PmAsIGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgIH1cbn07XG5jb25zdCB1bmlxdWVUaW1lID0gKGtleSwgbWVhc3VyZVRleHQpID0+IHtcbiAgICBpZiAoQlVJTEQucHJvZmlsZSAmJiBwZXJmb3JtYW5jZS5tYXJrKSB7XG4gICAgICAgIGlmIChwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lKGtleSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGlmIChwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lKG1lYXN1cmVUZXh0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKG1lYXN1cmVUZXh0LCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuY29uc3QgaW5zcGVjdCA9IChyZWYpID0+IHtcbiAgICBjb25zdCBob3N0UmVmID0gZ2V0SG9zdFJlZihyZWYpO1xuICAgIGlmICghaG9zdFJlZikge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBmbGFncyA9IGhvc3RSZWYuJGZsYWdzJDtcbiAgICBjb25zdCBob3N0RWxlbWVudCA9IGhvc3RSZWYuJGhvc3RFbGVtZW50JDtcbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXJDb3VudDogaG9zdFJlZi4kcmVuZGVyQ291bnQkLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgICAgaGFzUmVuZGVyZWQ6ICEhKGZsYWdzICYgMiAvKiBIT1NUX0ZMQUdTLmhhc1JlbmRlcmVkICovKSxcbiAgICAgICAgICAgIGhhc0Nvbm5lY3RlZDogISEoZmxhZ3MgJiAxIC8qIEhPU1RfRkxBR1MuaGFzQ29ubmVjdGVkICovKSxcbiAgICAgICAgICAgIGlzV2FpdGluZ0ZvckNoaWxkcmVuOiAhIShmbGFncyAmIDQgLyogSE9TVF9GTEFHUy5pc1dhaXRpbmdGb3JDaGlsZHJlbiAqLyksXG4gICAgICAgICAgICBpc0NvbnN0cnVjdGluZ0luc3RhbmNlOiAhIShmbGFncyAmIDggLyogSE9TVF9GTEFHUy5pc0NvbnN0cnVjdGluZ0luc3RhbmNlICovKSxcbiAgICAgICAgICAgIGlzUXVldWVkRm9yVXBkYXRlOiAhIShmbGFncyAmIDE2IC8qIEhPU1RfRkxBR1MuaXNRdWV1ZWRGb3JVcGRhdGUgKi8pLFxuICAgICAgICAgICAgaGFzSW5pdGlhbGl6ZWRDb21wb25lbnQ6ICEhKGZsYWdzICYgMzIgLyogSE9TVF9GTEFHUy5oYXNJbml0aWFsaXplZENvbXBvbmVudCAqLyksXG4gICAgICAgICAgICBoYXNMb2FkZWRDb21wb25lbnQ6ICEhKGZsYWdzICYgNjQgLyogSE9TVF9GTEFHUy5oYXNMb2FkZWRDb21wb25lbnQgKi8pLFxuICAgICAgICAgICAgaXNXYXRjaFJlYWR5OiAhIShmbGFncyAmIDEyOCAvKiBIT1NUX0ZMQUdTLmlzV2F0Y2hSZWFkeSAqLyksXG4gICAgICAgICAgICBpc0xpc3RlblJlYWR5OiAhIShmbGFncyAmIDI1NiAvKiBIT1NUX0ZMQUdTLmlzTGlzdGVuUmVhZHkgKi8pLFxuICAgICAgICAgICAgbmVlZHNSZXJlbmRlcjogISEoZmxhZ3MgJiA1MTIgLyogSE9TVF9GTEFHUy5uZWVkc1JlcmVuZGVyICovKSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5zdGFuY2VWYWx1ZXM6IGhvc3RSZWYuJGluc3RhbmNlVmFsdWVzJCxcbiAgICAgICAgYW5jZXN0b3JDb21wb25lbnQ6IGhvc3RSZWYuJGFuY2VzdG9yQ29tcG9uZW50JCxcbiAgICAgICAgaG9zdEVsZW1lbnQsXG4gICAgICAgIGxhenlJbnN0YW5jZTogaG9zdFJlZi4kbGF6eUluc3RhbmNlJCxcbiAgICAgICAgdm5vZGU6IGhvc3RSZWYuJHZub2RlJCxcbiAgICAgICAgbW9kZU5hbWU6IGhvc3RSZWYuJG1vZGVOYW1lJCxcbiAgICAgICAgb25SZWFkeVByb21pc2U6IGhvc3RSZWYuJG9uUmVhZHlQcm9taXNlJCxcbiAgICAgICAgb25SZWFkeVJlc29sdmU6IGhvc3RSZWYuJG9uUmVhZHlSZXNvbHZlJCxcbiAgICAgICAgb25JbnN0YW5jZVByb21pc2U6IGhvc3RSZWYuJG9uSW5zdGFuY2VQcm9taXNlJCxcbiAgICAgICAgb25JbnN0YW5jZVJlc29sdmU6IGhvc3RSZWYuJG9uSW5zdGFuY2VSZXNvbHZlJCxcbiAgICAgICAgb25SZW5kZXJSZXNvbHZlOiBob3N0UmVmLiRvblJlbmRlclJlc29sdmUkLFxuICAgICAgICBxdWV1ZWRMaXN0ZW5lcnM6IGhvc3RSZWYuJHF1ZXVlZExpc3RlbmVycyQsXG4gICAgICAgIHJtTGlzdGVuZXJzOiBob3N0UmVmLiRybUxpc3RlbmVycyQsXG4gICAgICAgIFsncy1pZCddOiBob3N0RWxlbWVudFsncy1pZCddLFxuICAgICAgICBbJ3MtY3InXTogaG9zdEVsZW1lbnRbJ3MtY3InXSxcbiAgICAgICAgWydzLWxyJ106IGhvc3RFbGVtZW50WydzLWxyJ10sXG4gICAgICAgIFsncy1wJ106IGhvc3RFbGVtZW50WydzLXAnXSxcbiAgICAgICAgWydzLXJjJ106IGhvc3RFbGVtZW50WydzLXJjJ10sXG4gICAgICAgIFsncy1zYyddOiBob3N0RWxlbWVudFsncy1zYyddLFxuICAgIH07XG59O1xuY29uc3QgaW5zdGFsbERldlRvb2xzID0gKCkgPT4ge1xuICAgIGlmIChCVUlMRC5kZXZUb29scykge1xuICAgICAgICBjb25zdCBzdGVuY2lsID0gKHdpbi5zdGVuY2lsID0gd2luLnN0ZW5jaWwgfHwge30pO1xuICAgICAgICBjb25zdCBvcmlnaW5hbEluc3BlY3QgPSBzdGVuY2lsLmluc3BlY3Q7XG4gICAgICAgIHN0ZW5jaWwuaW5zcGVjdCA9IChyZWYpID0+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBpbnNwZWN0KHJlZik7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCAmJiB0eXBlb2Ygb3JpZ2luYWxJbnNwZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gb3JpZ2luYWxJbnNwZWN0KHJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgIH1cbn07XG5jb25zdCBDT05URU5UX1JFRl9JRCA9ICdyJztcbmNvbnN0IE9SR19MT0NBVElPTl9JRCA9ICdvJztcbmNvbnN0IFNMT1RfTk9ERV9JRCA9ICdzJztcbmNvbnN0IFRFWFRfTk9ERV9JRCA9ICd0JztcbmNvbnN0IEhZRFJBVEVfSUQgPSAncy1pZCc7XG5jb25zdCBIWURSQVRFRF9TVFlMRV9JRCA9ICdzdHktaWQnO1xuY29uc3QgSFlEUkFURV9DSElMRF9JRCA9ICdjLWlkJztcbmNvbnN0IEhZRFJBVEVEX0NTUyA9ICd7dmlzaWJpbGl0eTpoaWRkZW59Lmh5ZHJhdGVke3Zpc2liaWxpdHk6aW5oZXJpdH0nO1xuY29uc3QgWExJTktfTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG4vKipcbiAqIERlZmF1bHQgc3R5bGUgbW9kZSBpZFxuICovXG4vKipcbiAqIFJldXNhYmxlIGVtcHR5IG9iai9hcnJheVxuICogRG9uJ3QgYWRkIHZhbHVlcyB0byB0aGVzZSEhXG4gKi9cbmNvbnN0IEVNUFRZX09CSiA9IHt9O1xuLyoqXG4gKiBOYW1lc3BhY2VzXG4gKi9cbmNvbnN0IFNWR19OUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5jb25zdCBIVE1MX05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnO1xuY29uc3QgaXNEZWYgPSAodikgPT4gdiAhPSBudWxsO1xuY29uc3QgaXNDb21wbGV4VHlwZSA9IChvKSA9PiB7XG4gICAgLy8gaHR0cHM6Ly9qc3BlcmYuY29tL3R5cGVvZi1mbi1vYmplY3QvNVxuICAgIG8gPSB0eXBlb2YgbztcbiAgICByZXR1cm4gbyA9PT0gJ29iamVjdCcgfHwgbyA9PT0gJ2Z1bmN0aW9uJztcbn07XG4vKipcbiAqIFByb2R1Y3Rpb24gaCgpIGZ1bmN0aW9uIGJhc2VkIG9uIFByZWFjdCBieVxuICogSmFzb24gTWlsbGVyIChAZGV2ZWxvcGl0KVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGV2ZWxvcGl0L3ByZWFjdC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogTW9kaWZpZWQgZm9yIFN0ZW5jaWwncyBjb21waWxlciBhbmQgdmRvbVxuICovXG4vLyBjb25zdCBzdGFjazogYW55W10gPSBbXTtcbi8vIGV4cG9ydCBmdW5jdGlvbiBoKG5vZGVOYW1lOiBzdHJpbmcgfCBkLkZ1bmN0aW9uYWxDb21wb25lbnQsIHZub2RlRGF0YTogZC5Qcm9wc1R5cGUsIGNoaWxkPzogZC5DaGlsZFR5cGUpOiBkLlZOb2RlO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIGgobm9kZU5hbWU6IHN0cmluZyB8IGQuRnVuY3Rpb25hbENvbXBvbmVudCwgdm5vZGVEYXRhOiBkLlByb3BzVHlwZSwgLi4uY2hpbGRyZW46IGQuQ2hpbGRUeXBlW10pOiBkLlZOb2RlO1xuY29uc3QgaCA9IChub2RlTmFtZSwgdm5vZGVEYXRhLCAuLi5jaGlsZHJlbikgPT4ge1xuICAgIGxldCBjaGlsZCA9IG51bGw7XG4gICAgbGV0IGtleSA9IG51bGw7XG4gICAgbGV0IHNsb3ROYW1lID0gbnVsbDtcbiAgICBsZXQgc2ltcGxlID0gZmFsc2U7XG4gICAgbGV0IGxhc3RTaW1wbGUgPSBmYWxzZTtcbiAgICBjb25zdCB2Tm9kZUNoaWxkcmVuID0gW107XG4gICAgY29uc3Qgd2FsayA9IChjKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2hpbGQgPSBjW2ldO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgd2FsayhjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGlsZCAhPSBudWxsICYmIHR5cGVvZiBjaGlsZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgaWYgKChzaW1wbGUgPSB0eXBlb2Ygbm9kZU5hbWUgIT09ICdmdW5jdGlvbicgJiYgIWlzQ29tcGxleFR5cGUoY2hpbGQpKSkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IFN0cmluZyhjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKEJVSUxELmlzRGV2ICYmIHR5cGVvZiBub2RlTmFtZSAhPT0gJ2Z1bmN0aW9uJyAmJiBjaGlsZC4kZmxhZ3MkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZURldkVycm9yKGB2Tm9kZSBwYXNzZWQgYXMgY2hpbGRyZW4gaGFzIHVuZXhwZWN0ZWQgdHlwZS5cbk1ha2Ugc3VyZSBpdCdzIHVzaW5nIHRoZSBjb3JyZWN0IGgoKSBmdW5jdGlvbi5cbkVtcHR5IG9iamVjdHMgY2FuIGFsc28gYmUgdGhlIGNhdXNlLCBsb29rIGZvciBKU1ggY29tbWVudHMgdGhhdCBiZWNhbWUgb2JqZWN0cy5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNpbXBsZSAmJiBsYXN0U2ltcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBwcmV2aW91cyBjaGlsZCB3YXMgc2ltcGxlIChzdHJpbmcpLCB3ZSBtZXJnZSBib3RoXG4gICAgICAgICAgICAgICAgICAgIHZOb2RlQ2hpbGRyZW5bdk5vZGVDaGlsZHJlbi5sZW5ndGggLSAxXS4kdGV4dCQgKz0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgYSBuZXcgdk5vZGUsIGlmIGl0J3MgdGV4dCwgd2UgY3JlYXRlIGEgdGV4dCB2Tm9kZVxuICAgICAgICAgICAgICAgICAgICB2Tm9kZUNoaWxkcmVuLnB1c2goc2ltcGxlID8gbmV3Vk5vZGUobnVsbCwgY2hpbGQpIDogY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0U2ltcGxlID0gc2ltcGxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICB3YWxrKGNoaWxkcmVuKTtcbiAgICBpZiAodm5vZGVEYXRhKSB7XG4gICAgICAgIGlmIChCVUlMRC5pc0RldiAmJiBub2RlTmFtZSA9PT0gJ2lucHV0Jykge1xuICAgICAgICAgICAgdmFsaWRhdGVJbnB1dFByb3BlcnRpZXModm5vZGVEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBub3JtYWxpemUgY2xhc3MgLyBjbGFzc25hbWUgYXR0cmlidXRlc1xuICAgICAgICBpZiAoQlVJTEQudmRvbUtleSAmJiB2bm9kZURhdGEua2V5KSB7XG4gICAgICAgICAgICBrZXkgPSB2bm9kZURhdGEua2V5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChCVUlMRC5zbG90UmVsb2NhdGlvbiAmJiB2bm9kZURhdGEubmFtZSkge1xuICAgICAgICAgICAgc2xvdE5hbWUgPSB2bm9kZURhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQlVJTEQudmRvbUNsYXNzKSB7XG4gICAgICAgICAgICBjb25zdCBjbGFzc0RhdGEgPSB2bm9kZURhdGEuY2xhc3NOYW1lIHx8IHZub2RlRGF0YS5jbGFzcztcbiAgICAgICAgICAgIGlmIChjbGFzc0RhdGEpIHtcbiAgICAgICAgICAgICAgICB2bm9kZURhdGEuY2xhc3MgPVxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgY2xhc3NEYXRhICE9PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBjbGFzc0RhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogT2JqZWN0LmtleXMoY2xhc3NEYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGspID0+IGNsYXNzRGF0YVtrXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuam9pbignICcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChCVUlMRC5pc0RldiAmJiB2Tm9kZUNoaWxkcmVuLnNvbWUoaXNIb3N0KSkge1xuICAgICAgICBjb25zb2xlRGV2RXJyb3IoYFRoZSA8SG9zdD4gbXVzdCBiZSB0aGUgc2luZ2xlIHJvb3QgY29tcG9uZW50LiBNYWtlIHN1cmU6XG4tIFlvdSBhcmUgTk9UIHVzaW5nIGhvc3REYXRhKCkgYW5kIDxIb3N0PiBpbiB0aGUgc2FtZSBjb21wb25lbnQuXG4tIDxIb3N0PiBpcyB1c2VkIG9uY2UsIGFuZCBpdCdzIHRoZSBzaW5nbGUgcm9vdCBjb21wb25lbnQgb2YgdGhlIHJlbmRlcigpIGZ1bmN0aW9uLmApO1xuICAgIH1cbiAgICBpZiAoQlVJTEQudmRvbUZ1bmN0aW9uYWwgJiYgdHlwZW9mIG5vZGVOYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vZGVOYW1lIGlzIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgICAgICAgcmV0dXJuIG5vZGVOYW1lKHZub2RlRGF0YSA9PT0gbnVsbCA/IHt9IDogdm5vZGVEYXRhLCB2Tm9kZUNoaWxkcmVuLCB2ZG9tRm5VdGlscyk7XG4gICAgfVxuICAgIGNvbnN0IHZub2RlID0gbmV3Vk5vZGUobm9kZU5hbWUsIG51bGwpO1xuICAgIHZub2RlLiRhdHRycyQgPSB2bm9kZURhdGE7XG4gICAgaWYgKHZOb2RlQ2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICB2bm9kZS4kY2hpbGRyZW4kID0gdk5vZGVDaGlsZHJlbjtcbiAgICB9XG4gICAgaWYgKEJVSUxELnZkb21LZXkpIHtcbiAgICAgICAgdm5vZGUuJGtleSQgPSBrZXk7XG4gICAgfVxuICAgIGlmIChCVUlMRC5zbG90UmVsb2NhdGlvbikge1xuICAgICAgICB2bm9kZS4kbmFtZSQgPSBzbG90TmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlO1xufTtcbmNvbnN0IG5ld1ZOb2RlID0gKHRhZywgdGV4dCkgPT4ge1xuICAgIGNvbnN0IHZub2RlID0ge1xuICAgICAgICAkZmxhZ3MkOiAwLFxuICAgICAgICAkdGFnJDogdGFnLFxuICAgICAgICAkdGV4dCQ6IHRleHQsXG4gICAgICAgICRlbG0kOiBudWxsLFxuICAgICAgICAkY2hpbGRyZW4kOiBudWxsLFxuICAgIH07XG4gICAgaWYgKEJVSUxELnZkb21BdHRyaWJ1dGUpIHtcbiAgICAgICAgdm5vZGUuJGF0dHJzJCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChCVUlMRC52ZG9tS2V5KSB7XG4gICAgICAgIHZub2RlLiRrZXkkID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKEJVSUxELnNsb3RSZWxvY2F0aW9uKSB7XG4gICAgICAgIHZub2RlLiRuYW1lJCA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZTtcbn07XG5jb25zdCBIb3N0ID0ge307XG5jb25zdCBpc0hvc3QgPSAobm9kZSkgPT4gbm9kZSAmJiBub2RlLiR0YWckID09PSBIb3N0O1xuY29uc3QgdmRvbUZuVXRpbHMgPSB7XG4gICAgZm9yRWFjaDogKGNoaWxkcmVuLCBjYikgPT4gY2hpbGRyZW4ubWFwKGNvbnZlcnRUb1B1YmxpYykuZm9yRWFjaChjYiksXG4gICAgbWFwOiAoY2hpbGRyZW4sIGNiKSA9PiBjaGlsZHJlbi5tYXAoY29udmVydFRvUHVibGljKS5tYXAoY2IpLm1hcChjb252ZXJ0VG9Qcml2YXRlKSxcbn07XG5jb25zdCBjb252ZXJ0VG9QdWJsaWMgPSAobm9kZSkgPT4gKHtcbiAgICB2YXR0cnM6IG5vZGUuJGF0dHJzJCxcbiAgICB2Y2hpbGRyZW46IG5vZGUuJGNoaWxkcmVuJCxcbiAgICB2a2V5OiBub2RlLiRrZXkkLFxuICAgIHZuYW1lOiBub2RlLiRuYW1lJCxcbiAgICB2dGFnOiBub2RlLiR0YWckLFxuICAgIHZ0ZXh0OiBub2RlLiR0ZXh0JCxcbn0pO1xuY29uc3QgY29udmVydFRvUHJpdmF0ZSA9IChub2RlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBub2RlLnZ0YWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3Qgdm5vZGVEYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgbm9kZS52YXR0cnMpO1xuICAgICAgICBpZiAobm9kZS52a2V5KSB7XG4gICAgICAgICAgICB2bm9kZURhdGEua2V5ID0gbm9kZS52a2V5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLnZuYW1lKSB7XG4gICAgICAgICAgICB2bm9kZURhdGEubmFtZSA9IG5vZGUudm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGgobm9kZS52dGFnLCB2bm9kZURhdGEsIC4uLihub2RlLnZjaGlsZHJlbiB8fCBbXSkpO1xuICAgIH1cbiAgICBjb25zdCB2bm9kZSA9IG5ld1ZOb2RlKG5vZGUudnRhZywgbm9kZS52dGV4dCk7XG4gICAgdm5vZGUuJGF0dHJzJCA9IG5vZGUudmF0dHJzO1xuICAgIHZub2RlLiRjaGlsZHJlbiQgPSBub2RlLnZjaGlsZHJlbjtcbiAgICB2bm9kZS4ka2V5JCA9IG5vZGUudmtleTtcbiAgICB2bm9kZS4kbmFtZSQgPSBub2RlLnZuYW1lO1xuICAgIHJldHVybiB2bm9kZTtcbn07XG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgb3JkZXJpbmcgb2YgYXR0cmlidXRlcyBvbiBhbiBpbnB1dCBlbGVtZW50XG4gKiBAcGFyYW0gaW5wdXRFbG0gdGhlIGVsZW1lbnQgdG8gdmFsaWRhdGVcbiAqL1xuY29uc3QgdmFsaWRhdGVJbnB1dFByb3BlcnRpZXMgPSAoaW5wdXRFbG0pID0+IHtcbiAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5rZXlzKGlucHV0RWxtKTtcbiAgICBjb25zdCB2YWx1ZSA9IHByb3BzLmluZGV4T2YoJ3ZhbHVlJyk7XG4gICAgaWYgKHZhbHVlID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHR5cGVJbmRleCA9IHByb3BzLmluZGV4T2YoJ3R5cGUnKTtcbiAgICBjb25zdCBtaW5JbmRleCA9IHByb3BzLmluZGV4T2YoJ21pbicpO1xuICAgIGNvbnN0IG1heEluZGV4ID0gcHJvcHMuaW5kZXhPZignbWF4Jyk7XG4gICAgY29uc3Qgc3RlcEluZGV4ID0gcHJvcHMuaW5kZXhPZignc3RlcCcpO1xuICAgIGlmICh2YWx1ZSA8IHR5cGVJbmRleCB8fCB2YWx1ZSA8IG1pbkluZGV4IHx8IHZhbHVlIDwgbWF4SW5kZXggfHwgdmFsdWUgPCBzdGVwSW5kZXgpIHtcbiAgICAgICAgY29uc29sZURldldhcm4oYFRoZSBcInZhbHVlXCIgcHJvcCBvZiA8aW5wdXQ+IHNob3VsZCBiZSBzZXQgYWZ0ZXIgXCJtaW5cIiwgXCJtYXhcIiwgXCJ0eXBlXCIgYW5kIFwic3RlcFwiYCk7XG4gICAgfVxufTtcbmNvbnN0IGluaXRpYWxpemVDbGllbnRIeWRyYXRlID0gKGhvc3RFbG0sIHRhZ05hbWUsIGhvc3RJZCwgaG9zdFJlZikgPT4ge1xuICAgIGNvbnN0IGVuZEh5ZHJhdGUgPSBjcmVhdGVUaW1lKCdoeWRyYXRlQ2xpZW50JywgdGFnTmFtZSk7XG4gICAgY29uc3Qgc2hhZG93Um9vdCA9IGhvc3RFbG0uc2hhZG93Um9vdDtcbiAgICBjb25zdCBjaGlsZFJlbmRlck5vZGVzID0gW107XG4gICAgY29uc3Qgc2xvdE5vZGVzID0gW107XG4gICAgY29uc3Qgc2hhZG93Um9vdE5vZGVzID0gQlVJTEQuc2hhZG93RG9tICYmIHNoYWRvd1Jvb3QgPyBbXSA6IG51bGw7XG4gICAgY29uc3Qgdm5vZGUgPSAoaG9zdFJlZi4kdm5vZGUkID0gbmV3Vk5vZGUodGFnTmFtZSwgbnVsbCkpO1xuICAgIGlmICghcGx0LiRvcmdMb2NOb2RlcyQpIHtcbiAgICAgICAgaW5pdGlhbGl6ZURvY3VtZW50SHlkcmF0ZShkb2MuYm9keSwgKHBsdC4kb3JnTG9jTm9kZXMkID0gbmV3IE1hcCgpKSk7XG4gICAgfVxuICAgIGhvc3RFbG1bSFlEUkFURV9JRF0gPSBob3N0SWQ7XG4gICAgaG9zdEVsbS5yZW1vdmVBdHRyaWJ1dGUoSFlEUkFURV9JRCk7XG4gICAgY2xpZW50SHlkcmF0ZSh2bm9kZSwgY2hpbGRSZW5kZXJOb2Rlcywgc2xvdE5vZGVzLCBzaGFkb3dSb290Tm9kZXMsIGhvc3RFbG0sIGhvc3RFbG0sIGhvc3RJZCk7XG4gICAgY2hpbGRSZW5kZXJOb2Rlcy5tYXAoKGMpID0+IHtcbiAgICAgICAgY29uc3Qgb3JnTG9jYXRpb25JZCA9IGMuJGhvc3RJZCQgKyAnLicgKyBjLiRub2RlSWQkO1xuICAgICAgICBjb25zdCBvcmdMb2NhdGlvbk5vZGUgPSBwbHQuJG9yZ0xvY05vZGVzJC5nZXQob3JnTG9jYXRpb25JZCk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBjLiRlbG0kO1xuICAgICAgICBpZiAob3JnTG9jYXRpb25Ob2RlICYmIHN1cHBvcnRzU2hhZG93ICYmIG9yZ0xvY2F0aW9uTm9kZVsncy1lbiddID09PSAnJykge1xuICAgICAgICAgICAgb3JnTG9jYXRpb25Ob2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG9yZ0xvY2F0aW9uTm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaGFkb3dSb290KSB7XG4gICAgICAgICAgICBub2RlWydzLWhuJ10gPSB0YWdOYW1lO1xuICAgICAgICAgICAgaWYgKG9yZ0xvY2F0aW9uTm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGVbJ3Mtb2wnXSA9IG9yZ0xvY2F0aW9uTm9kZTtcbiAgICAgICAgICAgICAgICBub2RlWydzLW9sJ11bJ3MtbnInXSA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGx0LiRvcmdMb2NOb2RlcyQuZGVsZXRlKG9yZ0xvY2F0aW9uSWQpO1xuICAgIH0pO1xuICAgIGlmIChCVUlMRC5zaGFkb3dEb20gJiYgc2hhZG93Um9vdCkge1xuICAgICAgICBzaGFkb3dSb290Tm9kZXMubWFwKChzaGFkb3dSb290Tm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHNoYWRvd1Jvb3ROb2RlKSB7XG4gICAgICAgICAgICAgICAgc2hhZG93Um9vdC5hcHBlbmRDaGlsZChzaGFkb3dSb290Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbmRIeWRyYXRlKCk7XG59O1xuY29uc3QgY2xpZW50SHlkcmF0ZSA9IChwYXJlbnRWTm9kZSwgY2hpbGRSZW5kZXJOb2Rlcywgc2xvdE5vZGVzLCBzaGFkb3dSb290Tm9kZXMsIGhvc3RFbG0sIG5vZGUsIGhvc3RJZCkgPT4ge1xuICAgIGxldCBjaGlsZE5vZGVUeXBlO1xuICAgIGxldCBjaGlsZElkU3BsdDtcbiAgICBsZXQgY2hpbGRWTm9kZTtcbiAgICBsZXQgaTtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAvKiBOT0RFX1RZUEUuRWxlbWVudE5vZGUgKi8pIHtcbiAgICAgICAgY2hpbGROb2RlVHlwZSA9IG5vZGUuZ2V0QXR0cmlidXRlKEhZRFJBVEVfQ0hJTERfSUQpO1xuICAgICAgICBpZiAoY2hpbGROb2RlVHlwZSkge1xuICAgICAgICAgICAgLy8gZ290IHRoZSBub2RlIGRhdGEgZnJvbSB0aGUgZWxlbWVudCdzIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy8gYCR7aG9zdElkfS4ke25vZGVJZH0uJHtkZXB0aH0uJHtpbmRleH1gXG4gICAgICAgICAgICBjaGlsZElkU3BsdCA9IGNoaWxkTm9kZVR5cGUuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgIGlmIChjaGlsZElkU3BsdFswXSA9PT0gaG9zdElkIHx8IGNoaWxkSWRTcGx0WzBdID09PSAnMCcpIHtcbiAgICAgICAgICAgICAgICBjaGlsZFZOb2RlID0ge1xuICAgICAgICAgICAgICAgICAgICAkZmxhZ3MkOiAwLFxuICAgICAgICAgICAgICAgICAgICAkaG9zdElkJDogY2hpbGRJZFNwbHRbMF0sXG4gICAgICAgICAgICAgICAgICAgICRub2RlSWQkOiBjaGlsZElkU3BsdFsxXSxcbiAgICAgICAgICAgICAgICAgICAgJGRlcHRoJDogY2hpbGRJZFNwbHRbMl0sXG4gICAgICAgICAgICAgICAgICAgICRpbmRleCQ6IGNoaWxkSWRTcGx0WzNdLFxuICAgICAgICAgICAgICAgICAgICAkdGFnJDogbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgICRlbG0kOiBub2RlLFxuICAgICAgICAgICAgICAgICAgICAkYXR0cnMkOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAkY2hpbGRyZW4kOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAka2V5JDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJG5hbWUkOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAkdGV4dCQ6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjaGlsZFJlbmRlck5vZGVzLnB1c2goY2hpbGRWTm9kZSk7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoSFlEUkFURV9DSElMRF9JRCk7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhIG5ldyBjaGlsZCB2bm9kZVxuICAgICAgICAgICAgICAgIC8vIHNvIGVuc3VyZSBpdHMgcGFyZW50IHZub2RlIGhhcyB0aGUgdmNoaWxkcmVuIGFycmF5XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJlbnRWTm9kZS4kY2hpbGRyZW4kKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFZOb2RlLiRjaGlsZHJlbiQgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYWRkIG91ciBjaGlsZCB2bm9kZSB0byBhIHNwZWNpZmljIGluZGV4IG9mIHRoZSB2bm9kZSdzIGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgcGFyZW50Vk5vZGUuJGNoaWxkcmVuJFtjaGlsZFZOb2RlLiRpbmRleCRdID0gY2hpbGRWTm9kZTtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIG5vdyB0aGUgbmV3IHBhcmVudCB2bm9kZSBmb3IgYWxsIHRoZSBuZXh0IGNoaWxkIGNoZWNrc1xuICAgICAgICAgICAgICAgIHBhcmVudFZOb2RlID0gY2hpbGRWTm9kZTtcbiAgICAgICAgICAgICAgICBpZiAoc2hhZG93Um9vdE5vZGVzICYmIGNoaWxkVk5vZGUuJGRlcHRoJCA9PT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd1Jvb3ROb2Rlc1tjaGlsZFZOb2RlLiRpbmRleCRdID0gY2hpbGRWTm9kZS4kZWxtJDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVjdXJzaXZlbHkgZHJpbGwgZG93biwgZW5kIHRvIHN0YXJ0IHNvIHdlIGNhbiByZW1vdmUgbm9kZXNcbiAgICAgICAgZm9yIChpID0gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjbGllbnRIeWRyYXRlKHBhcmVudFZOb2RlLCBjaGlsZFJlbmRlck5vZGVzLCBzbG90Tm9kZXMsIHNoYWRvd1Jvb3ROb2RlcywgaG9zdEVsbSwgbm9kZS5jaGlsZE5vZGVzW2ldLCBob3N0SWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIC8vIGtlZXAgZHJpbGxpbmcgZG93biB0aHJvdWdoIHRoZSBzaGFkb3cgcm9vdCBub2Rlc1xuICAgICAgICAgICAgZm9yIChpID0gbm9kZS5zaGFkb3dSb290LmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBjbGllbnRIeWRyYXRlKHBhcmVudFZOb2RlLCBjaGlsZFJlbmRlck5vZGVzLCBzbG90Tm9kZXMsIHNoYWRvd1Jvb3ROb2RlcywgaG9zdEVsbSwgbm9kZS5zaGFkb3dSb290LmNoaWxkTm9kZXNbaV0sIGhvc3RJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBOT0RFX1RZUEUuQ29tbWVudE5vZGUgKi8pIHtcbiAgICAgICAgLy8gYCR7Q09NTUVOVF9UWVBFfS4ke2hvc3RJZH0uJHtub2RlSWR9LiR7ZGVwdGh9LiR7aW5kZXh9YFxuICAgICAgICBjaGlsZElkU3BsdCA9IG5vZGUubm9kZVZhbHVlLnNwbGl0KCcuJyk7XG4gICAgICAgIGlmIChjaGlsZElkU3BsdFsxXSA9PT0gaG9zdElkIHx8IGNoaWxkSWRTcGx0WzFdID09PSAnMCcpIHtcbiAgICAgICAgICAgIC8vIGNvbW1lbnQgbm9kZSBmb3IgZWl0aGVyIHRoZSBob3N0IGlkIG9yIGEgMCBob3N0IGlkXG4gICAgICAgICAgICBjaGlsZE5vZGVUeXBlID0gY2hpbGRJZFNwbHRbMF07XG4gICAgICAgICAgICBjaGlsZFZOb2RlID0ge1xuICAgICAgICAgICAgICAgICRmbGFncyQ6IDAsXG4gICAgICAgICAgICAgICAgJGhvc3RJZCQ6IGNoaWxkSWRTcGx0WzFdLFxuICAgICAgICAgICAgICAgICRub2RlSWQkOiBjaGlsZElkU3BsdFsyXSxcbiAgICAgICAgICAgICAgICAkZGVwdGgkOiBjaGlsZElkU3BsdFszXSxcbiAgICAgICAgICAgICAgICAkaW5kZXgkOiBjaGlsZElkU3BsdFs0XSxcbiAgICAgICAgICAgICAgICAkZWxtJDogbm9kZSxcbiAgICAgICAgICAgICAgICAkYXR0cnMkOiBudWxsLFxuICAgICAgICAgICAgICAgICRjaGlsZHJlbiQ6IG51bGwsXG4gICAgICAgICAgICAgICAgJGtleSQ6IG51bGwsXG4gICAgICAgICAgICAgICAgJG5hbWUkOiBudWxsLFxuICAgICAgICAgICAgICAgICR0YWckOiBudWxsLFxuICAgICAgICAgICAgICAgICR0ZXh0JDogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY2hpbGROb2RlVHlwZSA9PT0gVEVYVF9OT0RFX0lEKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRWTm9kZS4kZWxtJCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkVk5vZGUuJGVsbSQgJiYgY2hpbGRWTm9kZS4kZWxtJC5ub2RlVHlwZSA9PT0gMyAvKiBOT0RFX1RZUEUuVGV4dE5vZGUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRWTm9kZS4kdGV4dCQgPSBjaGlsZFZOb2RlLiRlbG0kLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICBjaGlsZFJlbmRlck5vZGVzLnB1c2goY2hpbGRWTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgdGV4dCBjb21tZW50IHNpbmNlIGl0J3Mgbm8gbG9uZ2VyIG5lZWRlZFxuICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmVudFZOb2RlLiRjaGlsZHJlbiQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFZOb2RlLiRjaGlsZHJlbiQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRWTm9kZS4kY2hpbGRyZW4kW2NoaWxkVk5vZGUuJGluZGV4JF0gPSBjaGlsZFZOb2RlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hhZG93Um9vdE5vZGVzICYmIGNoaWxkVk5vZGUuJGRlcHRoJCA9PT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dSb290Tm9kZXNbY2hpbGRWTm9kZS4kaW5kZXgkXSA9IGNoaWxkVk5vZGUuJGVsbSQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGlsZFZOb2RlLiRob3N0SWQkID09PSBob3N0SWQpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNvbW1lbnQgbm9kZSBpcyBzcGVjaWZjYWxseSBmb3IgdGhpcyBob3N0IGlkXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZVR5cGUgPT09IFNMT1RfTk9ERV9JRCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBgJHtTTE9UX05PREVfSUR9LiR7aG9zdElkfS4ke25vZGVJZH0uJHtkZXB0aH0uJHtpbmRleH0uJHtzbG90TmFtZX1gO1xuICAgICAgICAgICAgICAgICAgICBjaGlsZFZOb2RlLiR0YWckID0gJ3Nsb3QnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRJZFNwbHRbNV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbJ3Mtc24nXSA9IGNoaWxkVk5vZGUuJG5hbWUkID0gY2hpbGRJZFNwbHRbNV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlWydzLXNuJ10gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBub2RlWydzLXNyJ10gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQlVJTEQuc2hhZG93RG9tICYmIHNoYWRvd1Jvb3ROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJvd3NlciBzdXBwb3J0IHNoYWRvd1Jvb3QgYW5kIHRoaXMgaXMgYSBzaGFkb3cgZG9tIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFuIGFjdHVhbCBzbG90IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkVk5vZGUuJGVsbSQgPSBkb2MuY3JlYXRlRWxlbWVudChjaGlsZFZOb2RlLiR0YWckKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZFZOb2RlLiRuYW1lJCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgc2xvdCBuYW1lIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkVk5vZGUuJGVsbSQuc2V0QXR0cmlidXRlKCduYW1lJywgY2hpbGRWTm9kZS4kbmFtZSQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5zZXJ0IHRoZSBuZXcgc2xvdCBlbGVtZW50IGJlZm9yZSB0aGUgc2xvdCBjb21tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkVk5vZGUuJGVsbSQsIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBzbG90IGNvbW1lbnQgc2luY2UgaXQncyBub3QgbmVlZGVkIGZvciBzaGFkb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRWTm9kZS4kZGVwdGgkID09PSAnMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dSb290Tm9kZXNbY2hpbGRWTm9kZS4kaW5kZXgkXSA9IGNoaWxkVk5vZGUuJGVsbSQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xvdE5vZGVzLnB1c2goY2hpbGRWTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFyZW50Vk5vZGUuJGNoaWxkcmVuJCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Vk5vZGUuJGNoaWxkcmVuJCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFZOb2RlLiRjaGlsZHJlbiRbY2hpbGRWTm9kZS4kaW5kZXgkXSA9IGNoaWxkVk5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkTm9kZVR5cGUgPT09IENPTlRFTlRfUkVGX0lEKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGAke0NPTlRFTlRfUkVGX0lEfS4ke2hvc3RJZH1gO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQlVJTEQuc2hhZG93RG9tICYmIHNoYWRvd1Jvb3ROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjb250ZW50IHJlZiBjb21tZW50IHNpbmNlIGl0J3Mgbm90IG5lZWRlZCBmb3Igc2hhZG93XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKEJVSUxELnNsb3RSZWxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0RWxtWydzLWNyJ10gPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVsncy1jbiddID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChwYXJlbnRWTm9kZSAmJiBwYXJlbnRWTm9kZS4kdGFnJCA9PT0gJ3N0eWxlJykge1xuICAgICAgICBjb25zdCB2bm9kZSA9IG5ld1ZOb2RlKG51bGwsIG5vZGUudGV4dENvbnRlbnQpO1xuICAgICAgICB2bm9kZS4kZWxtJCA9IG5vZGU7XG4gICAgICAgIHZub2RlLiRpbmRleCQgPSAnMCc7XG4gICAgICAgIHBhcmVudFZOb2RlLiRjaGlsZHJlbiQgPSBbdm5vZGVdO1xuICAgIH1cbn07XG5jb25zdCBpbml0aWFsaXplRG9jdW1lbnRIeWRyYXRlID0gKG5vZGUsIG9yZ0xvY05vZGVzKSA9PiB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgLyogTk9ERV9UWVBFLkVsZW1lbnROb2RlICovKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yICg7IGkgPCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGluaXRpYWxpemVEb2N1bWVudEh5ZHJhdGUobm9kZS5jaGlsZE5vZGVzW2ldLCBvcmdMb2NOb2Rlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGUuc2hhZG93Um9vdC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZURvY3VtZW50SHlkcmF0ZShub2RlLnNoYWRvd1Jvb3QuY2hpbGROb2Rlc1tpXSwgb3JnTG9jTm9kZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggLyogTk9ERV9UWVBFLkNvbW1lbnROb2RlICovKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkSWRTcGx0ID0gbm9kZS5ub2RlVmFsdWUuc3BsaXQoJy4nKTtcbiAgICAgICAgaWYgKGNoaWxkSWRTcGx0WzBdID09PSBPUkdfTE9DQVRJT05fSUQpIHtcbiAgICAgICAgICAgIG9yZ0xvY05vZGVzLnNldChjaGlsZElkU3BsdFsxXSArICcuJyArIGNoaWxkSWRTcGx0WzJdLCBub2RlKTtcbiAgICAgICAgICAgIG5vZGUubm9kZVZhbHVlID0gJyc7XG4gICAgICAgICAgICAvLyB1c2VmdWwgdG8ga25vdyBpZiB0aGUgb3JpZ2luYWwgbG9jYXRpb24gaXNcbiAgICAgICAgICAgIC8vIHRoZSByb290IGxpZ2h0LWRvbSBvZiBhIHNoYWRvdyBkb20gY29tcG9uZW50XG4gICAgICAgICAgICBub2RlWydzLWVuJ10gPSBjaGlsZElkU3BsdFszXTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4vLyBQcml2YXRlXG5jb25zdCBjb21wdXRlTW9kZSA9IChlbG0pID0+IG1vZGVSZXNvbHV0aW9uQ2hhaW4ubWFwKChoKSA9PiBoKGVsbSkpLmZpbmQoKG0pID0+ICEhbSk7XG4vLyBQdWJsaWNcbmNvbnN0IHNldE1vZGUgPSAoaGFuZGxlcikgPT4gbW9kZVJlc29sdXRpb25DaGFpbi5wdXNoKGhhbmRsZXIpO1xuY29uc3QgZ2V0TW9kZSA9IChyZWYpID0+IGdldEhvc3RSZWYocmVmKS4kbW9kZU5hbWUkO1xuLyoqXG4gKiBQYXJzZSBhIG5ldyBwcm9wZXJ0eSB2YWx1ZSBmb3IgYSBnaXZlbiBwcm9wZXJ0eSB0eXBlLlxuICpcbiAqIFdoaWxlIHRoZSBwcm9wIHZhbHVlIGNhbiByZWFzb25hYmx5IGJlIGV4cGVjdGVkIHRvIGJlIG9mIGBhbnlgIHR5cGUgYXMgZmFyIGFzIFR5cGVTY3JpcHQncyB0eXBlIGNoZWNrZXIgaXMgY29uY2VybmVkLFxuICogaXQgaXMgbm90IHNhZmUgdG8gYXNzdW1lIHRoYXQgdGhlIHN0cmluZyByZXR1cm5lZCBieSBldmFsdWF0aW5nIGB0eXBlb2YgcHJvcFZhbHVlYCBtYXRjaGVzOlxuICogICAxLiBgYW55YCwgdGhlIHR5cGUgZ2l2ZW4gdG8gYHByb3BWYWx1ZWAgaW4gdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZVxuICogICAyLiB0aGUgdHlwZSBzdG9yZWQgZnJvbSBgcHJvcFR5cGVgLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIGNhcGFiaWxpdHkgdG8gcGFyc2UvY29lcmNlIGEgcHJvcGVydHkncyB2YWx1ZSB0byBwb3RlbnRpYWxseSBhbnkgb3RoZXIgSmF2YVNjcmlwdCB0eXBlLlxuICpcbiAqIFByb3BlcnR5IHZhbHVlcyByZXByZXNlbnRlZCBpbiBUU1ggcHJlc2VydmUgdGhlaXIgdHlwZSBpbmZvcm1hdGlvbi4gSW4gdGhlIGV4YW1wbGUgYmVsb3csIHRoZSBudW1iZXIgMCBpcyBwYXNzZWQgdG9cbiAqIGEgY29tcG9uZW50LiBUaGlzIGBwcm9wVmFsdWVgIHdpbGwgcHJlc2VydmUgaXRzIHR5cGUgaW5mb3JtYXRpb24gKGB0eXBlb2YgcHJvcFZhbHVlID09PSAnbnVtYmVyJ2ApLiBOb3RlIHRoYXQgaXNcbiAqIGJhc2VkIG9uIHRoZSB0eXBlIG9mIHRoZSB2YWx1ZSBiZWluZyBwYXNzZWQgaW4sIG5vdCB0aGUgdHlwZSBkZWNsYXJlZCBvZiB0aGUgY2xhc3MgbWVtYmVyIGRlY29yYXRlZCB3aXRoIGBAUHJvcGAuXG4gKiBgYGB0c3hcbiAqIDxteS1jbXAgcHJvcC12YWw9ezB9PjwvbXktY21wPlxuICogYGBgXG4gKlxuICogSFRNTCBwcm9wIHZhbHVlcyBvbiB0aGUgb3RoZXIgaGFuZCwgd2lsbCBhbHdheXMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gcHJvcFZhbHVlIHRoZSBuZXcgdmFsdWUgdG8gY29lcmNlIHRvIHNvbWUgdHlwZVxuICogQHBhcmFtIHByb3BUeXBlIHRoZSB0eXBlIG9mIHRoZSBwcm9wLCBleHByZXNzZWQgYXMgYSBiaW5hcnkgbnVtYmVyXG4gKiBAcmV0dXJucyB0aGUgcGFyc2VkL2NvZXJjZWQgdmFsdWVcbiAqL1xuY29uc3QgcGFyc2VQcm9wZXJ0eVZhbHVlID0gKHByb3BWYWx1ZSwgcHJvcFR5cGUpID0+IHtcbiAgICAvLyBlbnN1cmUgdGhpcyB2YWx1ZSBpcyBvZiB0aGUgY29ycmVjdCBwcm9wIHR5cGVcbiAgICBpZiAocHJvcFZhbHVlICE9IG51bGwgJiYgIWlzQ29tcGxleFR5cGUocHJvcFZhbHVlKSkge1xuICAgICAgICBpZiAoQlVJTEQucHJvcEJvb2xlYW4gJiYgcHJvcFR5cGUgJiA0IC8qIE1FTUJFUl9GTEFHUy5Cb29sZWFuICovKSB7XG4gICAgICAgICAgICAvLyBwZXIgdGhlIEhUTUwgc3BlYywgYW55IHN0cmluZyB2YWx1ZSBtZWFucyBpdCBpcyBhIGJvb2xlYW4gdHJ1ZSB2YWx1ZVxuICAgICAgICAgICAgLy8gYnV0IHdlJ2xsIGNoZWF0IGhlcmUgYW5kIHNheSB0aGF0IHRoZSBzdHJpbmcgXCJmYWxzZVwiIGlzIHRoZSBib29sZWFuIGZhbHNlXG4gICAgICAgICAgICByZXR1cm4gcHJvcFZhbHVlID09PSAnZmFsc2UnID8gZmFsc2UgOiBwcm9wVmFsdWUgPT09ICcnIHx8ICEhcHJvcFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChCVUlMRC5wcm9wTnVtYmVyICYmIHByb3BUeXBlICYgMiAvKiBNRU1CRVJfRkxBR1MuTnVtYmVyICovKSB7XG4gICAgICAgICAgICAvLyBmb3JjZSBpdCB0byBiZSBhIG51bWJlclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQocHJvcFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQlVJTEQucHJvcFN0cmluZyAmJiBwcm9wVHlwZSAmIDEgLyogTUVNQkVSX0ZMQUdTLlN0cmluZyAqLykge1xuICAgICAgICAgICAgLy8gY291bGQgaGF2ZSBiZWVuIHBhc3NlZCBhcyBhIG51bWJlciBvciBib29sZWFuXG4gICAgICAgICAgICAvLyBidXQgd2Ugc3RpbGwgd2FudCBpdCBhcyBhIHN0cmluZ1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhwcm9wVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlZHVuZGFudCByZXR1cm4gaGVyZSBmb3IgYmV0dGVyIG1pbmlmaWNhdGlvblxuICAgICAgICByZXR1cm4gcHJvcFZhbHVlO1xuICAgIH1cbiAgICAvLyBub3Qgc3VyZSBleGFjdGx5IHdoYXQgdHlwZSB3ZSB3YW50XG4gICAgLy8gc28gbm8gbmVlZCB0byBjaGFuZ2UgdG8gYSBkaWZmZXJlbnQgdHlwZVxuICAgIHJldHVybiBwcm9wVmFsdWU7XG59O1xuY29uc3QgZ2V0RWxlbWVudCA9IChyZWYpID0+IChCVUlMRC5sYXp5TG9hZCA/IGdldEhvc3RSZWYocmVmKS4kaG9zdEVsZW1lbnQkIDogcmVmKTtcbmNvbnN0IGNyZWF0ZUV2ZW50ID0gKHJlZiwgbmFtZSwgZmxhZ3MpID0+IHtcbiAgICBjb25zdCBlbG0gPSBnZXRFbGVtZW50KHJlZik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW1pdDogKGRldGFpbCkgPT4ge1xuICAgICAgICAgICAgaWYgKEJVSUxELmlzRGV2ICYmICFlbG0uaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlRGV2V2FybihgVGhlIFwiJHtuYW1lfVwiIGV2ZW50IHdhcyBlbWl0dGVkLCBidXQgdGhlIGRpc3BhdGNoZXIgbm9kZSBpcyBubyBsb25nZXIgY29ubmVjdGVkIHRvIHRoZSBkb20uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZW1pdEV2ZW50KGVsbSwgbmFtZSwge1xuICAgICAgICAgICAgICAgIGJ1YmJsZXM6ICEhKGZsYWdzICYgNCAvKiBFVkVOVF9GTEFHUy5CdWJibGVzICovKSxcbiAgICAgICAgICAgICAgICBjb21wb3NlZDogISEoZmxhZ3MgJiAyIC8qIEVWRU5UX0ZMQUdTLkNvbXBvc2VkICovKSxcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiAhIShmbGFncyAmIDEgLyogRVZFTlRfRkxBR1MuQ2FuY2VsbGFibGUgKi8pLFxuICAgICAgICAgICAgICAgIGRldGFpbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlICYgZGlzcGF0Y2ggYSBjdXN0b20gRXZlbnQgb24gYSBwcm92aWRlZCB0YXJnZXRcbiAqIEBwYXJhbSBlbG0gdGhlIHRhcmdldCBvZiB0aGUgRXZlbnRcbiAqIEBwYXJhbSBuYW1lIHRoZSBuYW1lIHRvIGdpdmUgdGhlIGN1c3RvbSBFdmVudFxuICogQHBhcmFtIG9wdHMgb3B0aW9ucyBmb3IgY29uZmlndXJpbmcgYSBjdXN0b20gRXZlbnRcbiAqIEByZXR1cm5zIHRoZSBjdXN0b20gRXZlbnRcbiAqL1xuY29uc3QgZW1pdEV2ZW50ID0gKGVsbSwgbmFtZSwgb3B0cykgPT4ge1xuICAgIGNvbnN0IGV2ID0gcGx0LmNlKG5hbWUsIG9wdHMpO1xuICAgIGVsbS5kaXNwYXRjaEV2ZW50KGV2KTtcbiAgICByZXR1cm4gZXY7XG59O1xuY29uc3Qgcm9vdEFwcGxpZWRTdHlsZXMgPSAvKkBfX1BVUkVfXyovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCByZWdpc3RlclN0eWxlID0gKHNjb3BlSWQsIGNzc1RleHQsIGFsbG93Q1MpID0+IHtcbiAgICBsZXQgc3R5bGUgPSBzdHlsZXMuZ2V0KHNjb3BlSWQpO1xuICAgIGlmIChzdXBwb3J0c0NvbnN0cnVjdGFibGVTdHlsZXNoZWV0cyAmJiBhbGxvd0NTKSB7XG4gICAgICAgIHN0eWxlID0gKHN0eWxlIHx8IG5ldyBDU1NTdHlsZVNoZWV0KCkpO1xuICAgICAgICBpZiAodHlwZW9mIHN0eWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc3R5bGUgPSBjc3NUZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGUucmVwbGFjZVN5bmMoY3NzVGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN0eWxlID0gY3NzVGV4dDtcbiAgICB9XG4gICAgc3R5bGVzLnNldChzY29wZUlkLCBzdHlsZSk7XG59O1xuY29uc3QgYWRkU3R5bGUgPSAoc3R5bGVDb250YWluZXJOb2RlLCBjbXBNZXRhLCBtb2RlLCBob3N0RWxtKSA9PiB7XG4gICAgbGV0IHNjb3BlSWQgPSBnZXRTY29wZUlkKGNtcE1ldGEsIG1vZGUpO1xuICAgIGNvbnN0IHN0eWxlID0gc3R5bGVzLmdldChzY29wZUlkKTtcbiAgICBpZiAoIUJVSUxELmF0dGFjaFN0eWxlcykge1xuICAgICAgICByZXR1cm4gc2NvcGVJZDtcbiAgICB9XG4gICAgLy8gaWYgYW4gZWxlbWVudCBpcyBOT1QgY29ubmVjdGVkIHRoZW4gZ2V0Um9vdE5vZGUoKSB3aWxsIHJldHVybiB0aGUgd3Jvbmcgcm9vdCBub2RlXG4gICAgLy8gc28gdGhlIGZhbGxiYWNrIGlzIHRvIGFsd2F5cyB1c2UgdGhlIGRvY3VtZW50IGZvciB0aGUgcm9vdCBub2RlIGluIHRob3NlIGNhc2VzXG4gICAgc3R5bGVDb250YWluZXJOb2RlID0gc3R5bGVDb250YWluZXJOb2RlLm5vZGVUeXBlID09PSAxMSAvKiBOT0RFX1RZUEUuRG9jdW1lbnRGcmFnbWVudCAqLyA/IHN0eWxlQ29udGFpbmVyTm9kZSA6IGRvYztcbiAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHN0eWxlQ29udGFpbmVyTm9kZSA9IHN0eWxlQ29udGFpbmVyTm9kZS5oZWFkIHx8IHN0eWxlQ29udGFpbmVyTm9kZTtcbiAgICAgICAgICAgIGxldCBhcHBsaWVkU3R5bGVzID0gcm9vdEFwcGxpZWRTdHlsZXMuZ2V0KHN0eWxlQ29udGFpbmVyTm9kZSk7XG4gICAgICAgICAgICBsZXQgc3R5bGVFbG07XG4gICAgICAgICAgICBpZiAoIWFwcGxpZWRTdHlsZXMpIHtcbiAgICAgICAgICAgICAgICByb290QXBwbGllZFN0eWxlcy5zZXQoc3R5bGVDb250YWluZXJOb2RlLCAoYXBwbGllZFN0eWxlcyA9IG5ldyBTZXQoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhcHBsaWVkU3R5bGVzLmhhcyhzY29wZUlkKSkge1xuICAgICAgICAgICAgICAgIGlmIChCVUlMRC5oeWRyYXRlQ2xpZW50U2lkZSAmJlxuICAgICAgICAgICAgICAgICAgICBzdHlsZUNvbnRhaW5lck5vZGUuaG9zdCAmJlxuICAgICAgICAgICAgICAgICAgICAoc3R5bGVFbG0gPSBzdHlsZUNvbnRhaW5lck5vZGUucXVlcnlTZWxlY3RvcihgWyR7SFlEUkFURURfU1RZTEVfSUR9PVwiJHtzY29wZUlkfVwiXWApKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIG9ubHkgaGFwcGVuaW5nIG9uIG5hdGl2ZSBzaGFkb3ctZG9tLCBkbyBub3QgbmVlZHMgQ1NTIHZhciBzaGltXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlRWxtLmlubmVySFRNTCA9IHN0eWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJVSUxELmNzc1ZhclNoaW0gJiYgcGx0LiRjc3NTaGltJCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVFbG0gPSBwbHQuJGNzc1NoaW0kLmNyZWF0ZUhvc3RTdHlsZShob3N0RWxtLCBzY29wZUlkLCBzdHlsZSwgISEoY21wTWV0YS4kZmxhZ3MkICYgMTAgLyogQ01QX0ZMQUdTLm5lZWRzU2NvcGVkRW5jYXBzdWxhdGlvbiAqLykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U2NvcGVJZCA9IHN0eWxlRWxtWydzLXNjJ107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3U2NvcGVJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlSWQgPSBuZXdTY29wZUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gYWRkIHRoaXMgc3R5bGVJRCB0byB0aGUgYXBwbGllZFN0eWxlcyBTZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgY3NzVmFyU2hpbSBtaWdodCBuZWVkIHRvIGFwcGx5IHNldmVyYWwgZGlmZmVyZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3R5bGVzaGVldHMgZm9yIHRoZSBzYW1lIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpZWRTdHlsZXMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVFbG0gPSBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlRWxtLmlubmVySFRNTCA9IHN0eWxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChCVUlMRC5oeWRyYXRlU2VydmVyU2lkZSB8fCBCVUlMRC5ob3RNb2R1bGVSZXBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVFbG0uc2V0QXR0cmlidXRlKEhZRFJBVEVEX1NUWUxFX0lELCBzY29wZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdHlsZUNvbnRhaW5lck5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlRWxtLCBzdHlsZUNvbnRhaW5lck5vZGUucXVlcnlTZWxlY3RvcignbGluaycpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFwcGxpZWRTdHlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbGllZFN0eWxlcy5hZGQoc2NvcGVJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEJVSUxELmNvbnN0cnVjdGFibGVDU1MgJiYgIXN0eWxlQ29udGFpbmVyTm9kZS5hZG9wdGVkU3R5bGVTaGVldHMuaW5jbHVkZXMoc3R5bGUpKSB7XG4gICAgICAgICAgICBzdHlsZUNvbnRhaW5lck5vZGUuYWRvcHRlZFN0eWxlU2hlZXRzID0gWy4uLnN0eWxlQ29udGFpbmVyTm9kZS5hZG9wdGVkU3R5bGVTaGVldHMsIHN0eWxlXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2NvcGVJZDtcbn07XG5jb25zdCBhdHRhY2hTdHlsZXMgPSAoaG9zdFJlZikgPT4ge1xuICAgIGNvbnN0IGNtcE1ldGEgPSBob3N0UmVmLiRjbXBNZXRhJDtcbiAgICBjb25zdCBlbG0gPSBob3N0UmVmLiRob3N0RWxlbWVudCQ7XG4gICAgY29uc3QgZmxhZ3MgPSBjbXBNZXRhLiRmbGFncyQ7XG4gICAgY29uc3QgZW5kQXR0YWNoU3R5bGVzID0gY3JlYXRlVGltZSgnYXR0YWNoU3R5bGVzJywgY21wTWV0YS4kdGFnTmFtZSQpO1xuICAgIGNvbnN0IHNjb3BlSWQgPSBhZGRTdHlsZShCVUlMRC5zaGFkb3dEb20gJiYgc3VwcG9ydHNTaGFkb3cgJiYgZWxtLnNoYWRvd1Jvb3QgPyBlbG0uc2hhZG93Um9vdCA6IGVsbS5nZXRSb290Tm9kZSgpLCBjbXBNZXRhLCBob3N0UmVmLiRtb2RlTmFtZSQsIGVsbSk7XG4gICAgaWYgKChCVUlMRC5zaGFkb3dEb20gfHwgQlVJTEQuc2NvcGVkKSAmJiBCVUlMRC5jc3NBbm5vdGF0aW9ucyAmJiBmbGFncyAmIDEwIC8qIENNUF9GTEFHUy5uZWVkc1Njb3BlZEVuY2Fwc3VsYXRpb24gKi8pIHtcbiAgICAgICAgLy8gb25seSByZXF1aXJlZCB3aGVuIHdlJ3JlIE5PVCB1c2luZyBuYXRpdmUgc2hhZG93IGRvbSAoc2xvdClcbiAgICAgICAgLy8gb3IgdGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBuYXRpdmUgc2hhZG93IGRvbVxuICAgICAgICAvLyBhbmQgdGhpcyBob3N0IGVsZW1lbnQgd2FzIE5PVCBjcmVhdGVkIHdpdGggU1NSXG4gICAgICAgIC8vIGxldCdzIHBpY2sgb3V0IHRoZSBpbm5lciBjb250ZW50IGZvciBzbG90IHByb2plY3Rpb25cbiAgICAgICAgLy8gY3JlYXRlIGEgbm9kZSB0byByZXByZXNlbnQgd2hlcmUgdGhlIG9yaWdpbmFsXG4gICAgICAgIC8vIGNvbnRlbnQgd2FzIGZpcnN0IHBsYWNlZCwgd2hpY2ggaXMgdXNlZnVsIGxhdGVyIG9uXG4gICAgICAgIC8vIERPTSBXUklURSEhXG4gICAgICAgIGVsbVsncy1zYyddID0gc2NvcGVJZDtcbiAgICAgICAgZWxtLmNsYXNzTGlzdC5hZGQoc2NvcGVJZCArICctaCcpO1xuICAgICAgICBpZiAoQlVJTEQuc2NvcGVkICYmIGZsYWdzICYgMiAvKiBDTVBfRkxBR1Muc2NvcGVkQ3NzRW5jYXBzdWxhdGlvbiAqLykge1xuICAgICAgICAgICAgZWxtLmNsYXNzTGlzdC5hZGQoc2NvcGVJZCArICctcycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVuZEF0dGFjaFN0eWxlcygpO1xufTtcbmNvbnN0IGdldFNjb3BlSWQgPSAoY21wLCBtb2RlKSA9PiAnc2MtJyArIChCVUlMRC5tb2RlICYmIG1vZGUgJiYgY21wLiRmbGFncyQgJiAzMiAvKiBDTVBfRkxBR1MuaGFzTW9kZSAqLyA/IGNtcC4kdGFnTmFtZSQgKyAnLScgKyBtb2RlIDogY21wLiR0YWdOYW1lJCk7XG5jb25zdCBjb252ZXJ0U2NvcGVkVG9TaGFkb3cgPSAoY3NzKSA9PiBjc3MucmVwbGFjZSgvXFwvXFwqIUAoW15cXC9dKylcXCpcXC9bXlxce10rXFx7L2csICckMXsnKTtcbi8qKlxuICogUHJvZHVjdGlvbiBzZXRBY2Nlc3NvcigpIGZ1bmN0aW9uIGJhc2VkIG9uIFByZWFjdCBieVxuICogSmFzb24gTWlsbGVyIChAZGV2ZWxvcGl0KVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGV2ZWxvcGl0L3ByZWFjdC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogTW9kaWZpZWQgZm9yIFN0ZW5jaWwncyBjb21waWxlciBhbmQgdmRvbVxuICovXG5jb25zdCBzZXRBY2Nlc3NvciA9IChlbG0sIG1lbWJlck5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSwgaXNTdmcsIGZsYWdzKSA9PiB7XG4gICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICBsZXQgaXNQcm9wID0gaXNNZW1iZXJJbkVsZW1lbnQoZWxtLCBtZW1iZXJOYW1lKTtcbiAgICAgICAgbGV0IGxuID0gbWVtYmVyTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoQlVJTEQudmRvbUNsYXNzICYmIG1lbWJlck5hbWUgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsYXNzTGlzdCA9IGVsbS5jbGFzc0xpc3Q7XG4gICAgICAgICAgICBjb25zdCBvbGRDbGFzc2VzID0gcGFyc2VDbGFzc0xpc3Qob2xkVmFsdWUpO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2xhc3NlcyA9IHBhcnNlQ2xhc3NMaXN0KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoLi4ub2xkQ2xhc3Nlcy5maWx0ZXIoKGMpID0+IGMgJiYgIW5ld0NsYXNzZXMuaW5jbHVkZXMoYykpKTtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoLi4ubmV3Q2xhc3Nlcy5maWx0ZXIoKGMpID0+IGMgJiYgIW9sZENsYXNzZXMuaW5jbHVkZXMoYykpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChCVUlMRC52ZG9tU3R5bGUgJiYgbWVtYmVyTmFtZSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHN0eWxlIGF0dHJpYnV0ZSwgY3NzIHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgICAgICAgICAgaWYgKEJVSUxELnVwZGF0YWJsZSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld1ZhbHVlIHx8IG5ld1ZhbHVlW3Byb3BdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQlVJTEQuaHlkcmF0ZVNlcnZlclNpZGUgJiYgcHJvcC5pbmNsdWRlcygnLScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxtLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxtLnN0eWxlW3Byb3BdID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9sZFZhbHVlIHx8IG5ld1ZhbHVlW3Byb3BdICE9PSBvbGRWYWx1ZVtwcm9wXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUJVSUxELmh5ZHJhdGVTZXJ2ZXJTaWRlICYmIHByb3AuaW5jbHVkZXMoJy0nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxtLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIG5ld1ZhbHVlW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsbS5zdHlsZVtwcm9wXSA9IG5ld1ZhbHVlW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEJVSUxELnZkb21LZXkgJiYgbWVtYmVyTmFtZSA9PT0gJ2tleScpXG4gICAgICAgICAgICA7XG4gICAgICAgIGVsc2UgaWYgKEJVSUxELnZkb21SZWYgJiYgbWVtYmVyTmFtZSA9PT0gJ3JlZicpIHtcbiAgICAgICAgICAgIC8vIG1pbmlmaWVyIHdpbGwgY2xlYW4gdGhpcyB1cFxuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUoZWxtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChCVUlMRC52ZG9tTGlzdGVuZXIgJiZcbiAgICAgICAgICAgIChCVUlMRC5sYXp5TG9hZCA/ICFpc1Byb3AgOiAhZWxtLl9fbG9va3VwU2V0dGVyX18obWVtYmVyTmFtZSkpICYmXG4gICAgICAgICAgICBtZW1iZXJOYW1lWzBdID09PSAnbycgJiZcbiAgICAgICAgICAgIG1lbWJlck5hbWVbMV0gPT09ICduJykge1xuICAgICAgICAgICAgLy8gRXZlbnQgSGFuZGxlcnNcbiAgICAgICAgICAgIC8vIHNvIGlmIHRoZSBtZW1iZXIgbmFtZSBzdGFydHMgd2l0aCBcIm9uXCIgYW5kIHRoZSAzcmQgY2hhcmFjdGVycyBpc1xuICAgICAgICAgICAgLy8gYSBjYXBpdGFsIGxldHRlciwgYW5kIGl0J3Mgbm90IGFscmVhZHkgYSBtZW1iZXIgb24gdGhlIGVsZW1lbnQsXG4gICAgICAgICAgICAvLyB0aGVuIHdlJ3JlIGFzc3VtaW5nIGl0J3MgYW4gZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgICAgIGlmIChtZW1iZXJOYW1lWzJdID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICAvLyBvbi0gcHJlZml4ZWQgZXZlbnRzXG4gICAgICAgICAgICAgICAgLy8gYWxsb3dzIHRvIGJlIGV4cGxpY2l0IGFib3V0IHRoZSBkb20gZXZlbnQgdG8gbGlzdGVuIHdpdGhvdXQgYW55IG1hZ2ljXG4gICAgICAgICAgICAgICAgLy8gdW5kZXIgdGhlIGhvb2Q6XG4gICAgICAgICAgICAgICAgLy8gPG15LWNtcCBvbi1jbGljaz4gLy8gbGlzdGVucyBmb3IgXCJjbGlja1wiXG4gICAgICAgICAgICAgICAgLy8gPG15LWNtcCBvbi1DbGljaz4gLy8gbGlzdGVucyBmb3IgXCJDbGlja1wiXG4gICAgICAgICAgICAgICAgLy8gPG15LWNtcCBvbi1pb25DaGFuZ2U+IC8vIGxpc3RlbnMgZm9yIFwiaW9uQ2hhbmdlXCJcbiAgICAgICAgICAgICAgICAvLyA8bXktY21wIG9uLUVWRU5UUz4gLy8gbGlzdGVucyBmb3IgXCJFVkVOVFNcIlxuICAgICAgICAgICAgICAgIG1lbWJlck5hbWUgPSBtZW1iZXJOYW1lLnNsaWNlKDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNNZW1iZXJJbkVsZW1lbnQod2luLCBsbikpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFuZGFyZCBldmVudFxuICAgICAgICAgICAgICAgIC8vIHRoZSBKU1ggYXR0cmlidXRlIGNvdWxkIGhhdmUgYmVlbiBcIm9uTW91c2VPdmVyXCIgYW5kIHRoZVxuICAgICAgICAgICAgICAgIC8vIG1lbWJlciBuYW1lIFwib25tb3VzZW92ZXJcIiBpcyBvbiB0aGUgd2luZG93J3MgcHJvdG90eXBlXG4gICAgICAgICAgICAgICAgLy8gc28gbGV0J3MgYWRkIHRoZSBsaXN0ZW5lciBcIm1vdXNlb3ZlclwiLCB3aGljaCBpcyBhbGwgbG93ZXJjYXNlZFxuICAgICAgICAgICAgICAgIG1lbWJlck5hbWUgPSBsbi5zbGljZSgyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGN1c3RvbSBldmVudFxuICAgICAgICAgICAgICAgIC8vIHRoZSBKU1ggYXR0cmlidXRlIGNvdWxkIGhhdmUgYmVlbiBcIm9uTXlDdXN0b21FdmVudFwiXG4gICAgICAgICAgICAgICAgLy8gc28gbGV0J3MgdHJpbSBvZmYgdGhlIFwib25cIiBwcmVmaXggYW5kIGxvd2VyY2FzZSB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gICAgICAgICAgICAgICAgLy8gYW5kIGFkZCB0aGUgbGlzdGVuZXIgXCJteUN1c3RvbUV2ZW50XCJcbiAgICAgICAgICAgICAgICAvLyBleGNlcHQgZm9yIHRoZSBmaXJzdCBjaGFyYWN0ZXIsIHdlIGtlZXAgdGhlIGV2ZW50IG5hbWUgY2FzZVxuICAgICAgICAgICAgICAgIG1lbWJlck5hbWUgPSBsblsyXSArIG1lbWJlck5hbWUuc2xpY2UoMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBwbHQucmVsKGVsbSwgbWVtYmVyTmFtZSwgb2xkVmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHBsdC5hZWwoZWxtLCBtZW1iZXJOYW1lLCBuZXdWYWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEJVSUxELnZkb21Qcm9wT3JBdHRyKSB7XG4gICAgICAgICAgICAvLyBTZXQgcHJvcGVydHkgaWYgaXQgZXhpc3RzIGFuZCBpdCdzIG5vdCBhIFNWR1xuICAgICAgICAgICAgY29uc3QgaXNDb21wbGV4ID0gaXNDb21wbGV4VHlwZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoKGlzUHJvcCB8fCAoaXNDb21wbGV4ICYmIG5ld1ZhbHVlICE9PSBudWxsKSkgJiYgIWlzU3ZnKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbG0udGFnTmFtZS5pbmNsdWRlcygnLScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3VmFsdWUgPT0gbnVsbCA/ICcnIDogbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBTYWZhcmksIG1vdmluZyB0aGUgPGlucHV0PiBjYXJldCB3aGVuIHJlLWFzc2lnbmluZyB0aGUgc2FtZSB2YWx1ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZW1iZXJOYW1lID09PSAnbGlzdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Byb3AgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9sZFZhbHVlID09IG51bGwgfHwgZWxtW21lbWJlck5hbWVdICE9IG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbG1bbWVtYmVyTmFtZV0gPSBuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxtW21lbWJlck5hbWVdID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOZWVkIHRvIG1hbnVhbGx5IHVwZGF0ZSBhdHRyaWJ1dGUgaWY6XG4gICAgICAgICAgICAgKiAtIG1lbWJlck5hbWUgaXMgbm90IGFuIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICogLSBpZiB3ZSBhcmUgcmVuZGVyaW5nIHRoZSBob3N0IGVsZW1lbnQgaW4gb3JkZXIgdG8gcmVmbGVjdCBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAqIC0gaWYgaXQncyBhIFNWRywgc2luY2UgcHJvcGVydGllcyBtaWdodCBub3Qgd29yayBpbiA8c3ZnPlxuICAgICAgICAgICAgICogLSBpZiB0aGUgbmV3VmFsdWUgaXMgbnVsbC91bmRlZmluZWQgb3IgJ2ZhbHNlJy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IHhsaW5rID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoQlVJTEQudmRvbVhsaW5rKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxuICE9PSAobG4gPSBsbi5yZXBsYWNlKC9eeGxpbmtcXDo/LywgJycpKSkge1xuICAgICAgICAgICAgICAgICAgICBtZW1iZXJOYW1lID0gbG47XG4gICAgICAgICAgICAgICAgICAgIHhsaW5rID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgPT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IGZhbHNlIHx8IGVsbS5nZXRBdHRyaWJ1dGUobWVtYmVyTmFtZSkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChCVUlMRC52ZG9tWGxpbmsgJiYgeGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyhYTElOS19OUywgbWVtYmVyTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKG1lbWJlck5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKCFpc1Byb3AgfHwgZmxhZ3MgJiA0IC8qIFZOT0RFX0ZMQUdTLmlzSG9zdCAqLyB8fCBpc1N2ZykgJiYgIWlzQ29tcGxleCkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gbmV3VmFsdWUgPT09IHRydWUgPyAnJyA6IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChCVUlMRC52ZG9tWGxpbmsgJiYgeGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgZWxtLnNldEF0dHJpYnV0ZU5TKFhMSU5LX05TLCBtZW1iZXJOYW1lLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbG0uc2V0QXR0cmlidXRlKG1lbWJlck5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgcGFyc2VDbGFzc0xpc3RSZWdleCA9IC9cXHMvO1xuY29uc3QgcGFyc2VDbGFzc0xpc3QgPSAodmFsdWUpID0+ICghdmFsdWUgPyBbXSA6IHZhbHVlLnNwbGl0KHBhcnNlQ2xhc3NMaXN0UmVnZXgpKTtcbmNvbnN0IHVwZGF0ZUVsZW1lbnQgPSAob2xkVm5vZGUsIG5ld1Zub2RlLCBpc1N2Z01vZGUsIG1lbWJlck5hbWUpID0+IHtcbiAgICAvLyBpZiB0aGUgZWxlbWVudCBwYXNzZWQgaW4gaXMgYSBzaGFkb3cgcm9vdCwgd2hpY2ggaXMgYSBkb2N1bWVudCBmcmFnbWVudFxuICAgIC8vIHRoZW4gd2Ugd2FudCB0byBiZSBhZGRpbmcgYXR0cnMvcHJvcHMgdG8gdGhlIHNoYWRvdyByb290J3MgXCJob3N0XCIgZWxlbWVudFxuICAgIC8vIGlmIGl0J3Mgbm90IGEgc2hhZG93IHJvb3QsIHRoZW4gd2UgYWRkIGF0dHJzL3Byb3BzIHRvIHRoZSBzYW1lIGVsZW1lbnRcbiAgICBjb25zdCBlbG0gPSBuZXdWbm9kZS4kZWxtJC5ub2RlVHlwZSA9PT0gMTEgLyogTk9ERV9UWVBFLkRvY3VtZW50RnJhZ21lbnQgKi8gJiYgbmV3Vm5vZGUuJGVsbSQuaG9zdFxuICAgICAgICA/IG5ld1Zub2RlLiRlbG0kLmhvc3RcbiAgICAgICAgOiBuZXdWbm9kZS4kZWxtJDtcbiAgICBjb25zdCBvbGRWbm9kZUF0dHJzID0gKG9sZFZub2RlICYmIG9sZFZub2RlLiRhdHRycyQpIHx8IEVNUFRZX09CSjtcbiAgICBjb25zdCBuZXdWbm9kZUF0dHJzID0gbmV3Vm5vZGUuJGF0dHJzJCB8fCBFTVBUWV9PQko7XG4gICAgaWYgKEJVSUxELnVwZGF0YWJsZSkge1xuICAgICAgICAvLyByZW1vdmUgYXR0cmlidXRlcyBubyBsb25nZXIgcHJlc2VudCBvbiB0aGUgdm5vZGUgYnkgc2V0dGluZyB0aGVtIHRvIHVuZGVmaW5lZFxuICAgICAgICBmb3IgKG1lbWJlck5hbWUgaW4gb2xkVm5vZGVBdHRycykge1xuICAgICAgICAgICAgaWYgKCEobWVtYmVyTmFtZSBpbiBuZXdWbm9kZUF0dHJzKSkge1xuICAgICAgICAgICAgICAgIHNldEFjY2Vzc29yKGVsbSwgbWVtYmVyTmFtZSwgb2xkVm5vZGVBdHRyc1ttZW1iZXJOYW1lXSwgdW5kZWZpbmVkLCBpc1N2Z01vZGUsIG5ld1Zub2RlLiRmbGFncyQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGFkZCBuZXcgJiB1cGRhdGUgY2hhbmdlZCBhdHRyaWJ1dGVzXG4gICAgZm9yIChtZW1iZXJOYW1lIGluIG5ld1Zub2RlQXR0cnMpIHtcbiAgICAgICAgc2V0QWNjZXNzb3IoZWxtLCBtZW1iZXJOYW1lLCBvbGRWbm9kZUF0dHJzW21lbWJlck5hbWVdLCBuZXdWbm9kZUF0dHJzW21lbWJlck5hbWVdLCBpc1N2Z01vZGUsIG5ld1Zub2RlLiRmbGFncyQpO1xuICAgIH1cbn07XG4vKipcbiAqIENyZWF0ZSBhIERPTSBOb2RlIGNvcnJlc3BvbmRpbmcgdG8gb25lIG9mIHRoZSBjaGlsZHJlbiBvZiBhIGdpdmVuIFZOb2RlLlxuICpcbiAqIEBwYXJhbSBvbGRQYXJlbnRWTm9kZSB0aGUgcGFyZW50IFZOb2RlIGZyb20gdGhlIHByZXZpb3VzIHJlbmRlclxuICogQHBhcmFtIG5ld1BhcmVudFZOb2RlIHRoZSBwYXJlbnQgVk5vZGUgZnJvbSB0aGUgY3VycmVudCByZW5kZXJcbiAqIEBwYXJhbSBjaGlsZEluZGV4IHRoZSBpbmRleCBvZiB0aGUgVk5vZGUsIGluIHRoZSBfbmV3XyBwYXJlbnQgbm9kZSdzXG4gKiBjaGlsZHJlbiwgZm9yIHdoaWNoIHdlIHdpbGwgY3JlYXRlIGEgbmV3IERPTSBub2RlXG4gKiBAcGFyYW0gcGFyZW50RWxtIHRoZSBwYXJlbnQgRE9NIG5vZGUgd2hpY2ggb3VyIG5ldyBub2RlIHdpbGwgYmUgYSBjaGlsZCBvZlxuICogQHJldHVybnMgdGhlIG5ld2x5IGNyZWF0ZWQgbm9kZVxuICovXG5jb25zdCBjcmVhdGVFbG0gPSAob2xkUGFyZW50Vk5vZGUsIG5ld1BhcmVudFZOb2RlLCBjaGlsZEluZGV4LCBwYXJlbnRFbG0pID0+IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHByZWZlci1jb25zdFxuICAgIGNvbnN0IG5ld1ZOb2RlID0gbmV3UGFyZW50Vk5vZGUuJGNoaWxkcmVuJFtjaGlsZEluZGV4XTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGVsbTtcbiAgICBsZXQgY2hpbGROb2RlO1xuICAgIGxldCBvbGRWTm9kZTtcbiAgICBpZiAoQlVJTEQuc2xvdFJlbG9jYXRpb24gJiYgIXVzZU5hdGl2ZVNoYWRvd0RvbSkge1xuICAgICAgICAvLyByZW1lbWJlciBmb3IgbGF0ZXIgd2UgbmVlZCB0byBjaGVjayB0byByZWxvY2F0ZSBub2Rlc1xuICAgICAgICBjaGVja1Nsb3RSZWxvY2F0ZSA9IHRydWU7XG4gICAgICAgIGlmIChuZXdWTm9kZS4kdGFnJCA9PT0gJ3Nsb3QnKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVJZCkge1xuICAgICAgICAgICAgICAgIC8vIHNjb3BlZCBjc3MgbmVlZHMgdG8gYWRkIGl0cyBzY29wZWQgaWQgdG8gdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICAgICAgICAgICAgcGFyZW50RWxtLmNsYXNzTGlzdC5hZGQoc2NvcGVJZCArICctcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Vk5vZGUuJGZsYWdzJCB8PSBuZXdWTm9kZS4kY2hpbGRyZW4kXG4gICAgICAgICAgICAgICAgPyAvLyBzbG90IGVsZW1lbnQgaGFzIGZhbGxiYWNrIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgMiAvKiBWTk9ERV9GTEFHUy5pc1Nsb3RGYWxsYmFjayAqL1xuICAgICAgICAgICAgICAgIDogLy8gc2xvdCBlbGVtZW50IGRvZXMgbm90IGhhdmUgZmFsbGJhY2sgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAxIC8qIFZOT0RFX0ZMQUdTLmlzU2xvdFJlZmVyZW5jZSAqLztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoQlVJTEQuaXNEZXYgJiYgbmV3Vk5vZGUuJGVsbSQpIHtcbiAgICAgICAgY29uc29sZURldkVycm9yKGBUaGUgSlNYICR7bmV3Vk5vZGUuJHRleHQkICE9PSBudWxsID8gYFwiJHtuZXdWTm9kZS4kdGV4dCR9XCIgdGV4dGAgOiBgXCIke25ld1ZOb2RlLiR0YWckfVwiIGVsZW1lbnRgfSBub2RlIHNob3VsZCBub3QgYmUgc2hhcmVkIHdpdGhpbiB0aGUgc2FtZSByZW5kZXJlci4gVGhlIHJlbmRlcmVyIGNhY2hlcyBlbGVtZW50IGxvb2t1cHMgaW4gb3JkZXIgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS4gSG93ZXZlciwgYSBzaWRlIGVmZmVjdCBmcm9tIHRoaXMgaXMgdGhhdCB0aGUgZXhhY3Qgc2FtZSBKU1ggbm9kZSBzaG91bGQgbm90IGJlIHJldXNlZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gcGxlYXNlIHNlZSBodHRwczovL3N0ZW5jaWxqcy5jb20vZG9jcy90ZW1wbGF0aW5nLWpzeCNhdm9pZC1zaGFyZWQtanN4LW5vZGVzYCk7XG4gICAgfVxuICAgIGlmIChCVUlMRC52ZG9tVGV4dCAmJiBuZXdWTm9kZS4kdGV4dCQgIT09IG51bGwpIHtcbiAgICAgICAgLy8gY3JlYXRlIHRleHQgbm9kZVxuICAgICAgICBlbG0gPSBuZXdWTm9kZS4kZWxtJCA9IGRvYy5jcmVhdGVUZXh0Tm9kZShuZXdWTm9kZS4kdGV4dCQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChCVUlMRC5zbG90UmVsb2NhdGlvbiAmJiBuZXdWTm9kZS4kZmxhZ3MkICYgMSAvKiBWTk9ERV9GTEFHUy5pc1Nsb3RSZWZlcmVuY2UgKi8pIHtcbiAgICAgICAgLy8gY3JlYXRlIGEgc2xvdCByZWZlcmVuY2Ugbm9kZVxuICAgICAgICBlbG0gPSBuZXdWTm9kZS4kZWxtJCA9XG4gICAgICAgICAgICBCVUlMRC5pc0RlYnVnIHx8IEJVSUxELmh5ZHJhdGVTZXJ2ZXJTaWRlID8gc2xvdFJlZmVyZW5jZURlYnVnTm9kZShuZXdWTm9kZSkgOiBkb2MuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKEJVSUxELnN2ZyAmJiAhaXNTdmdNb2RlKSB7XG4gICAgICAgICAgICBpc1N2Z01vZGUgPSBuZXdWTm9kZS4kdGFnJCA9PT0gJ3N2Zyc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY3JlYXRlIGVsZW1lbnRcbiAgICAgICAgZWxtID0gbmV3Vk5vZGUuJGVsbSQgPSAoQlVJTEQuc3ZnXG4gICAgICAgICAgICA/IGRvYy5jcmVhdGVFbGVtZW50TlMoaXNTdmdNb2RlID8gU1ZHX05TIDogSFRNTF9OUywgQlVJTEQuc2xvdFJlbG9jYXRpb24gJiYgbmV3Vk5vZGUuJGZsYWdzJCAmIDIgLyogVk5PREVfRkxBR1MuaXNTbG90RmFsbGJhY2sgKi9cbiAgICAgICAgICAgICAgICA/ICdzbG90LWZiJ1xuICAgICAgICAgICAgICAgIDogbmV3Vk5vZGUuJHRhZyQpXG4gICAgICAgICAgICA6IGRvYy5jcmVhdGVFbGVtZW50KEJVSUxELnNsb3RSZWxvY2F0aW9uICYmIG5ld1ZOb2RlLiRmbGFncyQgJiAyIC8qIFZOT0RFX0ZMQUdTLmlzU2xvdEZhbGxiYWNrICovXG4gICAgICAgICAgICAgICAgPyAnc2xvdC1mYidcbiAgICAgICAgICAgICAgICA6IG5ld1ZOb2RlLiR0YWckKSk7XG4gICAgICAgIGlmIChCVUlMRC5zdmcgJiYgaXNTdmdNb2RlICYmIG5ld1ZOb2RlLiR0YWckID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAgICAgICAgIGlzU3ZnTW9kZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCBjc3MgY2xhc3NlcywgYXR0cnMsIHByb3BzLCBsaXN0ZW5lcnMsIGV0Yy5cbiAgICAgICAgaWYgKEJVSUxELnZkb21BdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnQobnVsbCwgbmV3Vk5vZGUsIGlzU3ZnTW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChCVUlMRC5zaGFkb3dEb20gfHwgQlVJTEQuc2NvcGVkKSAmJiBpc0RlZihzY29wZUlkKSAmJiBlbG1bJ3Mtc2knXSAhPT0gc2NvcGVJZCkge1xuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBzY29wZUlkIGFuZCB0aGlzIGlzIHRoZSBpbml0aWFsIHJlbmRlclxuICAgICAgICAgICAgLy8gdGhlbiBsZXQncyBhZGQgdGhlIHNjb3BlSWQgYXMgYSBjc3MgY2xhc3NcbiAgICAgICAgICAgIGVsbS5jbGFzc0xpc3QuYWRkKChlbG1bJ3Mtc2knXSA9IHNjb3BlSWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3Vk5vZGUuJGNoaWxkcmVuJCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5ld1ZOb2RlLiRjaGlsZHJlbiQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGhlIG5vZGVcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjcmVhdGVFbG0ob2xkUGFyZW50Vk5vZGUsIG5ld1ZOb2RlLCBpLCBlbG0pO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiBub2RlIGNvdWxkIGhhdmUgYmVlbiBudWxsXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhcHBlbmQgb3VyIG5ldyBub2RlXG4gICAgICAgICAgICAgICAgICAgIGVsbS5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoQlVJTEQuc3ZnKSB7XG4gICAgICAgICAgICBpZiAobmV3Vk5vZGUuJHRhZyQgPT09ICdzdmcnKSB7XG4gICAgICAgICAgICAgICAgLy8gT25seSByZXNldCB0aGUgU1ZHIGNvbnRleHQgd2hlbiB3ZSdyZSBleGl0aW5nIDxzdmc+IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBpc1N2Z01vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVsbS50YWdOYW1lID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAvLyBSZWVudGVyIFNWRyBjb250ZXh0IHdoZW4gd2UncmUgZXhpdGluZyA8Zm9yZWlnbk9iamVjdD4gZWxlbWVudFxuICAgICAgICAgICAgICAgIGlzU3ZnTW9kZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKEJVSUxELnNsb3RSZWxvY2F0aW9uKSB7XG4gICAgICAgIGVsbVsncy1obiddID0gaG9zdFRhZ05hbWU7XG4gICAgICAgIGlmIChuZXdWTm9kZS4kZmxhZ3MkICYgKDIgLyogVk5PREVfRkxBR1MuaXNTbG90RmFsbGJhY2sgKi8gfCAxIC8qIFZOT0RFX0ZMQUdTLmlzU2xvdFJlZmVyZW5jZSAqLykpIHtcbiAgICAgICAgICAgIC8vIHJlbWVtYmVyIHRoZSBjb250ZW50IHJlZmVyZW5jZSBjb21tZW50XG4gICAgICAgICAgICBlbG1bJ3Mtc3InXSA9IHRydWU7XG4gICAgICAgICAgICAvLyByZW1lbWJlciB0aGUgY29udGVudCByZWZlcmVuY2UgY29tbWVudFxuICAgICAgICAgICAgZWxtWydzLWNyJ10gPSBjb250ZW50UmVmO1xuICAgICAgICAgICAgLy8gcmVtZW1iZXIgdGhlIHNsb3QgbmFtZSwgb3IgZW1wdHkgc3RyaW5nIGZvciBkZWZhdWx0IHNsb3RcbiAgICAgICAgICAgIGVsbVsncy1zbiddID0gbmV3Vk5vZGUuJG5hbWUkIHx8ICcnO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UndmUgZ290IGFuIG9sZCB2bm9kZSBmb3IgdGhpcyBzbG90XG4gICAgICAgICAgICBvbGRWTm9kZSA9IG9sZFBhcmVudFZOb2RlICYmIG9sZFBhcmVudFZOb2RlLiRjaGlsZHJlbiQgJiYgb2xkUGFyZW50Vk5vZGUuJGNoaWxkcmVuJFtjaGlsZEluZGV4XTtcbiAgICAgICAgICAgIGlmIChvbGRWTm9kZSAmJiBvbGRWTm9kZS4kdGFnJCA9PT0gbmV3Vk5vZGUuJHRhZyQgJiYgb2xkUGFyZW50Vk5vZGUuJGVsbSQpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSd2ZSBnb3QgYW4gb2xkIHNsb3Qgdm5vZGUgYW5kIHRoZSB3cmFwcGVyIGlzIGJlaW5nIHJlcGxhY2VkXG4gICAgICAgICAgICAgICAgLy8gc28gbGV0J3MgbW92ZSB0aGUgb2xkIHNsb3QgY29udGVudCBiYWNrIHRvIGl0J3Mgb3JpZ2luYWwgbG9jYXRpb25cbiAgICAgICAgICAgICAgICBwdXRCYWNrSW5PcmlnaW5hbExvY2F0aW9uKG9sZFBhcmVudFZOb2RlLiRlbG0kLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsbTtcbn07XG5jb25zdCBwdXRCYWNrSW5PcmlnaW5hbExvY2F0aW9uID0gKHBhcmVudEVsbSwgcmVjdXJzaXZlKSA9PiB7XG4gICAgcGx0LiRmbGFncyQgfD0gMSAvKiBQTEFURk9STV9GTEFHUy5pc1RtcERpc2Nvbm5lY3RlZCAqLztcbiAgICBjb25zdCBvbGRTbG90Q2hpbGROb2RlcyA9IHBhcmVudEVsbS5jaGlsZE5vZGVzO1xuICAgIGZvciAobGV0IGkgPSBvbGRTbG90Q2hpbGROb2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBvbGRTbG90Q2hpbGROb2Rlc1tpXTtcbiAgICAgICAgaWYgKGNoaWxkTm9kZVsncy1obiddICE9PSBob3N0VGFnTmFtZSAmJiBjaGlsZE5vZGVbJ3Mtb2wnXSkge1xuICAgICAgICAgICAgLy8gLy8gdGhpcyBjaGlsZCBub2RlIGluIHRoZSBvbGQgZWxlbWVudCBpcyBmcm9tIGFub3RoZXIgY29tcG9uZW50XG4gICAgICAgICAgICAvLyAvLyByZW1vdmUgdGhpcyBub2RlIGZyb20gdGhlIG9sZCBzbG90J3MgcGFyZW50XG4gICAgICAgICAgICAvLyBjaGlsZE5vZGUucmVtb3ZlKCk7XG4gICAgICAgICAgICAvLyBhbmQgcmVsb2NhdGUgaXQgYmFjayB0byBpdCdzIG9yaWdpbmFsIGxvY2F0aW9uXG4gICAgICAgICAgICBwYXJlbnRSZWZlcmVuY2VOb2RlKGNoaWxkTm9kZSkuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZShjaGlsZE5vZGUpKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgb2xkIG9yaWdpbmFsIGxvY2F0aW9uIGNvbW1lbnQgZW50aXJlbHlcbiAgICAgICAgICAgIC8vIGxhdGVyIG9uIHRoZSBwYXRjaCBmdW5jdGlvbiB3aWxsIGtub3cgd2hhdCB0byBkb1xuICAgICAgICAgICAgLy8gYW5kIG1vdmUgdGhpcyB0byB0aGUgY29ycmVjdCBzcG90IGluIG5lZWQgYmVcbiAgICAgICAgICAgIGNoaWxkTm9kZVsncy1vbCddLnJlbW92ZSgpO1xuICAgICAgICAgICAgY2hpbGROb2RlWydzLW9sJ10gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjaGVja1Nsb3RSZWxvY2F0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgcHV0QmFja0luT3JpZ2luYWxMb2NhdGlvbihjaGlsZE5vZGUsIHJlY3Vyc2l2ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGx0LiRmbGFncyQgJj0gfjEgLyogUExBVEZPUk1fRkxBR1MuaXNUbXBEaXNjb25uZWN0ZWQgKi87XG59O1xuY29uc3QgYWRkVm5vZGVzID0gKHBhcmVudEVsbSwgYmVmb3JlLCBwYXJlbnRWTm9kZSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSA9PiB7XG4gICAgbGV0IGNvbnRhaW5lckVsbSA9ICgoQlVJTEQuc2xvdFJlbG9jYXRpb24gJiYgcGFyZW50RWxtWydzLWNyJ10gJiYgcGFyZW50RWxtWydzLWNyJ10ucGFyZW50Tm9kZSkgfHwgcGFyZW50RWxtKTtcbiAgICBsZXQgY2hpbGROb2RlO1xuICAgIGlmIChCVUlMRC5zaGFkb3dEb20gJiYgY29udGFpbmVyRWxtLnNoYWRvd1Jvb3QgJiYgY29udGFpbmVyRWxtLnRhZ05hbWUgPT09IGhvc3RUYWdOYW1lKSB7XG4gICAgICAgIGNvbnRhaW5lckVsbSA9IGNvbnRhaW5lckVsbS5zaGFkb3dSb290O1xuICAgIH1cbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICAgIGlmICh2bm9kZXNbc3RhcnRJZHhdKSB7XG4gICAgICAgICAgICBjaGlsZE5vZGUgPSBjcmVhdGVFbG0obnVsbCwgcGFyZW50Vk5vZGUsIHN0YXJ0SWR4LCBwYXJlbnRFbG0pO1xuICAgICAgICAgICAgaWYgKGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgICAgIHZub2Rlc1tzdGFydElkeF0uJGVsbSQgPSBjaGlsZE5vZGU7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyRWxtLmluc2VydEJlZm9yZShjaGlsZE5vZGUsIEJVSUxELnNsb3RSZWxvY2F0aW9uID8gcmVmZXJlbmNlTm9kZShiZWZvcmUpIDogYmVmb3JlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCByZW1vdmVWbm9kZXMgPSAodm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCB2bm9kZSwgZWxtKSA9PiB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgICBpZiAoKHZub2RlID0gdm5vZGVzW3N0YXJ0SWR4XSkpIHtcbiAgICAgICAgICAgIGVsbSA9IHZub2RlLiRlbG0kO1xuICAgICAgICAgICAgY2FsbE5vZGVSZWZzKHZub2RlKTtcbiAgICAgICAgICAgIGlmIChCVUlMRC5zbG90UmVsb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIHdlJ3JlIHJlbW92aW5nIHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgICAgIC8vIHNvIGl0J3MgcG9zc2libGUgd2UgbmVlZCB0byBzaG93IHNsb3QgZmFsbGJhY2sgY29udGVudCBub3dcbiAgICAgICAgICAgICAgICBjaGVja1Nsb3RGYWxsYmFja1Zpc2liaWxpdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChlbG1bJ3Mtb2wnXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIG9yaWdpbmFsIGxvY2F0aW9uIGNvbW1lbnRcbiAgICAgICAgICAgICAgICAgICAgZWxtWydzLW9sJ10ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgY2hpbGQgbm9kZXMgb2YgdGhlIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCdzIGJlaW5nIHJlbW92ZWQgYXJlIHNsb3Qgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgcHV0QmFja0luT3JpZ2luYWxMb2NhdGlvbihlbG0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgdm5vZGUncyBlbGVtZW50IGZyb20gdGhlIGRvbVxuICAgICAgICAgICAgZWxtLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxufTtcbi8qKlxuICogUmVjb25jaWxlIHRoZSBjaGlsZHJlbiBvZiBhIG5ldyBWTm9kZSB3aXRoIHRoZSBjaGlsZHJlbiBvZiBhbiBvbGQgVk5vZGUgYnlcbiAqIHRyYXZlcnNpbmcgdGhlIHR3byBjb2xsZWN0aW9ucyBvZiBjaGlsZHJlbiwgaWRlbnRpZnlpbmcgbm9kZXMgdGhhdCBhcmVcbiAqIGNvbnNlcnZlZCBvciBjaGFuZ2VkLCBjYWxsaW5nIG91dCB0byBgcGF0Y2hgIHRvIG1ha2UgYW55IG5lY2Vzc2FyeVxuICogdXBkYXRlcyB0byB0aGUgRE9NLCBhbmQgcmVhcnJhbmdpbmcgRE9NIG5vZGVzIGFzIG5lZWRlZC5cbiAqXG4gKiBUaGUgYWxnb3JpdGhtIGZvciByZWNvbmNpbGluZyBjaGlsZHJlbiB3b3JrcyBieSBhbmFseXppbmcgdHdvICd3aW5kb3dzJyBvbnRvXG4gKiB0aGUgdHdvIGFycmF5cyBvZiBjaGlsZHJlbiAoYG9sZENoYCBhbmQgYG5ld0NoYCkuIFdlIGtlZXAgdHJhY2sgb2YgdGhlXG4gKiAnd2luZG93cycgYnkgc3RvcmluZyBzdGFydCBhbmQgZW5kIGluZGljZXMgYW5kIHJlZmVyZW5jZXMgdG8gdGhlXG4gKiBjb3JyZXNwb25kaW5nIGFycmF5IGVudHJpZXMuIEluaXRpYWxseSB0aGUgdHdvICd3aW5kb3dzJyBhcmUgYmFzaWNhbGx5IGVxdWFsXG4gKiB0byB0aGUgZW50aXJlIGFycmF5LCBidXQgd2UgcHJvZ3Jlc3NpdmVseSBuYXJyb3cgdGhlIHdpbmRvd3MgdW50aWwgdGhlcmUgYXJlXG4gKiBubyBjaGlsZHJlbiBsZWZ0IHRvIHVwZGF0ZSBieSBkb2luZyB0aGUgZm9sbG93aW5nOlxuICpcbiAqIDEuIFNraXAgYW55IGBudWxsYCBlbnRyaWVzIGF0IHRoZSBiZWdpbm5pbmcgb3IgZW5kIG9mIHRoZSB0d28gYXJyYXlzLCBzb1xuICogICAgdGhhdCBpZiB3ZSBoYXZlIGFuIGluaXRpYWwgYXJyYXkgbGlrZSB0aGUgZm9sbG93aW5nIHdlJ2xsIGVuZCB1cCBkZWFsaW5nXG4gKiAgICBvbmx5IHdpdGggYSB3aW5kb3cgYm91bmRlZCBieSB0aGUgaGlnaGxpZ2h0ZWQgZWxlbWVudHM6XG4gKlxuICogICAgW251bGwsIG51bGwsIFZOb2RlMSAsIC4uLiAsIFZOb2RlMiwgbnVsbCwgbnVsbF1cbiAqICAgICAgICAgICAgICAgICBeXl5eXl4gICAgICAgICBeXl5eXl5cbiAqXG4gKiAyLiBDaGVjayB0byBzZWUgaWYgdGhlIGVsZW1lbnRzIGF0IHRoZSBoZWFkIGFuZCB0YWlsIHBvc2l0aW9ucyBhcmUgZXF1YWxcbiAqICAgIGFjcm9zcyB0aGUgd2luZG93cy4gVGhpcyB3aWxsIGJhc2ljYWxseSBkZXRlY3QgZWxlbWVudHMgd2hpY2ggaGF2ZW4ndFxuICogICAgYmVlbiBhZGRlZCwgcmVtb3ZlZCwgb3IgY2hhbmdlZCBwb3NpdGlvbiwgaS5lLiBpZiB5b3UgaGFkIHRoZSBmb2xsb3dpbmdcbiAqICAgIFZOb2RlIGVsZW1lbnRzIChyZXByZXNlbnRlZCBhcyBIVE1MKTpcbiAqXG4gKiAgICBvbGRWTm9kZTogYDxkaXY+PHA+PHNwYW4+SEVZPC9zcGFuPjwvcD48L2Rpdj5gXG4gKiAgICBuZXdWTm9kZTogYDxkaXY+PHA+PHNwYW4+VEhFUkU8L3NwYW4+PC9wPjwvZGl2PmBcbiAqXG4gKiAgICBUaGVuIHdoZW4gY29tcGFyaW5nIHRoZSBjaGlsZHJlbiBvZiB0aGUgYDxkaXY+YCB0YWcgd2UgY2hlY2sgdGhlIGVxdWFsaXR5XG4gKiAgICBvZiB0aGUgVk5vZGVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGA8cD5gIHRhZ3MgYW5kLCBzaW5jZSB0aGV5IGFyZSB0aGVcbiAqICAgIHNhbWUgdGFnIGluIHRoZSBzYW1lIHBvc2l0aW9uLCB3ZSdkIGJlIGFibGUgdG8gYXZvaWQgY29tcGxldGVseVxuICogICAgcmUtcmVuZGVyaW5nIHRoZSBzdWJ0cmVlIHVuZGVyIHRoZW0gd2l0aCBhIG5ldyBET00gZWxlbWVudCBhbmQgd291bGQganVzdFxuICogICAgY2FsbCBvdXQgdG8gYHBhdGNoYCB0byBoYW5kbGUgcmVjb25jaWxpbmcgdGhlaXIgY2hpbGRyZW4gYW5kIHNvIG9uLlxuICpcbiAqIDMuIENoZWNrLCBmb3IgYm90aCB3aW5kb3dzLCB0byBzZWUgaWYgdGhlIGVsZW1lbnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGVcbiAqICAgIHdpbmRvdyBjb3JyZXNwb25kcyB0byB0aGUgZWxlbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBvdGhlciB3aW5kb3cuIFRoaXMgaXNcbiAqICAgIGEgaGV1cmlzdGljIHdoaWNoIHdpbGwgbGV0IHVzIGlkZW50aWZ5IF9zb21lXyBzaXR1YXRpb25zIGluIHdoaWNoXG4gKiAgICBlbGVtZW50cyBoYXZlIGNoYW5nZWQgcG9zaXRpb24sIGZvciBpbnN0YW5jZSBpdCBfc2hvdWxkXyBkZXRlY3QgdGhhdCB0aGVcbiAqICAgIGNoaWxkcmVuIG5vZGVzIHRoZW1zZWx2ZXMgaGF2ZSBub3QgY2hhbmdlZCBidXQgbWVyZWx5IG1vdmVkIGluIHRoZVxuICogICAgZm9sbG93aW5nIGV4YW1wbGU6XG4gKlxuICogICAgb2xkVk5vZGU6IGA8ZGl2PjxlbGVtZW50LW9uZSAvPjxlbGVtZW50LXR3byAvPjwvZGl2PmBcbiAqICAgIG5ld1ZOb2RlOiBgPGRpdj48ZWxlbWVudC10d28gLz48ZWxlbWVudC1vbmUgLz48L2Rpdj5gXG4gKlxuICogICAgSWYgd2UgZmluZCBjYXNlcyBsaWtlIHRoaXMgdGhlbiB3ZSBhbHNvIG5lZWQgdG8gbW92ZSB0aGUgY29uY3JldGUgRE9NXG4gKiAgICBlbGVtZW50cyBjb3JyZXNwb25kaW5nIHRvIHRoZSBtb3ZlZCBjaGlsZHJlbiB0byB3cml0ZSB0aGUgcmUtb3JkZXIgdG8gdGhlXG4gKiAgICBET00uXG4gKlxuICogNC4gRmluYWxseSwgaWYgVk5vZGVzIGhhdmUgdGhlIGBrZXlgIGF0dHJpYnV0ZSBzZXQgb24gdGhlbSB3ZSBjaGVjayBmb3IgYW55XG4gKiAgICBub2RlcyBpbiB0aGUgb2xkIGNoaWxkcmVuIHdoaWNoIGhhdmUgdGhlIHNhbWUga2V5IGFzIHRoZSBmaXJzdCBlbGVtZW50IGluXG4gKiAgICBvdXIgd2luZG93IG9uIHRoZSBuZXcgY2hpbGRyZW4uIElmIHdlIGZpbmQgc3VjaCBhIG5vZGUgd2UgaGFuZGxlIGNhbGxpbmdcbiAqICAgIG91dCB0byBgcGF0Y2hgLCBtb3ZpbmcgcmVsZXZhbnQgRE9NIG5vZGVzLCBhbmQgc28gb24sIGluIGFjY29yZGFuY2Ugd2l0aFxuICogICAgd2hhdCB3ZSBmaW5kLlxuICpcbiAqIEZpbmFsbHksIG9uY2Ugd2UndmUgbmFycm93ZWQgb3VyICd3aW5kb3dzJyB0byB0aGUgcG9pbnQgdGhhdCBlaXRoZXIgb2YgdGhlbVxuICogY29sbGFwc2UgKGkuZS4gdGhleSBoYXZlIGxlbmd0aCAwKSB3ZSB0aGVuIGhhbmRsZSBhbnkgcmVtYWluaW5nIFZOb2RlXG4gKiBpbnNlcnRpb24gb3IgZGVsZXRpb24gdGhhdCBuZWVkcyB0byBoYXBwZW4gdG8gZ2V0IGEgRE9NIHN0YXRlIHRoYXQgY29ycmVjdGx5XG4gKiByZWZsZWN0cyB0aGUgbmV3IGNoaWxkIFZOb2Rlcy4gSWYsIGZvciBpbnN0YW5jZSwgYWZ0ZXIgb3VyIHdpbmRvdyBvbiB0aGUgb2xkXG4gKiBjaGlsZHJlbiBoYXMgY29sbGFwc2VkIHdlIHN0aWxsIGhhdmUgbW9yZSBub2RlcyBvbiB0aGUgbmV3IGNoaWxkcmVuIHRoYXRcbiAqIHdlIGhhdmVuJ3QgZGVhbHQgd2l0aCB5ZXQgdGhlbiB3ZSBuZWVkIHRvIGFkZCB0aGVtLCBvciBpZiB0aGUgbmV3IGNoaWxkcmVuXG4gKiBjb2xsYXBzZSBidXQgd2Ugc3RpbGwgaGF2ZSB1bmhhbmRsZWQgX29sZF8gY2hpbGRyZW4gdGhlbiB3ZSBuZWVkIHRvIG1ha2VcbiAqIHN1cmUgdGhlIGNvcnJlc3BvbmRpbmcgRE9NIG5vZGVzIGFyZSByZW1vdmVkLlxuICpcbiAqIEBwYXJhbSBwYXJlbnRFbG0gdGhlIG5vZGUgaW50byB3aGljaCB0aGUgcGFyZW50IFZOb2RlIGlzIHJlbmRlcmVkXG4gKiBAcGFyYW0gb2xkQ2ggdGhlIG9sZCBjaGlsZHJlbiBvZiB0aGUgcGFyZW50IG5vZGVcbiAqIEBwYXJhbSBuZXdWTm9kZSB0aGUgbmV3IFZOb2RlIHdoaWNoIHdpbGwgcmVwbGFjZSB0aGUgcGFyZW50XG4gKiBAcGFyYW0gbmV3Q2ggdGhlIG5ldyBjaGlsZHJlbiBvZiB0aGUgcGFyZW50IG5vZGVcbiAqL1xuY29uc3QgdXBkYXRlQ2hpbGRyZW4gPSAocGFyZW50RWxtLCBvbGRDaCwgbmV3Vk5vZGUsIG5ld0NoKSA9PiB7XG4gICAgbGV0IG9sZFN0YXJ0SWR4ID0gMDtcbiAgICBsZXQgbmV3U3RhcnRJZHggPSAwO1xuICAgIGxldCBpZHhJbk9sZCA9IDA7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIGxldCBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgbGV0IG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICBsZXQgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICBsZXQgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIGxldCBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgbGV0IG5vZGU7XG4gICAgbGV0IGVsbVRvTW92ZTtcbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgICBpZiAob2xkU3RhcnRWbm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBWTm9kZSBtaWdodCBoYXZlIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9sZEVuZFZub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5ld1N0YXJ0Vm5vZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5ld0VuZFZub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGUgc3RhcnQgbm9kZXMgYXJlIHRoZSBzYW1lIHRoZW4gd2Ugc2hvdWxkIHBhdGNoIHRoZSBuZXcgVk5vZGVcbiAgICAgICAgICAgIC8vIG9udG8gdGhlIG9sZCBvbmUsIGFuZCBpbmNyZW1lbnQgb3VyIGBuZXdTdGFydElkeGAgYW5kIGBvbGRTdGFydElkeGBcbiAgICAgICAgICAgIC8vIGluZGljZXMgdG8gcmVmbGVjdCB0aGF0LiBXZSBkb24ndCBuZWVkIHRvIG1vdmUgYW55IERPTSBOb2RlcyBhcm91bmRcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoaW5ncyBhcmUgbWF0Y2hlZCB1cCBpbiBvcmRlci5cbiAgICAgICAgICAgIHBhdGNoKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpO1xuICAgICAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgICAgIC8vIGxpa2V3aXNlLCBpZiB0aGUgZW5kIG5vZGVzIGFyZSB0aGUgc2FtZSB3ZSBwYXRjaCBuZXcgb250byBvbGQgYW5kXG4gICAgICAgICAgICAvLyBkZWNyZW1lbnQgb3VyIGVuZCBpbmRpY2VzLCBhbmQgYWxzbyBsaWtld2lzZSBpbiB0aGlzIGNhc2Ugd2UgZG9uJ3RcbiAgICAgICAgICAgIC8vIG5lZWQgdG8gbW92ZSBhbnkgRE9NIE5vZGVzLlxuICAgICAgICAgICAgcGF0Y2gob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKTtcbiAgICAgICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgICAgICAvLyBjYXNlOiBcIlZub2RlIG1vdmVkIHJpZ2h0XCJcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBXZSd2ZSBmb3VuZCB0aGF0IHRoZSBsYXN0IG5vZGUgaW4gb3VyIHdpbmRvdyBvbiB0aGUgbmV3IGNoaWxkcmVuIGlzXG4gICAgICAgICAgICAvLyB0aGUgc2FtZSBWTm9kZSBhcyB0aGUgX2ZpcnN0XyBub2RlIGluIG91ciB3aW5kb3cgb24gdGhlIG9sZCBjaGlsZHJlblxuICAgICAgICAgICAgLy8gd2UncmUgZGVhbGluZyB3aXRoIG5vdy4gVmlzdWFsbHksIHRoaXMgaXMgdGhlIGxheW91dCBvZiB0aGVzZSB0d29cbiAgICAgICAgICAgIC8vIG5vZGVzOlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIG5ld0NoOiBbLi4uLCBuZXdTdGFydFZub2RlICwgLi4uICwgbmV3RW5kVm5vZGUgLCAuLi5dXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXG4gICAgICAgICAgICAvLyBvbGRDaDogWy4uLiwgb2xkU3RhcnRWbm9kZSAsIC4uLiAsIG9sZEVuZFZub2RlICwgLi4uXVxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBJbiB0aGlzIHNpdHVhdGlvbiB3ZSBuZWVkIHRvIHBhdGNoIGBuZXdFbmRWbm9kZWAgb250byBgb2xkU3RhcnRWbm9kZWBcbiAgICAgICAgICAgIC8vIGFuZCBtb3ZlIHRoZSBET00gZWxlbWVudCBmb3IgYG9sZFN0YXJ0Vm5vZGVgLlxuICAgICAgICAgICAgaWYgKEJVSUxELnNsb3RSZWxvY2F0aW9uICYmIChvbGRTdGFydFZub2RlLiR0YWckID09PSAnc2xvdCcgfHwgbmV3RW5kVm5vZGUuJHRhZyQgPT09ICdzbG90JykpIHtcbiAgICAgICAgICAgICAgICBwdXRCYWNrSW5PcmlnaW5hbExvY2F0aW9uKG9sZFN0YXJ0Vm5vZGUuJGVsbSQucGFyZW50Tm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGF0Y2gob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpO1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBtb3ZlIHRoZSBlbGVtZW50IGZvciBgb2xkU3RhcnRWbm9kZWAgaW50byBhIHBvc2l0aW9uIHdoaWNoXG4gICAgICAgICAgICAvLyB3aWxsIGJlIGFwcHJvcHJpYXRlIGZvciBgbmV3RW5kVm5vZGVgLiBGb3IgdGhpcyB3ZSBjYW4gdXNlXG4gICAgICAgICAgICAvLyBgLmluc2VydEJlZm9yZWAgYW5kIGBvbGRFbmRWbm9kZS4kZWxtJC5uZXh0U2libGluZ2AuIElmIHRoZXJlIGlzIGFcbiAgICAgICAgICAgIC8vIHNpYmxpbmcgZm9yIGBvbGRFbmRWbm9kZS4kZWxtJGAgdGhlbiB3ZSB3YW50IHRvIG1vdmUgdGhlIERPTSBub2RlIGZvclxuICAgICAgICAgICAgLy8gYG9sZFN0YXJ0Vm5vZGVgIGJldHdlZW4gYG9sZEVuZFZub2RlYCBhbmQgaXQncyBzaWJsaW5nLCBsaWtlIHNvOlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIDxvbGQtc3RhcnQtbm9kZSAvPlxuICAgICAgICAgICAgLy8gPHNvbWUtaW50ZXJ2ZW5pbmctbm9kZSAvPlxuICAgICAgICAgICAgLy8gPG9sZC1lbmQtbm9kZSAvPlxuICAgICAgICAgICAgLy8gPCEtLSAtPiAgICAgICAgICAgICAgPC0tIGBvbGRTdGFydFZub2RlLiRlbG0kYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaGVyZVxuICAgICAgICAgICAgLy8gPG5leHQtc2libGluZyAvPlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIElmIGluc3RlYWQgYG9sZEVuZFZub2RlLiRlbG0kYCBoYXMgbm8gc2libGluZyB0aGVuIHdlIGp1c3Qgd2FudCB0byBwdXRcbiAgICAgICAgICAgIC8vIHRoZSBub2RlIGZvciBgb2xkU3RhcnRWbm9kZWAgYXQgdGhlIGVuZCBvZiB0aGUgY2hpbGRyZW4gb2ZcbiAgICAgICAgICAgIC8vIGBwYXJlbnRFbG1gLiBMdWNraWx5LCBgTm9kZS5uZXh0U2libGluZ2Agd2lsbCByZXR1cm4gYG51bGxgIGlmIHRoZXJlXG4gICAgICAgICAgICAvLyBhcmVuJ3QgYW55IHNpYmxpbmdzLCBhbmQgcGFzc2luZyBgbnVsbGAgdG8gYE5vZGUuaW5zZXJ0QmVmb3JlYCB3aWxsXG4gICAgICAgICAgICAvLyBhcHBlbmQgaXQgdG8gdGhlIGNoaWxkcmVuIG9mIHRoZSBwYXJlbnQgZWxlbWVudC5cbiAgICAgICAgICAgIHBhcmVudEVsbS5pbnNlcnRCZWZvcmUob2xkU3RhcnRWbm9kZS4kZWxtJCwgb2xkRW5kVm5vZGUuJGVsbSQubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICAvLyBjYXNlOiBcIlZub2RlIG1vdmVkIGxlZnRcIlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFdlJ3ZlIGZvdW5kIHRoYXQgdGhlIGZpcnN0IG5vZGUgaW4gb3VyIHdpbmRvdyBvbiB0aGUgbmV3IGNoaWxkcmVuIGlzXG4gICAgICAgICAgICAvLyB0aGUgc2FtZSBWTm9kZSBhcyB0aGUgX2xhc3RfIG5vZGUgaW4gb3VyIHdpbmRvdyBvbiB0aGUgb2xkIGNoaWxkcmVuLlxuICAgICAgICAgICAgLy8gVmlzdWFsbHksIHRoaXMgaXMgdGhlIGxheW91dCBvZiB0aGVzZSB0d28gbm9kZXM6XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gbmV3Q2g6IFsuLi4sIG5ld1N0YXJ0Vm5vZGUgLCAuLi4gLCBuZXdFbmRWbm9kZSAsIC4uLl1cbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4gICAgICAgICAgICAvLyBvbGRDaDogWy4uLiwgb2xkU3RhcnRWbm9kZSAsIC4uLiAsIG9sZEVuZFZub2RlICwgLi4uXVxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEluIHRoaXMgc2l0dWF0aW9uIHdlIG5lZWQgdG8gcGF0Y2ggYG5ld1N0YXJ0Vm5vZGVgIG9udG8gYG9sZEVuZFZub2RlYFxuICAgICAgICAgICAgLy8gKHdoaWNoIHdpbGwgaGFuZGxlIHVwZGF0aW5nIGFueSBjaGFuZ2VkIGF0dHJpYnV0ZXMsIHJlY29uY2lsaW5nIHRoZWlyXG4gICAgICAgICAgICAvLyBjaGlsZHJlbiBldGMpIGJ1dCB3ZSBhbHNvIG5lZWQgdG8gbW92ZSB0aGUgRE9NIG5vZGUgdG8gd2hpY2hcbiAgICAgICAgICAgIC8vIGBvbGRFbmRWbm9kZWAgY29ycmVzcG9uZHMuXG4gICAgICAgICAgICBpZiAoQlVJTEQuc2xvdFJlbG9jYXRpb24gJiYgKG9sZFN0YXJ0Vm5vZGUuJHRhZyQgPT09ICdzbG90JyB8fCBuZXdFbmRWbm9kZS4kdGFnJCA9PT0gJ3Nsb3QnKSkge1xuICAgICAgICAgICAgICAgIHB1dEJhY2tJbk9yaWdpbmFsTG9jYXRpb24ob2xkRW5kVm5vZGUuJGVsbSQucGFyZW50Tm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGF0Y2gob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpO1xuICAgICAgICAgICAgLy8gV2UndmUgYWxyZWFkeSBjaGVja2VkIGFib3ZlIGlmIGBvbGRTdGFydFZub2RlYCBhbmQgYG5ld1N0YXJ0Vm5vZGVgIGFyZVxuICAgICAgICAgICAgLy8gdGhlIHNhbWUgbm9kZSwgc28gc2luY2Ugd2UncmUgaGVyZSB3ZSBrbm93IHRoYXQgdGhleSBhcmUgbm90LiBUaHVzIHdlXG4gICAgICAgICAgICAvLyBjYW4gbW92ZSB0aGUgZWxlbWVudCBmb3IgYG9sZEVuZFZub2RlYCBfYmVmb3JlXyB0aGUgZWxlbWVudCBmb3JcbiAgICAgICAgICAgIC8vIGBvbGRTdGFydFZub2RlYCwgbGVhdmluZyBgb2xkU3RhcnRWbm9kZWAgdG8gYmUgcmVjb25jaWxlZCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGZ1dHVyZS5cbiAgICAgICAgICAgIHBhcmVudEVsbS5pbnNlcnRCZWZvcmUob2xkRW5kVm5vZGUuJGVsbSQsIG9sZFN0YXJ0Vm5vZGUuJGVsbSQpO1xuICAgICAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBIZXJlIHdlIGRvIHNvbWUgY2hlY2tzIHRvIG1hdGNoIHVwIG9sZCBhbmQgbmV3IG5vZGVzIGJhc2VkIG9uIHRoZVxuICAgICAgICAgICAgLy8gYCRrZXkkYCBhdHRyaWJ1dGUsIHdoaWNoIGlzIHNldCBieSBwdXR0aW5nIGEgYGtleT1cIm15LWtleVwiYCBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vIGluIHRoZSBKU1ggZm9yIGEgRE9NIGVsZW1lbnQgaW4gdGhlIGltcGxlbWVudGF0aW9uIG9mIGEgU3RlbmNpbFxuICAgICAgICAgICAgLy8gY29tcG9uZW50LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZpcnN0IHdlIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBhcmUgYW55IG5vZGVzIGluIHRoZSBhcnJheSBvZiBvbGRcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuIHdoaWNoIGhhdmUgdGhlIHNhbWUga2V5IGFzIHRoZSBmaXJzdCBub2RlIGluIHRoZSBuZXdcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuLlxuICAgICAgICAgICAgaWR4SW5PbGQgPSAtMTtcbiAgICAgICAgICAgIGlmIChCVUlMRC52ZG9tS2V5KSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gb2xkU3RhcnRJZHg7IGkgPD0gb2xkRW5kSWR4OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZENoW2ldICYmIG9sZENoW2ldLiRrZXkkICE9PSBudWxsICYmIG9sZENoW2ldLiRrZXkkID09PSBuZXdTdGFydFZub2RlLiRrZXkkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHhJbk9sZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCVUlMRC52ZG9tS2V5ICYmIGlkeEluT2xkID49IDApIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBmb3VuZCBhIG5vZGUgaW4gdGhlIG9sZCBjaGlsZHJlbiB3aGljaCBtYXRjaGVzIHVwIHdpdGggdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgLy8gbm9kZSBpbiB0aGUgbmV3IGNoaWxkcmVuISBTbyBsZXQncyBkZWFsIHdpdGggdGhhdFxuICAgICAgICAgICAgICAgIGVsbVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICAgICAgICBpZiAoZWxtVG9Nb3ZlLiR0YWckICE9PSBuZXdTdGFydFZub2RlLiR0YWckKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSB0YWcgZG9lc24ndCBtYXRjaCBzbyB3ZSdsbCBuZWVkIGEgbmV3IERPTSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBjcmVhdGVFbG0ob2xkQ2ggJiYgb2xkQ2hbbmV3U3RhcnRJZHhdLCBuZXdWTm9kZSwgaWR4SW5PbGQsIHBhcmVudEVsbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXRjaChlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBpbnZhbGlkYXRlIHRoZSBtYXRjaGluZyBvbGQgbm9kZSBzbyB0aGF0IHdlIHdvbid0IHRyeSB0byB1cGRhdGUgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gYWdhaW4gbGF0ZXIgb25cbiAgICAgICAgICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gZWxtVG9Nb3ZlLiRlbG0kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBlaXRoZXIgZGlkbid0IGZpbmQgYW4gZWxlbWVudCBpbiB0aGUgb2xkIGNoaWxkcmVuIHRoYXQgbWF0Y2hlc1xuICAgICAgICAgICAgICAgIC8vIHRoZSBrZXkgb2YgdGhlIGZpcnN0IG5ldyBjaGlsZCBPUiB0aGUgYnVpbGQgaXMgbm90IHVzaW5nIGBrZXlgXG4gICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlcyBhdCBhbGwuIEluIGVpdGhlciBjYXNlIHdlIG5lZWQgdG8gY3JlYXRlIGEgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAvLyBmb3IgdGhlIG5ldyBub2RlLlxuICAgICAgICAgICAgICAgIG5vZGUgPSBjcmVhdGVFbG0ob2xkQ2ggJiYgb2xkQ2hbbmV3U3RhcnRJZHhdLCBuZXdWTm9kZSwgbmV3U3RhcnRJZHgsIHBhcmVudEVsbSk7XG4gICAgICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBjcmVhdGVkIGEgbmV3IG5vZGUgdGhlbiBoYW5kbGUgaW5zZXJ0aW5nIGl0IHRvIHRoZSBET01cbiAgICAgICAgICAgICAgICBpZiAoQlVJTEQuc2xvdFJlbG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50UmVmZXJlbmNlTm9kZShvbGRTdGFydFZub2RlLiRlbG0kKS5pbnNlcnRCZWZvcmUobm9kZSwgcmVmZXJlbmNlTm9kZShvbGRTdGFydFZub2RlLiRlbG0kKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvbGRTdGFydFZub2RlLiRlbG0kLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG9sZFN0YXJ0Vm5vZGUuJGVsbSQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBzb21lIG1vcmUgbmV3IG5vZGVzIHRvIGFkZCB3aGljaCBkb24ndCBtYXRjaCB1cCB3aXRoIG9sZCBub2Rlc1xuICAgICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCBuZXdDaFtuZXdFbmRJZHggKyAxXSA9PSBudWxsID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLiRlbG0kLCBuZXdWTm9kZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChCVUlMRC51cGRhdGFibGUgJiYgbmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgICAgLy8gdGhlcmUgYXJlIG5vZGVzIGluIHRoZSBgb2xkQ2hgIGFycmF5IHdoaWNoIG5vIGxvbmdlciBjb3JyZXNwb25kIHRvIG5vZGVzXG4gICAgICAgIC8vIGluIHRoZSBuZXcgYXJyYXksIHNvIGxldHMgcmVtb3ZlIHRoZW0gKHdoaWNoIGVudGFpbHMgY2xlYW5pbmcgdXAgdGhlXG4gICAgICAgIC8vIHJlbGV2YW50IERPTSBub2RlcylcbiAgICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG59O1xuLyoqXG4gKiBDb21wYXJlIHR3byBWTm9kZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIHRoZSBzYW1lXG4gKlxuICogKipOQioqOiBUaGlzIGZ1bmN0aW9uIGlzIGFuIGVxdWFsaXR5IF9oZXVyaXN0aWNfIGJhc2VkIG9uIHRoZSBhdmFpbGFibGVcbiAqIGluZm9ybWF0aW9uIHNldCBvbiB0aGUgdHdvIFZOb2RlcyBhbmQgY2FuIGJlIG1pc2xlYWRpbmcgdW5kZXIgY2VydGFpblxuICogY2lyY3Vtc3RhbmNlcy4gSW4gcGFydGljdWxhciwgaWYgdGhlIHR3byBub2RlcyBkbyBub3QgaGF2ZSBga2V5YCBhdHRyc1xuICogKGF2YWlsYWJsZSB1bmRlciBgJGtleSRgIG9uIFZOb2RlcykgdGhlbiB0aGUgZnVuY3Rpb24gZmFsbHMgYmFjayBvbiBtZXJlbHlcbiAqIGNoZWNraW5nIHRoYXQgdGhleSBoYXZlIHRoZSBzYW1lIHRhZy5cbiAqXG4gKiBTbywgaW4gb3RoZXIgd29yZHMsIGlmIGBrZXlgIGF0dHJzIGFyZSBub3Qgc2V0IG9uIFZOb2RlcyB3aGljaCBtYXkgYmVcbiAqIGNoYW5naW5nIG9yZGVyIHdpdGhpbiBhIGBjaGlsZHJlbmAgYXJyYXkgb3Igc29tZXRoaW5nIGFsb25nIHRob3NlIGxpbmVzIHRoZW5cbiAqIHdlIGNvdWxkIG9idGFpbiBhIGZhbHNlIHBvc2l0aXZlIGFuZCB0aGVuIGhhdmUgdG8gZG8gbmVlZGxlc3MgcmUtcmVuZGVyaW5nLlxuICpcbiAqIEBwYXJhbSBsZWZ0Vk5vZGUgdGhlIGZpcnN0IFZOb2RlIHRvIGNoZWNrXG4gKiBAcGFyYW0gcmlnaHRWTm9kZSB0aGUgc2Vjb25kIFZOb2RlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZXkncmUgZXF1YWwgb3Igbm90XG4gKi9cbmNvbnN0IGlzU2FtZVZub2RlID0gKGxlZnRWTm9kZSwgcmlnaHRWTm9kZSkgPT4ge1xuICAgIC8vIGNvbXBhcmUgaWYgdHdvIHZub2RlIHRvIHNlZSBpZiB0aGV5J3JlIFwidGVjaG5pY2FsbHlcIiB0aGUgc2FtZVxuICAgIC8vIG5lZWQgdG8gaGF2ZSB0aGUgc2FtZSBlbGVtZW50IHRhZywgYW5kIHNhbWUga2V5IHRvIGJlIHRoZSBzYW1lXG4gICAgaWYgKGxlZnRWTm9kZS4kdGFnJCA9PT0gcmlnaHRWTm9kZS4kdGFnJCkge1xuICAgICAgICBpZiAoQlVJTEQuc2xvdFJlbG9jYXRpb24gJiYgbGVmdFZOb2RlLiR0YWckID09PSAnc2xvdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWZ0Vk5vZGUuJG5hbWUkID09PSByaWdodFZOb2RlLiRuYW1lJDtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzIHdpbGwgYmUgc2V0IGlmIGNvbXBvbmVudHMgaW4gdGhlIGJ1aWxkIGhhdmUgYGtleWAgYXR0cnMgc2V0IG9uIHRoZW1cbiAgICAgICAgaWYgKEJVSUxELnZkb21LZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWZ0Vk5vZGUuJGtleSQgPT09IHJpZ2h0Vk5vZGUuJGtleSQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5jb25zdCByZWZlcmVuY2VOb2RlID0gKG5vZGUpID0+IHtcbiAgICAvLyB0aGlzIG5vZGUgd2FzIHJlbG9jYXRlZCB0byBhIG5ldyBsb2NhdGlvbiBpbiB0aGUgZG9tXG4gICAgLy8gYmVjYXVzZSBvZiBzb21lIG90aGVyIGNvbXBvbmVudCdzIHNsb3RcbiAgICAvLyBidXQgd2Ugc3RpbGwgaGF2ZSBhbiBodG1sIGNvbW1lbnQgaW4gcGxhY2Ugb2Ygd2hlcmVcbiAgICAvLyBpdCdzIG9yaWdpbmFsIGxvY2F0aW9uIHdhcyBhY2NvcmRpbmcgdG8gaXQncyBvcmlnaW5hbCB2ZG9tXG4gICAgcmV0dXJuIChub2RlICYmIG5vZGVbJ3Mtb2wnXSkgfHwgbm9kZTtcbn07XG5jb25zdCBwYXJlbnRSZWZlcmVuY2VOb2RlID0gKG5vZGUpID0+IChub2RlWydzLW9sJ10gPyBub2RlWydzLW9sJ10gOiBub2RlKS5wYXJlbnROb2RlO1xuLyoqXG4gKiBIYW5kbGUgcmVjb25jaWxpbmcgYW4gb3V0ZGF0ZWQgVk5vZGUgd2l0aCBhIG5ldyBvbmUgd2hpY2ggY29ycmVzcG9uZHMgdG9cbiAqIGl0LiBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgZmx1c2hpbmcgdXBkYXRlcyB0byB0aGUgRE9NIGFuZCByZWNvbmNpbGluZyB0aGVcbiAqIGNoaWxkcmVuIG9mIHRoZSB0d28gbm9kZXMgKGlmIGFueSkuXG4gKlxuICogQHBhcmFtIG9sZFZOb2RlIGFuIG9sZCBWTm9kZSB3aG9zZSBET00gZWxlbWVudCBhbmQgY2hpbGRyZW4gd2Ugd2FudCB0byB1cGRhdGVcbiAqIEBwYXJhbSBuZXdWTm9kZSBhIG5ldyBWTm9kZSByZXByZXNlbnRpbmcgYW4gdXBkYXRlZCB2ZXJzaW9uIG9mIHRoZSBvbGQgb25lXG4gKi9cbmNvbnN0IHBhdGNoID0gKG9sZFZOb2RlLCBuZXdWTm9kZSkgPT4ge1xuICAgIGNvbnN0IGVsbSA9IChuZXdWTm9kZS4kZWxtJCA9IG9sZFZOb2RlLiRlbG0kKTtcbiAgICBjb25zdCBvbGRDaGlsZHJlbiA9IG9sZFZOb2RlLiRjaGlsZHJlbiQ7XG4gICAgY29uc3QgbmV3Q2hpbGRyZW4gPSBuZXdWTm9kZS4kY2hpbGRyZW4kO1xuICAgIGNvbnN0IHRhZyA9IG5ld1ZOb2RlLiR0YWckO1xuICAgIGNvbnN0IHRleHQgPSBuZXdWTm9kZS4kdGV4dCQ7XG4gICAgbGV0IGRlZmF1bHRIb2xkZXI7XG4gICAgaWYgKCFCVUlMRC52ZG9tVGV4dCB8fCB0ZXh0ID09PSBudWxsKSB7XG4gICAgICAgIGlmIChCVUlMRC5zdmcpIHtcbiAgICAgICAgICAgIC8vIHRlc3QgaWYgd2UncmUgcmVuZGVyaW5nIGFuIHN2ZyBlbGVtZW50LCBvciBzdGlsbCByZW5kZXJpbmcgbm9kZXMgaW5zaWRlIG9mIG9uZVxuICAgICAgICAgICAgLy8gb25seSBhZGQgdGhpcyB0byB0aGUgd2hlbiB0aGUgY29tcGlsZXIgc2VlcyB3ZSdyZSB1c2luZyBhbiBzdmcgc29tZXdoZXJlXG4gICAgICAgICAgICBpc1N2Z01vZGUgPSB0YWcgPT09ICdzdmcnID8gdHJ1ZSA6IHRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnID8gZmFsc2UgOiBpc1N2Z01vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJVSUxELnZkb21BdHRyaWJ1dGUgfHwgQlVJTEQucmVmbGVjdCkge1xuICAgICAgICAgICAgaWYgKEJVSUxELnNsb3QgJiYgdGFnID09PSAnc2xvdCcpXG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IHJlbmRlciBvZiBhbiBlbGVtZW50IE9SIGl0J3MgYW4gdXBkYXRlXG4gICAgICAgICAgICAgICAgLy8gQU5EIHdlIGFscmVhZHkga25vdyBpdCdzIHBvc3NpYmxlIGl0IGNvdWxkIGhhdmUgY2hhbmdlZFxuICAgICAgICAgICAgICAgIC8vIHRoaXMgdXBkYXRlcyB0aGUgZWxlbWVudCdzIGNzcyBjbGFzc2VzLCBhdHRycywgcHJvcHMsIGxpc3RlbmVycywgZXRjLlxuICAgICAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnQob2xkVk5vZGUsIG5ld1ZOb2RlLCBpc1N2Z01vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChCVUlMRC51cGRhdGFibGUgJiYgb2xkQ2hpbGRyZW4gIT09IG51bGwgJiYgbmV3Q2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGxvb2tzIGxpa2UgdGhlcmUncyBjaGlsZCB2bm9kZXMgZm9yIGJvdGggdGhlIG9sZCBhbmQgbmV3IHZub2Rlc1xuICAgICAgICAgICAgLy8gc28gd2UgbmVlZCB0byBjYWxsIGB1cGRhdGVDaGlsZHJlbmAgdG8gcmVjb25jaWxlIHRoZW1cbiAgICAgICAgICAgIHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2hpbGRyZW4sIG5ld1ZOb2RlLCBuZXdDaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmV3Q2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vIG9sZCBjaGlsZCB2bm9kZXMsIGJ1dCB0aGVyZSBhcmUgbmV3IGNoaWxkIHZub2RlcyB0byBhZGRcbiAgICAgICAgICAgIGlmIChCVUlMRC51cGRhdGFibGUgJiYgQlVJTEQudmRvbVRleHQgJiYgb2xkVk5vZGUuJHRleHQkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG9sZCB2bm9kZSB3YXMgdGV4dCwgc28gYmUgc3VyZSB0byBjbGVhciBpdCBvdXRcbiAgICAgICAgICAgICAgICBlbG0udGV4dENvbnRlbnQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFkZCB0aGUgbmV3IHZub2RlIGNoaWxkcmVuXG4gICAgICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBuZXdWTm9kZSwgbmV3Q2hpbGRyZW4sIDAsIG5ld0NoaWxkcmVuLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEJVSUxELnVwZGF0YWJsZSAmJiBvbGRDaGlsZHJlbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm8gbmV3IGNoaWxkIHZub2RlcywgYnV0IHRoZXJlIGFyZSBvbGQgY2hpbGQgdm5vZGVzIHRvIHJlbW92ZVxuICAgICAgICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoaWxkcmVuLCAwLCBvbGRDaGlsZHJlbi5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQlVJTEQuc3ZnICYmIGlzU3ZnTW9kZSAmJiB0YWcgPT09ICdzdmcnKSB7XG4gICAgICAgICAgICBpc1N2Z01vZGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChCVUlMRC52ZG9tVGV4dCAmJiBCVUlMRC5zbG90UmVsb2NhdGlvbiAmJiAoZGVmYXVsdEhvbGRlciA9IGVsbVsncy1jciddKSkge1xuICAgICAgICAvLyB0aGlzIGVsZW1lbnQgaGFzIHNsb3R0ZWQgY29udGVudFxuICAgICAgICBkZWZhdWx0SG9sZGVyLnBhcmVudE5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIH1cbiAgICBlbHNlIGlmIChCVUlMRC52ZG9tVGV4dCAmJiBvbGRWTm9kZS4kdGV4dCQgIT09IHRleHQpIHtcbiAgICAgICAgLy8gdXBkYXRlIHRoZSB0ZXh0IGNvbnRlbnQgZm9yIHRoZSB0ZXh0IG9ubHkgdm5vZGVcbiAgICAgICAgLy8gYW5kIGFsc28gb25seSBpZiB0aGUgdGV4dCBpcyBkaWZmZXJlbnQgdGhhbiBiZWZvcmVcbiAgICAgICAgZWxtLmRhdGEgPSB0ZXh0O1xuICAgIH1cbn07XG5jb25zdCB1cGRhdGVGYWxsYmFja1Nsb3RWaXNpYmlsaXR5ID0gKGVsbSkgPT4ge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogcHJlZmVyLWNvbnN0XG4gICAgY29uc3QgY2hpbGROb2RlcyA9IGVsbS5jaGlsZE5vZGVzO1xuICAgIGxldCBjaGlsZE5vZGU7XG4gICAgbGV0IGk7XG4gICAgbGV0IGlsZW47XG4gICAgbGV0IGo7XG4gICAgbGV0IHNsb3ROYW1lQXR0cjtcbiAgICBsZXQgbm9kZVR5cGU7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZXNbaV07XG4gICAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDEgLyogTk9ERV9UWVBFLkVsZW1lbnROb2RlICovKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGROb2RlWydzLXNyJ10pIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGEgc2xvdCBmYWxsYmFjayBub2RlXG4gICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBzbG90IG5hbWUgZm9yIHRoaXMgc2xvdCByZWZlcmVuY2Ugbm9kZVxuICAgICAgICAgICAgICAgIHNsb3ROYW1lQXR0ciA9IGNoaWxkTm9kZVsncy1zbiddO1xuICAgICAgICAgICAgICAgIC8vIGJ5IGRlZmF1bHQgYWx3YXlzIHNob3cgYSBmYWxsYmFjayBzbG90IG5vZGVcbiAgICAgICAgICAgICAgICAvLyB0aGVuIGhpZGUgaXQgaWYgdGhlcmUgYXJlIG90aGVyIHNsb3RzIGluIHRoZSBsaWdodCBkb21cbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGlsZW47IGorKykge1xuICAgICAgICAgICAgICAgICAgICBub2RlVHlwZSA9IGNoaWxkTm9kZXNbal0ubm9kZVR5cGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZE5vZGVzW2pdWydzLWhuJ10gIT09IGNoaWxkTm9kZVsncy1obiddIHx8IHNsb3ROYW1lQXR0ciAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgc2libGluZyBub2RlIGlzIGZyb20gYSBkaWZmZXJlbnQgY29tcG9uZW50IE9SIGlzIGEgbmFtZWQgZmFsbGJhY2sgc2xvdCBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZVR5cGUgPT09IDEgLyogTk9ERV9UWVBFLkVsZW1lbnROb2RlICovICYmIHNsb3ROYW1lQXR0ciA9PT0gY2hpbGROb2Rlc1tqXS5nZXRBdHRyaWJ1dGUoJ3Nsb3QnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhIGRlZmF1bHQgZmFsbGJhY2sgc2xvdCBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbnkgZWxlbWVudCBvciB0ZXh0IG5vZGUgKHdpdGggY29udGVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3VsZCBoaWRlIHRoZSBkZWZhdWx0IGZhbGxiYWNrIHNsb3Qgbm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVUeXBlID09PSAxIC8qIE5PREVfVFlQRS5FbGVtZW50Tm9kZSAqLyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChub2RlVHlwZSA9PT0gMyAvKiBOT0RFX1RZUEUuVGV4dE5vZGUgKi8gJiYgY2hpbGROb2Rlc1tqXS50ZXh0Q29udGVudC50cmltKCkgIT09ICcnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8ga2VlcCBkcmlsbGluZyBkb3duXG4gICAgICAgICAgICB1cGRhdGVGYWxsYmFja1Nsb3RWaXNpYmlsaXR5KGNoaWxkTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgcmVsb2NhdGVOb2RlcyA9IFtdO1xuY29uc3QgcmVsb2NhdGVTbG90Q29udGVudCA9IChlbG0pID0+IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHByZWZlci1jb25zdFxuICAgIGxldCBjaGlsZE5vZGU7XG4gICAgbGV0IG5vZGU7XG4gICAgbGV0IGhvc3RDb250ZW50Tm9kZXM7XG4gICAgbGV0IHNsb3ROYW1lQXR0cjtcbiAgICBsZXQgcmVsb2NhdGVOb2RlRGF0YTtcbiAgICBsZXQgajtcbiAgICBsZXQgaSA9IDA7XG4gICAgY29uc3QgY2hpbGROb2RlcyA9IGVsbS5jaGlsZE5vZGVzO1xuICAgIGNvbnN0IGlsZW4gPSBjaGlsZE5vZGVzLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGlsZW47IGkrKykge1xuICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGVzW2ldO1xuICAgICAgICBpZiAoY2hpbGROb2RlWydzLXNyJ10gJiYgKG5vZGUgPSBjaGlsZE5vZGVbJ3MtY3InXSkgJiYgbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAvLyBmaXJzdCBnb3QgdGhlIGNvbnRlbnQgcmVmZXJlbmNlIGNvbW1lbnQgbm9kZVxuICAgICAgICAgICAgLy8gdGhlbiB3ZSBnb3QgaXQncyBwYXJlbnQsIHdoaWNoIGlzIHdoZXJlIGFsbCB0aGUgaG9zdCBjb250ZW50IGlzIGluIG5vd1xuICAgICAgICAgICAgaG9zdENvbnRlbnROb2RlcyA9IG5vZGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgc2xvdE5hbWVBdHRyID0gY2hpbGROb2RlWydzLXNuJ107XG4gICAgICAgICAgICBmb3IgKGogPSBob3N0Q29udGVudE5vZGVzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IGhvc3RDb250ZW50Tm9kZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKCFub2RlWydzLWNuJ10gJiYgIW5vZGVbJ3MtbnInXSAmJiBub2RlWydzLWhuJ10gIT09IGNoaWxkTm9kZVsncy1obiddKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxldCdzIGRvIHNvbWUgcmVsb2NhdGluZyB0byBpdHMgbmV3IGhvbWVcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IG5ldmVyIHJlbG9jYXRlIGEgY29udGVudCByZWZlcmVuY2Ugbm9kZVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGF0IGlzIHN1cHBvc2UgdG8gYWx3YXlzIHJlcHJlc2VudCB0aGUgb3JpZ2luYWwgY29udGVudCBsb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOb2RlTG9jYXRlZEluU2xvdChub2RlLCBzbG90TmFtZUF0dHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHdlJ3ZlIGFscmVhZHkgZGVjaWRlZCB0byByZWxvY2F0ZSB0aGlzIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbG9jYXRlTm9kZURhdGEgPSByZWxvY2F0ZU5vZGVzLmZpbmQoKHIpID0+IHIuJG5vZGVUb1JlbG9jYXRlJCA9PT0gbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWRlIHNvbWUgY2hhbmdlcyB0byBzbG90c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0J3MgbWFrZSBzdXJlIHdlIGFsc28gZG91YmxlIGNoZWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmYWxsYmFja3MgYXJlIGNvcnJlY3RseSBoaWRkZW4gb3Igc2hvd25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrU2xvdEZhbGxiYWNrVmlzaWJpbGl0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlWydzLXNuJ10gPSBub2RlWydzLXNuJ10gfHwgc2xvdE5hbWVBdHRyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbG9jYXRlTm9kZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmV2aW91c2x5IHdlIG5ldmVyIGZvdW5kIGEgc2xvdCBob21lIGZvciB0aGlzIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgdHVybnMgb3V0IHdlIGRpZCwgc28gbGV0J3MgcmVtZW1iZXIgaXQgbm93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsb2NhdGVOb2RlRGF0YS4kc2xvdFJlZk5vZGUkID0gY2hpbGROb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRvIG91ciBsaXN0IG9mIG5vZGVzIHRvIHJlbG9jYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsb2NhdGVOb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNsb3RSZWZOb2RlJDogY2hpbGROb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbm9kZVRvUmVsb2NhdGUkOiBub2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVbJ3Mtc3InXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbG9jYXRlTm9kZXMubWFwKChyZWxvY2F0ZU5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm9kZUxvY2F0ZWRJblNsb3QocmVsb2NhdGVOb2RlLiRub2RlVG9SZWxvY2F0ZSQsIG5vZGVbJ3Mtc24nXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbG9jYXRlTm9kZURhdGEgPSByZWxvY2F0ZU5vZGVzLmZpbmQoKHIpID0+IHIuJG5vZGVUb1JlbG9jYXRlJCA9PT0gbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVsb2NhdGVOb2RlRGF0YSAmJiAhcmVsb2NhdGVOb2RlLiRzbG90UmVmTm9kZSQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxvY2F0ZU5vZGUuJHNsb3RSZWZOb2RlJCA9IHJlbG9jYXRlTm9kZURhdGEuJHNsb3RSZWZOb2RlJDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFyZWxvY2F0ZU5vZGVzLnNvbWUoKHIpID0+IHIuJG5vZGVUb1JlbG9jYXRlJCA9PT0gbm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIGZhciB0aGlzIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhIHNsb3QgaG9tZSwgbm90IHNldHRpbmcgc2xvdFJlZk5vZGUgb24gcHVycG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgbmV2ZXIgZmluZCBhIGhvbWUgZm9yIHRoaXMgZWxlbWVudCB0aGVuIHdlJ2xsIG5lZWQgdG8gaGlkZSBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsb2NhdGVOb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbm9kZVRvUmVsb2NhdGUkOiBub2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gMSAvKiBOT0RFX1RZUEUuRWxlbWVudE5vZGUgKi8pIHtcbiAgICAgICAgICAgIHJlbG9jYXRlU2xvdENvbnRlbnQoY2hpbGROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCBpc05vZGVMb2NhdGVkSW5TbG90ID0gKG5vZGVUb1JlbG9jYXRlLCBzbG90TmFtZUF0dHIpID0+IHtcbiAgICBpZiAobm9kZVRvUmVsb2NhdGUubm9kZVR5cGUgPT09IDEgLyogTk9ERV9UWVBFLkVsZW1lbnROb2RlICovKSB7XG4gICAgICAgIGlmIChub2RlVG9SZWxvY2F0ZS5nZXRBdHRyaWJ1dGUoJ3Nsb3QnKSA9PT0gbnVsbCAmJiBzbG90TmFtZUF0dHIgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZVRvUmVsb2NhdGUuZ2V0QXR0cmlidXRlKCdzbG90JykgPT09IHNsb3ROYW1lQXR0cikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZVRvUmVsb2NhdGVbJ3Mtc24nXSA9PT0gc2xvdE5hbWVBdHRyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gc2xvdE5hbWVBdHRyID09PSAnJztcbn07XG5jb25zdCBjYWxsTm9kZVJlZnMgPSAodk5vZGUpID0+IHtcbiAgICBpZiAoQlVJTEQudmRvbVJlZikge1xuICAgICAgICB2Tm9kZS4kYXR0cnMkICYmIHZOb2RlLiRhdHRycyQucmVmICYmIHZOb2RlLiRhdHRycyQucmVmKG51bGwpO1xuICAgICAgICB2Tm9kZS4kY2hpbGRyZW4kICYmIHZOb2RlLiRjaGlsZHJlbiQubWFwKGNhbGxOb2RlUmVmcyk7XG4gICAgfVxufTtcbmNvbnN0IHJlbmRlclZkb20gPSAoaG9zdFJlZiwgcmVuZGVyRm5SZXN1bHRzKSA9PiB7XG4gICAgY29uc3QgaG9zdEVsbSA9IGhvc3RSZWYuJGhvc3RFbGVtZW50JDtcbiAgICBjb25zdCBjbXBNZXRhID0gaG9zdFJlZi4kY21wTWV0YSQ7XG4gICAgY29uc3Qgb2xkVk5vZGUgPSBob3N0UmVmLiR2bm9kZSQgfHwgbmV3Vk5vZGUobnVsbCwgbnVsbCk7XG4gICAgY29uc3Qgcm9vdFZub2RlID0gaXNIb3N0KHJlbmRlckZuUmVzdWx0cykgPyByZW5kZXJGblJlc3VsdHMgOiBoKG51bGwsIG51bGwsIHJlbmRlckZuUmVzdWx0cyk7XG4gICAgaG9zdFRhZ05hbWUgPSBob3N0RWxtLnRhZ05hbWU7XG4gICAgLy8gPEhvc3Q+IHJ1bnRpbWUgY2hlY2tcbiAgICBpZiAoQlVJTEQuaXNEZXYgJiYgQXJyYXkuaXNBcnJheShyZW5kZXJGblJlc3VsdHMpICYmIHJlbmRlckZuUmVzdWx0cy5zb21lKGlzSG9zdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgPEhvc3Q+IG11c3QgYmUgdGhlIHNpbmdsZSByb290IGNvbXBvbmVudC5cbkxvb2tzIGxpa2UgdGhlIHJlbmRlcigpIGZ1bmN0aW9uIG9mIFwiJHtob3N0VGFnTmFtZS50b0xvd2VyQ2FzZSgpfVwiIGlzIHJldHVybmluZyBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSA8SG9zdD4uXG5cblRoZSByZW5kZXIoKSBmdW5jdGlvbiBzaG91bGQgbG9vayBsaWtlIHRoaXMgaW5zdGVhZDpcblxucmVuZGVyKCkge1xuICAvLyBEbyBub3QgcmV0dXJuIGFuIGFycmF5XG4gIHJldHVybiAoXG4gICAgPEhvc3Q+e2NvbnRlbnR9PC9Ib3N0PlxuICApO1xufVxuICBgKTtcbiAgICB9XG4gICAgaWYgKEJVSUxELnJlZmxlY3QgJiYgY21wTWV0YS4kYXR0cnNUb1JlZmxlY3QkKSB7XG4gICAgICAgIHJvb3RWbm9kZS4kYXR0cnMkID0gcm9vdFZub2RlLiRhdHRycyQgfHwge307XG4gICAgICAgIGNtcE1ldGEuJGF0dHJzVG9SZWZsZWN0JC5tYXAoKFtwcm9wTmFtZSwgYXR0cmlidXRlXSkgPT4gKHJvb3RWbm9kZS4kYXR0cnMkW2F0dHJpYnV0ZV0gPSBob3N0RWxtW3Byb3BOYW1lXSkpO1xuICAgIH1cbiAgICByb290Vm5vZGUuJHRhZyQgPSBudWxsO1xuICAgIHJvb3RWbm9kZS4kZmxhZ3MkIHw9IDQgLyogVk5PREVfRkxBR1MuaXNIb3N0ICovO1xuICAgIGhvc3RSZWYuJHZub2RlJCA9IHJvb3RWbm9kZTtcbiAgICByb290Vm5vZGUuJGVsbSQgPSBvbGRWTm9kZS4kZWxtJCA9IChCVUlMRC5zaGFkb3dEb20gPyBob3N0RWxtLnNoYWRvd1Jvb3QgfHwgaG9zdEVsbSA6IGhvc3RFbG0pO1xuICAgIGlmIChCVUlMRC5zY29wZWQgfHwgQlVJTEQuc2hhZG93RG9tKSB7XG4gICAgICAgIHNjb3BlSWQgPSBob3N0RWxtWydzLXNjJ107XG4gICAgfVxuICAgIGlmIChCVUlMRC5zbG90UmVsb2NhdGlvbikge1xuICAgICAgICBjb250ZW50UmVmID0gaG9zdEVsbVsncy1jciddO1xuICAgICAgICB1c2VOYXRpdmVTaGFkb3dEb20gPSBzdXBwb3J0c1NoYWRvdyAmJiAoY21wTWV0YS4kZmxhZ3MkICYgMSAvKiBDTVBfRkxBR1Muc2hhZG93RG9tRW5jYXBzdWxhdGlvbiAqLykgIT09IDA7XG4gICAgICAgIC8vIGFsd2F5cyByZXNldFxuICAgICAgICBjaGVja1Nsb3RGYWxsYmFja1Zpc2liaWxpdHkgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gc3luY2hyb25vdXMgcGF0Y2hcbiAgICBwYXRjaChvbGRWTm9kZSwgcm9vdFZub2RlKTtcbiAgICBpZiAoQlVJTEQuc2xvdFJlbG9jYXRpb24pIHtcbiAgICAgICAgLy8gd2hpbGUgd2UncmUgbW92aW5nIG5vZGVzIGFyb3VuZCBleGlzdGluZyBub2RlcywgdGVtcG9yYXJpbHkgZGlzYWJsZVxuICAgICAgICAvLyB0aGUgZGlzY29ubmVjdENhbGxiYWNrIGZyb20gd29ya2luZ1xuICAgICAgICBwbHQuJGZsYWdzJCB8PSAxIC8qIFBMQVRGT1JNX0ZMQUdTLmlzVG1wRGlzY29ubmVjdGVkICovO1xuICAgICAgICBpZiAoY2hlY2tTbG90UmVsb2NhdGUpIHtcbiAgICAgICAgICAgIHJlbG9jYXRlU2xvdENvbnRlbnQocm9vdFZub2RlLiRlbG0kKTtcbiAgICAgICAgICAgIGxldCByZWxvY2F0ZURhdGE7XG4gICAgICAgICAgICBsZXQgbm9kZVRvUmVsb2NhdGU7XG4gICAgICAgICAgICBsZXQgb3JnTG9jYXRpb25Ob2RlO1xuICAgICAgICAgICAgbGV0IHBhcmVudE5vZGVSZWY7XG4gICAgICAgICAgICBsZXQgaW5zZXJ0QmVmb3JlTm9kZTtcbiAgICAgICAgICAgIGxldCByZWZOb2RlO1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgZm9yICg7IGkgPCByZWxvY2F0ZU5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVsb2NhdGVEYXRhID0gcmVsb2NhdGVOb2Rlc1tpXTtcbiAgICAgICAgICAgICAgICBub2RlVG9SZWxvY2F0ZSA9IHJlbG9jYXRlRGF0YS4kbm9kZVRvUmVsb2NhdGUkO1xuICAgICAgICAgICAgICAgIGlmICghbm9kZVRvUmVsb2NhdGVbJ3Mtb2wnXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgYSByZWZlcmVuY2Ugbm9kZSBtYXJraW5nIHRoaXMgbm9kZSdzIG9yaWdpbmFsIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhpcyBub2RlIGZvciBsYXRlciBsb29rdXBzXG4gICAgICAgICAgICAgICAgICAgIG9yZ0xvY2F0aW9uTm9kZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBCVUlMRC5pc0RlYnVnIHx8IEJVSUxELmh5ZHJhdGVTZXJ2ZXJTaWRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvcmlnaW5hbExvY2F0aW9uRGVidWdOb2RlKG5vZGVUb1JlbG9jYXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZG9jLmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgb3JnTG9jYXRpb25Ob2RlWydzLW5yJ10gPSBub2RlVG9SZWxvY2F0ZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZVRvUmVsb2NhdGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoKG5vZGVUb1JlbG9jYXRlWydzLW9sJ10gPSBvcmdMb2NhdGlvbk5vZGUpLCBub2RlVG9SZWxvY2F0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlbG9jYXRlTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZWxvY2F0ZURhdGEgPSByZWxvY2F0ZU5vZGVzW2ldO1xuICAgICAgICAgICAgICAgIG5vZGVUb1JlbG9jYXRlID0gcmVsb2NhdGVEYXRhLiRub2RlVG9SZWxvY2F0ZSQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlbG9jYXRlRGF0YS4kc2xvdFJlZk5vZGUkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJ5IGRlZmF1bHQgd2UncmUganVzdCBnb2luZyB0byBpbnNlcnQgaXQgZGlyZWN0bHlcbiAgICAgICAgICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIHNsb3QgcmVmZXJlbmNlIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZVJlZiA9IHJlbG9jYXRlRGF0YS4kc2xvdFJlZk5vZGUkLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydEJlZm9yZU5vZGUgPSByZWxvY2F0ZURhdGEuJHNsb3RSZWZOb2RlJC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgb3JnTG9jYXRpb25Ob2RlID0gbm9kZVRvUmVsb2NhdGVbJ3Mtb2wnXTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChvcmdMb2NhdGlvbk5vZGUgPSBvcmdMb2NhdGlvbk5vZGUucHJldmlvdXNTaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmTm9kZSA9IG9yZ0xvY2F0aW9uTm9kZVsncy1uciddO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZk5vZGUgJiYgcmVmTm9kZVsncy1zbiddID09PSBub2RlVG9SZWxvY2F0ZVsncy1zbiddICYmIHBhcmVudE5vZGVSZWYgPT09IHJlZk5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZk5vZGUgPSByZWZOb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVmTm9kZSB8fCAhcmVmTm9kZVsncy1uciddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydEJlZm9yZU5vZGUgPSByZWZOb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCghaW5zZXJ0QmVmb3JlTm9kZSAmJiBwYXJlbnROb2RlUmVmICE9PSBub2RlVG9SZWxvY2F0ZS5wYXJlbnROb2RlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVRvUmVsb2NhdGUubmV4dFNpYmxpbmcgIT09IGluc2VydEJlZm9yZU5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3ZlIGNoZWNrZWQgdGhhdCBpdCdzIHdvcnRoIHdoaWxlIHRvIHJlbG9jYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGF0IHRoZSBub2RlIHRvIHJlbG9jYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYXMgYSBkaWZmZXJlbnQgbmV4dCBzaWJsaW5nIG9yIHBhcmVudCByZWxvY2F0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlVG9SZWxvY2F0ZSAhPT0gaW5zZXJ0QmVmb3JlTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbm9kZVRvUmVsb2NhdGVbJ3MtaG4nXSAmJiBub2RlVG9SZWxvY2F0ZVsncy1vbCddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb2JhYmx5IGEgY29tcG9uZW50IGluIHRoZSBpbmRleC5odG1sIHRoYXQgZG9lc24ndCBoYXZlIGl0J3MgaG9zdG5hbWUgc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVUb1JlbG9jYXRlWydzLWhuJ10gPSBub2RlVG9SZWxvY2F0ZVsncy1vbCddLnBhcmVudE5vZGUubm9kZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBpdCBiYWNrIHRvIHRoZSBkb20gYnV0IGluIGl0cyBuZXcgaG9tZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGVSZWYuaW5zZXJ0QmVmb3JlKG5vZGVUb1JlbG9jYXRlLCBpbnNlcnRCZWZvcmVOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBub2RlIGRvZXNuJ3QgaGF2ZSBhIHNsb3QgaG9tZSB0byBnbyB0bywgc28gbGV0J3MgaGlkZSBpdFxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZVRvUmVsb2NhdGUubm9kZVR5cGUgPT09IDEgLyogTk9ERV9UWVBFLkVsZW1lbnROb2RlICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlVG9SZWxvY2F0ZS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjaGVja1Nsb3RGYWxsYmFja1Zpc2liaWxpdHkpIHtcbiAgICAgICAgICAgIHVwZGF0ZUZhbGxiYWNrU2xvdFZpc2liaWxpdHkocm9vdFZub2RlLiRlbG0kKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkb25lIG1vdmluZyBub2RlcyBhcm91bmRcbiAgICAgICAgLy8gYWxsb3cgdGhlIGRpc2Nvbm5lY3QgY2FsbGJhY2sgdG8gd29yayBhZ2FpblxuICAgICAgICBwbHQuJGZsYWdzJCAmPSB+MSAvKiBQTEFURk9STV9GTEFHUy5pc1RtcERpc2Nvbm5lY3RlZCAqLztcbiAgICAgICAgLy8gYWx3YXlzIHJlc2V0XG4gICAgICAgIHJlbG9jYXRlTm9kZXMubGVuZ3RoID0gMDtcbiAgICB9XG59O1xuLy8gc2xvdCBjb21tZW50IGRlYnVnIG5vZGVzIG9ubHkgY3JlYXRlZCB3aXRoIHRoZSBgLS1kZWJ1Z2AgZmxhZ1xuLy8gb3RoZXJ3aXNlIHRoZXNlIG5vZGVzIGFyZSB0ZXh0IG5vZGVzIHcvb3V0IGNvbnRlbnRcbmNvbnN0IHNsb3RSZWZlcmVuY2VEZWJ1Z05vZGUgPSAoc2xvdFZOb2RlKSA9PiBkb2MuY3JlYXRlQ29tbWVudChgPHNsb3Qke3Nsb3RWTm9kZS4kbmFtZSQgPyAnIG5hbWU9XCInICsgc2xvdFZOb2RlLiRuYW1lJCArICdcIicgOiAnJ30+IChob3N0PSR7aG9zdFRhZ05hbWUudG9Mb3dlckNhc2UoKX0pYCk7XG5jb25zdCBvcmlnaW5hbExvY2F0aW9uRGVidWdOb2RlID0gKG5vZGVUb1JlbG9jYXRlKSA9PiBkb2MuY3JlYXRlQ29tbWVudChgb3JnLWxvY2F0aW9uIGZvciBgICtcbiAgICAobm9kZVRvUmVsb2NhdGUubG9jYWxOYW1lXG4gICAgICAgID8gYDwke25vZGVUb1JlbG9jYXRlLmxvY2FsTmFtZX0+IChob3N0PSR7bm9kZVRvUmVsb2NhdGVbJ3MtaG4nXX0pYFxuICAgICAgICA6IGBbJHtub2RlVG9SZWxvY2F0ZS50ZXh0Q29udGVudH1dYCkpO1xuY29uc3QgYXR0YWNoVG9BbmNlc3RvciA9IChob3N0UmVmLCBhbmNlc3RvckNvbXBvbmVudCkgPT4ge1xuICAgIGlmIChCVUlMRC5hc3luY0xvYWRpbmcgJiYgYW5jZXN0b3JDb21wb25lbnQgJiYgIWhvc3RSZWYuJG9uUmVuZGVyUmVzb2x2ZSQgJiYgYW5jZXN0b3JDb21wb25lbnRbJ3MtcCddKSB7XG4gICAgICAgIGFuY2VzdG9yQ29tcG9uZW50WydzLXAnXS5wdXNoKG5ldyBQcm9taXNlKChyKSA9PiAoaG9zdFJlZi4kb25SZW5kZXJSZXNvbHZlJCA9IHIpKSk7XG4gICAgfVxufTtcbmNvbnN0IHNjaGVkdWxlVXBkYXRlID0gKGhvc3RSZWYsIGlzSW5pdGlhbExvYWQpID0+IHtcbiAgICBpZiAoQlVJTEQudGFza1F1ZXVlICYmIEJVSUxELnVwZGF0YWJsZSkge1xuICAgICAgICBob3N0UmVmLiRmbGFncyQgfD0gMTYgLyogSE9TVF9GTEFHUy5pc1F1ZXVlZEZvclVwZGF0ZSAqLztcbiAgICB9XG4gICAgaWYgKEJVSUxELmFzeW5jTG9hZGluZyAmJiBob3N0UmVmLiRmbGFncyQgJiA0IC8qIEhPU1RfRkxBR1MuaXNXYWl0aW5nRm9yQ2hpbGRyZW4gKi8pIHtcbiAgICAgICAgaG9zdFJlZi4kZmxhZ3MkIHw9IDUxMiAvKiBIT1NUX0ZMQUdTLm5lZWRzUmVyZW5kZXIgKi87XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXR0YWNoVG9BbmNlc3Rvcihob3N0UmVmLCBob3N0UmVmLiRhbmNlc3RvckNvbXBvbmVudCQpO1xuICAgIC8vIHRoZXJlIGlzIG5vIGFuY2VzdG9yIGNvbXBvbmVudCBvciB0aGUgYW5jZXN0b3IgY29tcG9uZW50XG4gICAgLy8gaGFzIGFscmVhZHkgZmlyZWQgb2ZmIGl0cyBsaWZlY3ljbGUgdXBkYXRlIHRoZW5cbiAgICAvLyBmaXJlIG9mZiB0aGUgaW5pdGlhbCB1cGRhdGVcbiAgICBjb25zdCBkaXNwYXRjaCA9ICgpID0+IGRpc3BhdGNoSG9va3MoaG9zdFJlZiwgaXNJbml0aWFsTG9hZCk7XG4gICAgcmV0dXJuIEJVSUxELnRhc2tRdWV1ZSA/IHdyaXRlVGFzayhkaXNwYXRjaCkgOiBkaXNwYXRjaCgpO1xufTtcbmNvbnN0IGRpc3BhdGNoSG9va3MgPSAoaG9zdFJlZiwgaXNJbml0aWFsTG9hZCkgPT4ge1xuICAgIGNvbnN0IGVsbSA9IGhvc3RSZWYuJGhvc3RFbGVtZW50JDtcbiAgICBjb25zdCBlbmRTY2hlZHVsZSA9IGNyZWF0ZVRpbWUoJ3NjaGVkdWxlVXBkYXRlJywgaG9zdFJlZi4kY21wTWV0YSQuJHRhZ05hbWUkKTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IEJVSUxELmxhenlMb2FkID8gaG9zdFJlZi4kbGF6eUluc3RhbmNlJCA6IGVsbTtcbiAgICBsZXQgcHJvbWlzZTtcbiAgICBpZiAoaXNJbml0aWFsTG9hZCkge1xuICAgICAgICBpZiAoQlVJTEQubGF6eUxvYWQgJiYgQlVJTEQuaG9zdExpc3RlbmVyKSB7XG4gICAgICAgICAgICBob3N0UmVmLiRmbGFncyQgfD0gMjU2IC8qIEhPU1RfRkxBR1MuaXNMaXN0ZW5SZWFkeSAqLztcbiAgICAgICAgICAgIGlmIChob3N0UmVmLiRxdWV1ZWRMaXN0ZW5lcnMkKSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlZi4kcXVldWVkTGlzdGVuZXJzJC5tYXAoKFttZXRob2ROYW1lLCBldmVudF0pID0+IHNhZmVDYWxsKGluc3RhbmNlLCBtZXRob2ROYW1lLCBldmVudCkpO1xuICAgICAgICAgICAgICAgIGhvc3RSZWYuJHF1ZXVlZExpc3RlbmVycyQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVtaXRMaWZlY3ljbGVFdmVudChlbG0sICdjb21wb25lbnRXaWxsTG9hZCcpO1xuICAgICAgICBpZiAoQlVJTEQuY21wV2lsbExvYWQpIHtcbiAgICAgICAgICAgIHByb21pc2UgPSBzYWZlQ2FsbChpbnN0YW5jZSwgJ2NvbXBvbmVudFdpbGxMb2FkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVtaXRMaWZlY3ljbGVFdmVudChlbG0sICdjb21wb25lbnRXaWxsVXBkYXRlJyk7XG4gICAgICAgIGlmIChCVUlMRC5jbXBXaWxsVXBkYXRlKSB7XG4gICAgICAgICAgICBwcm9taXNlID0gc2FmZUNhbGwoaW5zdGFuY2UsICdjb21wb25lbnRXaWxsVXBkYXRlJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1pdExpZmVjeWNsZUV2ZW50KGVsbSwgJ2NvbXBvbmVudFdpbGxSZW5kZXInKTtcbiAgICBpZiAoQlVJTEQuY21wV2lsbFJlbmRlcikge1xuICAgICAgICBwcm9taXNlID0gdGhlbihwcm9taXNlLCAoKSA9PiBzYWZlQ2FsbChpbnN0YW5jZSwgJ2NvbXBvbmVudFdpbGxSZW5kZXInKSk7XG4gICAgfVxuICAgIGVuZFNjaGVkdWxlKCk7XG4gICAgcmV0dXJuIHRoZW4ocHJvbWlzZSwgKCkgPT4gdXBkYXRlQ29tcG9uZW50KGhvc3RSZWYsIGluc3RhbmNlLCBpc0luaXRpYWxMb2FkKSk7XG59O1xuY29uc3QgdXBkYXRlQ29tcG9uZW50ID0gYXN5bmMgKGhvc3RSZWYsIGluc3RhbmNlLCBpc0luaXRpYWxMb2FkKSA9PiB7XG4gICAgLy8gdXBkYXRlQ29tcG9uZW50XG4gICAgY29uc3QgZWxtID0gaG9zdFJlZi4kaG9zdEVsZW1lbnQkO1xuICAgIGNvbnN0IGVuZFVwZGF0ZSA9IGNyZWF0ZVRpbWUoJ3VwZGF0ZScsIGhvc3RSZWYuJGNtcE1ldGEkLiR0YWdOYW1lJCk7XG4gICAgY29uc3QgcmMgPSBlbG1bJ3MtcmMnXTtcbiAgICBpZiAoQlVJTEQuc3R5bGUgJiYgaXNJbml0aWFsTG9hZCkge1xuICAgICAgICAvLyBET00gV1JJVEUhXG4gICAgICAgIGF0dGFjaFN0eWxlcyhob3N0UmVmKTtcbiAgICB9XG4gICAgY29uc3QgZW5kUmVuZGVyID0gY3JlYXRlVGltZSgncmVuZGVyJywgaG9zdFJlZi4kY21wTWV0YSQuJHRhZ05hbWUkKTtcbiAgICBpZiAoQlVJTEQuaXNEZXYpIHtcbiAgICAgICAgaG9zdFJlZi4kZmxhZ3MkIHw9IDEwMjQgLyogSE9TVF9GTEFHUy5kZXZPblJlbmRlciAqLztcbiAgICB9XG4gICAgaWYgKEJVSUxELmh5ZHJhdGVTZXJ2ZXJTaWRlKSB7XG4gICAgICAgIGF3YWl0IGNhbGxSZW5kZXIoaG9zdFJlZiwgaW5zdGFuY2UsIGVsbSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYWxsUmVuZGVyKGhvc3RSZWYsIGluc3RhbmNlLCBlbG0pO1xuICAgIH1cbiAgICBpZiAoQlVJTEQuY3NzVmFyU2hpbSAmJiBwbHQuJGNzc1NoaW0kKSB7XG4gICAgICAgIHBsdC4kY3NzU2hpbSQudXBkYXRlSG9zdChlbG0pO1xuICAgIH1cbiAgICBpZiAoQlVJTEQuaXNEZXYpIHtcbiAgICAgICAgaG9zdFJlZi4kcmVuZGVyQ291bnQkKys7XG4gICAgICAgIGhvc3RSZWYuJGZsYWdzJCAmPSB+MTAyNCAvKiBIT1NUX0ZMQUdTLmRldk9uUmVuZGVyICovO1xuICAgIH1cbiAgICBpZiAoQlVJTEQuaHlkcmF0ZVNlcnZlclNpZGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIG1hbnVhbGx5IGNvbm5lY3RlZCBjaGlsZCBjb21wb25lbnRzIGR1cmluZyBzZXJ2ZXItc2lkZSBoeWRyYXRlXG4gICAgICAgICAgICBzZXJ2ZXJTaWRlQ29ubmVjdGVkKGVsbSk7XG4gICAgICAgICAgICBpZiAoaXNJbml0aWFsTG9hZCkge1xuICAgICAgICAgICAgICAgIC8vIHVzaW5nIG9ubHkgZHVyaW5nIHNlcnZlci1zaWRlIGh5ZHJhdGVcbiAgICAgICAgICAgICAgICBpZiAoaG9zdFJlZi4kY21wTWV0YSQuJGZsYWdzJCAmIDEgLyogQ01QX0ZMQUdTLnNoYWRvd0RvbUVuY2Fwc3VsYXRpb24gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgZWxtWydzLWVuJ10gPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaG9zdFJlZi4kY21wTWV0YSQuJGZsYWdzJCAmIDIgLyogQ01QX0ZMQUdTLnNjb3BlZENzc0VuY2Fwc3VsYXRpb24gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgZWxtWydzLWVuJ10gPSAnYyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlRXJyb3IoZSwgZWxtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoQlVJTEQuYXN5bmNMb2FkaW5nICYmIHJjKSB7XG4gICAgICAgIC8vIG9rLCBzbyB0dXJucyBvdXQgdGhlcmUgYXJlIHNvbWUgY2hpbGQgaG9zdCBlbGVtZW50c1xuICAgICAgICAvLyB3YWl0aW5nIG9uIHRoaXMgcGFyZW50IGVsZW1lbnQgdG8gbG9hZFxuICAgICAgICAvLyBsZXQncyBmaXJlIG9mZiBhbGwgdXBkYXRlIGNhbGxiYWNrcyB3YWl0aW5nXG4gICAgICAgIHJjLm1hcCgoY2IpID0+IGNiKCkpO1xuICAgICAgICBlbG1bJ3MtcmMnXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZW5kUmVuZGVyKCk7XG4gICAgZW5kVXBkYXRlKCk7XG4gICAgaWYgKEJVSUxELmFzeW5jTG9hZGluZykge1xuICAgICAgICBjb25zdCBjaGlsZHJlblByb21pc2VzID0gZWxtWydzLXAnXTtcbiAgICAgICAgY29uc3QgcG9zdFVwZGF0ZSA9ICgpID0+IHBvc3RVcGRhdGVDb21wb25lbnQoaG9zdFJlZik7XG4gICAgICAgIGlmIChjaGlsZHJlblByb21pc2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcG9zdFVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwoY2hpbGRyZW5Qcm9taXNlcykudGhlbihwb3N0VXBkYXRlKTtcbiAgICAgICAgICAgIGhvc3RSZWYuJGZsYWdzJCB8PSA0IC8qIEhPU1RfRkxBR1MuaXNXYWl0aW5nRm9yQ2hpbGRyZW4gKi87XG4gICAgICAgICAgICBjaGlsZHJlblByb21pc2VzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBvc3RVcGRhdGVDb21wb25lbnQoaG9zdFJlZik7XG4gICAgfVxufTtcbmNvbnN0IGNhbGxSZW5kZXIgPSAoaG9zdFJlZiwgaW5zdGFuY2UsIGVsbSkgPT4ge1xuICAgIC8vIGluIG9yZGVyIGZvciBidW5kbGVycyB0byBjb3JyZWN0bHkgdHJlZXNoYWtlIHRoZSBCVUlMRCBvYmplY3RcbiAgICAvLyB3ZSBuZWVkIHRvIGVuc3VyZSBCVUlMRCBpcyBub3QgZGVvcHRpbWl6ZWQgd2l0aGluIGEgdHJ5L2NhdGNoXG4gICAgLy8gaHR0cHM6Ly9yb2xsdXBqcy5vcmcvZ3VpZGUvZW4vI3RyZWVzaGFrZSB0cnlDYXRjaERlb3B0aW1pemF0aW9uXG4gICAgY29uc3QgYWxsUmVuZGVyRm4gPSBCVUlMRC5hbGxSZW5kZXJGbiA/IHRydWUgOiBmYWxzZTtcbiAgICBjb25zdCBsYXp5TG9hZCA9IEJVSUxELmxhenlMb2FkID8gdHJ1ZSA6IGZhbHNlO1xuICAgIGNvbnN0IHRhc2tRdWV1ZSA9IEJVSUxELnRhc2tRdWV1ZSA/IHRydWUgOiBmYWxzZTtcbiAgICBjb25zdCB1cGRhdGFibGUgPSBCVUlMRC51cGRhdGFibGUgPyB0cnVlIDogZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVuZGVyaW5nUmVmID0gaW5zdGFuY2U7XG4gICAgICAgIGluc3RhbmNlID0gYWxsUmVuZGVyRm4gPyBpbnN0YW5jZS5yZW5kZXIoKSA6IGluc3RhbmNlLnJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIoKTtcbiAgICAgICAgaWYgKHVwZGF0YWJsZSAmJiB0YXNrUXVldWUpIHtcbiAgICAgICAgICAgIGhvc3RSZWYuJGZsYWdzJCAmPSB+MTYgLyogSE9TVF9GTEFHUy5pc1F1ZXVlZEZvclVwZGF0ZSAqLztcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRhYmxlIHx8IGxhenlMb2FkKSB7XG4gICAgICAgICAgICBob3N0UmVmLiRmbGFncyQgfD0gMiAvKiBIT1NUX0ZMQUdTLmhhc1JlbmRlcmVkICovO1xuICAgICAgICB9XG4gICAgICAgIGlmIChCVUlMRC5oYXNSZW5kZXJGbiB8fCBCVUlMRC5yZWZsZWN0KSB7XG4gICAgICAgICAgICBpZiAoQlVJTEQudmRvbVJlbmRlciB8fCBCVUlMRC5yZWZsZWN0KSB7XG4gICAgICAgICAgICAgICAgLy8gbG9va3MgbGlrZSB3ZSd2ZSBnb3QgY2hpbGQgbm9kZXMgdG8gcmVuZGVyIGludG8gdGhpcyBob3N0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAvLyBvciB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgY3NzIGNsYXNzL2F0dHJzIG9uIHRoZSBob3N0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAvLyBET00gV1JJVEUhXG4gICAgICAgICAgICAgICAgaWYgKEJVSUxELmh5ZHJhdGVTZXJ2ZXJTaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaW5zdGFuY2UpLnRoZW4oKHZhbHVlKSA9PiByZW5kZXJWZG9tKGhvc3RSZWYsIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJWZG9tKGhvc3RSZWYsIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbG0udGV4dENvbnRlbnQgPSBpbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlRXJyb3IoZSwgaG9zdFJlZi4kaG9zdEVsZW1lbnQkKTtcbiAgICB9XG4gICAgcmVuZGVyaW5nUmVmID0gbnVsbDtcbiAgICByZXR1cm4gbnVsbDtcbn07XG5jb25zdCBnZXRSZW5kZXJpbmdSZWYgPSAoKSA9PiByZW5kZXJpbmdSZWY7XG5jb25zdCBwb3N0VXBkYXRlQ29tcG9uZW50ID0gKGhvc3RSZWYpID0+IHtcbiAgICBjb25zdCB0YWdOYW1lID0gaG9zdFJlZi4kY21wTWV0YSQuJHRhZ05hbWUkO1xuICAgIGNvbnN0IGVsbSA9IGhvc3RSZWYuJGhvc3RFbGVtZW50JDtcbiAgICBjb25zdCBlbmRQb3N0VXBkYXRlID0gY3JlYXRlVGltZSgncG9zdFVwZGF0ZScsIHRhZ05hbWUpO1xuICAgIGNvbnN0IGluc3RhbmNlID0gQlVJTEQubGF6eUxvYWQgPyBob3N0UmVmLiRsYXp5SW5zdGFuY2UkIDogZWxtO1xuICAgIGNvbnN0IGFuY2VzdG9yQ29tcG9uZW50ID0gaG9zdFJlZi4kYW5jZXN0b3JDb21wb25lbnQkO1xuICAgIGlmIChCVUlMRC5jbXBEaWRSZW5kZXIpIHtcbiAgICAgICAgaWYgKEJVSUxELmlzRGV2KSB7XG4gICAgICAgICAgICBob3N0UmVmLiRmbGFncyQgfD0gMTAyNCAvKiBIT1NUX0ZMQUdTLmRldk9uUmVuZGVyICovO1xuICAgICAgICB9XG4gICAgICAgIHNhZmVDYWxsKGluc3RhbmNlLCAnY29tcG9uZW50RGlkUmVuZGVyJyk7XG4gICAgICAgIGlmIChCVUlMRC5pc0Rldikge1xuICAgICAgICAgICAgaG9zdFJlZi4kZmxhZ3MkICY9IH4xMDI0IC8qIEhPU1RfRkxBR1MuZGV2T25SZW5kZXIgKi87XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1pdExpZmVjeWNsZUV2ZW50KGVsbSwgJ2NvbXBvbmVudERpZFJlbmRlcicpO1xuICAgIGlmICghKGhvc3RSZWYuJGZsYWdzJCAmIDY0IC8qIEhPU1RfRkxBR1MuaGFzTG9hZGVkQ29tcG9uZW50ICovKSkge1xuICAgICAgICBob3N0UmVmLiRmbGFncyQgfD0gNjQgLyogSE9TVF9GTEFHUy5oYXNMb2FkZWRDb21wb25lbnQgKi87XG4gICAgICAgIGlmIChCVUlMRC5hc3luY0xvYWRpbmcgJiYgQlVJTEQuY3NzQW5ub3RhdGlvbnMpIHtcbiAgICAgICAgICAgIC8vIERPTSBXUklURSFcbiAgICAgICAgICAgIGFkZEh5ZHJhdGVkRmxhZyhlbG0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChCVUlMRC5jbXBEaWRMb2FkKSB7XG4gICAgICAgICAgICBpZiAoQlVJTEQuaXNEZXYpIHtcbiAgICAgICAgICAgICAgICBob3N0UmVmLiRmbGFncyQgfD0gMjA0OCAvKiBIT1NUX0ZMQUdTLmRldk9uRGlkTG9hZCAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNhZmVDYWxsKGluc3RhbmNlLCAnY29tcG9uZW50RGlkTG9hZCcpO1xuICAgICAgICAgICAgaWYgKEJVSUxELmlzRGV2KSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlZi4kZmxhZ3MkICY9IH4yMDQ4IC8qIEhPU1RfRkxBR1MuZGV2T25EaWRMb2FkICovO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVtaXRMaWZlY3ljbGVFdmVudChlbG0sICdjb21wb25lbnREaWRMb2FkJyk7XG4gICAgICAgIGVuZFBvc3RVcGRhdGUoKTtcbiAgICAgICAgaWYgKEJVSUxELmFzeW5jTG9hZGluZykge1xuICAgICAgICAgICAgaG9zdFJlZi4kb25SZWFkeVJlc29sdmUkKGVsbSk7XG4gICAgICAgICAgICBpZiAoIWFuY2VzdG9yQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgYXBwRGlkTG9hZCh0YWdOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKEJVSUxELmNtcERpZFVwZGF0ZSkge1xuICAgICAgICAgICAgLy8gd2UndmUgYWxyZWFkeSBsb2FkZWQgdGhpcyBjb21wb25lbnRcbiAgICAgICAgICAgIC8vIGZpcmUgb2ZmIHRoZSB1c2VyJ3MgY29tcG9uZW50RGlkVXBkYXRlIG1ldGhvZCAoaWYgb25lIHdhcyBwcm92aWRlZClcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudERpZFVwZGF0ZSBydW5zIEFGVEVSIHJlbmRlcigpIGhhcyBiZWVuIGNhbGxlZFxuICAgICAgICAgICAgLy8gYW5kIGFsbCBjaGlsZCBjb21wb25lbnRzIGhhdmUgZmluaXNoZWQgdXBkYXRpbmdcbiAgICAgICAgICAgIGlmIChCVUlMRC5pc0Rldikge1xuICAgICAgICAgICAgICAgIGhvc3RSZWYuJGZsYWdzJCB8PSAxMDI0IC8qIEhPU1RfRkxBR1MuZGV2T25SZW5kZXIgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzYWZlQ2FsbChpbnN0YW5jZSwgJ2NvbXBvbmVudERpZFVwZGF0ZScpO1xuICAgICAgICAgICAgaWYgKEJVSUxELmlzRGV2KSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlZi4kZmxhZ3MkICY9IH4xMDI0IC8qIEhPU1RfRkxBR1MuZGV2T25SZW5kZXIgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZW1pdExpZmVjeWNsZUV2ZW50KGVsbSwgJ2NvbXBvbmVudERpZFVwZGF0ZScpO1xuICAgICAgICBlbmRQb3N0VXBkYXRlKCk7XG4gICAgfVxuICAgIGlmIChCVUlMRC5ob3RNb2R1bGVSZXBsYWNlbWVudCkge1xuICAgICAgICBlbG1bJ3MtaG1yLWxvYWQnXSAmJiBlbG1bJ3MtaG1yLWxvYWQnXSgpO1xuICAgIH1cbiAgICBpZiAoQlVJTEQubWV0aG9kICYmIEJVSUxELmxhenlMb2FkKSB7XG4gICAgICAgIGhvc3RSZWYuJG9uSW5zdGFuY2VSZXNvbHZlJChlbG0pO1xuICAgIH1cbiAgICAvLyBsb2FkIGV2ZW50cyBmaXJlIGZyb20gYm90dG9tIHRvIHRvcFxuICAgIC8vIHRoZSBkZWVwZXN0IGVsZW1lbnRzIGxvYWQgZmlyc3QgdGhlbiBidWJibGVzIHVwXG4gICAgaWYgKEJVSUxELmFzeW5jTG9hZGluZykge1xuICAgICAgICBpZiAoaG9zdFJlZi4kb25SZW5kZXJSZXNvbHZlJCkge1xuICAgICAgICAgICAgaG9zdFJlZi4kb25SZW5kZXJSZXNvbHZlJCgpO1xuICAgICAgICAgICAgaG9zdFJlZi4kb25SZW5kZXJSZXNvbHZlJCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaG9zdFJlZi4kZmxhZ3MkICYgNTEyIC8qIEhPU1RfRkxBR1MubmVlZHNSZXJlbmRlciAqLykge1xuICAgICAgICAgICAgbmV4dFRpY2soKCkgPT4gc2NoZWR1bGVVcGRhdGUoaG9zdFJlZiwgZmFsc2UpKTtcbiAgICAgICAgfVxuICAgICAgICBob3N0UmVmLiRmbGFncyQgJj0gfig0IC8qIEhPU1RfRkxBR1MuaXNXYWl0aW5nRm9yQ2hpbGRyZW4gKi8gfCA1MTIgLyogSE9TVF9GTEFHUy5uZWVkc1JlcmVuZGVyICovKTtcbiAgICB9XG4gICAgLy8gKCDigKJf4oCiKVxuICAgIC8vICgg4oCiX+KAoik+4oyQ4pagLeKWoFxuICAgIC8vICjijJDilqBf4pagKVxufTtcbmNvbnN0IGZvcmNlVXBkYXRlID0gKHJlZikgPT4ge1xuICAgIGlmIChCVUlMRC51cGRhdGFibGUpIHtcbiAgICAgICAgY29uc3QgaG9zdFJlZiA9IGdldEhvc3RSZWYocmVmKTtcbiAgICAgICAgY29uc3QgaXNDb25uZWN0ZWQgPSBob3N0UmVmLiRob3N0RWxlbWVudCQuaXNDb25uZWN0ZWQ7XG4gICAgICAgIGlmIChpc0Nvbm5lY3RlZCAmJlxuICAgICAgICAgICAgKGhvc3RSZWYuJGZsYWdzJCAmICgyIC8qIEhPU1RfRkxBR1MuaGFzUmVuZGVyZWQgKi8gfCAxNiAvKiBIT1NUX0ZMQUdTLmlzUXVldWVkRm9yVXBkYXRlICovKSkgPT09IDIgLyogSE9TVF9GTEFHUy5oYXNSZW5kZXJlZCAqLykge1xuICAgICAgICAgICAgc2NoZWR1bGVVcGRhdGUoaG9zdFJlZiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybnMgXCJ0cnVlXCIgd2hlbiB0aGUgZm9yY2VkIHVwZGF0ZSB3YXMgc3VjY2Vzc2Z1bGx5IHNjaGVkdWxlZFxuICAgICAgICByZXR1cm4gaXNDb25uZWN0ZWQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5jb25zdCBhcHBEaWRMb2FkID0gKHdobykgPT4ge1xuICAgIC8vIG9uIGFwcGxvYWRcbiAgICAvLyB3ZSBoYXZlIGZpbmlzaCB0aGUgZmlyc3QgYmlnIGluaXRpYWwgcmVuZGVyXG4gICAgaWYgKEJVSUxELmNzc0Fubm90YXRpb25zKSB7XG4gICAgICAgIGFkZEh5ZHJhdGVkRmxhZyhkb2MuZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKEJVSUxELmFzeW5jUXVldWUpIHtcbiAgICAgICAgcGx0LiRmbGFncyQgfD0gMiAvKiBQTEFURk9STV9GTEFHUy5hcHBMb2FkZWQgKi87XG4gICAgfVxuICAgIG5leHRUaWNrKCgpID0+IGVtaXRFdmVudCh3aW4sICdhcHBsb2FkJywgeyBkZXRhaWw6IHsgbmFtZXNwYWNlOiBOQU1FU1BBQ0UgfSB9KSk7XG4gICAgaWYgKEJVSUxELnByb2ZpbGUgJiYgcGVyZm9ybWFuY2UubWVhc3VyZSkge1xuICAgICAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKGBbU3RlbmNpbF0gJHtOQU1FU1BBQ0V9IGluaXRpYWwgbG9hZCAoYnkgJHt3aG99KWAsICdzdDphcHA6c3RhcnQnKTtcbiAgICB9XG59O1xuY29uc3Qgc2FmZUNhbGwgPSAoaW5zdGFuY2UsIG1ldGhvZCwgYXJnKSA9PiB7XG4gICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlW21ldGhvZF0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZVttZXRob2RdKGFyZyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGVFcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbmNvbnN0IHRoZW4gPSAocHJvbWlzZSwgdGhlbkZuKSA9PiB7XG4gICAgcmV0dXJuIHByb21pc2UgJiYgcHJvbWlzZS50aGVuID8gcHJvbWlzZS50aGVuKHRoZW5GbikgOiB0aGVuRm4oKTtcbn07XG5jb25zdCBlbWl0TGlmZWN5Y2xlRXZlbnQgPSAoZWxtLCBsaWZlY3ljbGVOYW1lKSA9PiB7XG4gICAgaWYgKEJVSUxELmxpZmVjeWNsZURPTUV2ZW50cykge1xuICAgICAgICBlbWl0RXZlbnQoZWxtLCAnc3RlbmNpbF8nICsgbGlmZWN5Y2xlTmFtZSwge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBOQU1FU1BBQ0UsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG59O1xuY29uc3QgYWRkSHlkcmF0ZWRGbGFnID0gKGVsbSkgPT4gQlVJTEQuaHlkcmF0ZWRDbGFzc1xuICAgID8gZWxtLmNsYXNzTGlzdC5hZGQoJ2h5ZHJhdGVkJylcbiAgICA6IEJVSUxELmh5ZHJhdGVkQXR0cmlidXRlXG4gICAgICAgID8gZWxtLnNldEF0dHJpYnV0ZSgnaHlkcmF0ZWQnLCAnJylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5jb25zdCBzZXJ2ZXJTaWRlQ29ubmVjdGVkID0gKGVsbSkgPT4ge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gZWxtLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRWxtID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkRWxtLmNvbm5lY3RlZENhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRFbG0uY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlcnZlclNpZGVDb25uZWN0ZWQoY2hpbGRFbG0pO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IGdldFZhbHVlID0gKHJlZiwgcHJvcE5hbWUpID0+IGdldEhvc3RSZWYocmVmKS4kaW5zdGFuY2VWYWx1ZXMkLmdldChwcm9wTmFtZSk7XG5jb25zdCBzZXRWYWx1ZSA9IChyZWYsIHByb3BOYW1lLCBuZXdWYWwsIGNtcE1ldGEpID0+IHtcbiAgICAvLyBjaGVjayBvdXIgbmV3IHByb3BlcnR5IHZhbHVlIGFnYWluc3Qgb3VyIGludGVybmFsIHZhbHVlXG4gICAgY29uc3QgaG9zdFJlZiA9IGdldEhvc3RSZWYocmVmKTtcbiAgICBjb25zdCBlbG0gPSBCVUlMRC5sYXp5TG9hZCA/IGhvc3RSZWYuJGhvc3RFbGVtZW50JCA6IHJlZjtcbiAgICBjb25zdCBvbGRWYWwgPSBob3N0UmVmLiRpbnN0YW5jZVZhbHVlcyQuZ2V0KHByb3BOYW1lKTtcbiAgICBjb25zdCBmbGFncyA9IGhvc3RSZWYuJGZsYWdzJDtcbiAgICBjb25zdCBpbnN0YW5jZSA9IEJVSUxELmxhenlMb2FkID8gaG9zdFJlZi4kbGF6eUluc3RhbmNlJCA6IGVsbTtcbiAgICBuZXdWYWwgPSBwYXJzZVByb3BlcnR5VmFsdWUobmV3VmFsLCBjbXBNZXRhLiRtZW1iZXJzJFtwcm9wTmFtZV1bMF0pO1xuICAgIC8vIGV4cGxpY2l0bHkgY2hlY2sgZm9yIE5hTiBvbiBib3RoIHNpZGVzLCBhcyBgTmFOID09PSBOYU5gIGlzIGFsd2F5cyBmYWxzZVxuICAgIGNvbnN0IGFyZUJvdGhOYU4gPSBOdW1iZXIuaXNOYU4ob2xkVmFsKSAmJiBOdW1iZXIuaXNOYU4obmV3VmFsKTtcbiAgICBjb25zdCBkaWRWYWx1ZUNoYW5nZSA9IG5ld1ZhbCAhPT0gb2xkVmFsICYmICFhcmVCb3RoTmFOO1xuICAgIGlmICgoIUJVSUxELmxhenlMb2FkIHx8ICEoZmxhZ3MgJiA4IC8qIEhPU1RfRkxBR1MuaXNDb25zdHJ1Y3RpbmdJbnN0YW5jZSAqLykgfHwgb2xkVmFsID09PSB1bmRlZmluZWQpICYmIGRpZFZhbHVlQ2hhbmdlKSB7XG4gICAgICAgIC8vIGdhZHpvb2tzISB0aGUgcHJvcGVydHkncyB2YWx1ZSBoYXMgY2hhbmdlZCEhXG4gICAgICAgIC8vIHNldCBvdXIgbmV3IHZhbHVlIVxuICAgICAgICBob3N0UmVmLiRpbnN0YW5jZVZhbHVlcyQuc2V0KHByb3BOYW1lLCBuZXdWYWwpO1xuICAgICAgICBpZiAoQlVJTEQuaXNEZXYpIHtcbiAgICAgICAgICAgIGlmIChob3N0UmVmLiRmbGFncyQgJiAxMDI0IC8qIEhPU1RfRkxBR1MuZGV2T25SZW5kZXIgKi8pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlRGV2V2FybihgVGhlIHN0YXRlL3Byb3AgXCIke3Byb3BOYW1lfVwiIGNoYW5nZWQgZHVyaW5nIHJlbmRlcmluZy4gVGhpcyBjYW4gcG90ZW50aWFsbHkgbGVhZCB0byBpbmZpbml0ZS1sb29wcyBhbmQgb3RoZXIgYnVncy5gLCAnXFxuRWxlbWVudCcsIGVsbSwgJ1xcbk5ldyB2YWx1ZScsIG5ld1ZhbCwgJ1xcbk9sZCB2YWx1ZScsIG9sZFZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChob3N0UmVmLiRmbGFncyQgJiAyMDQ4IC8qIEhPU1RfRkxBR1MuZGV2T25EaWRMb2FkICovKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZURldldhcm4oYFRoZSBzdGF0ZS9wcm9wIFwiJHtwcm9wTmFtZX1cIiBjaGFuZ2VkIGR1cmluZyBcImNvbXBvbmVudERpZExvYWQoKVwiLCB0aGlzIHRyaWdnZXJzIGV4dHJhIHJlLXJlbmRlcnMsIHRyeSB0byBzZXR1cCBvbiBcImNvbXBvbmVudFdpbGxMb2FkKClcImAsICdcXG5FbGVtZW50JywgZWxtLCAnXFxuTmV3IHZhbHVlJywgbmV3VmFsLCAnXFxuT2xkIHZhbHVlJywgb2xkVmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIUJVSUxELmxhenlMb2FkIHx8IGluc3RhbmNlKSB7XG4gICAgICAgICAgICAvLyBnZXQgYW4gYXJyYXkgb2YgbWV0aG9kIG5hbWVzIG9mIHdhdGNoIGZ1bmN0aW9ucyB0byBjYWxsXG4gICAgICAgICAgICBpZiAoQlVJTEQud2F0Y2hDYWxsYmFjayAmJiBjbXBNZXRhLiR3YXRjaGVycyQgJiYgZmxhZ3MgJiAxMjggLyogSE9TVF9GTEFHUy5pc1dhdGNoUmVhZHkgKi8pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3YXRjaE1ldGhvZHMgPSBjbXBNZXRhLiR3YXRjaGVycyRbcHJvcE5hbWVdO1xuICAgICAgICAgICAgICAgIGlmICh3YXRjaE1ldGhvZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpbnN0YW5jZSBpcyB3YXRjaGluZyBmb3Igd2hlbiB0aGlzIHByb3BlcnR5IGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgICAgd2F0Y2hNZXRob2RzLm1hcCgod2F0Y2hNZXRob2ROYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpcmUgb2ZmIGVhY2ggb2YgdGhlIHdhdGNoIG1ldGhvZHMgdGhhdCBhcmUgd2F0Y2hpbmcgdGhpcyBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlW3dhdGNoTWV0aG9kTmFtZV0obmV3VmFsLCBvbGRWYWwsIHByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZUVycm9yKGUsIGVsbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCVUlMRC51cGRhdGFibGUgJiZcbiAgICAgICAgICAgICAgICAoZmxhZ3MgJiAoMiAvKiBIT1NUX0ZMQUdTLmhhc1JlbmRlcmVkICovIHwgMTYgLyogSE9TVF9GTEFHUy5pc1F1ZXVlZEZvclVwZGF0ZSAqLykpID09PSAyIC8qIEhPU1RfRkxBR1MuaGFzUmVuZGVyZWQgKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAoQlVJTEQuY21wU2hvdWxkVXBkYXRlICYmIGluc3RhbmNlLmNvbXBvbmVudFNob3VsZFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuY29tcG9uZW50U2hvdWxkVXBkYXRlKG5ld1ZhbCwgb2xkVmFsLCBwcm9wTmFtZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gbG9va3MgbGlrZSB0aGlzIHZhbHVlIGFjdHVhbGx5IGNoYW5nZWQsIHNvIHdlJ3ZlIGdvdCB3b3JrIHRvIGRvIVxuICAgICAgICAgICAgICAgIC8vIGJ1dCBvbmx5IGlmIHdlJ3ZlIGFscmVhZHkgcmVuZGVyZWQsIG90aGVyd2lzZSBqdXN0IGNoaWxsIG91dFxuICAgICAgICAgICAgICAgIC8vIHF1ZXVlIHRoYXQgd2UgbmVlZCB0byBkbyBhbiB1cGRhdGUsIGJ1dCBkb24ndCB3b3JyeSBhYm91dCBxdWV1aW5nXG4gICAgICAgICAgICAgICAgLy8gdXAgbWlsbGlvbnMgY3V6IHRoaXMgZnVuY3Rpb24gZW5zdXJlcyBpdCBvbmx5IHJ1bnMgb25jZVxuICAgICAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlKGhvc3RSZWYsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG4vKipcbiAqIEF0dGFjaCBhIHNlcmllcyBvZiBydW50aW1lIGNvbnN0cnVjdHMgdG8gYSBjb21waWxlZCBTdGVuY2lsIGNvbXBvbmVudFxuICogY29uc3RydWN0b3IsIGluY2x1ZGluZyBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGZvciB0aGUgYEBQcm9wYCBhbmQgYEBTdGF0ZWBcbiAqIGRlY29yYXRvcnMsIGNhbGxiYWNrcyBmb3Igd2hlbiBhdHRyaWJ1dGVzIGNoYW5nZSwgYW5kIHNvIG9uLlxuICpcbiAqIEBwYXJhbSBDc3RyIHRoZSBjb25zdHJ1Y3RvciBmb3IgYSBjb21wb25lbnQgdGhhdCB3ZSBuZWVkIHRvIHByb2Nlc3NcbiAqIEBwYXJhbSBjbXBNZXRhIG1ldGFkYXRhIGNvbGxlY3RlZCBwcmV2aW91c2x5IGFib3V0IHRoZSBjb21wb25lbnRcbiAqIEBwYXJhbSBmbGFncyBhIG51bWJlciB1c2VkIHRvIHN0b3JlIGEgc2VyaWVzIG9mIGJpdCBmbGFnc1xuICogQHJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIHNhbWUgY29uc3RydWN0b3IgcGFzc2VkIGluIChidXQgbm93IG11dGF0ZWQpXG4gKi9cbmNvbnN0IHByb3h5Q29tcG9uZW50ID0gKENzdHIsIGNtcE1ldGEsIGZsYWdzKSA9PiB7XG4gICAgaWYgKEJVSUxELm1lbWJlciAmJiBjbXBNZXRhLiRtZW1iZXJzJCkge1xuICAgICAgICBpZiAoQlVJTEQud2F0Y2hDYWxsYmFjayAmJiBDc3RyLndhdGNoZXJzKSB7XG4gICAgICAgICAgICBjbXBNZXRhLiR3YXRjaGVycyQgPSBDc3RyLndhdGNoZXJzO1xuICAgICAgICB9XG4gICAgICAgIC8vIEl0J3MgYmV0dGVyIHRvIGhhdmUgYSBjb25zdCB0aGFuIHR3byBPYmplY3QuZW50cmllcygpXG4gICAgICAgIGNvbnN0IG1lbWJlcnMgPSBPYmplY3QuZW50cmllcyhjbXBNZXRhLiRtZW1iZXJzJCk7XG4gICAgICAgIGNvbnN0IHByb3RvdHlwZSA9IENzdHIucHJvdG90eXBlO1xuICAgICAgICBtZW1iZXJzLm1hcCgoW21lbWJlck5hbWUsIFttZW1iZXJGbGFnc11dKSA9PiB7XG4gICAgICAgICAgICBpZiAoKEJVSUxELnByb3AgfHwgQlVJTEQuc3RhdGUpICYmXG4gICAgICAgICAgICAgICAgKG1lbWJlckZsYWdzICYgMzEgLyogTUVNQkVSX0ZMQUdTLlByb3AgKi8gfHxcbiAgICAgICAgICAgICAgICAgICAgKCghQlVJTEQubGF6eUxvYWQgfHwgZmxhZ3MgJiAyIC8qIFBST1hZX0ZMQUdTLnByb3h5U3RhdGUgKi8pICYmIG1lbWJlckZsYWdzICYgMzIgLyogTUVNQkVSX0ZMQUdTLlN0YXRlICovKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBwcm94eUNvbXBvbmVudCAtIHByb3BcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCBtZW1iZXJOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb3h5Q29tcG9uZW50LCBnZXQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRWYWx1ZSh0aGlzLCBtZW1iZXJOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0KG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGR1cmluZyBkZXYgdGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEJVSUxELmlzRGV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVmID0gZ2V0SG9zdFJlZih0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIHByb3h5aW5nIHRoZSBpbnN0YW5jZSAobm90IGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZsYWdzICYgMSAvKiBQUk9YWV9GTEFHUy5pc0VsZW1lbnRDb25zdHJ1Y3RvciAqLykgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgaXMgbm90IGNvbnN0cnVjdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVmLiRmbGFncyQgJiA4IC8qIEhPU1RfRkxBR1MuaXNDb25zdHJ1Y3RpbmdJbnN0YW5jZSAqLykgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG1lbWJlciBpcyBhIHByb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1lbWJlckZsYWdzICYgMzEgLyogTUVNQkVSX0ZMQUdTLlByb3AgKi8pICE9PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBtZW1iZXIgaXMgbm90IG11dGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1lbWJlckZsYWdzICYgMTAyNCAvKiBNRU1CRVJfRkxBR1MuTXV0YWJsZSAqLykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZURldldhcm4oYEBQcm9wKCkgXCIke21lbWJlck5hbWV9XCIgb24gPCR7Y21wTWV0YS4kdGFnTmFtZSR9PiBpcyBpbW11dGFibGUgYnV0IHdhcyBtb2RpZmllZCBmcm9tIHdpdGhpbiB0aGUgY29tcG9uZW50Llxcbk1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vc3RlbmNpbGpzLmNvbS9kb2NzL3Byb3BlcnRpZXMjcHJvcC1tdXRhYmlsaXR5YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJveHlDb21wb25lbnQsIHNldCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUodGhpcywgbWVtYmVyTmFtZSwgbmV3VmFsdWUsIGNtcE1ldGEpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChCVUlMRC5sYXp5TG9hZCAmJlxuICAgICAgICAgICAgICAgIEJVSUxELm1ldGhvZCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzICYgMSAvKiBQUk9YWV9GTEFHUy5pc0VsZW1lbnRDb25zdHJ1Y3RvciAqLyAmJlxuICAgICAgICAgICAgICAgIG1lbWJlckZsYWdzICYgNjQgLyogTUVNQkVSX0ZMQUdTLk1ldGhvZCAqLykge1xuICAgICAgICAgICAgICAgIC8vIHByb3h5Q29tcG9uZW50IC0gbWV0aG9kXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgbWVtYmVyTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWYgPSBnZXRIb3N0UmVmKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZi4kb25JbnN0YW5jZVByb21pc2UkLnRoZW4oKCkgPT4gcmVmLiRsYXp5SW5zdGFuY2UkW21lbWJlck5hbWVdKC4uLmFyZ3MpKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChCVUlMRC5vYnNlcnZlQXR0cmlidXRlICYmICghQlVJTEQubGF6eUxvYWQgfHwgZmxhZ3MgJiAxIC8qIFBST1hZX0ZMQUdTLmlzRWxlbWVudENvbnN0cnVjdG9yICovKSkge1xuICAgICAgICAgICAgY29uc3QgYXR0ck5hbWVUb1Byb3BOYW1lID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgcHJvdG90eXBlLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayA9IGZ1bmN0aW9uIChhdHRyTmFtZSwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHBsdC5qbXAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wTmFtZSA9IGF0dHJOYW1lVG9Qcm9wTmFtZS5nZXQoYXR0ck5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgSW4gYSB3ZWIgY29tcG9uZW50IGxpZmVjeWNsZSB0aGUgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIHJ1bnMgcHJpb3IgdG8gY29ubmVjdGVkQ2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgLy8gIGluIHRoZSBjYXNlIHdoZXJlIGFuIGF0dHJpYnV0ZSB3YXMgc2V0IGlubGluZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gIGBgYGh0bWxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgPG15LWNvbXBvbmVudCBzb21lLWF0dHJpYnV0ZT1cInNvbWUtdmFsdWVcIj48L215LWNvbXBvbmVudD5cbiAgICAgICAgICAgICAgICAgICAgLy8gIGBgYFxuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyAgVGhlcmUgaXMgYW4gZWRnZSBjYXNlIHdoZXJlIGEgZGV2ZWxvcGVyIHNldHMgdGhlIGF0dHJpYnV0ZSBpbmxpbmUgb24gYSBjdXN0b20gZWxlbWVudCBhbmQgdGhlblxuICAgICAgICAgICAgICAgICAgICAvLyAgcHJvZ3JhbW1hdGljYWxseSBjaGFuZ2VzIGl0IGJlZm9yZSBpdCBoYXMgYmVlbiB1cGdyYWRlZCBhcyBzaG93biBiZWxvdzpcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gIGBgYGh0bWxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgPCEtLSB0aGlzIGNvbXBvbmVudCBoYXMgX25vdF8gYmVlbiB1cGdyYWRlZCB5ZXQgLS0+XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIDxteS1jb21wb25lbnQgaWQ9XCJ0ZXN0XCIgc29tZS1hdHRyaWJ1dGU9XCJzb21lLXZhbHVlXCI+PC9teS1jb21wb25lbnQ+XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgLy8gZ3JhYiBub24tdXBncmFkZWQgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Rlc3RcIik7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgZWwuc29tZUF0dHJpYnV0ZSA9IFwiYW5vdGhlci12YWx1ZVwiO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgIC8vIHVwZ3JhZGUgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdteS1jb21wb25lbnQnLCBNeUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIDwvc2NyaXB0PlxuICAgICAgICAgICAgICAgICAgICAvLyAgYGBgXG4gICAgICAgICAgICAgICAgICAgIC8vICBJbiB0aGlzIGNhc2UgaWYgd2UgZG8gbm90IHVuc2hhZG93IGhlcmUgYW5kIHVzZSB0aGUgdmFsdWUgb2YgdGhlIHNoYWRvd2luZyBwcm9wZXJ0eSwgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIC8vICB3aWxsIGJlIGNhbGxlZCB3aXRoIGBuZXdWYWx1ZSA9IFwic29tZS12YWx1ZVwiYCBhbmQgd2lsbCBzZXQgdGhlIHNoYWRvd2VkIHByb3BlcnR5ICh0aGlzLnNvbWVBdHRyaWJ1dGUgPSBcImFub3RoZXItdmFsdWVcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gIHRvIHRoZSB2YWx1ZSB0aGF0IHdhcyBzZXQgaW5saW5lIGkuZS4gXCJzb21lLXZhbHVlXCIgZnJvbSBhYm92ZSBleGFtcGxlLiBXaGVuXG4gICAgICAgICAgICAgICAgICAgIC8vICB0aGUgY29ubmVjdGVkQ2FsbGJhY2sgYXR0ZW1wdHMgdG8gdW5zaGFkb3cgaXQgd2lsbCB1c2UgXCJzb21lLXZhbHVlXCIgYXMgdGhlIGluaXRpYWwgdmFsdWUgcmF0aGVyIHRoYW4gXCJhbm90aGVyLXZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gIFRoZSBjYXNlIHdoZXJlIHRoZSBhdHRyaWJ1dGUgd2FzIE5PVCBzZXQgaW5saW5lIGJ1dCB3YXMgbm90IHNldCBwcm9ncmFtbWF0aWNhbGx5IHNoYWxsIGJlIGhhbmRsZWQvdW5zaGFkb3dlZFxuICAgICAgICAgICAgICAgICAgICAvLyAgYnkgY29ubmVjdGVkQ2FsbGJhY2sgYXMgdGhpcyBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgd2lsbCBub3QgZmlyZS5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi9mdW5kYW1lbnRhbHMvd2ViLWNvbXBvbmVudHMvYmVzdC1wcmFjdGljZXMjbGF6eS1wcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vICBUT0RPKFNURU5DSUwtMTYpIHdlIHNob3VsZCB0aGluayBhYm91dCB3aGV0aGVyIG9yIG5vdCB3ZSBhY3R1YWxseSB3YW50IHRvIGJlIHJlZmxlY3RpbmcgdGhlIGF0dHJpYnV0ZXMgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gIHByb3BlcnRpZXMgaGVyZSBnaXZlbiB0aGF0IHRoaXMgZ29lcyBhZ2FpbnN0IGJlc3QgcHJhY3RpY2VzIG91dGxpbmVkIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi9mdW5kYW1lbnRhbHMvd2ViLWNvbXBvbmVudHMvYmVzdC1wcmFjdGljZXMjYXZvaWQtcmVlbnRyYW5jeVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdGhpc1twcm9wTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1twcm9wTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvdG90eXBlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXNbcHJvcE5hbWVdID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1twcm9wTmFtZV0gPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwcm9wTmFtZSBleGlzdHMgb24gdGhlIHByb3RvdHlwZSBvZiBgQ3N0cmAsIHRoaXMgdXBkYXRlIG1heSBiZSBhIHJlc3VsdCBvZiBTdGVuY2lsIHVzaW5nIG5hdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQVBJcyB0byByZWZsZWN0IHByb3BzIGFzIGF0dHJpYnV0ZXMuIENhbGxzIHRvIGBzZXRBdHRyaWJ1dGUoc29tZUVsZW1lbnQsIHByb3BOYW1lKWAgd2lsbCByZXN1bHQgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGBwcm9wTmFtZWAgdG8gYmUgY29udmVydGVkIHRvIGEgYERPTVN0cmluZ2AsIHdoaWNoIG1heSBub3QgYmUgd2hhdCB3ZSB3YW50IGZvciBvdGhlciBwcmltaXRpdmUgcHJvcHMuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpc1twcm9wTmFtZV0gPSBuZXdWYWx1ZSA9PT0gbnVsbCAmJiB0eXBlb2YgdGhpc1twcm9wTmFtZV0gPT09ICdib29sZWFuJyA/IGZhbHNlIDogbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gY3JlYXRlIGFuIGFycmF5IG9mIGF0dHJpYnV0ZXMgdG8gb2JzZXJ2ZVxuICAgICAgICAgICAgLy8gYW5kIGFsc28gY3JlYXRlIGEgbWFwIG9mIGh0bWwgYXR0cmlidXRlIG5hbWUgdG8ganMgcHJvcGVydHkgbmFtZVxuICAgICAgICAgICAgQ3N0ci5vYnNlcnZlZEF0dHJpYnV0ZXMgPSBtZW1iZXJzXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoW18sIG1dKSA9PiBtWzBdICYgMTUgLyogTUVNQkVSX0ZMQUdTLkhhc0F0dHJpYnV0ZSAqLykgLy8gZmlsdGVyIHRvIG9ubHkga2VlcCBwcm9wcyB0aGF0IHNob3VsZCBtYXRjaCBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgLm1hcCgoW3Byb3BOYW1lLCBtXSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gbVsxXSB8fCBwcm9wTmFtZTtcbiAgICAgICAgICAgICAgICBhdHRyTmFtZVRvUHJvcE5hbWUuc2V0KGF0dHJOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKEJVSUxELnJlZmxlY3QgJiYgbVswXSAmIDUxMiAvKiBNRU1CRVJfRkxBR1MuUmVmbGVjdEF0dHIgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgY21wTWV0YS4kYXR0cnNUb1JlZmxlY3QkLnB1c2goW3Byb3BOYW1lLCBhdHRyTmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0ck5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQ3N0cjtcbn07XG5jb25zdCBpbml0aWFsaXplQ29tcG9uZW50ID0gYXN5bmMgKGVsbSwgaG9zdFJlZiwgY21wTWV0YSwgaG1yVmVyc2lvbklkLCBDc3RyKSA9PiB7XG4gICAgLy8gaW5pdGlhbGl6ZUNvbXBvbmVudFxuICAgIGlmICgoQlVJTEQubGF6eUxvYWQgfHwgQlVJTEQuaHlkcmF0ZVNlcnZlclNpZGUgfHwgQlVJTEQuc3R5bGUpICYmXG4gICAgICAgIChob3N0UmVmLiRmbGFncyQgJiAzMiAvKiBIT1NUX0ZMQUdTLmhhc0luaXRpYWxpemVkQ29tcG9uZW50ICovKSA9PT0gMCkge1xuICAgICAgICBpZiAoQlVJTEQubGF6eUxvYWQgfHwgQlVJTEQuaHlkcmF0ZUNsaWVudFNpZGUpIHtcbiAgICAgICAgICAgIC8vIHdlIGhhdmVuJ3QgaW5pdGlhbGl6ZWQgdGhpcyBlbGVtZW50IHlldFxuICAgICAgICAgICAgaG9zdFJlZi4kZmxhZ3MkIHw9IDMyIC8qIEhPU1RfRkxBR1MuaGFzSW5pdGlhbGl6ZWRDb21wb25lbnQgKi87XG4gICAgICAgICAgICAvLyBsYXp5IGxvYWRlZCBjb21wb25lbnRzXG4gICAgICAgICAgICAvLyByZXF1ZXN0IHRoZSBjb21wb25lbnQncyBpbXBsZW1lbnRhdGlvbiB0byBiZVxuICAgICAgICAgICAgLy8gd2lyZWQgdXAgd2l0aCB0aGUgaG9zdCBlbGVtZW50XG4gICAgICAgICAgICBDc3RyID0gbG9hZE1vZHVsZShjbXBNZXRhLCBob3N0UmVmLCBobXJWZXJzaW9uSWQpO1xuICAgICAgICAgICAgaWYgKENzdHIudGhlbikge1xuICAgICAgICAgICAgICAgIC8vIEF3YWl0IGNyZWF0ZXMgYSBtaWNyby10YXNrIGF2b2lkIGlmIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgY29uc3QgZW5kTG9hZCA9IHVuaXF1ZVRpbWUoYHN0OmxvYWQ6JHtjbXBNZXRhLiR0YWdOYW1lJH06JHtob3N0UmVmLiRtb2RlTmFtZSR9YCwgYFtTdGVuY2lsXSBMb2FkIG1vZHVsZSBmb3IgPCR7Y21wTWV0YS4kdGFnTmFtZSR9PmApO1xuICAgICAgICAgICAgICAgIENzdHIgPSBhd2FpdCBDc3RyO1xuICAgICAgICAgICAgICAgIGVuZExvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoQlVJTEQuaXNEZXYgfHwgQlVJTEQuaXNEZWJ1ZykgJiYgIUNzdHIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbnN0cnVjdG9yIGZvciBcIiR7Y21wTWV0YS4kdGFnTmFtZSR9IyR7aG9zdFJlZi4kbW9kZU5hbWUkfVwiIHdhcyBub3QgZm91bmRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCVUlMRC5tZW1iZXIgJiYgIUNzdHIuaXNQcm94aWVkKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UndmUgbmV2ZXIgcHJveGllZCB0aGlzIENvbnN0cnVjdG9yIGJlZm9yZVxuICAgICAgICAgICAgICAgIC8vIGxldCdzIGFkZCB0aGUgZ2V0dGVycy9zZXR0ZXJzIHRvIGl0cyBwcm90b3R5cGUgYmVmb3JlXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IHRpbWUgd2UgY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgICAgICAgICAgICAgIGlmIChCVUlMRC53YXRjaENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNtcE1ldGEuJHdhdGNoZXJzJCA9IENzdHIud2F0Y2hlcnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb3h5Q29tcG9uZW50KENzdHIsIGNtcE1ldGEsIDIgLyogUFJPWFlfRkxBR1MucHJveHlTdGF0ZSAqLyk7XG4gICAgICAgICAgICAgICAgQ3N0ci5pc1Byb3hpZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZW5kTmV3SW5zdGFuY2UgPSBjcmVhdGVUaW1lKCdjcmVhdGVJbnN0YW5jZScsIGNtcE1ldGEuJHRhZ05hbWUkKTtcbiAgICAgICAgICAgIC8vIG9rLCB0aW1lIHRvIGNvbnN0cnVjdCB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgIC8vIGJ1dCBsZXQncyBrZWVwIHRyYWNrIG9mIHdoZW4gd2Ugc3RhcnQgYW5kIHN0b3BcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgdGhlIGdldHRlcnMvc2V0dGVycyBkb24ndCBpbmNvcnJlY3RseSBzdGVwIG9uIGRhdGFcbiAgICAgICAgICAgIGlmIChCVUlMRC5tZW1iZXIpIHtcbiAgICAgICAgICAgICAgICBob3N0UmVmLiRmbGFncyQgfD0gOCAvKiBIT1NUX0ZMQUdTLmlzQ29uc3RydWN0aW5nSW5zdGFuY2UgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb25zdHJ1Y3QgdGhlIGxhenktbG9hZGVkIGNvbXBvbmVudCBpbXBsZW1lbnRhdGlvblxuICAgICAgICAgICAgLy8gcGFzc2luZyB0aGUgaG9zdFJlZiBpcyB2ZXJ5IGltcG9ydGFudCBkdXJpbmdcbiAgICAgICAgICAgIC8vIGNvbnN0cnVjdGlvbiBpbiBvcmRlciB0byBkaXJlY3RseSB3aXJlIHRvZ2V0aGVyIHRoZVxuICAgICAgICAgICAgLy8gaG9zdCBlbGVtZW50IGFuZCB0aGUgbGF6eS1sb2FkZWQgaW5zdGFuY2VcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbmV3IENzdHIoaG9zdFJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGVFcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCVUlMRC5tZW1iZXIpIHtcbiAgICAgICAgICAgICAgICBob3N0UmVmLiRmbGFncyQgJj0gfjggLyogSE9TVF9GTEFHUy5pc0NvbnN0cnVjdGluZ0luc3RhbmNlICovO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEJVSUxELndhdGNoQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBob3N0UmVmLiRmbGFncyQgfD0gMTI4IC8qIEhPU1RfRkxBR1MuaXNXYXRjaFJlYWR5ICovO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5kTmV3SW5zdGFuY2UoKTtcbiAgICAgICAgICAgIGZpcmVDb25uZWN0ZWRDYWxsYmFjayhob3N0UmVmLiRsYXp5SW5zdGFuY2UkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHN5bmMgY29uc3RydWN0b3IgY29tcG9uZW50XG4gICAgICAgICAgICBDc3RyID0gZWxtLmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgaG9zdFJlZi4kZmxhZ3MkIHw9IDMyIC8qIEhPU1RfRkxBR1MuaGFzSW5pdGlhbGl6ZWRDb21wb25lbnQgKi87XG4gICAgICAgICAgICAvLyB3YWl0IGZvciB0aGUgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5IHRvIG1hcmsgdGhlIGNvbXBvbmVudCBhcyByZWFkeSBiZWZvcmUgc2V0dGluZyBgaXNXYXRjaFJlYWR5YC4gT3RoZXJ3aXNlLFxuICAgICAgICAgICAgLy8gd2F0Y2hlcnMgbWF5IGZpcmUgcHJlbWF0dXJlbHkgaWYgYGN1c3RvbUVsZW1lbnRzLmdldCgpYC9gY3VzdG9tRWxlbWVudHMud2hlbkRlZmluZWQoKWAgcmVzb2x2ZXMgX2JlZm9yZV9cbiAgICAgICAgICAgIC8vIFN0ZW5jaWwgaGFzIGNvbXBsZXRlZCBpbnN0YW50aWF0aW5nIHRoZSBjb21wb25lbnQuXG4gICAgICAgICAgICBjdXN0b21FbGVtZW50cy53aGVuRGVmaW5lZChjbXBNZXRhLiR0YWdOYW1lJCkudGhlbigoKSA9PiAoaG9zdFJlZi4kZmxhZ3MkIHw9IDEyOCAvKiBIT1NUX0ZMQUdTLmlzV2F0Y2hSZWFkeSAqLykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChCVUlMRC5zdHlsZSAmJiBDc3RyLnN0eWxlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGNvbXBvbmVudCBoYXMgc3R5bGVzIGJ1dCB3ZSBoYXZlbid0IHJlZ2lzdGVyZWQgdGhlbSB5ZXRcbiAgICAgICAgICAgIGxldCBzdHlsZSA9IENzdHIuc3R5bGU7XG4gICAgICAgICAgICBpZiAoQlVJTEQubW9kZSAmJiB0eXBlb2Ygc3R5bGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgc3R5bGUgPSBzdHlsZVsoaG9zdFJlZi4kbW9kZU5hbWUkID0gY29tcHV0ZU1vZGUoZWxtKSldO1xuICAgICAgICAgICAgICAgIGlmIChCVUlMRC5oeWRyYXRlU2VydmVyU2lkZSAmJiBob3N0UmVmLiRtb2RlTmFtZSQpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxtLnNldEF0dHJpYnV0ZSgncy1tb2RlJywgaG9zdFJlZi4kbW9kZU5hbWUkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzY29wZUlkID0gZ2V0U2NvcGVJZChjbXBNZXRhLCBob3N0UmVmLiRtb2RlTmFtZSQpO1xuICAgICAgICAgICAgaWYgKCFzdHlsZXMuaGFzKHNjb3BlSWQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kUmVnaXN0ZXJTdHlsZXMgPSBjcmVhdGVUaW1lKCdyZWdpc3RlclN0eWxlcycsIGNtcE1ldGEuJHRhZ05hbWUkKTtcbiAgICAgICAgICAgICAgICBpZiAoIUJVSUxELmh5ZHJhdGVTZXJ2ZXJTaWRlICYmXG4gICAgICAgICAgICAgICAgICAgIEJVSUxELnNoYWRvd0RvbSAmJlxuICAgICAgICAgICAgICAgICAgICBCVUlMRC5zaGFkb3dEb21TaGltICYmXG4gICAgICAgICAgICAgICAgICAgIGNtcE1ldGEuJGZsYWdzJCAmIDggLyogQ01QX0ZMQUdTLm5lZWRzU2hhZG93RG9tU2hpbSAqLykge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IGF3YWl0IGltcG9ydCgnLi9zaGFkb3ctY3NzLmpzJykudGhlbigobSkgPT4gbS5zY29wZUNzcyhzdHlsZSwgc2NvcGVJZCwgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJTdHlsZShzY29wZUlkLCBzdHlsZSwgISEoY21wTWV0YS4kZmxhZ3MkICYgMSAvKiBDTVBfRkxBR1Muc2hhZG93RG9tRW5jYXBzdWxhdGlvbiAqLykpO1xuICAgICAgICAgICAgICAgIGVuZFJlZ2lzdGVyU3R5bGVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gd2UndmUgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgYSBsYXp5IGluc3RhbmNlXG4gICAgY29uc3QgYW5jZXN0b3JDb21wb25lbnQgPSBob3N0UmVmLiRhbmNlc3RvckNvbXBvbmVudCQ7XG4gICAgY29uc3Qgc2NoZWR1bGUgPSAoKSA9PiBzY2hlZHVsZVVwZGF0ZShob3N0UmVmLCB0cnVlKTtcbiAgICBpZiAoQlVJTEQuYXN5bmNMb2FkaW5nICYmIGFuY2VzdG9yQ29tcG9uZW50ICYmIGFuY2VzdG9yQ29tcG9uZW50WydzLXJjJ10pIHtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgaW5pdGlhbCBsb2FkIGFuZCB0aGlzIGNvbXBvbmVudCBpdCBoYXMgYW4gYW5jZXN0b3IgY29tcG9uZW50XG4gICAgICAgIC8vIGJ1dCB0aGUgYW5jZXN0b3IgY29tcG9uZW50IGhhcyBOT1QgZmlyZWQgaXRzIHdpbGwgdXBkYXRlIGxpZmVjeWNsZSB5ZXRcbiAgICAgICAgLy8gc28gbGV0J3MganVzdCBjb29sIG91ciBqZXRzIGFuZCB3YWl0IGZvciB0aGUgYW5jZXN0b3IgdG8gY29udGludWUgZmlyc3RcbiAgICAgICAgLy8gdGhpcyB3aWxsIGdldCBmaXJlZCBvZmYgd2hlbiB0aGUgYW5jZXN0b3IgY29tcG9uZW50XG4gICAgICAgIC8vIGZpbmFsbHkgZ2V0cyBhcm91bmQgdG8gcmVuZGVyaW5nIGl0cyBsYXp5IHNlbGZcbiAgICAgICAgLy8gZmlyZSBvZmYgdGhlIGluaXRpYWwgdXBkYXRlXG4gICAgICAgIGFuY2VzdG9yQ29tcG9uZW50WydzLXJjJ10ucHVzaChzY2hlZHVsZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzY2hlZHVsZSgpO1xuICAgIH1cbn07XG5jb25zdCBmaXJlQ29ubmVjdGVkQ2FsbGJhY2sgPSAoaW5zdGFuY2UpID0+IHtcbiAgICBpZiAoQlVJTEQubGF6eUxvYWQgJiYgQlVJTEQuY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgICAgc2FmZUNhbGwoaW5zdGFuY2UsICdjb25uZWN0ZWRDYWxsYmFjaycpO1xuICAgIH1cbn07XG5jb25zdCBjb25uZWN0ZWRDYWxsYmFjayA9IChlbG0pID0+IHtcbiAgICBpZiAoKHBsdC4kZmxhZ3MkICYgMSAvKiBQTEFURk9STV9GTEFHUy5pc1RtcERpc2Nvbm5lY3RlZCAqLykgPT09IDApIHtcbiAgICAgICAgY29uc3QgaG9zdFJlZiA9IGdldEhvc3RSZWYoZWxtKTtcbiAgICAgICAgY29uc3QgY21wTWV0YSA9IGhvc3RSZWYuJGNtcE1ldGEkO1xuICAgICAgICBjb25zdCBlbmRDb25uZWN0ZWQgPSBjcmVhdGVUaW1lKCdjb25uZWN0ZWRDYWxsYmFjaycsIGNtcE1ldGEuJHRhZ05hbWUkKTtcbiAgICAgICAgaWYgKEJVSUxELmhvc3RMaXN0ZW5lclRhcmdldFBhcmVudCkge1xuICAgICAgICAgICAgLy8gb25seSBydW4gaWYgd2UgaGF2ZSBsaXN0ZW5lcnMgYmVpbmcgYXR0YWNoZWQgdG8gYSBwYXJlbnRcbiAgICAgICAgICAgIGFkZEhvc3RFdmVudExpc3RlbmVycyhlbG0sIGhvc3RSZWYsIGNtcE1ldGEuJGxpc3RlbmVycyQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGhvc3RSZWYuJGZsYWdzJCAmIDEgLyogSE9TVF9GTEFHUy5oYXNDb25uZWN0ZWQgKi8pKSB7XG4gICAgICAgICAgICAvLyBmaXJzdCB0aW1lIHRoaXMgY29tcG9uZW50IGhhcyBjb25uZWN0ZWRcbiAgICAgICAgICAgIGhvc3RSZWYuJGZsYWdzJCB8PSAxIC8qIEhPU1RfRkxBR1MuaGFzQ29ubmVjdGVkICovO1xuICAgICAgICAgICAgbGV0IGhvc3RJZDtcbiAgICAgICAgICAgIGlmIChCVUlMRC5oeWRyYXRlQ2xpZW50U2lkZSkge1xuICAgICAgICAgICAgICAgIGhvc3RJZCA9IGVsbS5nZXRBdHRyaWJ1dGUoSFlEUkFURV9JRCk7XG4gICAgICAgICAgICAgICAgaWYgKGhvc3RJZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQlVJTEQuc2hhZG93RG9tICYmIHN1cHBvcnRzU2hhZG93ICYmIGNtcE1ldGEuJGZsYWdzJCAmIDEgLyogQ01QX0ZMQUdTLnNoYWRvd0RvbUVuY2Fwc3VsYXRpb24gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjb3BlSWQgPSBCVUlMRC5tb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhZGRTdHlsZShlbG0uc2hhZG93Um9vdCwgY21wTWV0YSwgZWxtLmdldEF0dHJpYnV0ZSgncy1tb2RlJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhZGRTdHlsZShlbG0uc2hhZG93Um9vdCwgY21wTWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbG0uY2xhc3NMaXN0LnJlbW92ZShzY29wZUlkICsgJy1oJywgc2NvcGVJZCArICctcycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVDbGllbnRIeWRyYXRlKGVsbSwgY21wTWV0YS4kdGFnTmFtZSQsIGhvc3RJZCwgaG9zdFJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEJVSUxELnNsb3RSZWxvY2F0aW9uICYmICFob3N0SWQpIHtcbiAgICAgICAgICAgICAgICAvLyBpbml0VXBkYXRlXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHNsb3QgcG9seWZpbGwgaXMgcmVxdWlyZWQgd2UnbGwgbmVlZCB0byBwdXQgc29tZSBub2Rlc1xuICAgICAgICAgICAgICAgIC8vIGluIGhlcmUgdG8gYWN0IGFzIG9yaWdpbmFsIGNvbnRlbnQgYW5jaG9ycyBhcyB3ZSBtb3ZlIG5vZGVzIGFyb3VuZFxuICAgICAgICAgICAgICAgIC8vIGhvc3QgZWxlbWVudCBoYXMgYmVlbiBjb25uZWN0ZWQgdG8gdGhlIERPTVxuICAgICAgICAgICAgICAgIGlmIChCVUlMRC5oeWRyYXRlU2VydmVyU2lkZSB8fFxuICAgICAgICAgICAgICAgICAgICAoKEJVSUxELnNsb3QgfHwgQlVJTEQuc2hhZG93RG9tKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY21wTWV0YS4kZmxhZ3MkICYgKDQgLyogQ01QX0ZMQUdTLmhhc1Nsb3RSZWxvY2F0aW9uICovIHwgOCAvKiBDTVBfRkxBR1MubmVlZHNTaGFkb3dEb21TaGltICovKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q29udGVudFJlZmVyZW5jZShlbG0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCVUlMRC5hc3luY0xvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIHRoZSBmaXJzdCBhbmNlc3RvciBjb21wb25lbnQgKGlmIHRoZXJlIGlzIG9uZSkgYW5kIHJlZ2lzdGVyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjb21wb25lbnQgYXMgb25lIG9mIHRoZSBhY3RpdmVseSBsb2FkaW5nIGNoaWxkIGNvbXBvbmVudHMgZm9yIGl0cyBhbmNlc3RvclxuICAgICAgICAgICAgICAgIGxldCBhbmNlc3RvckNvbXBvbmVudCA9IGVsbTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoKGFuY2VzdG9yQ29tcG9uZW50ID0gYW5jZXN0b3JDb21wb25lbnQucGFyZW50Tm9kZSB8fCBhbmNlc3RvckNvbXBvbmVudC5ob3N0KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjbGltYiB1cCB0aGUgYW5jZXN0b3JzIGxvb2tpbmcgZm9yIHRoZSBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgdGhhdCBoYXNuJ3QgZmluaXNoZWQgaXRzIGxpZmVjeWNsZSB1cGRhdGUgeWV0XG4gICAgICAgICAgICAgICAgICAgIGlmICgoQlVJTEQuaHlkcmF0ZUNsaWVudFNpZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yQ29tcG9uZW50Lm5vZGVUeXBlID09PSAxIC8qIE5PREVfVFlQRS5FbGVtZW50Tm9kZSAqLyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JDb21wb25lbnQuaGFzQXR0cmlidXRlKCdzLWlkJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yQ29tcG9uZW50WydzLXAnXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yQ29tcG9uZW50WydzLXAnXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgZm91bmQgdGhpcyBjb21wb25lbnRzIGZpcnN0IGFuY2VzdG9yIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGlzIGNvbXBvbmVudCdzIGFuY2VzdG9yIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoVG9BbmNlc3Rvcihob3N0UmVmLCAoaG9zdFJlZi4kYW5jZXN0b3JDb21wb25lbnQkID0gYW5jZXN0b3JDb21wb25lbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTGF6eSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvZnVuZGFtZW50YWxzL3dlYi1jb21wb25lbnRzL2Jlc3QtcHJhY3RpY2VzI2xhenktcHJvcGVydGllc1xuICAgICAgICAgICAgaWYgKEJVSUxELnByb3AgJiYgIUJVSUxELmh5ZHJhdGVTZXJ2ZXJTaWRlICYmIGNtcE1ldGEuJG1lbWJlcnMkKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoY21wTWV0YS4kbWVtYmVycyQpLm1hcCgoW21lbWJlck5hbWUsIFttZW1iZXJGbGFnc11dKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZW1iZXJGbGFncyAmIDMxIC8qIE1FTUJFUl9GTEFHUy5Qcm9wICovICYmIGVsbS5oYXNPd25Qcm9wZXJ0eShtZW1iZXJOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBlbG1bbWVtYmVyTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZWxtW21lbWJlck5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxtW21lbWJlck5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCVUlMRC5pbml0aWFsaXplTmV4dFRpY2spIHtcbiAgICAgICAgICAgICAgICAvLyBjb25uZWN0ZWRDYWxsYmFjaywgdGFza1F1ZXVlLCBpbml0aWFsTG9hZFxuICAgICAgICAgICAgICAgIC8vIGFuZ3VsYXIgc2V0cyBhdHRyaWJ1dGUgQUZURVIgY29ubmVjdENhbGxiYWNrXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTg5MDlcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xOTk0MFxuICAgICAgICAgICAgICAgIG5leHRUaWNrKCgpID0+IGluaXRpYWxpemVDb21wb25lbnQoZWxtLCBob3N0UmVmLCBjbXBNZXRhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplQ29tcG9uZW50KGVsbSwgaG9zdFJlZiwgY21wTWV0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBub3QgdGhlIGZpcnN0IHRpbWUgdGhpcyBoYXMgY29ubmVjdGVkXG4gICAgICAgICAgICAvLyByZWF0dGFjaCBhbnkgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBob3N0XG4gICAgICAgICAgICAvLyBzaW5jZSB0aGV5IHdvdWxkIGhhdmUgYmVlbiByZW1vdmVkIHdoZW4gZGlzY29ubmVjdGVkXG4gICAgICAgICAgICBhZGRIb3N0RXZlbnRMaXN0ZW5lcnMoZWxtLCBob3N0UmVmLCBjbXBNZXRhLiRsaXN0ZW5lcnMkLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyBmaXJlIG9mZiBjb25uZWN0ZWRDYWxsYmFjaygpIG9uIGNvbXBvbmVudCBpbnN0YW5jZVxuICAgICAgICAgICAgZmlyZUNvbm5lY3RlZENhbGxiYWNrKGhvc3RSZWYuJGxhenlJbnN0YW5jZSQpO1xuICAgICAgICB9XG4gICAgICAgIGVuZENvbm5lY3RlZCgpO1xuICAgIH1cbn07XG5jb25zdCBzZXRDb250ZW50UmVmZXJlbmNlID0gKGVsbSkgPT4ge1xuICAgIC8vIG9ubHkgcmVxdWlyZWQgd2hlbiB3ZSdyZSBOT1QgdXNpbmcgbmF0aXZlIHNoYWRvdyBkb20gKHNsb3QpXG4gICAgLy8gb3IgdGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBuYXRpdmUgc2hhZG93IGRvbVxuICAgIC8vIGFuZCB0aGlzIGhvc3QgZWxlbWVudCB3YXMgTk9UIGNyZWF0ZWQgd2l0aCBTU1JcbiAgICAvLyBsZXQncyBwaWNrIG91dCB0aGUgaW5uZXIgY29udGVudCBmb3Igc2xvdCBwcm9qZWN0aW9uXG4gICAgLy8gY3JlYXRlIGEgbm9kZSB0byByZXByZXNlbnQgd2hlcmUgdGhlIG9yaWdpbmFsXG4gICAgLy8gY29udGVudCB3YXMgZmlyc3QgcGxhY2VkLCB3aGljaCBpcyB1c2VmdWwgbGF0ZXIgb25cbiAgICBjb25zdCBjb250ZW50UmVmRWxtID0gKGVsbVsncy1jciddID0gZG9jLmNyZWF0ZUNvbW1lbnQoQlVJTEQuaXNEZWJ1ZyA/IGBjb250ZW50LXJlZiAoaG9zdD0ke2VsbS5sb2NhbE5hbWV9KWAgOiAnJykpO1xuICAgIGNvbnRlbnRSZWZFbG1bJ3MtY24nXSA9IHRydWU7XG4gICAgZWxtLmluc2VydEJlZm9yZShjb250ZW50UmVmRWxtLCBlbG0uZmlyc3RDaGlsZCk7XG59O1xuY29uc3QgZGlzY29ubmVjdGVkQ2FsbGJhY2sgPSAoZWxtKSA9PiB7XG4gICAgaWYgKChwbHQuJGZsYWdzJCAmIDEgLyogUExBVEZPUk1fRkxBR1MuaXNUbXBEaXNjb25uZWN0ZWQgKi8pID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGhvc3RSZWYgPSBnZXRIb3N0UmVmKGVsbSk7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gQlVJTEQubGF6eUxvYWQgPyBob3N0UmVmLiRsYXp5SW5zdGFuY2UkIDogZWxtO1xuICAgICAgICBpZiAoQlVJTEQuaG9zdExpc3RlbmVyKSB7XG4gICAgICAgICAgICBpZiAoaG9zdFJlZi4kcm1MaXN0ZW5lcnMkKSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlZi4kcm1MaXN0ZW5lcnMkLm1hcCgocm1MaXN0ZW5lcikgPT4gcm1MaXN0ZW5lcigpKTtcbiAgICAgICAgICAgICAgICBob3N0UmVmLiRybUxpc3RlbmVycyQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2xlYXIgQ1NTIHZhci1zaGltIHRyYWNraW5nXG4gICAgICAgIGlmIChCVUlMRC5jc3NWYXJTaGltICYmIHBsdC4kY3NzU2hpbSQpIHtcbiAgICAgICAgICAgIHBsdC4kY3NzU2hpbSQucmVtb3ZlSG9zdChlbG0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChCVUlMRC5sYXp5TG9hZCAmJiBCVUlMRC5kaXNjb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgICAgICAgc2FmZUNhbGwoaW5zdGFuY2UsICdkaXNjb25uZWN0ZWRDYWxsYmFjaycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChCVUlMRC5jbXBEaWRVbmxvYWQpIHtcbiAgICAgICAgICAgIHNhZmVDYWxsKGluc3RhbmNlLCAnY29tcG9uZW50RGlkVW5sb2FkJyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgZGVmaW5lQ3VzdG9tRWxlbWVudCA9IChDc3RyLCBjb21wYWN0TWV0YSkgPT4ge1xuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShjb21wYWN0TWV0YVsxXSwgcHJveHlDdXN0b21FbGVtZW50KENzdHIsIGNvbXBhY3RNZXRhKSk7XG59O1xuY29uc3QgcHJveHlDdXN0b21FbGVtZW50ID0gKENzdHIsIGNvbXBhY3RNZXRhKSA9PiB7XG4gICAgY29uc3QgY21wTWV0YSA9IHtcbiAgICAgICAgJGZsYWdzJDogY29tcGFjdE1ldGFbMF0sXG4gICAgICAgICR0YWdOYW1lJDogY29tcGFjdE1ldGFbMV0sXG4gICAgfTtcbiAgICBpZiAoQlVJTEQubWVtYmVyKSB7XG4gICAgICAgIGNtcE1ldGEuJG1lbWJlcnMkID0gY29tcGFjdE1ldGFbMl07XG4gICAgfVxuICAgIGlmIChCVUlMRC5ob3N0TGlzdGVuZXIpIHtcbiAgICAgICAgY21wTWV0YS4kbGlzdGVuZXJzJCA9IGNvbXBhY3RNZXRhWzNdO1xuICAgIH1cbiAgICBpZiAoQlVJTEQud2F0Y2hDYWxsYmFjaykge1xuICAgICAgICBjbXBNZXRhLiR3YXRjaGVycyQgPSBDc3RyLiR3YXRjaGVycyQ7XG4gICAgfVxuICAgIGlmIChCVUlMRC5yZWZsZWN0KSB7XG4gICAgICAgIGNtcE1ldGEuJGF0dHJzVG9SZWZsZWN0JCA9IFtdO1xuICAgIH1cbiAgICBpZiAoQlVJTEQuc2hhZG93RG9tICYmICFzdXBwb3J0c1NoYWRvdyAmJiBjbXBNZXRhLiRmbGFncyQgJiAxIC8qIENNUF9GTEFHUy5zaGFkb3dEb21FbmNhcHN1bGF0aW9uICovKSB7XG4gICAgICAgIGNtcE1ldGEuJGZsYWdzJCB8PSA4IC8qIENNUF9GTEFHUy5uZWVkc1NoYWRvd0RvbVNoaW0gKi87XG4gICAgfVxuICAgIGNvbnN0IG9yaWdpbmFsQ29ubmVjdGVkQ2FsbGJhY2sgPSBDc3RyLnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjaztcbiAgICBjb25zdCBvcmlnaW5hbERpc2Nvbm5lY3RlZENhbGxiYWNrID0gQ3N0ci5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2s7XG4gICAgT2JqZWN0LmFzc2lnbihDc3RyLnByb3RvdHlwZSwge1xuICAgICAgICBfX3JlZ2lzdGVySG9zdCgpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVySG9zdCh0aGlzLCBjbXBNZXRhKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICBjb25uZWN0ZWRDYWxsYmFjayh0aGlzKTtcbiAgICAgICAgICAgIGlmIChCVUlMRC5jb25uZWN0ZWRDYWxsYmFjayAmJiBvcmlnaW5hbENvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxDb25uZWN0ZWRDYWxsYmFjay5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKHRoaXMpO1xuICAgICAgICAgICAgaWYgKEJVSUxELmRpc2Nvbm5lY3RlZENhbGxiYWNrICYmIG9yaWdpbmFsRGlzY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbERpc2Nvbm5lY3RlZENhbGxiYWNrLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9fYXR0YWNoU2hhZG93KCkge1xuICAgICAgICAgICAgaWYgKHN1cHBvcnRzU2hhZG93KSB7XG4gICAgICAgICAgICAgICAgaWYgKEJVSUxELnNoYWRvd0RlbGVnYXRlc0ZvY3VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6ICdvcGVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlc0ZvY3VzOiAhIShjbXBNZXRhLiRmbGFncyQgJiAxNiAvKiBDTVBfRkxBR1Muc2hhZG93RGVsZWdhdGVzRm9jdXMgKi8pLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhZG93Um9vdCA9IHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgQ3N0ci5pcyA9IGNtcE1ldGEuJHRhZ05hbWUkO1xuICAgIHJldHVybiBwcm94eUNvbXBvbmVudChDc3RyLCBjbXBNZXRhLCAxIC8qIFBST1hZX0ZMQUdTLmlzRWxlbWVudENvbnN0cnVjdG9yICovIHwgMiAvKiBQUk9YWV9GTEFHUy5wcm94eVN0YXRlICovKTtcbn07XG5jb25zdCBmb3JjZU1vZGVVcGRhdGUgPSAoZWxtKSA9PiB7XG4gICAgaWYgKEJVSUxELnN0eWxlICYmIEJVSUxELm1vZGUgJiYgIUJVSUxELmxhenlMb2FkKSB7XG4gICAgICAgIGNvbnN0IG1vZGUgPSBjb21wdXRlTW9kZShlbG0pO1xuICAgICAgICBjb25zdCBob3N0UmVmID0gZ2V0SG9zdFJlZihlbG0pO1xuICAgICAgICBpZiAoaG9zdFJlZi4kbW9kZU5hbWUkICE9PSBtb2RlKSB7XG4gICAgICAgICAgICBjb25zdCBjbXBNZXRhID0gaG9zdFJlZi4kY21wTWV0YSQ7XG4gICAgICAgICAgICBjb25zdCBvbGRTY29wZUlkID0gZWxtWydzLXNjJ107XG4gICAgICAgICAgICBjb25zdCBzY29wZUlkID0gZ2V0U2NvcGVJZChjbXBNZXRhLCBtb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZWxtLmNvbnN0cnVjdG9yLnN0eWxlW21vZGVdO1xuICAgICAgICAgICAgY29uc3QgZmxhZ3MgPSBjbXBNZXRhLiRmbGFncyQ7XG4gICAgICAgICAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN0eWxlcy5oYXMoc2NvcGVJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJTdHlsZShzY29wZUlkLCBzdHlsZSwgISEoZmxhZ3MgJiAxIC8qIENNUF9GTEFHUy5zaGFkb3dEb21FbmNhcHN1bGF0aW9uICovKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhvc3RSZWYuJG1vZGVOYW1lJCA9IG1vZGU7XG4gICAgICAgICAgICAgICAgZWxtLmNsYXNzTGlzdC5yZW1vdmUob2xkU2NvcGVJZCArICctaCcsIG9sZFNjb3BlSWQgKyAnLXMnKTtcbiAgICAgICAgICAgICAgICBhdHRhY2hTdHlsZXMoaG9zdFJlZik7XG4gICAgICAgICAgICAgICAgZm9yY2VVcGRhdGUoZWxtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCBwYXRjaENsb25lTm9kZSA9IChIb3N0RWxlbWVudFByb3RvdHlwZSkgPT4ge1xuICAgIGNvbnN0IG9yZ0Nsb25lTm9kZSA9IEhvc3RFbGVtZW50UHJvdG90eXBlLmNsb25lTm9kZTtcbiAgICBIb3N0RWxlbWVudFByb3RvdHlwZS5jbG9uZU5vZGUgPSBmdW5jdGlvbiAoZGVlcCkge1xuICAgICAgICBjb25zdCBzcmNOb2RlID0gdGhpcztcbiAgICAgICAgY29uc3QgaXNTaGFkb3dEb20gPSBCVUlMRC5zaGFkb3dEb20gPyBzcmNOb2RlLnNoYWRvd1Jvb3QgJiYgc3VwcG9ydHNTaGFkb3cgOiBmYWxzZTtcbiAgICAgICAgY29uc3QgY2xvbmVkTm9kZSA9IG9yZ0Nsb25lTm9kZS5jYWxsKHNyY05vZGUsIGlzU2hhZG93RG9tID8gZGVlcCA6IGZhbHNlKTtcbiAgICAgICAgaWYgKEJVSUxELnNsb3QgJiYgIWlzU2hhZG93RG9tICYmIGRlZXApIHtcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGxldCBzbG90dGVkLCBub25TdGVuY2lsTm9kZTtcbiAgICAgICAgICAgIGNvbnN0IHN0ZW5jaWxQcml2YXRlcyA9IFtcbiAgICAgICAgICAgICAgICAncy1pZCcsXG4gICAgICAgICAgICAgICAgJ3MtY3InLFxuICAgICAgICAgICAgICAgICdzLWxyJyxcbiAgICAgICAgICAgICAgICAncy1yYycsXG4gICAgICAgICAgICAgICAgJ3Mtc2MnLFxuICAgICAgICAgICAgICAgICdzLXAnLFxuICAgICAgICAgICAgICAgICdzLWNuJyxcbiAgICAgICAgICAgICAgICAncy1zcicsXG4gICAgICAgICAgICAgICAgJ3Mtc24nLFxuICAgICAgICAgICAgICAgICdzLWhuJyxcbiAgICAgICAgICAgICAgICAncy1vbCcsXG4gICAgICAgICAgICAgICAgJ3MtbnInLFxuICAgICAgICAgICAgICAgICdzLXNpJyxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBmb3IgKDsgaSA8IHNyY05vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHNsb3R0ZWQgPSBzcmNOb2RlLmNoaWxkTm9kZXNbaV1bJ3MtbnInXTtcbiAgICAgICAgICAgICAgICBub25TdGVuY2lsTm9kZSA9IHN0ZW5jaWxQcml2YXRlcy5ldmVyeSgocHJpdmF0ZUZpZWxkKSA9PiAhc3JjTm9kZS5jaGlsZE5vZGVzW2ldW3ByaXZhdGVGaWVsZF0pO1xuICAgICAgICAgICAgICAgIGlmIChzbG90dGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChCVUlMRC5hcHBlbmRDaGlsZFNsb3RGaXggJiYgY2xvbmVkTm9kZS5fX2FwcGVuZENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWROb2RlLl9fYXBwZW5kQ2hpbGQoc2xvdHRlZC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVkTm9kZS5hcHBlbmRDaGlsZChzbG90dGVkLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vblN0ZW5jaWxOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lZE5vZGUuYXBwZW5kQ2hpbGQoc3JjTm9kZS5jaGlsZE5vZGVzW2ldLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZWROb2RlO1xuICAgIH07XG59O1xuY29uc3QgcGF0Y2hTbG90QXBwZW5kQ2hpbGQgPSAoSG9zdEVsZW1lbnRQcm90b3R5cGUpID0+IHtcbiAgICBIb3N0RWxlbWVudFByb3RvdHlwZS5fX2FwcGVuZENoaWxkID0gSG9zdEVsZW1lbnRQcm90b3R5cGUuYXBwZW5kQ2hpbGQ7XG4gICAgSG9zdEVsZW1lbnRQcm90b3R5cGUuYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbiAobmV3Q2hpbGQpIHtcbiAgICAgICAgY29uc3Qgc2xvdE5hbWUgPSAobmV3Q2hpbGRbJ3Mtc24nXSA9IGdldFNsb3ROYW1lKG5ld0NoaWxkKSk7XG4gICAgICAgIGNvbnN0IHNsb3ROb2RlID0gZ2V0SG9zdFNsb3ROb2RlKHRoaXMuY2hpbGROb2Rlcywgc2xvdE5hbWUpO1xuICAgICAgICBpZiAoc2xvdE5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNsb3RDaGlsZE5vZGVzID0gZ2V0SG9zdFNsb3RDaGlsZE5vZGVzKHNsb3ROb2RlLCBzbG90TmFtZSk7XG4gICAgICAgICAgICBjb25zdCBhcHBlbmRBZnRlciA9IHNsb3RDaGlsZE5vZGVzW3Nsb3RDaGlsZE5vZGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgcmV0dXJuIGFwcGVuZEFmdGVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLCBhcHBlbmRBZnRlci5uZXh0U2libGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX19hcHBlbmRDaGlsZChuZXdDaGlsZCk7XG4gICAgfTtcbn07XG4vKipcbiAqIFBhdGNoZXMgdGhlIHRleHQgY29udGVudCBvZiBhbiB1bm5hbWVkIHNsb3R0ZWQgbm9kZSBpbnNpZGUgYSBzY29wZWQgY29tcG9uZW50XG4gKiBAcGFyYW0gaG9zdEVsZW1lbnRQcm90b3R5cGUgdGhlIGBFbGVtZW50YCB0byBiZSBwYXRjaGVkXG4gKiBAcGFyYW0gY21wTWV0YSBjb21wb25lbnQgcnVudGltZSBtZXRhZGF0YSB1c2VkIHRvIGRldGVybWluZSBpZiB0aGUgY29tcG9uZW50IHNob3VsZCBiZSBwYXRjaGVkIG9yIG5vdFxuICovXG5jb25zdCBwYXRjaFRleHRDb250ZW50ID0gKGhvc3RFbGVtZW50UHJvdG90eXBlLCBjbXBNZXRhKSA9PiB7XG4gICAgaWYgKEJVSUxELnNjb3BlZCAmJiBjbXBNZXRhLiRmbGFncyQgJiAyIC8qIENNUF9GTEFHUy5zY29wZWRDc3NFbmNhcHN1bGF0aW9uICovKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE5vZGUucHJvdG90eXBlLCAndGV4dENvbnRlbnQnKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGhvc3RFbGVtZW50UHJvdG90eXBlLCAnX190ZXh0Q29udGVudCcsIGRlc2NyaXB0b3IpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaG9zdEVsZW1lbnRQcm90b3R5cGUsICd0ZXh0Q29udGVudCcsIHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSAnZGVmYXVsdCBzbG90Jywgd2hpY2ggd291bGQgYmUgdGhlIGZpcnN0IHNsb3QgaW4gYSBzaGFkb3cgdHJlZSAoaWYgd2Ugd2VyZSB1c2luZyBvbmUpLCB3aG9zZSBuYW1lIGlzXG4gICAgICAgICAgICAgICAgLy8gdGhlIGVtcHR5IHN0cmluZ1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsb3ROb2RlID0gZ2V0SG9zdFNsb3ROb2RlKHRoaXMuY2hpbGROb2RlcywgJycpO1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gYSBzbG90IG5vZGUgaXMgZm91bmQsIHRoZSB0ZXh0Q29udGVudCBfbWF5XyBiZSBmb3VuZCBpbiB0aGUgbmV4dCBzaWJsaW5nICh0ZXh0KSBub2RlLCBkZXBlbmRpbmcgb24gaG93XG4gICAgICAgICAgICAgICAgLy8gbm9kZXMgd2VyZSByZW9yZGVyZWQgZHVyaW5nIHRoZSB2ZG9tIHJlbmRlci4gZmlyc3QgdHJ5IHRvIGdldCB0aGUgdGV4dCBjb250ZW50IGZyb20gdGhlIHNpYmxpbmcuXG4gICAgICAgICAgICAgICAgaWYgKCgoX2EgPSBzbG90Tm9kZSA9PT0gbnVsbCB8fCBzbG90Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2xvdE5vZGUubmV4dFNpYmxpbmcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub2RlVHlwZSkgPT09IDMgLyogTk9ERV9UWVBFUy5URVhUX05PREUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsb3ROb2RlLm5leHRTaWJsaW5nLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzbG90Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xvdE5vZGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBmYWxsYmFjayB0byB0aGUgb3JpZ2luYWwgaW1wbGVtZW50YXRpb25cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX190ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgJ2RlZmF1bHQgc2xvdCcsIHdoaWNoIHdvdWxkIGJlIHRoZSBmaXJzdCBzbG90IGluIGEgc2hhZG93IHRyZWUgKGlmIHdlIHdlcmUgdXNpbmcgb25lKSwgd2hvc2UgbmFtZSBpc1xuICAgICAgICAgICAgICAgIC8vIHRoZSBlbXB0eSBzdHJpbmdcbiAgICAgICAgICAgICAgICBjb25zdCBzbG90Tm9kZSA9IGdldEhvc3RTbG90Tm9kZSh0aGlzLmNoaWxkTm9kZXMsICcnKTtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIGEgc2xvdCBub2RlIGlzIGZvdW5kLCB0aGUgdGV4dENvbnRlbnQgX21heV8gbmVlZCB0byBiZSBwbGFjZWQgaW4gdGhlIG5leHQgc2libGluZyAodGV4dCkgbm9kZSxcbiAgICAgICAgICAgICAgICAvLyBkZXBlbmRpbmcgb24gaG93IG5vZGVzIHdlcmUgcmVvcmRlcmVkIGR1cmluZyB0aGUgdmRvbSByZW5kZXIuIGZpcnN0IHRyeSB0byBzZXQgdGhlIHRleHQgY29udGVudCBvbiB0aGVcbiAgICAgICAgICAgICAgICAvLyBzaWJsaW5nLlxuICAgICAgICAgICAgICAgIGlmICgoKF9hID0gc2xvdE5vZGUgPT09IG51bGwgfHwgc2xvdE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNsb3ROb2RlLm5leHRTaWJsaW5nKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eubm9kZVR5cGUpID09PSAzIC8qIE5PREVfVFlQRVMuVEVYVF9OT0RFICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsb3ROb2RlLm5leHRTaWJsaW5nLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNsb3ROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsb3ROb2RlLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjb3VsZG4ndCBmaW5kIGEgc2xvdCwgYnV0IHRoYXQgZG9lc24ndCBtZWFuIHRoYXQgdGhlcmUgaXNuJ3Qgb25lLiBpZiB0aGlzIGNoZWNrIHJhbiBiZWZvcmUgdGhlIERPTVxuICAgICAgICAgICAgICAgICAgICAvLyBsb2FkZWQsIHdlIGNvdWxkIGhhdmUgbWlzc2VkIGl0LiBjaGVjayBmb3IgYSBjb250ZW50IHJlZmVyZW5jZSBlbGVtZW50IG9uIHRoZSBzY29wZWQgY29tcG9uZW50IGFuZCBpbnNlcnRcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRSZWZFbG0gPSB0aGlzWydzLWNyJ107XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50UmVmRWxtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydEJlZm9yZShjb250ZW50UmVmRWxtLCB0aGlzLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbmNvbnN0IHBhdGNoQ2hpbGRTbG90Tm9kZXMgPSAoZWxtLCBjbXBNZXRhKSA9PiB7XG4gICAgY2xhc3MgRmFrZU5vZGVMaXN0IGV4dGVuZHMgQXJyYXkge1xuICAgICAgICBpdGVtKG4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW25dO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjbXBNZXRhLiRmbGFncyQgJiA4IC8qIENNUF9GTEFHUy5uZWVkc1NoYWRvd0RvbVNoaW0gKi8pIHtcbiAgICAgICAgY29uc3QgY2hpbGROb2Rlc0ZuID0gZWxtLl9fbG9va3VwR2V0dGVyX18oJ2NoaWxkTm9kZXMnKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsbSwgJ2NoaWxkcmVuJywge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkTm9kZXMubWFwKChuKSA9PiBuLm5vZGVUeXBlID09PSAxKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxtLCAnY2hpbGRFbGVtZW50Q291bnQnLCB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsbS5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsbSwgJ2NoaWxkTm9kZXMnLCB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGNoaWxkTm9kZXNGbi5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmICgocGx0LiRmbGFncyQgJiAxIC8qIFBMQVRGT1JNX0ZMQUdTLmlzVG1wRGlzY29ubmVjdGVkICovKSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBnZXRIb3N0UmVmKHRoaXMpLiRmbGFncyQgJiAyIC8qIEhPU1RfRkxBR1MuaGFzUmVuZGVyZWQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEZha2VOb2RlTGlzdCgpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNsb3QgPSBjaGlsZE5vZGVzW2ldWydzLW5yJ107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2xvdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNsb3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBGYWtlTm9kZUxpc3QuZnJvbShjaGlsZE5vZGVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5jb25zdCBnZXRTbG90TmFtZSA9IChub2RlKSA9PiBub2RlWydzLXNuJ10gfHwgKG5vZGUubm9kZVR5cGUgPT09IDEgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ3Nsb3QnKSkgfHwgJyc7XG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHNlYXJjaGVzIGEgc2VyaWVzIG9mIGNoaWxkIG5vZGVzIGZvciBhIHNsb3Qgd2l0aCB0aGUgcHJvdmlkZWQgbmFtZS5cbiAqIEBwYXJhbSBjaGlsZE5vZGVzIHRoZSBub2RlcyB0byBzZWFyY2ggZm9yIGEgc2xvdCB3aXRoIGEgc3BlY2lmaWMgbmFtZS5cbiAqIEBwYXJhbSBzbG90TmFtZSB0aGUgbmFtZSBvZiB0aGUgc2xvdCB0byBtYXRjaCBvbi5cbiAqIEByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBzbG90IG5vZGUgdGhhdCBtYXRjaGVzIHRoZSBwcm92aWRlZCBuYW1lLCBgbnVsbGAgb3RoZXJ3aXNlXG4gKi9cbmNvbnN0IGdldEhvc3RTbG90Tm9kZSA9IChjaGlsZE5vZGVzLCBzbG90TmFtZSkgPT4ge1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgY2hpbGROb2RlO1xuICAgIGZvciAoOyBpIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGVzW2ldO1xuICAgICAgICBpZiAoY2hpbGROb2RlWydzLXNyJ10gJiYgY2hpbGROb2RlWydzLXNuJ10gPT09IHNsb3ROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGROb2RlO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkTm9kZSA9IGdldEhvc3RTbG90Tm9kZShjaGlsZE5vZGUuY2hpbGROb2Rlcywgc2xvdE5hbWUpO1xuICAgICAgICBpZiAoY2hpbGROb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGROb2RlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcbmNvbnN0IGdldEhvc3RTbG90Q2hpbGROb2RlcyA9IChuLCBzbG90TmFtZSkgPT4ge1xuICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBbbl07XG4gICAgd2hpbGUgKChuID0gbi5uZXh0U2libGluZykgJiYgblsncy1zbiddID09PSBzbG90TmFtZSkge1xuICAgICAgICBjaGlsZE5vZGVzLnB1c2gobik7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZE5vZGVzO1xufTtcbmNvbnN0IGhtclN0YXJ0ID0gKGVsbSwgY21wTWV0YSwgaG1yVmVyc2lvbklkKSA9PiB7XG4gICAgLy8gwq9cXF8o44OEKV8vwq9cbiAgICBjb25zdCBob3N0UmVmID0gZ2V0SG9zdFJlZihlbG0pO1xuICAgIC8vIHJlc2V0IHN0YXRlIGZsYWdzIHRvIG9ubHkgaGF2ZSBiZWVuIGNvbm5lY3RlZFxuICAgIGhvc3RSZWYuJGZsYWdzJCA9IDEgLyogSE9TVF9GTEFHUy5oYXNDb25uZWN0ZWQgKi87XG4gICAgLy8gVE9ET1xuICAgIC8vIGRldGF0Y2ggYW55IGV2ZW50IGxpc3RlbmVycyB0aGF0IG1heSBoYXZlIGJlZW4gYWRkZWRcbiAgICAvLyBiZWNhdXNlIHdlJ3JlIG5vdCBwYXNzaW5nIGFuIGV4YWN0IGV2ZW50IG5hbWUgaXQnbGxcbiAgICAvLyByZW1vdmUgYWxsIG9mIHRoaXMgZWxlbWVudCdzIGV2ZW50LCB3aGljaCBpcyBnb29kXG4gICAgLy8gY3JlYXRlIGEgY2FsbGJhY2sgZm9yIHdoZW4gdGhpcyBjb21wb25lbnQgZmluaXNoZXMgaG1yXG4gICAgZWxtWydzLWhtci1sb2FkJ10gPSAoKSA9PiB7XG4gICAgICAgIC8vIGZpbmlzaGVkIGhtciBmb3IgdGhpcyBlbGVtZW50XG4gICAgICAgIGRlbGV0ZSBlbG1bJ3MtaG1yLWxvYWQnXTtcbiAgICB9O1xuICAgIC8vIHJlLWluaXRpYWxpemUgdGhlIGNvbXBvbmVudFxuICAgIGluaXRpYWxpemVDb21wb25lbnQoZWxtLCBob3N0UmVmLCBjbXBNZXRhLCBobXJWZXJzaW9uSWQpO1xufTtcbmNvbnN0IGJvb3RzdHJhcExhenkgPSAobGF6eUJ1bmRsZXMsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGlmIChCVUlMRC5wcm9maWxlICYmIHBlcmZvcm1hbmNlLm1hcmspIHtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnc3Q6YXBwOnN0YXJ0Jyk7XG4gICAgfVxuICAgIGluc3RhbGxEZXZUb29scygpO1xuICAgIGNvbnN0IGVuZEJvb3RzdHJhcCA9IGNyZWF0ZVRpbWUoJ2Jvb3RzdHJhcExhenknKTtcbiAgICBjb25zdCBjbXBUYWdzID0gW107XG4gICAgY29uc3QgZXhjbHVkZSA9IG9wdGlvbnMuZXhjbHVkZSB8fCBbXTtcbiAgICBjb25zdCBjdXN0b21FbGVtZW50cyA9IHdpbi5jdXN0b21FbGVtZW50cztcbiAgICBjb25zdCBoZWFkID0gZG9jLmhlYWQ7XG4gICAgY29uc3QgbWV0YUNoYXJzZXQgPSAvKkBfX1BVUkVfXyovIGhlYWQucXVlcnlTZWxlY3RvcignbWV0YVtjaGFyc2V0XScpO1xuICAgIGNvbnN0IHZpc2liaWxpdHlTdHlsZSA9IC8qQF9fUFVSRV9fKi8gZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgY29uc3QgZGVmZXJyZWRDb25uZWN0ZWRDYWxsYmFja3MgPSBbXTtcbiAgICBjb25zdCBzdHlsZXMgPSAvKkBfX1BVUkVfXyovIGRvYy5xdWVyeVNlbGVjdG9yQWxsKGBbJHtIWURSQVRFRF9TVFlMRV9JRH1dYCk7XG4gICAgbGV0IGFwcExvYWRGYWxsYmFjaztcbiAgICBsZXQgaXNCb290c3RyYXBwaW5nID0gdHJ1ZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgT2JqZWN0LmFzc2lnbihwbHQsIG9wdGlvbnMpO1xuICAgIHBsdC4kcmVzb3VyY2VzVXJsJCA9IG5ldyBVUkwob3B0aW9ucy5yZXNvdXJjZXNVcmwgfHwgJy4vJywgZG9jLmJhc2VVUkkpLmhyZWY7XG4gICAgaWYgKEJVSUxELmFzeW5jUXVldWUpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3luY1F1ZXVlKSB7XG4gICAgICAgICAgICBwbHQuJGZsYWdzJCB8PSA0IC8qIFBMQVRGT1JNX0ZMQUdTLnF1ZXVlU3luYyAqLztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoQlVJTEQuaHlkcmF0ZUNsaWVudFNpZGUpIHtcbiAgICAgICAgLy8gSWYgdGhlIGFwcCBpcyBhbHJlYWR5IGh5ZHJhdGVkIHRoZXJlIGlzIG5vdCBwb2ludCB0byBkaXNhYmxlIHRoZVxuICAgICAgICAvLyBhc3luYyBxdWV1ZS4gVGhpcyB3aWxsIGltcHJvdmUgdGhlIGZpcnN0IGlucHV0IGRlbGF5XG4gICAgICAgIHBsdC4kZmxhZ3MkIHw9IDIgLyogUExBVEZPUk1fRkxBR1MuYXBwTG9hZGVkICovO1xuICAgIH1cbiAgICBpZiAoQlVJTEQuaHlkcmF0ZUNsaWVudFNpZGUgJiYgQlVJTEQuc2hhZG93RG9tKSB7XG4gICAgICAgIGZvciAoOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZWdpc3RlclN0eWxlKHN0eWxlc1tpXS5nZXRBdHRyaWJ1dGUoSFlEUkFURURfU1RZTEVfSUQpLCBjb252ZXJ0U2NvcGVkVG9TaGFkb3coc3R5bGVzW2ldLmlubmVySFRNTCksIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxhenlCdW5kbGVzLm1hcCgobGF6eUJ1bmRsZSkgPT4ge1xuICAgICAgICBsYXp5QnVuZGxlWzFdLm1hcCgoY29tcGFjdE1ldGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNtcE1ldGEgPSB7XG4gICAgICAgICAgICAgICAgJGZsYWdzJDogY29tcGFjdE1ldGFbMF0sXG4gICAgICAgICAgICAgICAgJHRhZ05hbWUkOiBjb21wYWN0TWV0YVsxXSxcbiAgICAgICAgICAgICAgICAkbWVtYmVycyQ6IGNvbXBhY3RNZXRhWzJdLFxuICAgICAgICAgICAgICAgICRsaXN0ZW5lcnMkOiBjb21wYWN0TWV0YVszXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoQlVJTEQubWVtYmVyKSB7XG4gICAgICAgICAgICAgICAgY21wTWV0YS4kbWVtYmVycyQgPSBjb21wYWN0TWV0YVsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCVUlMRC5ob3N0TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBjbXBNZXRhLiRsaXN0ZW5lcnMkID0gY29tcGFjdE1ldGFbM107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQlVJTEQucmVmbGVjdCkge1xuICAgICAgICAgICAgICAgIGNtcE1ldGEuJGF0dHJzVG9SZWZsZWN0JCA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEJVSUxELndhdGNoQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjbXBNZXRhLiR3YXRjaGVycyQgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCVUlMRC5zaGFkb3dEb20gJiYgIXN1cHBvcnRzU2hhZG93ICYmIGNtcE1ldGEuJGZsYWdzJCAmIDEgLyogQ01QX0ZMQUdTLnNoYWRvd0RvbUVuY2Fwc3VsYXRpb24gKi8pIHtcbiAgICAgICAgICAgICAgICBjbXBNZXRhLiRmbGFncyQgfD0gOCAvKiBDTVBfRkxBR1MubmVlZHNTaGFkb3dEb21TaGltICovO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGFnTmFtZSA9IEJVSUxELnRyYW5zZm9ybVRhZ05hbWUgJiYgb3B0aW9ucy50cmFuc2Zvcm1UYWdOYW1lXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnRyYW5zZm9ybVRhZ05hbWUoY21wTWV0YS4kdGFnTmFtZSQpXG4gICAgICAgICAgICAgICAgOiBjbXBNZXRhLiR0YWdOYW1lJDtcbiAgICAgICAgICAgIGNvbnN0IEhvc3RFbGVtZW50ID0gY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgICAgICAgICAgICAgLy8gU3RlbmNpbExhenlIb3N0XG4gICAgICAgICAgICAgICAgY29uc3RydWN0b3Ioc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIHN1cGVyKHNlbGYpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJIb3N0KHNlbGYsIGNtcE1ldGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQlVJTEQuc2hhZG93RG9tICYmIGNtcE1ldGEuJGZsYWdzJCAmIDEgLyogQ01QX0ZMQUdTLnNoYWRvd0RvbUVuY2Fwc3VsYXRpb24gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgY29tcG9uZW50IGlzIHVzaW5nIHNoYWRvdyBkb21cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgc2hhZG93IGRvbVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRoZSByZWFkLW9ubHkgcHJvcGVydHkgXCJzaGFkb3dSb290XCIgdG8gdGhlIGhvc3QgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkaW5nIHRoZSBzaGFkb3cgcm9vdCBidWlsZCBjb25kaXRpb25hbHMgdG8gbWluaW1pemUgcnVudGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1cHBvcnRzU2hhZG93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEJVSUxELnNoYWRvd0RlbGVnYXRlc0ZvY3VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXR0YWNoU2hhZG93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6ICdvcGVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlc0ZvY3VzOiAhIShjbXBNZXRhLiRmbGFncyQgJiAxNiAvKiBDTVBfRkxBR1Muc2hhZG93RGVsZWdhdGVzRm9jdXMgKi8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFCVUlMRC5oeWRyYXRlU2VydmVyU2lkZSAmJiAhKCdzaGFkb3dSb290JyBpbiBzZWxmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2hhZG93Um9vdCA9IHNlbGY7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKEJVSUxELnNsb3RDaGlsZE5vZGVzRml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRjaENoaWxkU2xvdE5vZGVzKHNlbGYsIGNtcE1ldGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXBwTG9hZEZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYXBwTG9hZEZhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcExvYWRGYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQm9vdHN0cmFwcGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29ubmVjdGVkQ2FsbGJhY2sgd2lsbCBiZSBwcm9jZXNzZWQgb25jZSBhbGwgY29tcG9uZW50cyBoYXZlIGJlZW4gcmVnaXN0ZXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWRDb25uZWN0ZWRDYWxsYmFja3MucHVzaCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdC5qbXAoKCkgPT4gY29ubmVjdGVkQ2FsbGJhY2sodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgICAgICAgICBwbHQuam1wKCgpID0+IGRpc2Nvbm5lY3RlZENhbGxiYWNrKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcG9uZW50T25SZWFkeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEhvc3RSZWYodGhpcykuJG9uUmVhZHlQcm9taXNlJDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKEJVSUxELmNsb25lTm9kZUZpeCkge1xuICAgICAgICAgICAgICAgIHBhdGNoQ2xvbmVOb2RlKEhvc3RFbGVtZW50LnByb3RvdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQlVJTEQuYXBwZW5kQ2hpbGRTbG90Rml4KSB7XG4gICAgICAgICAgICAgICAgcGF0Y2hTbG90QXBwZW5kQ2hpbGQoSG9zdEVsZW1lbnQucHJvdG90eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChCVUlMRC5ob3RNb2R1bGVSZXBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgIEhvc3RFbGVtZW50LnByb3RvdHlwZVsncy1obXInXSA9IGZ1bmN0aW9uIChobXJWZXJzaW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaG1yU3RhcnQodGhpcywgY21wTWV0YSwgaG1yVmVyc2lvbklkKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEJVSUxELnNjb3BlZFNsb3RUZXh0Q29udGVudEZpeCkge1xuICAgICAgICAgICAgICAgIHBhdGNoVGV4dENvbnRlbnQoSG9zdEVsZW1lbnQucHJvdG90eXBlLCBjbXBNZXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNtcE1ldGEuJGxhenlCdW5kbGVJZCQgPSBsYXp5QnVuZGxlWzBdO1xuICAgICAgICAgICAgaWYgKCFleGNsdWRlLmluY2x1ZGVzKHRhZ05hbWUpICYmICFjdXN0b21FbGVtZW50cy5nZXQodGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjbXBUYWdzLnB1c2godGFnTmFtZSk7XG4gICAgICAgICAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKHRhZ05hbWUsIHByb3h5Q29tcG9uZW50KEhvc3RFbGVtZW50LCBjbXBNZXRhLCAxIC8qIFBST1hZX0ZMQUdTLmlzRWxlbWVudENvbnN0cnVjdG9yICovKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChCVUlMRC5pbnZpc2libGVQcmVoeWRyYXRpb24gJiYgKEJVSUxELmh5ZHJhdGVkQ2xhc3MgfHwgQlVJTEQuaHlkcmF0ZWRBdHRyaWJ1dGUpKSB7XG4gICAgICAgIHZpc2liaWxpdHlTdHlsZS5pbm5lckhUTUwgPSBjbXBUYWdzICsgSFlEUkFURURfQ1NTO1xuICAgICAgICB2aXNpYmlsaXR5U3R5bGUuc2V0QXR0cmlidXRlKCdkYXRhLXN0eWxlcycsICcnKTtcbiAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUodmlzaWJpbGl0eVN0eWxlLCBtZXRhQ2hhcnNldCA/IG1ldGFDaGFyc2V0Lm5leHRTaWJsaW5nIDogaGVhZC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBkZWZlcnJlZCBjb25uZWN0ZWRDYWxsYmFja3Mgbm93IGFsbCBjb21wb25lbnRzIGhhdmUgYmVlbiByZWdpc3RlcmVkXG4gICAgaXNCb290c3RyYXBwaW5nID0gZmFsc2U7XG4gICAgaWYgKGRlZmVycmVkQ29ubmVjdGVkQ2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBkZWZlcnJlZENvbm5lY3RlZENhbGxiYWNrcy5tYXAoKGhvc3QpID0+IGhvc3QuY29ubmVjdGVkQ2FsbGJhY2soKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoQlVJTEQucHJvZmlsZSkge1xuICAgICAgICAgICAgcGx0LmptcCgoKSA9PiAoYXBwTG9hZEZhbGxiYWNrID0gc2V0VGltZW91dChhcHBEaWRMb2FkLCAzMCwgJ3RpbWVvdXQnKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGx0LmptcCgoKSA9PiAoYXBwTG9hZEZhbGxiYWNrID0gc2V0VGltZW91dChhcHBEaWRMb2FkLCAzMCkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBGYWxsYmFjayBhcHBMb2FkIGV2ZW50XG4gICAgZW5kQm9vdHN0cmFwKCk7XG59O1xuY29uc3QgZ2V0Q29ubmVjdCA9IChfcmVmLCB0YWdOYW1lKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50T25SZWFkeSA9ICgpID0+IHtcbiAgICAgICAgbGV0IGVsbSA9IGRvYy5xdWVyeVNlbGVjdG9yKHRhZ05hbWUpO1xuICAgICAgICBpZiAoIWVsbSkge1xuICAgICAgICAgICAgZWxtID0gZG9jLmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgICAgICAgICBkb2MuYm9keS5hcHBlbmRDaGlsZChlbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlb2YgZWxtLmNvbXBvbmVudE9uUmVhZHkgPT09ICdmdW5jdGlvbicgPyBlbG0uY29tcG9uZW50T25SZWFkeSgpIDogUHJvbWlzZS5yZXNvbHZlKGVsbSk7XG4gICAgfTtcbiAgICBjb25zdCBjcmVhdGUgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50T25SZWFkeSgpLnRoZW4oKGVsKSA9PiBlbC5jcmVhdGUoLi4uYXJncykpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3JlYXRlLFxuICAgICAgICBjb21wb25lbnRPblJlYWR5LFxuICAgIH07XG59O1xuY29uc3QgZ2V0Q29udGV4dCA9IChfZWxtLCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKGNvbnRleHQgaW4gQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gQ29udGV4dFtjb250ZXh0XTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29udGV4dCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgICAgcmV0dXJuIHdpbjtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29udGV4dCA9PT0gJ2RvY3VtZW50Jykge1xuICAgICAgICByZXR1cm4gZG9jO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb250ZXh0ID09PSAnaXNTZXJ2ZXInIHx8IGNvbnRleHQgPT09ICdpc1ByZXJlbmRlcicpIHtcbiAgICAgICAgcmV0dXJuIEJVSUxELmh5ZHJhdGVTZXJ2ZXJTaWRlID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb250ZXh0ID09PSAnaXNDbGllbnQnKSB7XG4gICAgICAgIHJldHVybiBCVUlMRC5oeWRyYXRlU2VydmVyU2lkZSA/IGZhbHNlIDogdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29udGV4dCA9PT0gJ3Jlc291cmNlc1VybCcgfHwgY29udGV4dCA9PT0gJ3B1YmxpY1BhdGgnKSB7XG4gICAgICAgIHJldHVybiBnZXRBc3NldFBhdGgoJy4nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29udGV4dCA9PT0gJ3F1ZXVlJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd3JpdGU6IHdyaXRlVGFzayxcbiAgICAgICAgICAgIHJlYWQ6IHJlYWRUYXNrLFxuICAgICAgICAgICAgdGljazoge1xuICAgICAgICAgICAgICAgIHRoZW4oY2IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRUaWNrKGNiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5jb25zdCBGcmFnbWVudCA9IChfLCBjaGlsZHJlbikgPT4gY2hpbGRyZW47XG5jb25zdCBhZGRIb3N0RXZlbnRMaXN0ZW5lcnMgPSAoZWxtLCBob3N0UmVmLCBsaXN0ZW5lcnMsIGF0dGFjaFBhcmVudExpc3RlbmVycykgPT4ge1xuICAgIGlmIChCVUlMRC5ob3N0TGlzdGVuZXIgJiYgbGlzdGVuZXJzKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgY2FsbGVkIGltbWVkaWF0ZWx5IHdpdGhpbiB0aGUgZWxlbWVudCdzIGNvbnN0cnVjdG9yXG4gICAgICAgIC8vIGluaXRpYWxpemUgb3VyIGV2ZW50IGxpc3RlbmVycyBvbiB0aGUgaG9zdCBlbGVtZW50XG4gICAgICAgIC8vIHdlIGRvIHRoaXMgbm93IHNvIHRoYXQgd2UgY2FuIGxpc3RlbiB0byBldmVudHMgdGhhdCBtYXlcbiAgICAgICAgLy8gaGF2ZSBmaXJlZCBldmVuIGJlZm9yZSB0aGUgaW5zdGFuY2UgaXMgcmVhZHlcbiAgICAgICAgaWYgKEJVSUxELmhvc3RMaXN0ZW5lclRhcmdldFBhcmVudCkge1xuICAgICAgICAgICAgLy8gdGhpcyBjb21wb25lbnQgbWF5IGhhdmUgZXZlbnQgbGlzdGVuZXJzIHRoYXQgc2hvdWxkIGJlIGF0dGFjaGVkIHRvIHRoZSBwYXJlbnRcbiAgICAgICAgICAgIGlmIChhdHRhY2hQYXJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGJlaW5nIHJhbiBmcm9tIHdpdGhpbiB0aGUgY29ubmVjdGVkQ2FsbGJhY2tcbiAgICAgICAgICAgICAgICAvLyB3aGljaCBpcyBpbXBvcnRhbnQgc28gdGhhdCB3ZSBrbm93IHRoZSBob3N0IGVsZW1lbnQgYWN0dWFsbHkgaGFzIGEgcGFyZW50IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IHRoZSBsaXN0ZW5lcnMgdG8gb25seSBoYXZlIHRoZSBvbmVzIHRoYXQgQVJFIGJlaW5nIGF0dGFjaGVkIHRvIHRoZSBwYXJlbnRcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKChbZmxhZ3NdKSA9PiBmbGFncyAmIDMyIC8qIExJU1RFTkVSX0ZMQUdTLlRhcmdldFBhcmVudCAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGJlaW5nIHJhbiBmcm9tIHdpdGhpbiB0aGUgY29tcG9uZW50IGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgLy8gZXZlcnl0aGluZyBCVVQgdGhlIHBhcmVudCBlbGVtZW50IGxpc3RlbmVycyBzaG91bGQgYmUgYXR0YWNoZWQgYXQgdGhpcyB0aW1lXG4gICAgICAgICAgICAgICAgLy8gZmlsdGVyIG91dCB0aGUgbGlzdGVuZXJzIHRoYXQgYXJlIE5PVCBiZWluZyBhdHRhY2hlZCB0byB0aGUgcGFyZW50XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcigoW2ZsYWdzXSkgPT4gIShmbGFncyAmIDMyIC8qIExJU1RFTkVSX0ZMQUdTLlRhcmdldFBhcmVudCAqLykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxpc3RlbmVycy5tYXAoKFtmbGFncywgbmFtZSwgbWV0aG9kXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gQlVJTEQuaG9zdExpc3RlbmVyVGFyZ2V0ID8gZ2V0SG9zdExpc3RlbmVyVGFyZ2V0KGVsbSwgZmxhZ3MpIDogZWxtO1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IGhvc3RMaXN0ZW5lclByb3h5KGhvc3RSZWYsIG1ldGhvZCk7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0gaG9zdExpc3RlbmVyT3B0cyhmbGFncyk7XG4gICAgICAgICAgICBwbHQuYWVsKHRhcmdldCwgbmFtZSwgaGFuZGxlciwgb3B0cyk7XG4gICAgICAgICAgICAoaG9zdFJlZi4kcm1MaXN0ZW5lcnMkID0gaG9zdFJlZi4kcm1MaXN0ZW5lcnMkIHx8IFtdKS5wdXNoKCgpID0+IHBsdC5yZWwodGFyZ2V0LCBuYW1lLCBoYW5kbGVyLCBvcHRzKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5jb25zdCBob3N0TGlzdGVuZXJQcm94eSA9IChob3N0UmVmLCBtZXRob2ROYW1lKSA9PiAoZXYpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoQlVJTEQubGF6eUxvYWQpIHtcbiAgICAgICAgICAgIGlmIChob3N0UmVmLiRmbGFncyQgJiAyNTYgLyogSE9TVF9GTEFHUy5pc0xpc3RlblJlYWR5ICovKSB7XG4gICAgICAgICAgICAgICAgLy8gaW5zdGFuY2UgaXMgcmVhZHksIGxldCdzIGNhbGwgaXQncyBtZW1iZXIgbWV0aG9kIGZvciB0aGlzIGV2ZW50XG4gICAgICAgICAgICAgICAgaG9zdFJlZi4kbGF6eUluc3RhbmNlJFttZXRob2ROYW1lXShldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoaG9zdFJlZi4kcXVldWVkTGlzdGVuZXJzJCA9IGhvc3RSZWYuJHF1ZXVlZExpc3RlbmVycyQgfHwgW10pLnB1c2goW21ldGhvZE5hbWUsIGV2XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBob3N0UmVmLiRob3N0RWxlbWVudCRbbWV0aG9kTmFtZV0oZXYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGVFcnJvcihlKTtcbiAgICB9XG59O1xuY29uc3QgZ2V0SG9zdExpc3RlbmVyVGFyZ2V0ID0gKGVsbSwgZmxhZ3MpID0+IHtcbiAgICBpZiAoQlVJTEQuaG9zdExpc3RlbmVyVGFyZ2V0RG9jdW1lbnQgJiYgZmxhZ3MgJiA0IC8qIExJU1RFTkVSX0ZMQUdTLlRhcmdldERvY3VtZW50ICovKVxuICAgICAgICByZXR1cm4gZG9jO1xuICAgIGlmIChCVUlMRC5ob3N0TGlzdGVuZXJUYXJnZXRXaW5kb3cgJiYgZmxhZ3MgJiA4IC8qIExJU1RFTkVSX0ZMQUdTLlRhcmdldFdpbmRvdyAqLylcbiAgICAgICAgcmV0dXJuIHdpbjtcbiAgICBpZiAoQlVJTEQuaG9zdExpc3RlbmVyVGFyZ2V0Qm9keSAmJiBmbGFncyAmIDE2IC8qIExJU1RFTkVSX0ZMQUdTLlRhcmdldEJvZHkgKi8pXG4gICAgICAgIHJldHVybiBkb2MuYm9keTtcbiAgICBpZiAoQlVJTEQuaG9zdExpc3RlbmVyVGFyZ2V0UGFyZW50ICYmIGZsYWdzICYgMzIgLyogTElTVEVORVJfRkxBR1MuVGFyZ2V0UGFyZW50ICovKVxuICAgICAgICByZXR1cm4gZWxtLnBhcmVudEVsZW1lbnQ7XG4gICAgcmV0dXJuIGVsbTtcbn07XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IGhvc3RMaXN0ZW5lck9wdHMgPSAoZmxhZ3MpID0+IHN1cHBvcnRzTGlzdGVuZXJPcHRpb25zXG4gICAgPyAoe1xuICAgICAgICBwYXNzaXZlOiAoZmxhZ3MgJiAxIC8qIExJU1RFTkVSX0ZMQUdTLlBhc3NpdmUgKi8pICE9PSAwLFxuICAgICAgICBjYXB0dXJlOiAoZmxhZ3MgJiAyIC8qIExJU1RFTkVSX0ZMQUdTLkNhcHR1cmUgKi8pICE9PSAwLFxuICAgIH0pXG4gICAgOiAoZmxhZ3MgJiAyIC8qIExJU1RFTkVSX0ZMQUdTLkNhcHR1cmUgKi8pICE9PSAwO1xuY29uc3Qgc2V0UGxhdGZvcm1PcHRpb25zID0gKG9wdHMpID0+IE9iamVjdC5hc3NpZ24ocGx0LCBvcHRzKTtcbmNvbnN0IGluc2VydFZkb21Bbm5vdGF0aW9ucyA9IChkb2MsIHN0YXRpY0NvbXBvbmVudHMpID0+IHtcbiAgICBpZiAoZG9jICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgZG9jRGF0YSA9IHtcbiAgICAgICAgICAgIGhvc3RJZHM6IDAsXG4gICAgICAgICAgICByb290TGV2ZWxJZHM6IDAsXG4gICAgICAgICAgICBzdGF0aWNDb21wb25lbnRzOiBuZXcgU2V0KHN0YXRpY0NvbXBvbmVudHMpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvcmdMb2NhdGlvbk5vZGVzID0gW107XG4gICAgICAgIHBhcnNlVk5vZGVBbm5vdGF0aW9ucyhkb2MsIGRvYy5ib2R5LCBkb2NEYXRhLCBvcmdMb2NhdGlvbk5vZGVzKTtcbiAgICAgICAgb3JnTG9jYXRpb25Ob2Rlcy5mb3JFYWNoKChvcmdMb2NhdGlvbk5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChvcmdMb2NhdGlvbk5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVSZWYgPSBvcmdMb2NhdGlvbk5vZGVbJ3MtbnInXTtcbiAgICAgICAgICAgICAgICBsZXQgaG9zdElkID0gbm9kZVJlZlsncy1ob3N0LWlkJ107XG4gICAgICAgICAgICAgICAgbGV0IG5vZGVJZCA9IG5vZGVSZWZbJ3Mtbm9kZS1pZCddO1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZElkID0gYCR7aG9zdElkfS4ke25vZGVJZH1gO1xuICAgICAgICAgICAgICAgIGlmIChob3N0SWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBob3N0SWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBkb2NEYXRhLnJvb3RMZXZlbElkcysrO1xuICAgICAgICAgICAgICAgICAgICBub2RlSWQgPSBkb2NEYXRhLnJvb3RMZXZlbElkcztcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRJZCA9IGAke2hvc3RJZH0uJHtub2RlSWR9YDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVSZWYubm9kZVR5cGUgPT09IDEgLyogTk9ERV9UWVBFLkVsZW1lbnROb2RlICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlUmVmLnNldEF0dHJpYnV0ZShIWURSQVRFX0NISUxEX0lELCBjaGlsZElkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlUmVmLm5vZGVUeXBlID09PSAzIC8qIE5PREVfVFlQRS5UZXh0Tm9kZSAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvc3RJZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gbm9kZVJlZi5ub2RlVmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0Q29udGVudCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlbGVzcyB3aGl0ZXNwYWNlIG5vZGUgYXQgdGhlIGRvY3VtZW50IHJvb3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JnTG9jYXRpb25Ob2RlLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudEJlZm9yZVRleHROb2RlID0gZG9jLmNyZWF0ZUNvbW1lbnQoY2hpbGRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50QmVmb3JlVGV4dE5vZGUubm9kZVZhbHVlID0gYCR7VEVYVF9OT0RFX0lEfS4ke2NoaWxkSWR9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVSZWYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29tbWVudEJlZm9yZVRleHROb2RlLCBub2RlUmVmKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgb3JnTG9jYXRpb25Ob2RlSWQgPSBgJHtPUkdfTE9DQVRJT05fSUR9LiR7Y2hpbGRJZH1gO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9yZ0xvY2F0aW9uUGFyZW50Tm9kZSA9IG9yZ0xvY2F0aW9uTm9kZS5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmIChvcmdMb2NhdGlvblBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yZ0xvY2F0aW9uUGFyZW50Tm9kZVsncy1lbiddID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kaW5nIHdpdGggYSBcIi5cIiBtZWFucyB0aGF0IHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2YgdGhpcyBub2RlJ3Mgb3JpZ2luYWwgbG9jYXRpb24gaXMgYSBTSEFET1cgZG9tIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGlzIG5vZGUgaXMgYXBhcnQgb2YgdGhlIHJvb3QgbGV2ZWwgbGlnaHQgZG9tXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmdMb2NhdGlvbk5vZGVJZCArPSBgLmA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob3JnTG9jYXRpb25QYXJlbnROb2RlWydzLWVuJ10gPT09ICdjJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kaW5nIHdpdGggYSBcIi5jXCIgbWVhbnMgdGhhdCB0aGUgcGFyZW50IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9mIHRoaXMgbm9kZSdzIG9yaWdpbmFsIGxvY2F0aW9uIGlzIGEgU0NPUEVEIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGlzIG5vZGUgaXMgYXBhcnQgb2YgdGhlIHJvb3QgbGV2ZWwgbGlnaHQgZG9tXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmdMb2NhdGlvbk5vZGVJZCArPSBgLmNgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9yZ0xvY2F0aW9uTm9kZS5ub2RlVmFsdWUgPSBvcmdMb2NhdGlvbk5vZGVJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufTtcbmNvbnN0IHBhcnNlVk5vZGVBbm5vdGF0aW9ucyA9IChkb2MsIG5vZGUsIGRvY0RhdGEsIG9yZ0xvY2F0aW9uTm9kZXMpID0+IHtcbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG5vZGVbJ3MtbnInXSAhPSBudWxsKSB7XG4gICAgICAgIG9yZ0xvY2F0aW9uTm9kZXMucHVzaChub2RlKTtcbiAgICB9XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgLyogTk9ERV9UWVBFLkVsZW1lbnROb2RlICovKSB7XG4gICAgICAgIG5vZGUuY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZE5vZGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGhvc3RSZWYgPSBnZXRIb3N0UmVmKGNoaWxkTm9kZSk7XG4gICAgICAgICAgICBpZiAoaG9zdFJlZiAhPSBudWxsICYmICFkb2NEYXRhLnN0YXRpY0NvbXBvbmVudHMuaGFzKGNoaWxkTm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNtcERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVJZHM6IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpbnNlcnRWTm9kZUFubm90YXRpb25zKGRvYywgY2hpbGROb2RlLCBob3N0UmVmLiR2bm9kZSQsIGRvY0RhdGEsIGNtcERhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VWTm9kZUFubm90YXRpb25zKGRvYywgY2hpbGROb2RlLCBkb2NEYXRhLCBvcmdMb2NhdGlvbk5vZGVzKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbmNvbnN0IGluc2VydFZOb2RlQW5ub3RhdGlvbnMgPSAoZG9jLCBob3N0RWxtLCB2bm9kZSwgZG9jRGF0YSwgY21wRGF0YSkgPT4ge1xuICAgIGlmICh2bm9kZSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGhvc3RJZCA9ICsrZG9jRGF0YS5ob3N0SWRzO1xuICAgICAgICBob3N0RWxtLnNldEF0dHJpYnV0ZShIWURSQVRFX0lELCBob3N0SWQpO1xuICAgICAgICBpZiAoaG9zdEVsbVsncy1jciddICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvc3RFbG1bJ3MtY3InXS5ub2RlVmFsdWUgPSBgJHtDT05URU5UX1JFRl9JRH0uJHtob3N0SWR9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodm5vZGUuJGNoaWxkcmVuJCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBkZXB0aCA9IDA7XG4gICAgICAgICAgICB2bm9kZS4kY2hpbGRyZW4kLmZvckVhY2goKHZub2RlQ2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0Q2hpbGRWTm9kZUFubm90YXRpb25zKGRvYywgdm5vZGVDaGlsZCwgY21wRGF0YSwgaG9zdElkLCBkZXB0aCwgaW5kZXgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhvc3RFbG0gJiYgdm5vZGUgJiYgdm5vZGUuJGVsbSQgJiYgIWhvc3RFbG0uaGFzQXR0cmlidXRlKCdjLWlkJykpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGhvc3RFbG0ucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LmNoaWxkTm9kZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRDaGlsZE5vZGVzID0gQXJyYXkuZnJvbShwYXJlbnQuY2hpbGROb2Rlcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWVudCA9IHBhcmVudENoaWxkTm9kZXMuZmluZCgobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBOT0RFX1RZUEUuQ29tbWVudE5vZGUgKi8gJiYgbm9kZVsncy1zciddKTtcbiAgICAgICAgICAgICAgICBpZiAoY29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcmVudENoaWxkTm9kZXMuaW5kZXhPZihob3N0RWxtKSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHZub2RlLiRlbG0kLnNldEF0dHJpYnV0ZShIWURSQVRFX0NISUxEX0lELCBgJHtjb21tZW50WydzLWhvc3QtaWQnXX0uJHtjb21tZW50WydzLW5vZGUtaWQnXX0uMC4ke2luZGV4fWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCBpbnNlcnRDaGlsZFZOb2RlQW5ub3RhdGlvbnMgPSAoZG9jLCB2bm9kZUNoaWxkLCBjbXBEYXRhLCBob3N0SWQsIGRlcHRoLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGNoaWxkRWxtID0gdm5vZGVDaGlsZC4kZWxtJDtcbiAgICBpZiAoY2hpbGRFbG0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5vZGVJZCA9IGNtcERhdGEubm9kZUlkcysrO1xuICAgIGNvbnN0IGNoaWxkSWQgPSBgJHtob3N0SWR9LiR7bm9kZUlkfS4ke2RlcHRofS4ke2luZGV4fWA7XG4gICAgY2hpbGRFbG1bJ3MtaG9zdC1pZCddID0gaG9zdElkO1xuICAgIGNoaWxkRWxtWydzLW5vZGUtaWQnXSA9IG5vZGVJZDtcbiAgICBpZiAoY2hpbGRFbG0ubm9kZVR5cGUgPT09IDEgLyogTk9ERV9UWVBFLkVsZW1lbnROb2RlICovKSB7XG4gICAgICAgIGNoaWxkRWxtLnNldEF0dHJpYnV0ZShIWURSQVRFX0NISUxEX0lELCBjaGlsZElkKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hpbGRFbG0ubm9kZVR5cGUgPT09IDMgLyogTk9ERV9UWVBFLlRleHROb2RlICovKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBjaGlsZEVsbS5wYXJlbnROb2RlO1xuICAgICAgICBjb25zdCBub2RlTmFtZSA9IHBhcmVudE5vZGUubm9kZU5hbWU7XG4gICAgICAgIGlmIChub2RlTmFtZSAhPT0gJ1NUWUxFJyAmJiBub2RlTmFtZSAhPT0gJ1NDUklQVCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHROb2RlSWQgPSBgJHtURVhUX05PREVfSUR9LiR7Y2hpbGRJZH1gO1xuICAgICAgICAgICAgY29uc3QgY29tbWVudEJlZm9yZVRleHROb2RlID0gZG9jLmNyZWF0ZUNvbW1lbnQodGV4dE5vZGVJZCk7XG4gICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShjb21tZW50QmVmb3JlVGV4dE5vZGUsIGNoaWxkRWxtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChjaGlsZEVsbS5ub2RlVHlwZSA9PT0gOCAvKiBOT0RFX1RZUEUuQ29tbWVudE5vZGUgKi8pIHtcbiAgICAgICAgaWYgKGNoaWxkRWxtWydzLXNyJ10pIHtcbiAgICAgICAgICAgIGNvbnN0IHNsb3ROYW1lID0gY2hpbGRFbG1bJ3Mtc24nXSB8fCAnJztcbiAgICAgICAgICAgIGNvbnN0IHNsb3ROb2RlSWQgPSBgJHtTTE9UX05PREVfSUR9LiR7Y2hpbGRJZH0uJHtzbG90TmFtZX1gO1xuICAgICAgICAgICAgY2hpbGRFbG0ubm9kZVZhbHVlID0gc2xvdE5vZGVJZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodm5vZGVDaGlsZC4kY2hpbGRyZW4kICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgY2hpbGREZXB0aCA9IGRlcHRoICsgMTtcbiAgICAgICAgdm5vZGVDaGlsZC4kY2hpbGRyZW4kLmZvckVhY2goKHZub2RlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaW5zZXJ0Q2hpbGRWTm9kZUFubm90YXRpb25zKGRvYywgdm5vZGUsIGNtcERhdGEsIGhvc3RJZCwgY2hpbGREZXB0aCwgaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuY29uc3QgaG9zdFJlZnMgPSAvKkBfX1BVUkVfXyovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCBnZXRIb3N0UmVmID0gKHJlZikgPT4gaG9zdFJlZnMuZ2V0KHJlZik7XG5jb25zdCByZWdpc3Rlckluc3RhbmNlID0gKGxhenlJbnN0YW5jZSwgaG9zdFJlZikgPT4gaG9zdFJlZnMuc2V0KChob3N0UmVmLiRsYXp5SW5zdGFuY2UkID0gbGF6eUluc3RhbmNlKSwgaG9zdFJlZik7XG5jb25zdCByZWdpc3Rlckhvc3QgPSAoZWxtLCBjbXBNZXRhKSA9PiB7XG4gICAgY29uc3QgaG9zdFJlZiA9IHtcbiAgICAgICAgJGZsYWdzJDogMCxcbiAgICAgICAgJGhvc3RFbGVtZW50JDogZWxtLFxuICAgICAgICAkY21wTWV0YSQ6IGNtcE1ldGEsXG4gICAgICAgICRpbnN0YW5jZVZhbHVlcyQ6IG5ldyBNYXAoKSxcbiAgICB9O1xuICAgIGlmIChCVUlMRC5pc0Rldikge1xuICAgICAgICBob3N0UmVmLiRyZW5kZXJDb3VudCQgPSAwO1xuICAgIH1cbiAgICBpZiAoQlVJTEQubWV0aG9kICYmIEJVSUxELmxhenlMb2FkKSB7XG4gICAgICAgIGhvc3RSZWYuJG9uSW5zdGFuY2VQcm9taXNlJCA9IG5ldyBQcm9taXNlKChyKSA9PiAoaG9zdFJlZi4kb25JbnN0YW5jZVJlc29sdmUkID0gcikpO1xuICAgIH1cbiAgICBpZiAoQlVJTEQuYXN5bmNMb2FkaW5nKSB7XG4gICAgICAgIGhvc3RSZWYuJG9uUmVhZHlQcm9taXNlJCA9IG5ldyBQcm9taXNlKChyKSA9PiAoaG9zdFJlZi4kb25SZWFkeVJlc29sdmUkID0gcikpO1xuICAgICAgICBlbG1bJ3MtcCddID0gW107XG4gICAgICAgIGVsbVsncy1yYyddID0gW107XG4gICAgfVxuICAgIGFkZEhvc3RFdmVudExpc3RlbmVycyhlbG0sIGhvc3RSZWYsIGNtcE1ldGEuJGxpc3RlbmVycyQsIGZhbHNlKTtcbiAgICByZXR1cm4gaG9zdFJlZnMuc2V0KGVsbSwgaG9zdFJlZik7XG59O1xuY29uc3QgaXNNZW1iZXJJbkVsZW1lbnQgPSAoZWxtLCBtZW1iZXJOYW1lKSA9PiBtZW1iZXJOYW1lIGluIGVsbTtcbmNvbnN0IGNvbnNvbGVFcnJvciA9IChlLCBlbCkgPT4gKGN1c3RvbUVycm9yIHx8IGNvbnNvbGUuZXJyb3IpKGUsIGVsKTtcbmNvbnN0IFNURU5DSUxfREVWX01PREUgPSBCVUlMRC5pc1Rlc3RpbmdcbiAgICA/IFsnU1RFTkNJTDonXSAvLyBFMkUgdGVzdGluZ1xuICAgIDogW1xuICAgICAgICAnJWNzdGVuY2lsJyxcbiAgICAgICAgJ2NvbG9yOiB3aGl0ZTtiYWNrZ3JvdW5kOiM0YzQ3ZmY7Zm9udC13ZWlnaHQ6IGJvbGQ7IGZvbnQtc2l6ZToxMHB4OyBwYWRkaW5nOjJweCA2cHg7IGJvcmRlci1yYWRpdXM6IDVweCcsXG4gICAgXTtcbmNvbnN0IGNvbnNvbGVEZXZFcnJvciA9ICguLi5tKSA9PiBjb25zb2xlLmVycm9yKC4uLlNURU5DSUxfREVWX01PREUsIC4uLm0pO1xuY29uc3QgY29uc29sZURldldhcm4gPSAoLi4ubSkgPT4gY29uc29sZS53YXJuKC4uLlNURU5DSUxfREVWX01PREUsIC4uLm0pO1xuY29uc3QgY29uc29sZURldkluZm8gPSAoLi4ubSkgPT4gY29uc29sZS5pbmZvKC4uLlNURU5DSUxfREVWX01PREUsIC4uLm0pO1xuY29uc3Qgc2V0RXJyb3JIYW5kbGVyID0gKGhhbmRsZXIpID0+IChjdXN0b21FcnJvciA9IGhhbmRsZXIpO1xuY29uc3QgY21wTW9kdWxlcyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hcCgpO1xuY29uc3QgbG9hZE1vZHVsZSA9IChjbXBNZXRhLCBob3N0UmVmLCBobXJWZXJzaW9uSWQpID0+IHtcbiAgICAvLyBsb2FkTW9kdWxlSW1wb3J0XG4gICAgY29uc3QgZXhwb3J0TmFtZSA9IGNtcE1ldGEuJHRhZ05hbWUkLnJlcGxhY2UoLy0vZywgJ18nKTtcbiAgICBjb25zdCBidW5kbGVJZCA9IGNtcE1ldGEuJGxhenlCdW5kbGVJZCQ7XG4gICAgaWYgKEJVSUxELmlzRGV2ICYmIHR5cGVvZiBidW5kbGVJZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc29sZURldkVycm9yKGBUcnlpbmcgdG8gbGF6aWx5IGxvYWQgY29tcG9uZW50IDwke2NtcE1ldGEuJHRhZ05hbWUkfT4gd2l0aCBzdHlsZSBtb2RlIFwiJHtob3N0UmVmLiRtb2RlTmFtZSR9XCIsIGJ1dCBpdCBkb2VzIG5vdCBleGlzdC5gKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgbW9kdWxlID0gIUJVSUxELmhvdE1vZHVsZVJlcGxhY2VtZW50ID8gY21wTW9kdWxlcy5nZXQoYnVuZGxlSWQpIDogZmFsc2U7XG4gICAgaWYgKG1vZHVsZSkge1xuICAgICAgICByZXR1cm4gbW9kdWxlW2V4cG9ydE5hbWVdO1xuICAgIH1cbiAgICAvKiFfX1NURU5DSUxfU1RBVElDX0lNUE9SVF9TV0lUQ0hfXyovXG4gICAgcmV0dXJuIGltcG9ydChcbiAgICAvKiBAdml0ZS1pZ25vcmUgKi9cbiAgICAvKiB3ZWJwYWNrSW5jbHVkZTogL1xcLmVudHJ5XFwuanMkLyAqL1xuICAgIC8qIHdlYnBhY2tFeGNsdWRlOiAvXFwuc3lzdGVtXFwuZW50cnlcXC5qcyQvICovXG4gICAgLyogd2VicGFja01vZGU6IFwibGF6eVwiICovXG4gICAgYC4vJHtidW5kbGVJZH0uZW50cnkuanMke0JVSUxELmhvdE1vZHVsZVJlcGxhY2VtZW50ICYmIGhtclZlcnNpb25JZCA/ICc/cy1obXI9JyArIGhtclZlcnNpb25JZCA6ICcnfWApLnRoZW4oKGltcG9ydGVkTW9kdWxlKSA9PiB7XG4gICAgICAgIGlmICghQlVJTEQuaG90TW9kdWxlUmVwbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIGNtcE1vZHVsZXMuc2V0KGJ1bmRsZUlkLCBpbXBvcnRlZE1vZHVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGltcG9ydGVkTW9kdWxlW2V4cG9ydE5hbWVdO1xuICAgIH0sIGNvbnNvbGVFcnJvcik7XG59O1xuY29uc3Qgc3R5bGVzID0gLypAX19QVVJFX18qLyBuZXcgTWFwKCk7XG5jb25zdCBtb2RlUmVzb2x1dGlvbkNoYWluID0gW107XG5jb25zdCB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9O1xuY29uc3QgQ1NTID0gQlVJTEQuY3NzVmFyU2hpbSA/IHdpbi5DU1MgOiBudWxsO1xuY29uc3QgZG9jID0gd2luLmRvY3VtZW50IHx8IHsgaGVhZDoge30gfTtcbmNvbnN0IEggPSAod2luLkhUTUxFbGVtZW50IHx8IGNsYXNzIHtcbn0pO1xuY29uc3QgcGx0ID0ge1xuICAgICRmbGFncyQ6IDAsXG4gICAgJHJlc291cmNlc1VybCQ6ICcnLFxuICAgIGptcDogKGgpID0+IGgoKSxcbiAgICByYWY6IChoKSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaCksXG4gICAgYWVsOiAoZWwsIGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9wdHMpID0+IGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lciwgb3B0cyksXG4gICAgcmVsOiAoZWwsIGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9wdHMpID0+IGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lciwgb3B0cyksXG4gICAgY2U6IChldmVudE5hbWUsIG9wdHMpID0+IG5ldyBDdXN0b21FdmVudChldmVudE5hbWUsIG9wdHMpLFxufTtcbmNvbnN0IHNldFBsYXRmb3JtSGVscGVycyA9IChoZWxwZXJzKSA9PiB7XG4gICAgT2JqZWN0LmFzc2lnbihwbHQsIGhlbHBlcnMpO1xufTtcbmNvbnN0IHN1cHBvcnRzU2hhZG93ID0gQlVJTEQuc2hhZG93RG9tU2hpbSAmJiBCVUlMRC5zaGFkb3dEb21cbiAgICA/IC8qQF9fUFVSRV9fKi8gKCgpID0+IChkb2MuaGVhZC5hdHRhY2hTaGFkb3cgKyAnJykuaW5kZXhPZignW25hdGl2ZScpID4gLTEpKClcbiAgICA6IHRydWU7XG5jb25zdCBzdXBwb3J0c0xpc3RlbmVyT3B0aW9ucyA9IC8qQF9fUFVSRV9fKi8gKCgpID0+IHtcbiAgICBsZXQgc3VwcG9ydHNMaXN0ZW5lck9wdGlvbnMgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignZScsIG51bGwsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgc3VwcG9ydHNMaXN0ZW5lck9wdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkgeyB9XG4gICAgcmV0dXJuIHN1cHBvcnRzTGlzdGVuZXJPcHRpb25zO1xufSkoKTtcbmNvbnN0IHByb21pc2VSZXNvbHZlID0gKHYpID0+IFByb21pc2UucmVzb2x2ZSh2KTtcbmNvbnN0IHN1cHBvcnRzQ29uc3RydWN0YWJsZVN0eWxlc2hlZXRzID0gQlVJTEQuY29uc3RydWN0YWJsZUNTU1xuICAgID8gLypAX19QVVJFX18qLyAoKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbmV3IENTU1N0eWxlU2hlZXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgbmV3IENTU1N0eWxlU2hlZXQoKS5yZXBsYWNlU3luYyA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KSgpXG4gICAgOiBmYWxzZTtcbmNvbnN0IHF1ZXVlRG9tUmVhZHMgPSBbXTtcbmNvbnN0IHF1ZXVlRG9tV3JpdGVzID0gW107XG5jb25zdCBxdWV1ZURvbVdyaXRlc0xvdyA9IFtdO1xuY29uc3QgcXVldWVUYXNrID0gKHF1ZXVlLCB3cml0ZSkgPT4gKGNiKSA9PiB7XG4gICAgcXVldWUucHVzaChjYik7XG4gICAgaWYgKCFxdWV1ZVBlbmRpbmcpIHtcbiAgICAgICAgcXVldWVQZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKHdyaXRlICYmIHBsdC4kZmxhZ3MkICYgNCAvKiBQTEFURk9STV9GTEFHUy5xdWV1ZVN5bmMgKi8pIHtcbiAgICAgICAgICAgIG5leHRUaWNrKGZsdXNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBsdC5yYWYoZmx1c2gpO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IGNvbnN1bWUgPSAocXVldWUpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBxdWV1ZVtpXShwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGVFcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5sZW5ndGggPSAwO1xufTtcbmNvbnN0IGNvbnN1bWVUaW1lb3V0ID0gKHF1ZXVlLCB0aW1lb3V0KSA9PiB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCB0cyA9IDA7XG4gICAgd2hpbGUgKGkgPCBxdWV1ZS5sZW5ndGggJiYgKHRzID0gcGVyZm9ybWFuY2Uubm93KCkpIDwgdGltZW91dCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcXVldWVbaSsrXSh0cyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGVFcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA9PT0gcXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGkgIT09IDApIHtcbiAgICAgICAgcXVldWUuc3BsaWNlKDAsIGkpO1xuICAgIH1cbn07XG5jb25zdCBmbHVzaCA9ICgpID0+IHtcbiAgICBpZiAoQlVJTEQuYXN5bmNRdWV1ZSkge1xuICAgICAgICBxdWV1ZUNvbmdlc3Rpb24rKztcbiAgICB9XG4gICAgLy8gYWx3YXlzIGZvcmNlIGEgYnVuY2ggb2YgbWVkaXVtIGNhbGxiYWNrcyB0byBydW4sIGJ1dCBzdGlsbCBoYXZlXG4gICAgLy8gYSB0aHJvdHRsZSBvbiBob3cgbWFueSBjYW4gcnVuIGluIGEgY2VydGFpbiB0aW1lXG4gICAgLy8gRE9NIFJFQURTISEhXG4gICAgY29uc3VtZShxdWV1ZURvbVJlYWRzKTtcbiAgICAvLyBET00gV1JJVEVTISEhXG4gICAgaWYgKEJVSUxELmFzeW5jUXVldWUpIHtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IChwbHQuJGZsYWdzJCAmIDYgLyogUExBVEZPUk1fRkxBR1MucXVldWVNYXNrICovKSA9PT0gMiAvKiBQTEFURk9STV9GTEFHUy5hcHBMb2FkZWQgKi9cbiAgICAgICAgICAgID8gcGVyZm9ybWFuY2Uubm93KCkgKyAxNCAqIE1hdGguY2VpbChxdWV1ZUNvbmdlc3Rpb24gKiAoMS4wIC8gMTAuMCkpXG4gICAgICAgICAgICA6IEluZmluaXR5O1xuICAgICAgICBjb25zdW1lVGltZW91dChxdWV1ZURvbVdyaXRlcywgdGltZW91dCk7XG4gICAgICAgIGNvbnN1bWVUaW1lb3V0KHF1ZXVlRG9tV3JpdGVzTG93LCB0aW1lb3V0KTtcbiAgICAgICAgaWYgKHF1ZXVlRG9tV3JpdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHF1ZXVlRG9tV3JpdGVzTG93LnB1c2goLi4ucXVldWVEb21Xcml0ZXMpO1xuICAgICAgICAgICAgcXVldWVEb21Xcml0ZXMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHF1ZXVlUGVuZGluZyA9IHF1ZXVlRG9tUmVhZHMubGVuZ3RoICsgcXVldWVEb21Xcml0ZXMubGVuZ3RoICsgcXVldWVEb21Xcml0ZXNMb3cubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgIC8vIHN0aWxsIG1vcmUgdG8gZG8geWV0LCBidXQgd2UndmUgcnVuIG91dCBvZiB0aW1lXG4gICAgICAgICAgICAvLyBsZXQncyBsZXQgdGhpcyB0aGluZyBjb29sIG9mZiBhbmQgdHJ5IGFnYWluIGluIHRoZSBuZXh0IHRpY2tcbiAgICAgICAgICAgIHBsdC5yYWYoZmx1c2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcXVldWVDb25nZXN0aW9uID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3VtZShxdWV1ZURvbVdyaXRlcyk7XG4gICAgICAgIGlmICgocXVldWVQZW5kaW5nID0gcXVldWVEb21SZWFkcy5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgLy8gc3RpbGwgbW9yZSB0byBkbyB5ZXQsIGJ1dCB3ZSd2ZSBydW4gb3V0IG9mIHRpbWVcbiAgICAgICAgICAgIC8vIGxldCdzIGxldCB0aGlzIHRoaW5nIGNvb2wgb2ZmIGFuZCB0cnkgYWdhaW4gaW4gdGhlIG5leHQgdGlja1xuICAgICAgICAgICAgcGx0LnJhZihmbHVzaCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgbmV4dFRpY2sgPSAvKkBfX1BVUkVfXyovIChjYikgPT4gcHJvbWlzZVJlc29sdmUoKS50aGVuKGNiKTtcbmNvbnN0IHJlYWRUYXNrID0gLypAX19QVVJFX18qLyBxdWV1ZVRhc2socXVldWVEb21SZWFkcywgZmFsc2UpO1xuY29uc3Qgd3JpdGVUYXNrID0gLypAX19QVVJFX18qLyBxdWV1ZVRhc2socXVldWVEb21Xcml0ZXMsIHRydWUpO1xuZXhwb3J0IHsgQlVJTEQsIEVudiwgTkFNRVNQQUNFIH0gZnJvbSAnQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9hcHAtZGF0YSc7XG5leHBvcnQgeyBCdWlsZCwgQ1NTLCBDb250ZXh0LCBGcmFnbWVudCwgSCwgSCBhcyBIVE1MRWxlbWVudCwgSG9zdCwgU1RFTkNJTF9ERVZfTU9ERSwgYWRkSG9zdEV2ZW50TGlzdGVuZXJzLCBib290c3RyYXBMYXp5LCBjbXBNb2R1bGVzLCBjb25uZWN0ZWRDYWxsYmFjaywgY29uc29sZURldkVycm9yLCBjb25zb2xlRGV2SW5mbywgY29uc29sZURldldhcm4sIGNvbnNvbGVFcnJvciwgY3JlYXRlRXZlbnQsIGRlZmluZUN1c3RvbUVsZW1lbnQsIGRpc2Nvbm5lY3RlZENhbGxiYWNrLCBkb2MsIGZvcmNlTW9kZVVwZGF0ZSwgZm9yY2VVcGRhdGUsIGdldEFzc2V0UGF0aCwgZ2V0Q29ubmVjdCwgZ2V0Q29udGV4dCwgZ2V0RWxlbWVudCwgZ2V0SG9zdFJlZiwgZ2V0TW9kZSwgZ2V0UmVuZGVyaW5nUmVmLCBnZXRWYWx1ZSwgaCwgaW5zZXJ0VmRvbUFubm90YXRpb25zLCBpc01lbWJlckluRWxlbWVudCwgbG9hZE1vZHVsZSwgbW9kZVJlc29sdXRpb25DaGFpbiwgbmV4dFRpY2ssIHBhcnNlUHJvcGVydHlWYWx1ZSwgcGx0LCBwb3N0VXBkYXRlQ29tcG9uZW50LCBwcm9taXNlUmVzb2x2ZSwgcHJveHlDb21wb25lbnQsIHByb3h5Q3VzdG9tRWxlbWVudCwgcmVhZFRhc2ssIHJlZ2lzdGVySG9zdCwgcmVnaXN0ZXJJbnN0YW5jZSwgcmVuZGVyVmRvbSwgc2V0QXNzZXRQYXRoLCBzZXRFcnJvckhhbmRsZXIsIHNldE1vZGUsIHNldFBsYXRmb3JtSGVscGVycywgc2V0UGxhdGZvcm1PcHRpb25zLCBzZXRWYWx1ZSwgc3R5bGVzLCBzdXBwb3J0c0NvbnN0cnVjdGFibGVTdHlsZXNoZWV0cywgc3VwcG9ydHNMaXN0ZW5lck9wdGlvbnMsIHN1cHBvcnRzU2hhZG93LCB3aW4sIHdyaXRlVGFzayB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfZnJhbWV3b3JrSW1wb3J0UGF0aCA9IHJlcXVpcmUoXCJAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzXCIpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tdW5yZXNvbHZlZCAqL1xuKDAsIF9mcmFtZXdvcmtJbXBvcnRQYXRoLmNvbmZpZ3VyZSkoW3JlcXVpcmUuY29udGV4dCgnLi9zcmMnLCB0cnVlLCAvXlxcLig/Oig/Ol58XFwvfCg/Oig/Oig/ISg/Ol58XFwvKVxcLikuKSo/KVxcLykoPyFcXC4pKD89LilbXi9dKj9cXC5zdG9yaWVzXFwubWR4KSQvKSxyZXF1aXJlLmNvbnRleHQoJy4vc3JjJywgdHJ1ZSwgL15cXC4oPzooPzpefFxcL3woPzooPzooPyEoPzpefFxcLylcXC4pLikqPylcXC8pKD8hXFwuKSg/PS4pW14vXSo/XFwuc3Rvcmllc1xcLihqc3xqc3h8dHN8dHN4KSkkLyldLCBtb2R1bGUsIGZhbHNlKTsiLCJ2YXIgbWFwID0ge1xuXHRcIi4vY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLWJ1dHRvbi1wYW5lbC92ZXJkb2NzLWJ1dHRvbi1wYW5lbC5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1idXR0b24tcGFuZWwvdmVyZG9jcy1idXR0b24tcGFuZWwuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1idXR0b24vdmVyZG9jcy1idXR0b24uc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtYnV0dG9uL3ZlcmRvY3MtYnV0dG9uLnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtY2hlY2tib3gvdmVyZG9jcy1jaGVja2JveC5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1jaGVja2JveC92ZXJkb2NzLWNoZWNrYm94LnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtZHJvcGRvd24vdmVyZG9jcy1kcm9wZG93bi5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1kcm9wZG93bi92ZXJkb2NzLWRyb3Bkb3duLnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtaGVscC1pY29uL3ZlcmRvY3MtaGVscC1pY29uLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLWhlbHAtaWNvbi92ZXJkb2NzLWhlbHAtaWNvbi5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLWxvYWRlci92ZXJkb2NzLWxvYWRlci5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1sb2FkZXIvdmVyZG9jcy1sb2FkZXIuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1vcmdhbml6YXRpb24tY2FyZC92ZXJkb2NzLW9yZ2FuaXphdGlvbi1jYXJkLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLW9yZ2FuaXphdGlvbi1jYXJkL3ZlcmRvY3Mtb3JnYW5pemF0aW9uLWNhcmQuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1yYWRpby1idXR0b24vdmVyZG9jcy1yYWRpby1idXR0b24uc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtcmFkaW8tYnV0dG9uL3ZlcmRvY3MtcmFkaW8tYnV0dG9uLnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3Mtc2VsZWN0LWlucHV0L3ZlcmRvY3Mtc2VsZWN0LWlucHV0LnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLXNlbGVjdC1pbnB1dC92ZXJkb2NzLXNlbGVjdC1pbnB1dC5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLXN0YXR1cy1pbmRpY2F0b3IvdmVyZG9jcy1zdGF0dXMtaW5kaWNhdG9yLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLXN0YXR1cy1pbmRpY2F0b3IvdmVyZG9jcy1zdGF0dXMtaW5kaWNhdG9yLnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtdGVtcGxhdGUtY2FyZC92ZXJkb2NzLXRlbXBsYXRlLWNhcmQuc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtdGVtcGxhdGUtY2FyZC92ZXJkb2NzLXRlbXBsYXRlLWNhcmQuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy10ZW1wbGF0ZS10YWdzL3ZlcmRvY3MtdGVtcGxhdGUtdGFncy5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy10ZW1wbGF0ZS10YWdzL3ZlcmRvY3MtdGVtcGxhdGUtdGFncy5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLXRleHQtaW5wdXQvdmVyZG9jcy10ZXh0LWlucHV0LnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLXRleHQtaW5wdXQvdmVyZG9jcy10ZXh0LWlucHV0LnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtdG9nZ2xlLWJ1dHRvbi92ZXJkb2NzLXRvZ2dsZS1idXR0b24uc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtdG9nZ2xlLWJ1dHRvbi92ZXJkb2NzLXRvZ2dsZS1idXR0b24uc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy10b2dnbGUvdmVyZG9jcy10b2dnbGUuc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtdG9nZ2xlL3ZlcmRvY3MtdG9nZ2xlLnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtdG9vbGJhci1pY29uL3ZlcmRvY3MtdG9vbGJhci1pY29uLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9jb250cm9scy92ZXJkb2NzLXRvb2xiYXItaWNvbi92ZXJkb2NzLXRvb2xiYXItaWNvbi5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9kaWFsb2dzL3ZlcmRvY3MtaW5pdGlhbC1kaWFsb2cvdmVyZG9jcy1pbml0aWFsLWRpYWxvZy5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZGlhbG9ncy92ZXJkb2NzLWluaXRpYWwtZGlhbG9nL3ZlcmRvY3MtaW5pdGlhbC1kaWFsb2cuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvZGlhbG9ncy92ZXJkb2NzLWtiYS1kaWFsb2cvdmVyZG9jcy1rYmEtZGlhbG9nLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9kaWFsb2dzL3ZlcmRvY3Mta2JhLWRpYWxvZy92ZXJkb2NzLWtiYS1kaWFsb2cuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvZGlhbG9ncy92ZXJkb2NzLW9rLWRpYWxvZy92ZXJkb2NzLW9rLWRpYWxvZy5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZGlhbG9ncy92ZXJkb2NzLW9rLWRpYWxvZy92ZXJkb2NzLW9rLWRpYWxvZy5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9kaWFsb2dzL3ZlcmRvY3Mtc2lnbmF0dXJlLWRpYWxvZy92ZXJkb2NzLXNpZ25hdHVyZS1kaWFsb2cuc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2RpYWxvZ3MvdmVyZG9jcy1zaWduYXR1cmUtZGlhbG9nL3ZlcmRvY3Mtc2lnbmF0dXJlLWRpYWxvZy5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9kaWFsb2dzL3ZlcmRvY3MtdGVtcGxhdGUtc2VuZGVyLWRpYWxvZy92ZXJkb2NzLXRlbXBsYXRlLXNlbmRlci1kaWFsb2cuc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2RpYWxvZ3MvdmVyZG9jcy10ZW1wbGF0ZS1zZW5kZXItZGlhbG9nL3ZlcmRvY3MtdGVtcGxhdGUtc2VuZGVyLWRpYWxvZy5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9kaWFsb2dzL3ZlcmRvY3MtdXBsb2FkLWRpYWxvZy92ZXJkb2NzLXVwbG9hZC1kaWFsb2cuc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2RpYWxvZ3MvdmVyZG9jcy11cGxvYWQtZGlhbG9nL3ZlcmRvY3MtdXBsb2FkLWRpYWxvZy5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWNvbnRhY3QtcGlja2VyL3ZlcmRvY3MtY29udGFjdC1waWNrZXIuc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtY29udGFjdC1waWNrZXIvdmVyZG9jcy1jb250YWN0LXBpY2tlci5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLWF0dGFjaG1lbnQvdmVyZG9jcy1maWVsZC1hdHRhY2htZW50LnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLWF0dGFjaG1lbnQvdmVyZG9jcy1maWVsZC1hdHRhY2htZW50LnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtZmllbGQtY2hlY2tib3gvdmVyZG9jcy1maWVsZC1jaGVja2JveC5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC1jaGVja2JveC92ZXJkb2NzLWZpZWxkLWNoZWNrYm94LnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtZmllbGQtZGF0ZS92ZXJkb2NzLWZpZWxkLWRhdGUuc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtZmllbGQtZGF0ZS92ZXJkb2NzLWZpZWxkLWRhdGUuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC1kcm9wZG93bi92ZXJkb2NzLWZpZWxkLWRyb3Bkb3duLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLWRyb3Bkb3duL3ZlcmRvY3MtZmllbGQtZHJvcGRvd24uc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC1pbml0aWFsL3ZlcmRvY3MtZmllbGQtaW5pdGlhbC5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC1pbml0aWFsL3ZlcmRvY3MtZmllbGQtaW5pdGlhbC5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLXBheW1lbnQvdmVyZG9jcy1maWVsZC1wYXltZW50LnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLXBheW1lbnQvdmVyZG9jcy1maWVsZC1wYXltZW50LnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtZmllbGQtcmFkaW8tYnV0dG9uLWdyb3VwL3ZlcmRvY3MtZmllbGQtcmFkaW8tYnV0dG9uLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLXJhZGlvLWJ1dHRvbi1ncm91cC92ZXJkb2NzLWZpZWxkLXJhZGlvLWJ1dHRvbi5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLXNpZ25hdHVyZS92ZXJkb2NzLWZpZWxkLXNpZ25hdHVyZS5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC1zaWduYXR1cmUvdmVyZG9jcy1maWVsZC1zaWduYXR1cmUuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC10ZXh0YXJlYS92ZXJkb2NzLWZpZWxkLXRleHRhcmVhLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLXRleHRhcmVhL3ZlcmRvY3MtZmllbGQtdGV4dGFyZWEuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC10ZXh0Ym94L3ZlcmRvY3MtZmllbGQtdGV4dGJveC5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC10ZXh0Ym94L3ZlcmRvY3MtZmllbGQtdGV4dGJveC5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLXRpbWVzdGFtcC92ZXJkb2NzLWZpZWxkLXRpbWVzdGFtcC5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1maWVsZC10aW1lc3RhbXAvdmVyZG9jcy1maWVsZC10aW1lc3RhbXAuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1xdWljay1mdW5jdGlvbnMvdmVyZG9jcy1xdWljay1mdW5jdGlvbnMuc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtcXVpY2stZnVuY3Rpb25zL3ZlcmRvY3MtcXVpY2stZnVuY3Rpb25zLnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3Mtc2VhcmNoLWFjdGl2aXR5L3ZlcmRvY3Mtc2VhcmNoLWFjdGl2aXR5LnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLXNlYXJjaC1hY3Rpdml0eS92ZXJkb2NzLXNlYXJjaC1hY3Rpdml0eS5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLXNlYXJjaC1ib3gvdmVyZG9jcy1zZWFyY2gtYm94LnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLXNlYXJjaC1ib3gvdmVyZG9jcy1zZWFyY2gtYm94LnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3Mtc2VhcmNoLXRhYnMvdmVyZG9jcy1zZWFyY2gtdGFicy5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy1zZWFyY2gtdGFicy92ZXJkb2NzLXNlYXJjaC10YWJzLnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtdGVtcGxhdGUtY3JlYXRlL3ZlcmRvY3MtdGVtcGxhdGUtY3JlYXRlLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLXRlbXBsYXRlLWNyZWF0ZS92ZXJkb2NzLXRlbXBsYXRlLWNyZWF0ZS5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLXRlbXBsYXRlLWZpZWxkcy92ZXJkb2NzLXRlbXBsYXRlLWZpZWxkcy5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy10ZW1wbGF0ZS1maWVsZHMvdmVyZG9jcy10ZW1wbGF0ZS1maWVsZHMuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy10ZW1wbGF0ZS1wcm9wZXJ0aWVzL3ZlcmRvY3MtdGVtcGxhdGUtcHJvcGVydGllcy5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZWxlbWVudHMvdmVyZG9jcy10ZW1wbGF0ZS1wcm9wZXJ0aWVzL3ZlcmRvY3MtdGVtcGxhdGUtcHJvcGVydGllcy5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLXRlbXBsYXRlLXJlY2lwaWVudHMvdmVyZG9jcy10ZW1wbGF0ZS1yZWNpcGllbnRzLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLXRlbXBsYXRlLXJlY2lwaWVudHMvdmVyZG9jcy10ZW1wbGF0ZS1yZWNpcGllbnRzLnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2VtYmVkcy92ZXJkb2NzLWF1dGgvdmVyZG9jcy1hdXRoLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy1hdXRoL3ZlcmRvY3MtYXV0aC5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy1idWlsZC92ZXJkb2NzLWJ1aWxkLnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy1idWlsZC92ZXJkb2NzLWJ1aWxkLnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2VtYmVkcy92ZXJkb2NzLXByZXZpZXcvdmVyZG9jcy1wcmV2aWV3LnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy1wcmV2aWV3L3ZlcmRvY3MtcHJldmlldy5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy1zZWFyY2gvdmVyZG9jcy1zZWFyY2guc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2VtYmVkcy92ZXJkb2NzLXNlYXJjaC92ZXJkb2NzLXNlYXJjaC5zdG9yaWVzLnRzeFwiLFxuXHRcIi4vY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy1zZW5kL3ZlcmRvY3Mtc2VuZC5zdG9yaWVzLnRzeFwiOiBcIi4vc3JjL2NvbXBvbmVudHMvZW1iZWRzL3ZlcmRvY3Mtc2VuZC92ZXJkb2NzLXNlbmQuc3Rvcmllcy50c3hcIixcblx0XCIuL2NvbXBvbmVudHMvZW1iZWRzL3ZlcmRvY3Mtc2lnbi92ZXJkb2NzLXNpZ24uc3Rvcmllcy50c3hcIjogXCIuL3NyYy9jb21wb25lbnRzL2VtYmVkcy92ZXJkb2NzLXNpZ24vdmVyZG9jcy1zaWduLnN0b3JpZXMudHN4XCIsXG5cdFwiLi9jb21wb25lbnRzL2VtYmVkcy92ZXJkb2NzLXZpZXcvdmVyZG9jcy12aWV3LnN0b3JpZXMudHN4XCI6IFwiLi9zcmMvY29tcG9uZW50cy9lbWJlZHMvdmVyZG9jcy12aWV3L3ZlcmRvY3Mtdmlldy5zdG9yaWVzLnRzeFwiXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gXCIuL3NyYyBzeW5jIHJlY3Vyc2l2ZSBeXFxcXC4oPzooPzpefFxcXFwvfCg/Oig/Oig/ISg/Ol58XFxcXC8pXFxcXC4pLikqPylcXFxcLykoPyFcXFxcLikoPz0uKVteL10qP1xcXFwuc3Rvcmllc1xcXFwuKGpzfGpzeHx0c3x0c3gpKSRcIjsiLCJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xuXHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0dGhyb3cgZTtcbn1cbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH07XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IFwiLi9zcmMgc3luYyByZWN1cnNpdmUgXlxcXFwuKD86KD86XnxcXFxcL3woPzooPzooPyEoPzpefFxcXFwvKVxcXFwuKS4pKj8pXFxcXC8pKD8hXFxcXC4pKD89LilbXi9dKj9cXFxcLnN0b3JpZXNcXFxcLm1keCkkXCI7IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQ29udHJvbHMvQnV0dG9uIFBhbmVsJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtYnV0dG9uLXBhbmVsJyxcXG4gIGFyZ3M6IHtcXG4gICAgaWNvbjogJzxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBoZWlnaHQ9XFxcIjI0XFxcIiB3aWR0aD1cXFwiMjRcXFwiIGZpbGw9XFxcIiMwMDAwMDBcXFwiPjxwYXRoIGQ9XFxcIk03LjYgMTMuOTI1cS0uNTUgMC0uOTI1LS4zNzV0LS4zNzUtLjkyNXEwLS41NS4zNzUtLjkzNy4zNzUtLjM4OC45MjUtLjM4OHQuOTI1LjM4OHEuMzc1LjM4Ny4zNzUuOTM3dC0uMzc1LjkyNXEtLjM3NS4zNzUtLjkyNS4zNzVabTQuNCAwcS0uNTUgMC0uOTI1LS4zNzV0LS4zNzUtLjkyNXEwLS41NS4zNzUtLjkzNy4zNzUtLjM4OC45MjUtLjM4OHQuOTI1LjM4OHEuMzc1LjM4Ny4zNzUuOTM3dC0uMzc1LjkyNXEtLjM3NS4zNzUtLjkyNS4zNzVabTQuNCAwcS0uNTUgMC0uOTI1LS4zNzV0LS4zNzUtLjkyNXEwLS41NS4zNzUtLjkzNy4zNzUtLjM4OC45MjUtLjM4OHQuOTI1LjM4OHEuMzc1LjM4Ny4zNzUuOTM3dC0uMzc1LjkyNXEtLjM3NS4zNzUtLjkyNS4zNzVaTTUuMyAyMi44NXEtMS4zMjUgMC0yLjIzOC0uOTEyLS45MTItLjkxMy0uOTEyLTIuMjM4VjYuM3EwLTEuMzI1LjkxMi0yLjIzOC45MTMtLjkxMiAyLjIzOC0uOTEySDZ2LTJoMi41NzV2Mmg2Ljg1di0ySDE4djJoLjdxMS4zMjUgMCAyLjIzOC45MTIuOTEyLjkxMy45MTIgMi4yMzh2MTMuNHEwIDEuMzI1LS45MTIgMi4yMzgtLjkxMy45MTItMi4yMzguOTEyWm0wLTMuMTVoMTMuNFYxMEg1LjN2OS43Wk01LjMgOGgxMy40VjYuM0g1LjNabTAgMFY2LjMgOFpcXFwiLz48L3N2Zz4nLFxcbiAgfSxcXG4gIGFyZ1R5cGVzOiB7fSxcXG4gIHBhcmFtZXRlcnM6IHtcXG4gICAgbGF5b3V0OiAnZnVsbHNjcmVlbicsXFxuICB9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgQnV0dG9uUGFuZWwgPSAoe2ljb259KSA9PiBodG1sYFxcbiAgPHZlcmRvY3MtYnV0dG9uLXBhbmVsIC5pY29uPSR7aWNvbn0+XFxuICAgIDxoNj5GaWVsZCBTZXR0aW5nczwvaDY+XFxuICAgIDxmb3JtPlxcbiAgICAgIDxsYWJlbD5GaWVsZCAxPC9sYWJlbD5cXG4gICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcIkZpZWxkIDEuLi5cXFwiIC8+XFxuICAgICAgPGxhYmVsPkZpZWxkIDI8L2xhYmVsPlxcbiAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwiRmllbGQgMi4uLlxcXCIgLz5cXG4gICAgPC9mb3JtPlxcbiAgPC92ZXJkb2NzLWJ1dHRvbi1wYW5lbD5cXG5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJCdXR0b25QYW5lbFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjcsXCJsaW5lXCI6MTZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjoyNn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjoxNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjoyNn19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0NvbnRyb2xzL0J1dHRvbiBQYW5lbCcsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtYnV0dG9uLXBhbmVsJyxcbiAgYXJnczoge1xuICAgIGljb246ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBoZWlnaHQ9XCIyNFwiIHdpZHRoPVwiMjRcIiBmaWxsPVwiIzAwMDAwMFwiPjxwYXRoIGQ9XCJNNy42IDEzLjkyNXEtLjU1IDAtLjkyNS0uMzc1dC0uMzc1LS45MjVxMC0uNTUuMzc1LS45MzcuMzc1LS4zODguOTI1LS4zODh0LjkyNS4zODhxLjM3NS4zODcuMzc1LjkzN3QtLjM3NS45MjVxLS4zNzUuMzc1LS45MjUuMzc1Wm00LjQgMHEtLjU1IDAtLjkyNS0uMzc1dC0uMzc1LS45MjVxMC0uNTUuMzc1LS45MzcuMzc1LS4zODguOTI1LS4zODh0LjkyNS4zODhxLjM3NS4zODcuMzc1LjkzN3QtLjM3NS45MjVxLS4zNzUuMzc1LS45MjUuMzc1Wm00LjQgMHEtLjU1IDAtLjkyNS0uMzc1dC0uMzc1LS45MjVxMC0uNTUuMzc1LS45MzcuMzc1LS4zODguOTI1LS4zODh0LjkyNS4zODhxLjM3NS4zODcuMzc1LjkzN3QtLjM3NS45MjVxLS4zNzUuMzc1LS45MjUuMzc1Wk01LjMgMjIuODVxLTEuMzI1IDAtMi4yMzgtLjkxMi0uOTEyLS45MTMtLjkxMi0yLjIzOFY2LjNxMC0xLjMyNS45MTItMi4yMzguOTEzLS45MTIgMi4yMzgtLjkxMkg2di0yaDIuNTc1djJoNi44NXYtMkgxOHYyaC43cTEuMzI1IDAgMi4yMzguOTEyLjkxMi45MTMuOTEyIDIuMjM4djEzLjRxMCAxLjMyNS0uOTEyIDIuMjM4LS45MTMuOTEyLTIuMjM4LjkxMlptMC0zLjE1aDEzLjRWMTBINS4zdjkuN1pNNS4zIDhoMTMuNFY2LjNINS4zWm0wIDBWNi4zIDhaXCIvPjwvc3ZnPicsXG4gIH0sXG4gIGFyZ1R5cGVzOiB7fSxcbiAgcGFyYW1ldGVyczoge1xuICAgIGxheW91dDogJ2Z1bGxzY3JlZW4nLFxuICB9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgQnV0dG9uUGFuZWwgPSAoe2ljb259KSA9PiBodG1sYFxuICA8dmVyZG9jcy1idXR0b24tcGFuZWwgLmljb249JHtpY29ufT5cbiAgICA8aDY+RmllbGQgU2V0dGluZ3M8L2g2PlxuICAgIDxmb3JtPlxuICAgICAgPGxhYmVsPkZpZWxkIDE8L2xhYmVsPlxuICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJGaWVsZCAxLi4uXCIgLz5cbiAgICAgIDxsYWJlbD5GaWVsZCAyPC9sYWJlbD5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRmllbGQgMi4uLlwiIC8+XG4gICAgPC9mb3JtPlxuICA8L3ZlcmRvY3MtYnV0dG9uLXBhbmVsPlxuYDtcblxuXG5cbkJ1dHRvblBhbmVsLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe2ljb259KSA9PiBodG1sYFxcbiAgPHZlcmRvY3MtYnV0dG9uLXBhbmVsIC5pY29uPSR7aWNvbn0+XFxuICAgIDxoNj5GaWVsZCBTZXR0aW5nczwvaDY+XFxuICAgIDxmb3JtPlxcbiAgICAgIDxsYWJlbD5GaWVsZCAxPC9sYWJlbD5cXG4gICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcIkZpZWxkIDEuLi5cXFwiIC8+XFxuICAgICAgPGxhYmVsPkZpZWxkIDI8L2xhYmVsPlxcbiAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwiRmllbGQgMi4uLlxcXCIgLz5cXG4gICAgPC9mb3JtPlxcbiAgPC92ZXJkb2NzLWJ1dHRvbi1wYW5lbD5cXG5gXCIgfSwgLi4uQnV0dG9uUGFuZWwucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG4vLyBDaXJjbGUgd2l0aCB0aHJlZSBkb3RzIGluIGl0XFxuY29uc3QgQ2lyY2xlSWNvbiA9IGBcXG4gIDxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBlbmFibGUtYmFja2dyb3VuZD1cXFwibmV3IDAgMCAyNCAyNFxcXCIgaGVpZ2h0PVxcXCIyNHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiIHdpZHRoPVxcXCIyNHB4XFxcIiBmaWxsPVxcXCIjZmZmZmZmXFxcIj5cXG4gICAgPGc+XFxuICAgICAgPHJlY3QgZmlsbD1cXFwibm9uZVxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgd2lkdGg9XFxcIjI0XFxcIi8+XFxuICAgIDwvZz5cXG4gICAgPGc+XFxuICAgICAgPGc+XFxuICAgICAgICA8cGF0aCBkPVxcXCJNMTIsMkM2LjQ4LDIsMiw2LjQ4LDIsMTJjMCw1LjUyLDQuNDgsMTAsMTAsMTBzMTAtNC40OCwxMC0xMEMyMiw2LjQ4LDE3LjUyLDIsMTIsMnogTTEyLDIwYy00LjQyLDAtOC0zLjU4LTgtOCBjMC00LjQyLDMuNTgtOCw4LThzOCwzLjU4LDgsOEMyMCwxNi40MiwxNi40MiwyMCwxMiwyMHpcXFwiLz5cXG4gICAgICAgIDxjaXJjbGUgY3g9XFxcIjdcXFwiIGN5PVxcXCIxMlxcXCIgcj1cXFwiMS41XFxcIi8+XFxuICAgICAgICA8Y2lyY2xlIGN4PVxcXCIxMlxcXCIgY3k9XFxcIjEyXFxcIiByPVxcXCIxLjVcXFwiLz5cXG4gICAgICAgIDxjaXJjbGUgY3g9XFxcIjE3XFxcIiBjeT1cXFwiMTJcXFwiIHI9XFxcIjEuNVxcXCIvPlxcbiAgICAgIDwvZz5cXG4gICAgPC9nPlxcbiAgPC9zdmc+XFxuYDtcXG5cXG5jb25zdCBBcnJvd0ljb24gPSBgXFxuPHN2ZyB3aWR0aD1cXFwiMTBcXFwiIGhlaWdodD1cXFwiMjZcXFwiIHZpZXdCb3g9XFxcIjAgMCAxMCAyNlxcXCIgZmlsbD1cXFwiI2ZmZmZmZlxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj5cXG48ZyBjbGlwLXBhdGg9XFxcInVybCgjY2xpcDBfMzE1NjhfMzY0NylcXFwiPlxcbjxwYXRoIGQ9XFxcIk05LjY0NjgyIDEzLjQzMUwyLjEwNjQ1IDIwLjk0NjZDMS44NjUwMyAyMS4xODUzIDEuNDc0NjYgMjEuMTg1MyAxLjIzMzI0IDIwLjk0NjZMMC4yMTYyMTggMTkuOTQxMUMtMC4wMjUxOTc2IDE5LjcwMjUgLTAuMDI1MTk3NiAxOS4zMTY1IDAuMjE2MjE4IDE5LjA3NzhMNi4zMDI5NiAxMi45OTkzTDAuMjE2MjE4IDYuOTIwOEMtMC4wMjUxOTc2IDYuNjgyMTMgLTAuMDI1MTk3NiA2LjI5NjE5IDAuMjE2MjE4IDYuMDU3NTJMMS4yMzMyNCA1LjA1MjA1QzEuNDc0NjYgNC44MTMzOCAxLjg2NTAzIDQuODEzMzggMi4xMDY0NSA1LjA1MjA1TDkuNjQ2ODIgMTIuNTY3N0M5Ljg4ODI0IDEyLjgwNjQgOS44ODgyNCAxMy4xOTIzIDkuNjQ2ODIgMTMuNDMxWlxcXCIvPlxcbjwvZz5cXG48ZGVmcz5cXG48Y2xpcFBhdGggaWQ9XFxcImNsaXAwXzMxNTY4XzM2NDdcXFwiPlxcbjxyZWN0IHdpZHRoPVxcXCI5Ljg2MjA3XFxcIiBoZWlnaHQ9XFxcIjI2XFxcIi8+XFxuPC9jbGlwUGF0aD5cXG48L2RlZnM+XFxuPC9zdmc+XFxuYDtcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0NvbnRyb2xzL0J1dHRvbicsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWJ1dHRvbicsXFxuICBhcmdzOiB7XFxuICAgIGxhYmVsOiAnQ2xpY2sgTWUnLFxcbiAgICB0eXBlOiAnYnV0dG9uJyxcXG4gICAgc2l6ZTogJ25vcm1hbCcsXFxuICAgIHZhcmlhbnQ6ICdzdGFuZGFyZCcsXFxuICAgIGRpc2FibGVkOiBmYWxzZSxcXG4gIH0sXFxuICBhcmdUeXBlczoge1xcbiAgICBzdGFydEljb246IHtkZWZhdWx0VmFsdWU6IGZhbHNlLCBjb250cm9sOiB7dHlwZTogJ2Jvb2xlYW4nfX0sXFxuICAgIGVuZEljb246IHtkZWZhdWx0VmFsdWU6IGZhbHNlLCBjb250cm9sOiB7dHlwZTogJ2Jvb2xlYW4nfX0sXFxuICAgIGNsaWNrOiB7XFxuICAgICAgYWN0aW9uOiAnY2xpY2snLFxcbiAgICAgIGRlc2NyaXB0aW9uOiAnRmlyZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGJ1dHRvbi4nLFxcbiAgICAgIC8vIHRhYmxlOiB7ZGlzYWJsZTogdHJ1ZX0sXFxuICAgIH0sXFxuICB9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgQnV0dG9uID0gKHtsYWJlbCwgc2l6ZSwgdmFyaWFudCwgZGlzYWJsZWQsIHN0YXJ0SWNvbiwgZW5kSWNvbiwgY2xpY2t9KSA9PlxcbiAgaHRtbGA8dmVyZG9jcy1idXR0b25cXG4gICAgLmxhYmVsPSR7bGFiZWx9XFxuICAgIC5zaXplPSR7c2l6ZX1cXG4gICAgLnZhcmlhbnQ9JHt2YXJpYW50fVxcbiAgICAuZGlzYWJsZWQ9JHtkaXNhYmxlZH1cXG4gICAgLnN0YXJ0SWNvbj0ke3N0YXJ0SWNvbiA/IENpcmNsZUljb24gOiBudWxsfVxcbiAgICAuZW5kSWNvbj0ke2VuZEljb24gPyBBcnJvd0ljb24gOiBudWxsfVxcbiAgICBAY2xpY2s9JHtjbGlja31cXG4gIC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiQnV0dG9uXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyMixcImxpbmVcIjo1NX0sXCJlbmRMb2NcIjp7XCJjb2xcIjo1LFwibGluZVwiOjY0fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjIyLFwibGluZVwiOjU1fSxcImVuZEJvZHlcIjp7XCJjb2xcIjo1LFwibGluZVwiOjY0fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG4vLyBDaXJjbGUgd2l0aCB0aHJlZSBkb3RzIGluIGl0XG5jb25zdCBDaXJjbGVJY29uID0gYFxuICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBlbmFibGUtYmFja2dyb3VuZD1cIm5ldyAwIDAgMjQgMjRcIiBoZWlnaHQ9XCIyNHB4XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHdpZHRoPVwiMjRweFwiIGZpbGw9XCIjZmZmZmZmXCI+XG4gICAgPGc+XG4gICAgICA8cmVjdCBmaWxsPVwibm9uZVwiIGhlaWdodD1cIjI0XCIgd2lkdGg9XCIyNFwiLz5cbiAgICA8L2c+XG4gICAgPGc+XG4gICAgICA8Zz5cbiAgICAgICAgPHBhdGggZD1cIk0xMiwyQzYuNDgsMiwyLDYuNDgsMiwxMmMwLDUuNTIsNC40OCwxMCwxMCwxMHMxMC00LjQ4LDEwLTEwQzIyLDYuNDgsMTcuNTIsMiwxMiwyeiBNMTIsMjBjLTQuNDIsMC04LTMuNTgtOC04IGMwLTQuNDIsMy41OC04LDgtOHM4LDMuNTgsOCw4QzIwLDE2LjQyLDE2LjQyLDIwLDEyLDIwelwiLz5cbiAgICAgICAgPGNpcmNsZSBjeD1cIjdcIiBjeT1cIjEyXCIgcj1cIjEuNVwiLz5cbiAgICAgICAgPGNpcmNsZSBjeD1cIjEyXCIgY3k9XCIxMlwiIHI9XCIxLjVcIi8+XG4gICAgICAgIDxjaXJjbGUgY3g9XCIxN1wiIGN5PVwiMTJcIiByPVwiMS41XCIvPlxuICAgICAgPC9nPlxuICAgIDwvZz5cbiAgPC9zdmc+XG5gO1xuXG5jb25zdCBBcnJvd0ljb24gPSBgXG48c3ZnIHdpZHRoPVwiMTBcIiBoZWlnaHQ9XCIyNlwiIHZpZXdCb3g9XCIwIDAgMTAgMjZcIiBmaWxsPVwiI2ZmZmZmZlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbjxnIGNsaXAtcGF0aD1cInVybCgjY2xpcDBfMzE1NjhfMzY0NylcIj5cbjxwYXRoIGQ9XCJNOS42NDY4MiAxMy40MzFMMi4xMDY0NSAyMC45NDY2QzEuODY1MDMgMjEuMTg1MyAxLjQ3NDY2IDIxLjE4NTMgMS4yMzMyNCAyMC45NDY2TDAuMjE2MjE4IDE5Ljk0MTFDLTAuMDI1MTk3NiAxOS43MDI1IC0wLjAyNTE5NzYgMTkuMzE2NSAwLjIxNjIxOCAxOS4wNzc4TDYuMzAyOTYgMTIuOTk5M0wwLjIxNjIxOCA2LjkyMDhDLTAuMDI1MTk3NiA2LjY4MjEzIC0wLjAyNTE5NzYgNi4yOTYxOSAwLjIxNjIxOCA2LjA1NzUyTDEuMjMzMjQgNS4wNTIwNUMxLjQ3NDY2IDQuODEzMzggMS44NjUwMyA0LjgxMzM4IDIuMTA2NDUgNS4wNTIwNUw5LjY0NjgyIDEyLjU2NzdDOS44ODgyNCAxMi44MDY0IDkuODg4MjQgMTMuMTkyMyA5LjY0NjgyIDEzLjQzMVpcIi8+XG48L2c+XG48ZGVmcz5cbjxjbGlwUGF0aCBpZD1cImNsaXAwXzMxNTY4XzM2NDdcIj5cbjxyZWN0IHdpZHRoPVwiOS44NjIwN1wiIGhlaWdodD1cIjI2XCIvPlxuPC9jbGlwUGF0aD5cbjwvZGVmcz5cbjwvc3ZnPlxuYDtcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0NvbnRyb2xzL0J1dHRvbicsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtYnV0dG9uJyxcbiAgYXJnczoge1xuICAgIGxhYmVsOiAnQ2xpY2sgTWUnLFxuICAgIHR5cGU6ICdidXR0b24nLFxuICAgIHNpemU6ICdub3JtYWwnLFxuICAgIHZhcmlhbnQ6ICdzdGFuZGFyZCcsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICB9LFxuICBhcmdUeXBlczoge1xuICAgIHN0YXJ0SWNvbjoge2RlZmF1bHRWYWx1ZTogZmFsc2UsIGNvbnRyb2w6IHt0eXBlOiAnYm9vbGVhbid9fSxcbiAgICBlbmRJY29uOiB7ZGVmYXVsdFZhbHVlOiBmYWxzZSwgY29udHJvbDoge3R5cGU6ICdib29sZWFuJ319LFxuICAgIGNsaWNrOiB7XG4gICAgICBhY3Rpb246ICdjbGljaycsXG4gICAgICBkZXNjcmlwdGlvbjogJ0ZpcmVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBidXR0b24uJyxcbiAgICAgIC8vIHRhYmxlOiB7ZGlzYWJsZTogdHJ1ZX0sXG4gICAgfSxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IEJ1dHRvbiA9ICh7bGFiZWwsIHNpemUsIHZhcmlhbnQsIGRpc2FibGVkLCBzdGFydEljb24sIGVuZEljb24sIGNsaWNrfSkgPT5cbiAgaHRtbGA8dmVyZG9jcy1idXR0b25cbiAgICAubGFiZWw9JHtsYWJlbH1cbiAgICAuc2l6ZT0ke3NpemV9XG4gICAgLnZhcmlhbnQ9JHt2YXJpYW50fVxuICAgIC5kaXNhYmxlZD0ke2Rpc2FibGVkfVxuICAgIC5zdGFydEljb249JHtzdGFydEljb24gPyBDaXJjbGVJY29uIDogbnVsbH1cbiAgICAuZW5kSWNvbj0ke2VuZEljb24gPyBBcnJvd0ljb24gOiBudWxsfVxuICAgIEBjbGljaz0ke2NsaWNrfVxuICAvPmA7XG5cblxuXG5CdXR0b24ucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7bGFiZWwsIHNpemUsIHZhcmlhbnQsIGRpc2FibGVkLCBzdGFydEljb24sIGVuZEljb24sIGNsaWNrfSkgPT5cXG4gIGh0bWxgPHZlcmRvY3MtYnV0dG9uXFxuICAgIC5sYWJlbD0ke2xhYmVsfVxcbiAgICAuc2l6ZT0ke3NpemV9XFxuICAgIC52YXJpYW50PSR7dmFyaWFudH1cXG4gICAgLmRpc2FibGVkPSR7ZGlzYWJsZWR9XFxuICAgIC5zdGFydEljb249JHtzdGFydEljb24gPyBDaXJjbGVJY29uIDogbnVsbH1cXG4gICAgLmVuZEljb249JHtlbmRJY29uID8gQXJyb3dJY29uIDogbnVsbH1cXG4gICAgQGNsaWNrPSR7Y2xpY2t9XFxuICAvPmBcIiB9LCAuLi5CdXR0b24ucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0NvbnRyb2xzL0NoZWNrYm94JyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtY2hlY2tib3gnLFxcbiAgYXJnczoge1xcbiAgICBsYWJlbDogJ1NhbXBsZSBjaGVja2JveCcsXFxuICAgIG5hbWU6ICd0ZXN0JyxcXG4gICAgdGhlbWU6ICdsaWdodCcsXFxuICAgIGNoZWNrZWQ6IGZhbHNlLFxcbiAgICBkaXNhYmxlZDogZmFsc2UsXFxuICAgIHZhbHVlOiAnMScsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHtcXG4gICAgaW5wdXQ6IHtcXG4gICAgICBhY3Rpb246ICdpbnB1dCcsXFxuICAgICAgZGVzY3JpcHRpb246ICdGaXJlZCB3aGVuIHRoZSBjaGVja2JveCBpcyBjbGlja2VkLiBlLnRhcmdldC5jaGVja2VkIHdpbGwgaW5kaWNhdGUgdGhlIGN1cnJlbnQgc3RhdHVzICh0cnVlIGlmIGNoZWNrZWQpLicsXFxuICAgIH0sXFxuICB9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgQ2hlY2tib3ggPSAoe2NoZWNrZWQsIGxhYmVsLCBuYW1lLCB2YWx1ZSwgZGlzYWJsZWQsIHRoZW1lLCBpbnB1dH0pID0+XFxuICBodG1sYCA8dmVyZG9jcy1jaGVja2JveCAuY2hlY2tlZD0ke2NoZWNrZWR9IC5sYWJlbD0ke2xhYmVsfSAubmFtZT0ke25hbWV9IC52YWx1ZT0ke3ZhbHVlfSAuZGlzYWJsZWQ9JHtkaXNhYmxlZH0gLnRoZW1lPSR7dGhlbWV9IEBpbnB1dD0ke2lucHV0fSAvPiBgO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJDaGVja2JveFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjQsXCJsaW5lXCI6MjN9LFwiZW5kTG9jXCI6e1wiY29sXCI6MTUwLFwibGluZVwiOjI0fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI0LFwibGluZVwiOjIzfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxNTAsXCJsaW5lXCI6MjR9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdDb250cm9scy9DaGVja2JveCcsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtY2hlY2tib3gnLFxuICBhcmdzOiB7XG4gICAgbGFiZWw6ICdTYW1wbGUgY2hlY2tib3gnLFxuICAgIG5hbWU6ICd0ZXN0JyxcbiAgICB0aGVtZTogJ2xpZ2h0JyxcbiAgICBjaGVja2VkOiBmYWxzZSxcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgdmFsdWU6ICcxJyxcbiAgfSxcbiAgYXJnVHlwZXM6IHtcbiAgICBpbnB1dDoge1xuICAgICAgYWN0aW9uOiAnaW5wdXQnLFxuICAgICAgZGVzY3JpcHRpb246ICdGaXJlZCB3aGVuIHRoZSBjaGVja2JveCBpcyBjbGlja2VkLiBlLnRhcmdldC5jaGVja2VkIHdpbGwgaW5kaWNhdGUgdGhlIGN1cnJlbnQgc3RhdHVzICh0cnVlIGlmIGNoZWNrZWQpLicsXG4gICAgfSxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IENoZWNrYm94ID0gKHtjaGVja2VkLCBsYWJlbCwgbmFtZSwgdmFsdWUsIGRpc2FibGVkLCB0aGVtZSwgaW5wdXR9KSA9PlxuICBodG1sYCA8dmVyZG9jcy1jaGVja2JveCAuY2hlY2tlZD0ke2NoZWNrZWR9IC5sYWJlbD0ke2xhYmVsfSAubmFtZT0ke25hbWV9IC52YWx1ZT0ke3ZhbHVlfSAuZGlzYWJsZWQ9JHtkaXNhYmxlZH0gLnRoZW1lPSR7dGhlbWV9IEBpbnB1dD0ke2lucHV0fSAvPiBgO1xuXG5cblxuQ2hlY2tib3gucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7Y2hlY2tlZCwgbGFiZWwsIG5hbWUsIHZhbHVlLCBkaXNhYmxlZCwgdGhlbWUsIGlucHV0fSkgPT5cXG4gIGh0bWxgIDx2ZXJkb2NzLWNoZWNrYm94IC5jaGVja2VkPSR7Y2hlY2tlZH0gLmxhYmVsPSR7bGFiZWx9IC5uYW1lPSR7bmFtZX0gLnZhbHVlPSR7dmFsdWV9IC5kaXNhYmxlZD0ke2Rpc2FibGVkfSAudGhlbWU9JHt0aGVtZX0gQGlucHV0PSR7aW5wdXR9IC8+IGBcIiB9LCAuLi5DaGVja2JveC5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbi8vIFRoaXMgY29tcG9uZW50IGlzIGhlYXZpbHkgY29tbWVudGVkIHNvIGl0IGNhbiBiZSB1c2VkIGFzIGEgcmVmZXJlbmNlIGZvciBkZXZlbG9waW5nIG90aGVyIGNvbXBvbmVudHMuIFBsZWFzZSB1c2UgdGhlIGNvbW1lbnRzIGhlcmVcXG4vLyBhcyBhIGd1aWRlIC8gcmVzb3VyY2UsIGJ1dCBkbyBub3QgY29weSB0aGVtIHRvIG5ldyBjb21wb25lbnRzIChzbyB3ZSBkb24ndCBjcmVhdGUgYSBtYWludGVuYW5jZSBoYXNzbGUpLiBJZiB5b3UgY29weSB0aGlzIGNvbXBvbmVudFxcbi8vIGFzIGEgdGVtcGxhdGUsIGNsZWFuIHVwIGFsbCB0aGUgY29tbWVudHMgaW4gdGhlIGNvcHksIHNvIHRoaXMgcmVtYWlucyB0aGUgXFxcIm1haW4gcmVmZXJlbmNlXFxcIi5cXG5cXG4vLyBXZSBhcmUgdXNpbmcgYSBjdXN0b20gZG9jIGdlbmVyYXRvciBzcGVjaWZpY2FsbHkgZm9yIFdlYiBDb21wb25lbnRzLiBXZSB1c2UgXFxcImlubGluZSBkb2NzXFxcIiB0byBnZXQgZG9jdW1lbnRhdGlvbiBvdXQgb2YgY29kZVxcbi8vIGNvbW1lbnRzIHJhdGhlciB0aGFuIGhhdmluZyB0byB1c2Ugc2VwYXJhdGUgUkVBRE1FIGZpbGVzLiBTZWUgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHB4dHJuL3N0b3J5Ym9vay1hZGRvbi1kb2NzLXN0ZW5jaWxcXG4vLyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAvLyBXaGVyZSBpbiBTdG9yeWJvb2sgdGhpcyBjb250cm9sIHdpbGwgYmUgbGlzdGVkXFxuICB0aXRsZTogJ0NvbnRyb2xzL0Ryb3Bkb3duIE1lbnUnLFxcbiAgLy8gSGludCB0byBoZWxwIHRoZSBkb2NzIGFkZG9uIGZpbmQgdGhlIGNvbXBvbmVudFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1kcm9wZG93bicsXFxuICAvLyBXZSBjYW4gYXBwbHkgZGVmYXVsdCBhcmdzIG9ubHkgc2hvd24gaW4gU3Rvcnlib29rIGFzIGZvbGxvd3NcXG4gIGFyZ3M6IHtcXG4gICAgb3B0aW9uczogW3tsYWJlbDogJ09wdGlvbiAxJ30sIHtsYWJlbDogJ0Rpc2FibGVkIE9wdGlvbicsIGRpc2FibGVkOiB0cnVlfSwge2xhYmVsOiAnT3B0aW9uIDInfV0sXFxuICB9LFxcbiAgLy8gSGVyZSB3ZSBjYW4gYXBwbHkgb3ZlcnJpZGVzIHRvIGNvbXBvbmVudCBwcm9wZXJ0eSBkb2N1bWVudGF0aW9uLiBOb3RlIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byAoYW5kIHNob3VsZG4ndCkgc3BlY2lmeSBldmVyeSBmaWVsZFxcbiAgLy8gaGVyZS4gT25seSB0aG9zZSB0aGF0IG5lZWQgc3BlY2lhbCBhdHRlbnRpb24uXFxuICBhcmdUeXBlczoge1xcbiAgICBvcHRpb25TZWxlY3RlZDoge1xcbiAgICAgIGFjdGlvbjogJ29wdGlvblNlbGVjdGVkJyxcXG4gICAgICAvLyBQcmV2ZW50cyBhIGR1cGxpY2F0ZSBldmVudCBlbnRyeSBmcm9tIGFwcGVhcmluZyBpbiB0aGUgcHJvcGVydGllcyB0YWJsZVxcbiAgICAgIHRhYmxlOiB7XFxuICAgICAgICBkaXNhYmxlOiB0cnVlLFxcbiAgICAgIH0sXFxuICAgIH0sXFxuICB9LFxcbn0gYXMgTWV0YTtcXG5cXG4vLyBTZWUgaHR0cHM6Ly9saXQtaHRtbC5wb2x5bWVyLXByb2plY3Qub3JnL2d1aWRlL3RlbXBsYXRlLXJlZmVyZW5jZSBcXFwiQmluZGluZyBUeXBlc1xcXCIgZm9yIGFuIGV4cGxhbmF0aW9uIG9mICcuJyB2cyAnQCdcXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51ID0gKHtvcHRpb25zLCBvcHRpb25TZWxlY3RlZH0pID0+IGh0bWxgPHZlcmRvY3MtZHJvcGRvd24gLm9wdGlvbnM9JHtvcHRpb25zfSBAb3B0aW9uU2VsZWN0ZWQ9JHtvcHRpb25TZWxlY3RlZH0gLz5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJEcm9wZG93bk1lbnVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI4LFwibGluZVwiOjM1fSxcImVuZExvY1wiOntcImNvbFwiOjEzOSxcImxpbmVcIjozNX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyOCxcImxpbmVcIjozNX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTM5LFwibGluZVwiOjM1fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG4vLyBUaGlzIGNvbXBvbmVudCBpcyBoZWF2aWx5IGNvbW1lbnRlZCBzbyBpdCBjYW4gYmUgdXNlZCBhcyBhIHJlZmVyZW5jZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBjb21wb25lbnRzLiBQbGVhc2UgdXNlIHRoZSBjb21tZW50cyBoZXJlXG4vLyBhcyBhIGd1aWRlIC8gcmVzb3VyY2UsIGJ1dCBkbyBub3QgY29weSB0aGVtIHRvIG5ldyBjb21wb25lbnRzIChzbyB3ZSBkb24ndCBjcmVhdGUgYSBtYWludGVuYW5jZSBoYXNzbGUpLiBJZiB5b3UgY29weSB0aGlzIGNvbXBvbmVudFxuLy8gYXMgYSB0ZW1wbGF0ZSwgY2xlYW4gdXAgYWxsIHRoZSBjb21tZW50cyBpbiB0aGUgY29weSwgc28gdGhpcyByZW1haW5zIHRoZSBcIm1haW4gcmVmZXJlbmNlXCIuXG5cbi8vIFdlIGFyZSB1c2luZyBhIGN1c3RvbSBkb2MgZ2VuZXJhdG9yIHNwZWNpZmljYWxseSBmb3IgV2ViIENvbXBvbmVudHMuIFdlIHVzZSBcImlubGluZSBkb2NzXCIgdG8gZ2V0IGRvY3VtZW50YXRpb24gb3V0IG9mIGNvZGVcbi8vIGNvbW1lbnRzIHJhdGhlciB0aGFuIGhhdmluZyB0byB1c2Ugc2VwYXJhdGUgUkVBRE1FIGZpbGVzLiBTZWUgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHB4dHJuL3N0b3J5Ym9vay1hZGRvbi1kb2NzLXN0ZW5jaWxcbi8vIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIC8vIFdoZXJlIGluIFN0b3J5Ym9vayB0aGlzIGNvbnRyb2wgd2lsbCBiZSBsaXN0ZWRcbiAgdGl0bGU6ICdDb250cm9scy9Ecm9wZG93biBNZW51JyxcbiAgLy8gSGludCB0byBoZWxwIHRoZSBkb2NzIGFkZG9uIGZpbmQgdGhlIGNvbXBvbmVudFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWRyb3Bkb3duJyxcbiAgLy8gV2UgY2FuIGFwcGx5IGRlZmF1bHQgYXJncyBvbmx5IHNob3duIGluIFN0b3J5Ym9vayBhcyBmb2xsb3dzXG4gIGFyZ3M6IHtcbiAgICBvcHRpb25zOiBbe2xhYmVsOiAnT3B0aW9uIDEnfSwge2xhYmVsOiAnRGlzYWJsZWQgT3B0aW9uJywgZGlzYWJsZWQ6IHRydWV9LCB7bGFiZWw6ICdPcHRpb24gMid9XSxcbiAgfSxcbiAgLy8gSGVyZSB3ZSBjYW4gYXBwbHkgb3ZlcnJpZGVzIHRvIGNvbXBvbmVudCBwcm9wZXJ0eSBkb2N1bWVudGF0aW9uLiBOb3RlIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byAoYW5kIHNob3VsZG4ndCkgc3BlY2lmeSBldmVyeSBmaWVsZFxuICAvLyBoZXJlLiBPbmx5IHRob3NlIHRoYXQgbmVlZCBzcGVjaWFsIGF0dGVudGlvbi5cbiAgYXJnVHlwZXM6IHtcbiAgICBvcHRpb25TZWxlY3RlZDoge1xuICAgICAgYWN0aW9uOiAnb3B0aW9uU2VsZWN0ZWQnLFxuICAgICAgLy8gUHJldmVudHMgYSBkdXBsaWNhdGUgZXZlbnQgZW50cnkgZnJvbSBhcHBlYXJpbmcgaW4gdGhlIHByb3BlcnRpZXMgdGFibGVcbiAgICAgIHRhYmxlOiB7XG4gICAgICAgIGRpc2FibGU6IHRydWUsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG59IGFzIE1ldGE7XG5cbi8vIFNlZSBodHRwczovL2xpdC1odG1sLnBvbHltZXItcHJvamVjdC5vcmcvZ3VpZGUvdGVtcGxhdGUtcmVmZXJlbmNlIFwiQmluZGluZyBUeXBlc1wiIGZvciBhbiBleHBsYW5hdGlvbiBvZiAnLicgdnMgJ0AnXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51ID0gKHtvcHRpb25zLCBvcHRpb25TZWxlY3RlZH0pID0+IGh0bWxgPHZlcmRvY3MtZHJvcGRvd24gLm9wdGlvbnM9JHtvcHRpb25zfSBAb3B0aW9uU2VsZWN0ZWQ9JHtvcHRpb25TZWxlY3RlZH0gLz5gO1xuXG5cblxuRHJvcGRvd25NZW51LnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe29wdGlvbnMsIG9wdGlvblNlbGVjdGVkfSkgPT4gaHRtbGA8dmVyZG9jcy1kcm9wZG93biAub3B0aW9ucz0ke29wdGlvbnN9IEBvcHRpb25TZWxlY3RlZD0ke29wdGlvblNlbGVjdGVkfSAvPmBcIiB9LCAuLi5Ecm9wZG93bk1lbnUucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0NvbnRyb2xzL0hlbHAgSWNvbicsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWhlbHAtaWNvbicsXFxuICBhcmdzOiB7XFxuICAgIHRleHQ6ICdTYW1wbGUgaGVscCB0ZXh0JyxcXG4gIH0sXFxuICBhcmdUeXBlczoge30sXFxuICBwYXJhbWV0ZXJzOiB7XFxuICAgIGxheW91dDogJ2Z1bGxzY3JlZW4nLFxcbiAgfSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IEhlbHBJY29uID0gKHt0ZXh0fSkgPT4gaHRtbGA8dmVyZG9jcy1oZWxwLWljb24gLnRleHQ9JHt0ZXh0fSAvPiBgO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJIZWxwSWNvblwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjQsXCJsaW5lXCI6MTZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6NzgsXCJsaW5lXCI6MTZ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjQsXCJsaW5lXCI6MTZ9LFwiZW5kQm9keVwiOntcImNvbFwiOjc4LFwibGluZVwiOjE2fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnQ29udHJvbHMvSGVscCBJY29uJyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1oZWxwLWljb24nLFxuICBhcmdzOiB7XG4gICAgdGV4dDogJ1NhbXBsZSBoZWxwIHRleHQnLFxuICB9LFxuICBhcmdUeXBlczoge30sXG4gIHBhcmFtZXRlcnM6IHtcbiAgICBsYXlvdXQ6ICdmdWxsc2NyZWVuJyxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IEhlbHBJY29uID0gKHt0ZXh0fSkgPT4gaHRtbGA8dmVyZG9jcy1oZWxwLWljb24gLnRleHQ9JHt0ZXh0fSAvPiBgO1xuXG5cblxuSGVscEljb24ucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7dGV4dH0pID0+IGh0bWxgPHZlcmRvY3MtaGVscC1pY29uIC50ZXh0PSR7dGV4dH0gLz4gYFwiIH0sIC4uLkhlbHBJY29uLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdDb250cm9scy9Mb2FkZXInLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1sb2FkZXInLFxcbiAgYXJnczoge30sXFxuICBhcmdUeXBlczoge30sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBMb2FkZXIgPSAoe30pID0+IGh0bWxgPHZlcmRvY3MtbG9hZGVyIC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiTG9hZGVyXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyMixcImxpbmVcIjoxMX0sXCJlbmRMb2NcIjp7XCJjb2xcIjo1NCxcImxpbmVcIjoxMX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMixcImxpbmVcIjoxMX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6NTQsXCJsaW5lXCI6MTF9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdDb250cm9scy9Mb2FkZXInLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWxvYWRlcicsXG4gIGFyZ3M6IHt9LFxuICBhcmdUeXBlczoge30sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBMb2FkZXIgPSAoe30pID0+IGh0bWxgPHZlcmRvY3MtbG9hZGVyIC8+YDtcblxuXG5cbkxvYWRlci5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHt9KSA9PiBodG1sYDx2ZXJkb2NzLWxvYWRlciAvPmBcIiB9LCAuLi5Mb2FkZXIucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge0lPcmdhbml6YXRpb259IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9Pcmdhbml6YXRpb25zL1R5cGVzJztcXG5cXG5jb25zdCBNb2NrT3JnYW5pemF0aW9uID0ge1xcbiAgaWQ6ICcyMTY0M2ZkNi00MDk3LTQ3YzAtOTc4MC02MmRjMGMwMWRkY2UnLFxcbiAgbmFtZTogJ1ZlcmRvY3MsIExMQycsXFxuICB1cmw6ICdodHRwczovL3ZlcmRvY3MuY29tLycsXFxuICBhZGRyZXNzOiBudWxsLFxcbiAgcGhvbmU6IG51bGwsXFxuICBidXNpbmVzc19uYW1lOiBudWxsLFxcbiAgaXNfYnVzaW5lc3M6IHRydWUsXFxuICBhZGRyZXNzMjogbnVsbCxcXG4gIGNvbnRhY3RfZW1haWw6IG51bGwsXFxuICB0aW1lem9uZTogbnVsbCxcXG4gIGVudmVsb3BlX3Jlc3BvbnNpYmxlOiBmYWxzZSxcXG4gIGNyZWF0ZWRfYXQ6ICcyMDIyLTEyLTIxIDIwOjE2OjUwLjI2MjExMyswMCcsXFxufSBhcyBJT3JnYW5pemF0aW9uO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQ29udHJvbHMvT3JnYW5pemF0aW9uIENhcmQnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1vcmdhbml6YXRpb24tY2FyZCcsXFxuICBhcmdzOiB7XFxuICAgIG9yZ2FuaXphdGlvbjogTW9ja09yZ2FuaXphdGlvbixcXG4gIH0sXFxuICBhcmdUeXBlczoge30sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBPcmdhbml6YXRpb25DYXJkID0gKHtvcmdhbml6YXRpb259KSA9PiBodG1sYDx2ZXJkb2NzLW9yZ2FuaXphdGlvbi1jYXJkIC5vcmdhbml6YXRpb249JHtvcmdhbml6YXRpb259IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiT3JnYW5pemF0aW9uQ2FyZFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzIsXCJsaW5lXCI6Mjl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MTE3LFwibGluZVwiOjI5fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMyLFwibGluZVwiOjI5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxMTcsXCJsaW5lXCI6Mjl9fX07XG4gICAgXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge0lPcmdhbml6YXRpb259IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9Pcmdhbml6YXRpb25zL1R5cGVzJztcblxuY29uc3QgTW9ja09yZ2FuaXphdGlvbiA9IHtcbiAgaWQ6ICcyMTY0M2ZkNi00MDk3LTQ3YzAtOTc4MC02MmRjMGMwMWRkY2UnLFxuICBuYW1lOiAnVmVyZG9jcywgTExDJyxcbiAgdXJsOiAnaHR0cHM6Ly92ZXJkb2NzLmNvbS8nLFxuICBhZGRyZXNzOiBudWxsLFxuICBwaG9uZTogbnVsbCxcbiAgYnVzaW5lc3NfbmFtZTogbnVsbCxcbiAgaXNfYnVzaW5lc3M6IHRydWUsXG4gIGFkZHJlc3MyOiBudWxsLFxuICBjb250YWN0X2VtYWlsOiBudWxsLFxuICB0aW1lem9uZTogbnVsbCxcbiAgZW52ZWxvcGVfcmVzcG9uc2libGU6IGZhbHNlLFxuICBjcmVhdGVkX2F0OiAnMjAyMi0xMi0yMSAyMDoxNjo1MC4yNjIxMTMrMDAnLFxufSBhcyBJT3JnYW5pemF0aW9uO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnQ29udHJvbHMvT3JnYW5pemF0aW9uIENhcmQnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLW9yZ2FuaXphdGlvbi1jYXJkJyxcbiAgYXJnczoge1xuICAgIG9yZ2FuaXphdGlvbjogTW9ja09yZ2FuaXphdGlvbixcbiAgfSxcbiAgYXJnVHlwZXM6IHt9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgT3JnYW5pemF0aW9uQ2FyZCA9ICh7b3JnYW5pemF0aW9ufSkgPT4gaHRtbGA8dmVyZG9jcy1vcmdhbml6YXRpb24tY2FyZCAub3JnYW5pemF0aW9uPSR7b3JnYW5pemF0aW9ufSAvPmA7XG5cblxuXG5Pcmdhbml6YXRpb25DYXJkLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe29yZ2FuaXphdGlvbn0pID0+IGh0bWxgPHZlcmRvY3Mtb3JnYW5pemF0aW9uLWNhcmQgLm9yZ2FuaXphdGlvbj0ke29yZ2FuaXphdGlvbn0gLz5gXCIgfSwgLi4uT3JnYW5pemF0aW9uQ2FyZC5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQ29udHJvbHMvUmFkaW8gQnV0dG9uJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtcmFkaW8tYnV0dG9uJyxcXG4gIGFyZ3M6IHtcXG4gICAgY2hlY2tlZDogZmFsc2UsXFxuICAgIG5hbWU6ICd0ZXN0JyxcXG4gICAgdmFsdWU6ICcxJyxcXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxcbiAgfSxcXG4gIGFyZ1R5cGVzOiB7XFxuICAgIGlucHV0OiB7XFxuICAgICAgYWN0aW9uOiAnaW5wdXQnLFxcbiAgICAgIGRlc2NyaXB0aW9uOlxcbiAgICAgICAgJ0ZpcmVkIHdoZW4gdGhlIHJhZGlvIGJ1dHRvbiBpcyBjbGlja2VkLiBlLnRhcmdldC5jaGVja2VkIHdpbGwgYWx3YXlzIGJlIHRydWUsIGJlY2F1c2UgcmFkaW8gYnV0dG9uIG9uQ2hhbmdlIGV2ZW50cyBhcmUgZmlyZWQgb25seSB3aGVuIHRoZSByYWRpbyBidXR0b24gaXMgY2xpY2tlZCB0byBzZWxlY3QgaXQuJyxcXG4gICAgfSxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBSYWRpb0J1dHRvbiA9ICh7Y2hlY2tlZCwgbmFtZSwgdmFsdWUsIGRpc2FibGVkLCBpbnB1dH0pID0+XFxuICBodG1sYCA8dmVyZG9jcy1yYWRpby1idXR0b24gLmNoZWNrZWQ9JHtjaGVja2VkfSAubmFtZT0ke25hbWV9IC52YWx1ZT0ke3ZhbHVlfSAuZGlzYWJsZWQ9XFxcIiR7ZGlzYWJsZWR9XFxcIiBAaW5wdXQ9JHtpbnB1dH0gLz4gYDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiUmFkaW9CdXR0b25cIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI3LFwibGluZVwiOjIyfSxcImVuZExvY1wiOntcImNvbFwiOjEyNCxcImxpbmVcIjoyM30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjoyMn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTI0LFwibGluZVwiOjIzfX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnQ29udHJvbHMvUmFkaW8gQnV0dG9uJyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1yYWRpby1idXR0b24nLFxuICBhcmdzOiB7XG4gICAgY2hlY2tlZDogZmFsc2UsXG4gICAgbmFtZTogJ3Rlc3QnLFxuICAgIHZhbHVlOiAnMScsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICB9LFxuICBhcmdUeXBlczoge1xuICAgIGlucHV0OiB7XG4gICAgICBhY3Rpb246ICdpbnB1dCcsXG4gICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgJ0ZpcmVkIHdoZW4gdGhlIHJhZGlvIGJ1dHRvbiBpcyBjbGlja2VkLiBlLnRhcmdldC5jaGVja2VkIHdpbGwgYWx3YXlzIGJlIHRydWUsIGJlY2F1c2UgcmFkaW8gYnV0dG9uIG9uQ2hhbmdlIGV2ZW50cyBhcmUgZmlyZWQgb25seSB3aGVuIHRoZSByYWRpbyBidXR0b24gaXMgY2xpY2tlZCB0byBzZWxlY3QgaXQuJyxcbiAgICB9LFxuICB9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgUmFkaW9CdXR0b24gPSAoe2NoZWNrZWQsIG5hbWUsIHZhbHVlLCBkaXNhYmxlZCwgaW5wdXR9KSA9PlxuICBodG1sYCA8dmVyZG9jcy1yYWRpby1idXR0b24gLmNoZWNrZWQ9JHtjaGVja2VkfSAubmFtZT0ke25hbWV9IC52YWx1ZT0ke3ZhbHVlfSAuZGlzYWJsZWQ9XCIke2Rpc2FibGVkfVwiIEBpbnB1dD0ke2lucHV0fSAvPiBgO1xuXG5cblxuUmFkaW9CdXR0b24ucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7Y2hlY2tlZCwgbmFtZSwgdmFsdWUsIGRpc2FibGVkLCBpbnB1dH0pID0+XFxuICBodG1sYCA8dmVyZG9jcy1yYWRpby1idXR0b24gLmNoZWNrZWQ9JHtjaGVja2VkfSAubmFtZT0ke25hbWV9IC52YWx1ZT0ke3ZhbHVlfSAuZGlzYWJsZWQ9XFxcIiR7ZGlzYWJsZWR9XFxcIiBAaW5wdXQ9JHtpbnB1dH0gLz4gYFwiIH0sIC4uLlJhZGlvQnV0dG9uLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdDb250cm9scy9TZWxlY3QgSW5wdXQnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1zZWxlY3QtaW5wdXQnLFxcbiAgYXJnczoge1xcbiAgICBsYWJlbDogJ05hbWUnLFxcbiAgICB2YWx1ZTogJycsXFxuICAgIG9wdGlvbnM6IFtcXG4gICAgICB7bGFiZWw6ICdPcHRpb24gMScsIHZhbHVlOiAnMSd9LFxcbiAgICAgIHtsYWJlbDogJ09wdGlvbiAyJywgdmFsdWU6ICcyJ30sXFxuICAgICAge2xhYmVsOiAnT3B0aW9uIDMnLCB2YWx1ZTogJzMnfSxcXG4gICAgXSxcXG4gIH0sXFxuICBhcmdUeXBlczoge1xcbiAgICBpbnB1dDoge1xcbiAgICAgIGFjdGlvbjogJ2lucHV0JyxcXG4gICAgICBkZXNjcmlwdGlvbjogJ0ZpcmVkIHdoZW4gYSBuZXcgdmFsdWUgaXMgc2VsZWN0ZWQuIGUudGFyZ2V0LnZhbHVlIHdpbGwgY29udGFpbiB0aGUgc2VsZWN0ZWQgdmFsdWUuJyxcXG4gICAgfSxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBTZWxlY3RJbnB1dCA9ICh7dHlwZSwgbGFiZWwsIHZhbHVlLCBwbGFjZWhvbGRlciwgb3B0aW9ucywgZGlzYWJsZWQsIGlucHV0fSkgPT5cXG4gIGh0bWxgPHZlcmRvY3Mtc2VsZWN0LWlucHV0IC50eXBlPSR7dHlwZX0gLmxhYmVsPSR7bGFiZWx9IC5wbGFjZWhvbGRlcj0ke3BsYWNlaG9sZGVyfSAudmFsdWU9JHt2YWx1ZX0gLm9wdGlvbnM9JHtvcHRpb25zfSAuZGlzYWJsZWQ9JHtkaXNhYmxlZH0gQGlucHV0PSR7aW5wdXR9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiU2VsZWN0SW5wdXRcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI3LFwibGluZVwiOjI0fSxcImVuZExvY1wiOntcImNvbFwiOjE2NCxcImxpbmVcIjoyNX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjoyNH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTY0LFwibGluZVwiOjI1fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnQ29udHJvbHMvU2VsZWN0IElucHV0JyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1zZWxlY3QtaW5wdXQnLFxuICBhcmdzOiB7XG4gICAgbGFiZWw6ICdOYW1lJyxcbiAgICB2YWx1ZTogJycsXG4gICAgb3B0aW9uczogW1xuICAgICAge2xhYmVsOiAnT3B0aW9uIDEnLCB2YWx1ZTogJzEnfSxcbiAgICAgIHtsYWJlbDogJ09wdGlvbiAyJywgdmFsdWU6ICcyJ30sXG4gICAgICB7bGFiZWw6ICdPcHRpb24gMycsIHZhbHVlOiAnMyd9LFxuICAgIF0sXG4gIH0sXG4gIGFyZ1R5cGVzOiB7XG4gICAgaW5wdXQ6IHtcbiAgICAgIGFjdGlvbjogJ2lucHV0JyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnRmlyZWQgd2hlbiBhIG5ldyB2YWx1ZSBpcyBzZWxlY3RlZC4gZS50YXJnZXQudmFsdWUgd2lsbCBjb250YWluIHRoZSBzZWxlY3RlZCB2YWx1ZS4nLFxuICAgIH0sXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBTZWxlY3RJbnB1dCA9ICh7dHlwZSwgbGFiZWwsIHZhbHVlLCBwbGFjZWhvbGRlciwgb3B0aW9ucywgZGlzYWJsZWQsIGlucHV0fSkgPT5cbiAgaHRtbGA8dmVyZG9jcy1zZWxlY3QtaW5wdXQgLnR5cGU9JHt0eXBlfSAubGFiZWw9JHtsYWJlbH0gLnBsYWNlaG9sZGVyPSR7cGxhY2Vob2xkZXJ9IC52YWx1ZT0ke3ZhbHVlfSAub3B0aW9ucz0ke29wdGlvbnN9IC5kaXNhYmxlZD0ke2Rpc2FibGVkfSBAaW5wdXQ9JHtpbnB1dH0gLz5gO1xuXG5cblxuU2VsZWN0SW5wdXQucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7dHlwZSwgbGFiZWwsIHZhbHVlLCBwbGFjZWhvbGRlciwgb3B0aW9ucywgZGlzYWJsZWQsIGlucHV0fSkgPT5cXG4gIGh0bWxgPHZlcmRvY3Mtc2VsZWN0LWlucHV0IC50eXBlPSR7dHlwZX0gLmxhYmVsPSR7bGFiZWx9IC5wbGFjZWhvbGRlcj0ke3BsYWNlaG9sZGVyfSAudmFsdWU9JHt2YWx1ZX0gLm9wdGlvbnM9JHtvcHRpb25zfSAuZGlzYWJsZWQ9JHtkaXNhYmxlZH0gQGlucHV0PSR7aW5wdXR9IC8+YFwiIH0sIC4uLlNlbGVjdElucHV0LnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuXFxuY29uc3QgU2FtcGxlRG9jdW1lbnQgPSB7XFxuICAvLyBTa2lwcGluZyBub24tZXNzZW50aWFsIGZpZWxkcyA5dGhhdCB0aGUgd2lkZ2V0IGRvZXNuJ3QgY2FyZSBhYm91dCkuIEJ1dCB0aGlzIGlzIGFuIElEb2N1bWVudC5cXG4gIGlkOiAnMTIzNCcsXFxuICBzdGF0dXM6ICdjb21wbGV0ZScsXFxuICByZWNpcGllbnRzOiBbXFxuICAgIHtyb2xlX25hbWU6ICdUYXggUHJlcGFyZXInLCBzdGF0dXM6ICdzdWJtaXR0ZWQnLCBmdWxsX25hbWU6ICdCaWxsIEJvYXJkJywgc2VxdWVuY2U6IDEsIHR5cGU6ICdzaWduZXInfSxcXG4gICAge3JvbGVfbmFtZTogJ1JlY2lwaWVudCAxJywgc3RhdHVzOiAnc3VibWl0dGVkJywgZnVsbF9uYW1lOiAnQW50ZSBCZWxsdW0nLCBzZXF1ZW5jZTogMiwgdHlwZTogJ3NpZ25lcid9LFxcbiAgICB7cm9sZV9uYW1lOiAnUmVjaXBpZW50IDInLCBzdGF0dXM6ICdvcGVuZWQnLCBmdWxsX25hbWU6ICdTYXJhaCBCZWxsdW0nLCBzZXF1ZW5jZTogMiwgdHlwZTogJ3NpZ25lcid9LFxcbiAgICB7cm9sZV9uYW1lOiAnT2ZmaWNlIE1hbmFnZXInLCBzdGF0dXM6ICdwZW5kaW5nJywgZnVsbF9uYW1lOiAnUGFpZ2UgVHVybmVyJywgc2VxdWVuY2U6IDMsIHR5cGU6ICdhcHByb3Zlcid9LFxcbiAgXSxcXG59O1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQ29udHJvbHMvU3RhdHVzIEluZGljYXRvcicsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXN0YXR1cy1pbmRpY2F0b3InLFxcbiAgYXJnczoge1xcbiAgICBkb2N1bWVudDogMCxcXG4gICAgc3RhdHVzOiAnY29tcGxldGUnLFxcbiAgICB0aGVtZTogJ2xpZ2h0JyxcXG4gICAgc2l6ZTogJ25vcm1hbCcsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHtcXG4gICAgZG9jdW1lbnQ6IHtcXG4gICAgICBvcHRpb25zOiBbMCwgMV0sXFxuICAgICAgbWFwcGluZzogezA6IFNhbXBsZURvY3VtZW50LCAxOiBudWxsfSxcXG4gICAgICBjb250cm9sOiB7XFxuICAgICAgICB0eXBlOiAnc2VsZWN0JyxcXG4gICAgICAgIGxhYmVsczoge1xcbiAgICAgICAgICAwOiAnU2FtcGxlIERvY3VtZW50JyxcXG4gICAgICAgICAgMTogJ05vdCBTZXQnLFxcbiAgICAgICAgfSxcXG4gICAgICB9LFxcbiAgICB9LFxcbiAgICBzdGF0dXM6IHtcXG4gICAgICBkZWZhdWx0VmFsdWU6ICcnLFxcbiAgICAgIG9wdGlvbnM6IFswLCAnY29tcGxldGUnLCAncGVuZGluZycsICdpbiBwcm9ncmVzcycsICdkZWNsaW5lZCcsICdjYW5jZWxlZCcsICdpbnZpdGVkJywgJ29wZW5lZCcsICdhY2NlcHRlZCcsICdzaWduZWQnLCAnc3VibWl0dGVkJ10sXFxuICAgICAgbWFwcGluZzoge1xcbiAgICAgICAgMDogbnVsbCxcXG4gICAgICAgICdjb21wbGV0ZSc6ICdjb21wbGV0ZScsXFxuICAgICAgICAncGVuZGluZyc6ICdwZW5kaW5nJyxcXG4gICAgICAgICdpbiBwcm9ncmVzcyc6ICdpbiBwcm9ncmVzcycsXFxuICAgICAgICAnZGVjbGluZWQnOiAnZGVjbGluZWQnLFxcbiAgICAgICAgJ2NhbmNlbGVkJzogJ2NhbmNlbGVkJyxcXG4gICAgICAgICdpbnZpdGVkJzogJ2ludml0ZWQnLFxcbiAgICAgICAgJ29wZW5lZCc6ICdvcGVuZWQnLFxcbiAgICAgICAgJ2FjY2VwdGVkJzogJ2FjY2VwdGVkJyxcXG4gICAgICAgICdzaWduZWQnOiAnc2lnbmVkJyxcXG4gICAgICAgICdzdWJtaXR0ZWQnOiAnc3VibWl0dGVkJyxcXG4gICAgICB9LFxcbiAgICAgIGNvbnRyb2w6IHtcXG4gICAgICAgIHR5cGU6ICdzZWxlY3QnLFxcbiAgICAgICAgbGFiZWxzOiB7XFxuICAgICAgICAgIDA6ICdOb3QgU2V0JyxcXG4gICAgICAgICAgJ2NvbXBsZXRlJzogJ0NvbXBsZXRlJyxcXG4gICAgICAgICAgJ3BlbmRpbmcnOiAnUGVuZGluZycsXFxuICAgICAgICAgICdpbiBwcm9ncmVzcyc6ICdJbiBQcm9ncmVzcycsXFxuICAgICAgICAgICdkZWNsaW5lZCc6ICdEZWNsaW5lZCcsXFxuICAgICAgICAgICdjYW5jZWxlZCc6ICdDYW5jZWxlZCcsXFxuICAgICAgICAgICdpbnZpdGVkJzogJ0ludml0ZWQnLFxcbiAgICAgICAgICAnb3BlbmVkJzogJ09wZW5lZCcsXFxuICAgICAgICAgICdhY2NlcHRlZCc6ICdBY2NlcHRlZCcsXFxuICAgICAgICAgICdzaWduZWQnOiAnU2lnbmVkJyxcXG4gICAgICAgICAgJ3N1Ym1pdHRlZCc6ICdTdWJtaXR0ZWQnLFxcbiAgICAgICAgfSxcXG4gICAgICB9LFxcbiAgICB9LFxcbiAgfSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IFN0YXR1c0luZGljYXRvciA9ICh7dGhlbWUsIHNpemUsIHN0YXR1cywgZW52ZWxvcGV9KSA9PlxcbiAgaHRtbGA8dmVyZG9jcy1zdGF0dXMtaW5kaWNhdG9yIC50aGVtZT1cXFwiJHt0aGVtZX1cXFwiIC5zaXplPVxcXCIke3NpemV9XFxcIiAuc3RhdHVzPVxcXCIke3N0YXR1c31cXFwiIC5lbnZlbG9wZT1cXFwiJHtlbnZlbG9wZX1cXFwiIC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiU3RhdHVzSW5kaWNhdG9yXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMSxcImxpbmVcIjo3M30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxMTQsXCJsaW5lXCI6NzR9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzEsXCJsaW5lXCI6NzN9LFwiZW5kQm9keVwiOntcImNvbFwiOjExNCxcImxpbmVcIjo3NH19fTtcbiAgICBcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcblxuY29uc3QgU2FtcGxlRG9jdW1lbnQgPSB7XG4gIC8vIFNraXBwaW5nIG5vbi1lc3NlbnRpYWwgZmllbGRzIDl0aGF0IHRoZSB3aWRnZXQgZG9lc24ndCBjYXJlIGFib3V0KS4gQnV0IHRoaXMgaXMgYW4gSURvY3VtZW50LlxuICBpZDogJzEyMzQnLFxuICBzdGF0dXM6ICdjb21wbGV0ZScsXG4gIHJlY2lwaWVudHM6IFtcbiAgICB7cm9sZV9uYW1lOiAnVGF4IFByZXBhcmVyJywgc3RhdHVzOiAnc3VibWl0dGVkJywgZnVsbF9uYW1lOiAnQmlsbCBCb2FyZCcsIHNlcXVlbmNlOiAxLCB0eXBlOiAnc2lnbmVyJ30sXG4gICAge3JvbGVfbmFtZTogJ1JlY2lwaWVudCAxJywgc3RhdHVzOiAnc3VibWl0dGVkJywgZnVsbF9uYW1lOiAnQW50ZSBCZWxsdW0nLCBzZXF1ZW5jZTogMiwgdHlwZTogJ3NpZ25lcid9LFxuICAgIHtyb2xlX25hbWU6ICdSZWNpcGllbnQgMicsIHN0YXR1czogJ29wZW5lZCcsIGZ1bGxfbmFtZTogJ1NhcmFoIEJlbGx1bScsIHNlcXVlbmNlOiAyLCB0eXBlOiAnc2lnbmVyJ30sXG4gICAge3JvbGVfbmFtZTogJ09mZmljZSBNYW5hZ2VyJywgc3RhdHVzOiAncGVuZGluZycsIGZ1bGxfbmFtZTogJ1BhaWdlIFR1cm5lcicsIHNlcXVlbmNlOiAzLCB0eXBlOiAnYXBwcm92ZXInfSxcbiAgXSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdDb250cm9scy9TdGF0dXMgSW5kaWNhdG9yJyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1zdGF0dXMtaW5kaWNhdG9yJyxcbiAgYXJnczoge1xuICAgIGRvY3VtZW50OiAwLFxuICAgIHN0YXR1czogJ2NvbXBsZXRlJyxcbiAgICB0aGVtZTogJ2xpZ2h0JyxcbiAgICBzaXplOiAnbm9ybWFsJyxcbiAgfSxcbiAgYXJnVHlwZXM6IHtcbiAgICBkb2N1bWVudDoge1xuICAgICAgb3B0aW9uczogWzAsIDFdLFxuICAgICAgbWFwcGluZzogezA6IFNhbXBsZURvY3VtZW50LCAxOiBudWxsfSxcbiAgICAgIGNvbnRyb2w6IHtcbiAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgIDA6ICdTYW1wbGUgRG9jdW1lbnQnLFxuICAgICAgICAgIDE6ICdOb3QgU2V0JyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBzdGF0dXM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogJycsXG4gICAgICBvcHRpb25zOiBbMCwgJ2NvbXBsZXRlJywgJ3BlbmRpbmcnLCAnaW4gcHJvZ3Jlc3MnLCAnZGVjbGluZWQnLCAnY2FuY2VsZWQnLCAnaW52aXRlZCcsICdvcGVuZWQnLCAnYWNjZXB0ZWQnLCAnc2lnbmVkJywgJ3N1Ym1pdHRlZCddLFxuICAgICAgbWFwcGluZzoge1xuICAgICAgICAwOiBudWxsLFxuICAgICAgICAnY29tcGxldGUnOiAnY29tcGxldGUnLFxuICAgICAgICAncGVuZGluZyc6ICdwZW5kaW5nJyxcbiAgICAgICAgJ2luIHByb2dyZXNzJzogJ2luIHByb2dyZXNzJyxcbiAgICAgICAgJ2RlY2xpbmVkJzogJ2RlY2xpbmVkJyxcbiAgICAgICAgJ2NhbmNlbGVkJzogJ2NhbmNlbGVkJyxcbiAgICAgICAgJ2ludml0ZWQnOiAnaW52aXRlZCcsXG4gICAgICAgICdvcGVuZWQnOiAnb3BlbmVkJyxcbiAgICAgICAgJ2FjY2VwdGVkJzogJ2FjY2VwdGVkJyxcbiAgICAgICAgJ3NpZ25lZCc6ICdzaWduZWQnLFxuICAgICAgICAnc3VibWl0dGVkJzogJ3N1Ym1pdHRlZCcsXG4gICAgICB9LFxuICAgICAgY29udHJvbDoge1xuICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgMDogJ05vdCBTZXQnLFxuICAgICAgICAgICdjb21wbGV0ZSc6ICdDb21wbGV0ZScsXG4gICAgICAgICAgJ3BlbmRpbmcnOiAnUGVuZGluZycsXG4gICAgICAgICAgJ2luIHByb2dyZXNzJzogJ0luIFByb2dyZXNzJyxcbiAgICAgICAgICAnZGVjbGluZWQnOiAnRGVjbGluZWQnLFxuICAgICAgICAgICdjYW5jZWxlZCc6ICdDYW5jZWxlZCcsXG4gICAgICAgICAgJ2ludml0ZWQnOiAnSW52aXRlZCcsXG4gICAgICAgICAgJ29wZW5lZCc6ICdPcGVuZWQnLFxuICAgICAgICAgICdhY2NlcHRlZCc6ICdBY2NlcHRlZCcsXG4gICAgICAgICAgJ3NpZ25lZCc6ICdTaWduZWQnLFxuICAgICAgICAgICdzdWJtaXR0ZWQnOiAnU3VibWl0dGVkJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IFN0YXR1c0luZGljYXRvciA9ICh7dGhlbWUsIHNpemUsIHN0YXR1cywgZW52ZWxvcGV9KSA9PlxuICBodG1sYDx2ZXJkb2NzLXN0YXR1cy1pbmRpY2F0b3IgLnRoZW1lPVwiJHt0aGVtZX1cIiAuc2l6ZT1cIiR7c2l6ZX1cIiAuc3RhdHVzPVwiJHtzdGF0dXN9XCIgLmVudmVsb3BlPVwiJHtlbnZlbG9wZX1cIiAvPmA7XG5cblxuXG5TdGF0dXNJbmRpY2F0b3IucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7dGhlbWUsIHNpemUsIHN0YXR1cywgZW52ZWxvcGV9KSA9PlxcbiAgaHRtbGA8dmVyZG9jcy1zdGF0dXMtaW5kaWNhdG9yIC50aGVtZT1cXFwiJHt0aGVtZX1cXFwiIC5zaXplPVxcXCIke3NpemV9XFxcIiAuc3RhdHVzPVxcXCIke3N0YXR1c31cXFwiIC5lbnZlbG9wZT1cXFwiJHtlbnZlbG9wZX1cXFwiIC8+YFwiIH0sIC4uLlN0YXR1c0luZGljYXRvci5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcbmltcG9ydCB7SU9yZ2FuaXphdGlvbn0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL09yZ2FuaXphdGlvbnMvVHlwZXMnO1xcbmltcG9ydCB7SVRlbXBsYXRlfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvVGVtcGxhdGVzL1R5cGVzJztcXG5cXG5jb25zdCBNb2NrVGVtcGxhdGUgPSB7XFxuICBjb3VudGVyOiAyLFxcbiAgc3Rhcl9jb3VudGVyOiAxMCxcXG4gIG5hbWU6ICdJUlMgRm9ybSBJLTknLFxcbiAgaWQ6ICcxJyxcXG4gIHByb2ZpbGVfaWQ6ICcyJyxcXG4gIGNyZWF0ZWRfYXQ6ICcyMDIxLTExLTE0VDEzOjU3OjIxWicsXFxuICB1cGRhdGVkX2F0OiAnMjAyMS0xMS0xNFQxMzo1NzoyMVonLFxcbiAgbGFzdF91c2VkX2F0OiAnMjAyMS0xMS0xNFQxMzo1NzoyMVonLFxcbiAgb3JnYW5pemF0aW9uX2lkOiAnMycsXFxuICBpc19wZXJzb25hbDogZmFsc2UsXFxuICBpc19wdWJsaWM6IHRydWUsXFxuICBzZW5kZXI6ICdjcmVhdG9yJyxcXG4gIGRlc2NyaXB0aW9uOiAnSVJTIEZvcm0gSS05JyxcXG5cXG4gIC8vIFRPRE86IFRoZXNlIGZpZWxkcyBuZWVkIHRvIGJlIGFkZGVkIHRvIHRoZSBBUEkgcmVzcG9uc2VcXG4gIG9yZ2FuaXphdGlvbjoge1xcbiAgICBpZDogJzMnLFxcbiAgICBuYW1lOiAnQUNNRSBXaWRnZXRzLCBMTEMnLFxcbiAgICBhZGRyZXNzOiBudWxsLFxcbiAgICBwaG9uZTogbnVsbCxcXG4gICAgYnVzaW5lc3NfbmFtZTogbnVsbCxcXG4gICAgaXNfYnVzaW5lc3M6IHRydWUsXFxuICAgIGFkZHJlc3MyOiBudWxsLFxcbiAgICBjb250YWN0X2VtYWlsOiBudWxsLFxcbiAgICB0aW1lem9uZTogbnVsbCxcXG4gICAgZW52ZWxvcGVfcmVzcG9uc2libGU6IGZhbHNlLFxcbiAgfSBhcyBJT3JnYW5pemF0aW9uLFxcblxcbiAgdGVtcGxhdGVfZG9jdW1lbnQ6IHtcXG4gICAgdXJsOiAndXJsJyxcXG4gICAgbmFtZTogJ0lSUyBGb3JtIEktOScsXFxuICAgIHBhZ2VfbnVtYmVyczogMyxcXG4gICAgaWQ6ICc0JyxcXG4gICAgdXBkYXRlZF9hdDogJzIwMjEtMTEtMTRUMTM6NTc6MjFaJyxcXG4gICAgY3JlYXRlZF9hdDogJzIwMjEtMTEtMTRUMTM6NTc6MjFaJyxcXG4gICAgdGVtcGxhdGVfaWQ6ICcxJyxcXG4gICAgbWltZTogJ2FwcGxpY2F0aW9uL3BkZicsXFxuICAgIHRodW1ibmFpbF91cmw6ICdodHRwczovL3ZlcmRvY3MuY29tL2VuL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIxLzEyL1NjcmVlbi1TaG90LTIwMjEtMTItMzAtYXQtMi4yNi4wOC1QTS1lMTY0MDg5MjUzNjc4Ni5wbmcnLFxcbiAgfSxcXG59IGFzIElUZW1wbGF0ZTtcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0NvbnRyb2xzL1RlbXBsYXRlIENhcmQnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy10ZW1wbGF0ZS1jYXJkJyxcXG4gIGFyZ3M6IHtcXG4gICAgdGVtcGxhdGU6IE1vY2tUZW1wbGF0ZSxcXG4gIH0sXFxuICBhcmdUeXBlczoge30sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBUZW1wbGF0ZUNhcmQgPSAoe3RlbXBsYXRlfSkgPT4gaHRtbGA8dmVyZG9jcy10ZW1wbGF0ZS1jYXJkIC50ZW1wbGF0ZT0ke3RlbXBsYXRlfSAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIlRlbXBsYXRlQ2FyZFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjgsXCJsaW5lXCI6NTd9LFwiZW5kTG9jXCI6e1wiY29sXCI6OTcsXCJsaW5lXCI6NTd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjgsXCJsaW5lXCI6NTd9LFwiZW5kQm9keVwiOntcImNvbFwiOjk3LFwibGluZVwiOjU3fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtJT3JnYW5pemF0aW9ufSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvT3JnYW5pemF0aW9ucy9UeXBlcyc7XG5pbXBvcnQge0lUZW1wbGF0ZX0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL1RlbXBsYXRlcy9UeXBlcyc7XG5cbmNvbnN0IE1vY2tUZW1wbGF0ZSA9IHtcbiAgY291bnRlcjogMixcbiAgc3Rhcl9jb3VudGVyOiAxMCxcbiAgbmFtZTogJ0lSUyBGb3JtIEktOScsXG4gIGlkOiAnMScsXG4gIHByb2ZpbGVfaWQ6ICcyJyxcbiAgY3JlYXRlZF9hdDogJzIwMjEtMTEtMTRUMTM6NTc6MjFaJyxcbiAgdXBkYXRlZF9hdDogJzIwMjEtMTEtMTRUMTM6NTc6MjFaJyxcbiAgbGFzdF91c2VkX2F0OiAnMjAyMS0xMS0xNFQxMzo1NzoyMVonLFxuICBvcmdhbml6YXRpb25faWQ6ICczJyxcbiAgaXNfcGVyc29uYWw6IGZhbHNlLFxuICBpc19wdWJsaWM6IHRydWUsXG4gIHNlbmRlcjogJ2NyZWF0b3InLFxuICBkZXNjcmlwdGlvbjogJ0lSUyBGb3JtIEktOScsXG5cbiAgLy8gVE9ETzogVGhlc2UgZmllbGRzIG5lZWQgdG8gYmUgYWRkZWQgdG8gdGhlIEFQSSByZXNwb25zZVxuICBvcmdhbml6YXRpb246IHtcbiAgICBpZDogJzMnLFxuICAgIG5hbWU6ICdBQ01FIFdpZGdldHMsIExMQycsXG4gICAgYWRkcmVzczogbnVsbCxcbiAgICBwaG9uZTogbnVsbCxcbiAgICBidXNpbmVzc19uYW1lOiBudWxsLFxuICAgIGlzX2J1c2luZXNzOiB0cnVlLFxuICAgIGFkZHJlc3MyOiBudWxsLFxuICAgIGNvbnRhY3RfZW1haWw6IG51bGwsXG4gICAgdGltZXpvbmU6IG51bGwsXG4gICAgZW52ZWxvcGVfcmVzcG9uc2libGU6IGZhbHNlLFxuICB9IGFzIElPcmdhbml6YXRpb24sXG5cbiAgdGVtcGxhdGVfZG9jdW1lbnQ6IHtcbiAgICB1cmw6ICd1cmwnLFxuICAgIG5hbWU6ICdJUlMgRm9ybSBJLTknLFxuICAgIHBhZ2VfbnVtYmVyczogMyxcbiAgICBpZDogJzQnLFxuICAgIHVwZGF0ZWRfYXQ6ICcyMDIxLTExLTE0VDEzOjU3OjIxWicsXG4gICAgY3JlYXRlZF9hdDogJzIwMjEtMTEtMTRUMTM6NTc6MjFaJyxcbiAgICB0ZW1wbGF0ZV9pZDogJzEnLFxuICAgIG1pbWU6ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgIHRodW1ibmFpbF91cmw6ICdodHRwczovL3ZlcmRvY3MuY29tL2VuL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIxLzEyL1NjcmVlbi1TaG90LTIwMjEtMTItMzAtYXQtMi4yNi4wOC1QTS1lMTY0MDg5MjUzNjc4Ni5wbmcnLFxuICB9LFxufSBhcyBJVGVtcGxhdGU7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdDb250cm9scy9UZW1wbGF0ZSBDYXJkJyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy10ZW1wbGF0ZS1jYXJkJyxcbiAgYXJnczoge1xuICAgIHRlbXBsYXRlOiBNb2NrVGVtcGxhdGUsXG4gIH0sXG4gIGFyZ1R5cGVzOiB7fSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IFRlbXBsYXRlQ2FyZCA9ICh7dGVtcGxhdGV9KSA9PiBodG1sYDx2ZXJkb2NzLXRlbXBsYXRlLWNhcmQgLnRlbXBsYXRlPSR7dGVtcGxhdGV9IC8+YDtcblxuXG5cblRlbXBsYXRlQ2FyZC5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHt0ZW1wbGF0ZX0pID0+IGh0bWxgPHZlcmRvY3MtdGVtcGxhdGUtY2FyZCAudGVtcGxhdGU9JHt0ZW1wbGF0ZX0gLz5gXCIgfSwgLi4uVGVtcGxhdGVDYXJkLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdDb250cm9scy9UZW1wbGF0ZSBUYWdzJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtdGVtcGxhdGUtdGFncycsXFxuICBhcmdzOiB7XFxuICAgIHRhZ3M6IFsnY29udHJhY3RvcnMnLCAndGF4ZXMnLCAnaXJzJ10sXFxuICB9LFxcbiAgYXJnVHlwZXM6IHt9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgVGVtcGxhdGVUYWdzID0gKHt0YWdzLCB0aGVtZX0pID0+IGh0bWxgPHZlcmRvY3MtdGVtcGxhdGUtdGFncyAudGFncz1cXFwiJHt0YWdzfVxcXCIgLnRoZW1lPVxcXCIke3RoZW1lfVxcXCIgLz5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJUZW1wbGF0ZVRhZ3NcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI4LFwibGluZVwiOjEzfSxcImVuZExvY1wiOntcImNvbFwiOjExMixcImxpbmVcIjoxM30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyOCxcImxpbmVcIjoxM30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTEyLFwibGluZVwiOjEzfX19O1xuICAgIFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnQ29udHJvbHMvVGVtcGxhdGUgVGFncycsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtdGVtcGxhdGUtdGFncycsXG4gIGFyZ3M6IHtcbiAgICB0YWdzOiBbJ2NvbnRyYWN0b3JzJywgJ3RheGVzJywgJ2lycyddLFxuICB9LFxuICBhcmdUeXBlczoge30sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBUZW1wbGF0ZVRhZ3MgPSAoe3RhZ3MsIHRoZW1lfSkgPT4gaHRtbGA8dmVyZG9jcy10ZW1wbGF0ZS10YWdzIC50YWdzPVwiJHt0YWdzfVwiIC50aGVtZT1cIiR7dGhlbWV9XCIgLz5gO1xuXG5cblxuVGVtcGxhdGVUYWdzLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe3RhZ3MsIHRoZW1lfSkgPT4gaHRtbGA8dmVyZG9jcy10ZW1wbGF0ZS10YWdzIC50YWdzPVxcXCIke3RhZ3N9XFxcIiAudGhlbWU9XFxcIiR7dGhlbWV9XFxcIiAvPmBcIiB9LCAuLi5UZW1wbGF0ZVRhZ3MucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0NvbnRyb2xzL1RleHQgSW5wdXQnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy10ZXh0LWlucHV0JyxcXG4gIGFyZ3M6IHtcXG4gICAgbGFiZWw6ICdOYW1lJyxcXG4gICAgdmFsdWU6ICcnLFxcbiAgICBwbGFjZWhvbGRlcjogJ0VudGVyIHlvdXIgbmFtZS4uLicsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHtcXG4gICAgaW5wdXQ6IHtcXG4gICAgICBhY3Rpb246ICdpbnB1dCcsXFxuICAgICAgZGVzY3JpcHRpb246ICdGaXJlZCBmb3IgZWFjaCBjaGFyYWN0ZXIgZW50ZXJlZCBpbiB0aGUgZmllbGQuIGUudGFyZ2V0LnZhbHVlIHdpbGwgY29udGFpbiB0aGUgY3VycmVudCB0ZXh0IHZhbHVlLicsXFxuICAgIH0sXFxuICB9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgVGV4dElucHV0ID0gKHt0eXBlLCBsYWJlbCwgdmFsdWUsIHBsYWNlaG9sZGVyLCBkaXNhYmxlZCwgaW5wdXR9KSA9PlxcbiAgaHRtbGA8dmVyZG9jcy10ZXh0LWlucHV0IC50eXBlPSR7dHlwZX0gLmxhYmVsPSR7bGFiZWx9IC5wbGFjZWhvbGRlcj0ke3BsYWNlaG9sZGVyfSAudmFsdWU9JHt2YWx1ZX0gLmRpc2FibGVkPSR7ZGlzYWJsZWR9IEBpbnB1dD0ke2lucHV0fSAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIlRleHRJbnB1dFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjUsXCJsaW5lXCI6MjB9LFwiZW5kTG9jXCI6e1wiY29sXCI6MTQyLFwibGluZVwiOjIxfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI1LFwibGluZVwiOjIwfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxNDIsXCJsaW5lXCI6MjF9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdDb250cm9scy9UZXh0IElucHV0JyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy10ZXh0LWlucHV0JyxcbiAgYXJnczoge1xuICAgIGxhYmVsOiAnTmFtZScsXG4gICAgdmFsdWU6ICcnLFxuICAgIHBsYWNlaG9sZGVyOiAnRW50ZXIgeW91ciBuYW1lLi4uJyxcbiAgfSxcbiAgYXJnVHlwZXM6IHtcbiAgICBpbnB1dDoge1xuICAgICAgYWN0aW9uOiAnaW5wdXQnLFxuICAgICAgZGVzY3JpcHRpb246ICdGaXJlZCBmb3IgZWFjaCBjaGFyYWN0ZXIgZW50ZXJlZCBpbiB0aGUgZmllbGQuIGUudGFyZ2V0LnZhbHVlIHdpbGwgY29udGFpbiB0aGUgY3VycmVudCB0ZXh0IHZhbHVlLicsXG4gICAgfSxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IFRleHRJbnB1dCA9ICh7dHlwZSwgbGFiZWwsIHZhbHVlLCBwbGFjZWhvbGRlciwgZGlzYWJsZWQsIGlucHV0fSkgPT5cbiAgaHRtbGA8dmVyZG9jcy10ZXh0LWlucHV0IC50eXBlPSR7dHlwZX0gLmxhYmVsPSR7bGFiZWx9IC5wbGFjZWhvbGRlcj0ke3BsYWNlaG9sZGVyfSAudmFsdWU9JHt2YWx1ZX0gLmRpc2FibGVkPSR7ZGlzYWJsZWR9IEBpbnB1dD0ke2lucHV0fSAvPmA7XG5cblxuXG5UZXh0SW5wdXQucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7dHlwZSwgbGFiZWwsIHZhbHVlLCBwbGFjZWhvbGRlciwgZGlzYWJsZWQsIGlucHV0fSkgPT5cXG4gIGh0bWxgPHZlcmRvY3MtdGV4dC1pbnB1dCAudHlwZT0ke3R5cGV9IC5sYWJlbD0ke2xhYmVsfSAucGxhY2Vob2xkZXI9JHtwbGFjZWhvbGRlcn0gLnZhbHVlPSR7dmFsdWV9IC5kaXNhYmxlZD0ke2Rpc2FibGVkfSBAaW5wdXQ9JHtpbnB1dH0gLz5gXCIgfSwgLi4uVGV4dElucHV0LnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdDb250cm9scy9Ub2dnbGUgQnV0dG9uJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtdG9nZ2xlLWJ1dHRvbicsXFxuICBhcmdzOiB7XFxuICAgIGljb246ICc8c3ZnIGNsYXNzPVxcXCJNdWlTdmdJY29uLXJvb3QgTXVpU3ZnSWNvbi1mb250U2l6ZU1lZGl1bSBNdWlCb3gtcm9vdCBjc3MtMW9tMGhrY1xcXCIgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PHBhdGggZD1cXFwiTTIwIDJINGMtMS4xIDAtMS45OS45LTEuOTkgMkwyIDIybDQtNGgxNGMxLjEgMCAyLS45IDItMlY0YzAtMS4xLS45LTItMi0yem0tMiAxMkg2di0yaDEydjJ6bTAtM0g2VjloMTJ2MnptMC0zSDZWNmgxMnYyelxcXCI+PC9wYXRoPjwvc3ZnPicsXFxuICAgIGxhYmVsOiAnVXNlJyxcXG4gICAgc2l6ZTogJ25vcm1hbCcsXFxuICAgIGFjdGl2ZTogZmFsc2UsXFxuICB9LFxcbiAgLy8gYXJnVHlwZXM6IHtcXG4gIC8vICAgb3B0aW9uczoge3R5cGU6ICdvYmplY3QnLCBjb250cm9sOiAnb2JqZWN0J30sXFxuICAvLyAgIHRoZW1lOiB7dHlwZTogJ3N0cmluZycsIGNvbnRyb2w6ICdyYWRpbycsIG9wdGlvbnM6WydsaWdodCcsICdkYXJrJ10sIGRlZmF1bHRWYWx1ZTogJ2xpZ2h0J31cXG4gIC8vIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBUb2dnbGVCdXR0b24gPSAoe2ljb24sIGxhYmVsLCBzaXplLCBhY3RpdmV9KSA9PiBodG1sYDx2ZXJkb2NzLXRvZ2dsZS1idXR0b24gLmljb249JHtpY29ufSAubGFiZWw9JHtsYWJlbH0gLnNpemU9JHtzaXplfSAuYWN0aXZlPSR7YWN0aXZlfSAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIlRvZ2dsZUJ1dHRvblwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjgsXCJsaW5lXCI6MTl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MTU0LFwibGluZVwiOjE5fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI4LFwibGluZVwiOjE5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxNTQsXCJsaW5lXCI6MTl9fX07XG4gICAgXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdDb250cm9scy9Ub2dnbGUgQnV0dG9uJyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy10b2dnbGUtYnV0dG9uJyxcbiAgYXJnczoge1xuICAgIGljb246ICc8c3ZnIGNsYXNzPVwiTXVpU3ZnSWNvbi1yb290IE11aVN2Z0ljb24tZm9udFNpemVNZWRpdW0gTXVpQm94LXJvb3QgY3NzLTFvbTBoa2NcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTIwIDJINGMtMS4xIDAtMS45OS45LTEuOTkgMkwyIDIybDQtNGgxNGMxLjEgMCAyLS45IDItMlY0YzAtMS4xLS45LTItMi0yem0tMiAxMkg2di0yaDEydjJ6bTAtM0g2VjloMTJ2MnptMC0zSDZWNmgxMnYyelwiPjwvcGF0aD48L3N2Zz4nLFxuICAgIGxhYmVsOiAnVXNlJyxcbiAgICBzaXplOiAnbm9ybWFsJyxcbiAgICBhY3RpdmU6IGZhbHNlLFxuICB9LFxuICAvLyBhcmdUeXBlczoge1xuICAvLyAgIG9wdGlvbnM6IHt0eXBlOiAnb2JqZWN0JywgY29udHJvbDogJ29iamVjdCd9LFxuICAvLyAgIHRoZW1lOiB7dHlwZTogJ3N0cmluZycsIGNvbnRyb2w6ICdyYWRpbycsIG9wdGlvbnM6WydsaWdodCcsICdkYXJrJ10sIGRlZmF1bHRWYWx1ZTogJ2xpZ2h0J31cbiAgLy8gfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IFRvZ2dsZUJ1dHRvbiA9ICh7aWNvbiwgbGFiZWwsIHNpemUsIGFjdGl2ZX0pID0+IGh0bWxgPHZlcmRvY3MtdG9nZ2xlLWJ1dHRvbiAuaWNvbj0ke2ljb259IC5sYWJlbD0ke2xhYmVsfSAuc2l6ZT0ke3NpemV9IC5hY3RpdmU9JHthY3RpdmV9IC8+YDtcblxuXG5cblRvZ2dsZUJ1dHRvbi5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHtpY29uLCBsYWJlbCwgc2l6ZSwgYWN0aXZlfSkgPT4gaHRtbGA8dmVyZG9jcy10b2dnbGUtYnV0dG9uIC5pY29uPSR7aWNvbn0gLmxhYmVsPSR7bGFiZWx9IC5zaXplPSR7c2l6ZX0gLmFjdGl2ZT0ke2FjdGl2ZX0gLz5gXCIgfSwgLi4uVG9nZ2xlQnV0dG9uLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuXFxuY29uc3QgZHVtbXlPcHRpb25zID0ge1xcbiAgbGFiZWw6ICdWaWV3IGFzJyxcXG4gIGRlZmF1bHRTZWxlY3Rpb246IDEsXFxuICBidXR0b25zOiBbXFxuICAgIHtcXG4gICAgICBpZDogJ2xpc3QtdmlldycsXFxuICAgICAgaWNvbjpcXG4gICAgICAgICc8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgZW5hYmxlLWJhY2tncm91bmQ9XFxcIm5ldyAwIDAgMjQgMjRcXFwiIGhlaWdodD1cXFwiMjRweFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIiB3aWR0aD1cXFwiMjRweFxcXCIgZmlsbD1cXFwiIzAwMDAwMFxcXCI+PHJlY3QgZmlsbD1cXFwibm9uZVxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgd2lkdGg9XFxcIjI0XFxcIi8+PHBhdGggZD1cXFwiTTMsNXYxNGgxOFY1SDN6IE03LDd2Mkg1VjdIN3ogTTUsMTN2LTJoMnYySDV6IE01LDE1aDJ2Mkg1VjE1eiBNMTksMTdIOXYtMmgxMFYxN3ogTTE5LDEzSDl2LTJoMTBWMTN6IE0xOSw5SDlWN2gxMFY5elxcXCIvPjwvc3ZnPicsXFxuICAgIH0sXFxuICAgIHtcXG4gICAgICBpZDogJ2dyaWQtdmlldycsXFxuICAgICAgaWNvbjpcXG4gICAgICAgICc8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaGVpZ2h0PVxcXCIyNHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiIHdpZHRoPVxcXCIyNHB4XFxcIiBmaWxsPVxcXCIjMDAwMDAwXFxcIj48cGF0aCBkPVxcXCJNMCAwaDI0djI0SDBWMHpcXFwiIGZpbGw9XFxcIm5vbmVcXFwiLz48cGF0aCBkPVxcXCJNMyA1djE0aDE5VjVIM3ptMTcgNGgtMi4yNVY3SDIwdjJ6TTkuMjUgMTFoMi4yNXYySDkuMjV2LTJ6bS0yIDJINXYtMmgyLjI1djJ6bTQuMjUtNEg5LjI1VjdoMi4yNXYyem0yLTJoMi4yNXYySDEzLjVWN3ptLTIgOHYySDkuMjV2LTJoMi4yNXptMiAwaDIuMjV2MkgxMy41di0yem0wLTJ2LTJoMi4yNXYySDEzLjV6bTQuMjUtMkgyMHYyaC0yLjI1di0yek03LjI1IDd2Mkg1VjdoMi4yNXpNNSAxNWgyLjI1djJINXYtMnptMTIuNzUgMnYtMkgyMHYyaC0yLjI1elxcXCIvPjwvc3ZnPicsXFxuICAgIH0sXFxuICBdLFxcbn07XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdDb250cm9scy9Ub2dnbGUnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy10b2dnbGUnLFxcbiAgYXJnczoge1xcbiAgICBvcHRpb25zOiBkdW1teU9wdGlvbnMsXFxuICB9LFxcbiAgLy8gYXJnVHlwZXM6IHtcXG4gIC8vICAgb3B0aW9uczoge3R5cGU6ICdvYmplY3QnLCBjb250cm9sOiAnb2JqZWN0J30sXFxuICAvLyAgIHRoZW1lOiB7dHlwZTogJ3N0cmluZycsIGNvbnRyb2w6ICdyYWRpbycsIG9wdGlvbnM6WydsaWdodCcsICdkYXJrJ10sIGRlZmF1bHRWYWx1ZTogJ2xpZ2h0J31cXG4gIC8vIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBUb2dnbGUgPSAoe29wdGlvbnMsIHRoZW1lfSkgPT4gaHRtbGA8dmVyZG9jcy10b2dnbGUgLm9wdGlvbnM9JHtvcHRpb25zfSAudGhlbWU9JHt0aGVtZX0+PC92ZXJkb2NzLXRvZ2dsZT5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJUb2dnbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjIyLFwibGluZVwiOjMzfSxcImVuZExvY1wiOntcImNvbFwiOjExOSxcImxpbmVcIjozM30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMixcImxpbmVcIjozM30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTE5LFwibGluZVwiOjMzfX19O1xuICAgIFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuXG5jb25zdCBkdW1teU9wdGlvbnMgPSB7XG4gIGxhYmVsOiAnVmlldyBhcycsXG4gIGRlZmF1bHRTZWxlY3Rpb246IDEsXG4gIGJ1dHRvbnM6IFtcbiAgICB7XG4gICAgICBpZDogJ2xpc3QtdmlldycsXG4gICAgICBpY29uOlxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDI0IDI0XCIgaGVpZ2h0PVwiMjRweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB3aWR0aD1cIjI0cHhcIiBmaWxsPVwiIzAwMDAwMFwiPjxyZWN0IGZpbGw9XCJub25lXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCIvPjxwYXRoIGQ9XCJNMyw1djE0aDE4VjVIM3ogTTcsN3YySDVWN0g3eiBNNSwxM3YtMmgydjJINXogTTUsMTVoMnYySDVWMTV6IE0xOSwxN0g5di0yaDEwVjE3eiBNMTksMTNIOXYtMmgxMFYxM3ogTTE5LDlIOVY3aDEwVjl6XCIvPjwvc3ZnPicsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ2dyaWQtdmlldycsXG4gICAgICBpY29uOlxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgaGVpZ2h0PVwiMjRweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB3aWR0aD1cIjI0cHhcIiBmaWxsPVwiIzAwMDAwMFwiPjxwYXRoIGQ9XCJNMCAwaDI0djI0SDBWMHpcIiBmaWxsPVwibm9uZVwiLz48cGF0aCBkPVwiTTMgNXYxNGgxOVY1SDN6bTE3IDRoLTIuMjVWN0gyMHYyek05LjI1IDExaDIuMjV2Mkg5LjI1di0yem0tMiAySDV2LTJoMi4yNXYyem00LjI1LTRIOS4yNVY3aDIuMjV2MnptMi0yaDIuMjV2MkgxMy41Vjd6bS0yIDh2Mkg5LjI1di0yaDIuMjV6bTIgMGgyLjI1djJIMTMuNXYtMnptMC0ydi0yaDIuMjV2MkgxMy41em00LjI1LTJIMjB2MmgtMi4yNXYtMnpNNy4yNSA3djJINVY3aDIuMjV6TTUgMTVoMi4yNXYySDV2LTJ6bTEyLjc1IDJ2LTJIMjB2MmgtMi4yNXpcIi8+PC9zdmc+JyxcbiAgICB9LFxuICBdLFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0NvbnRyb2xzL1RvZ2dsZScsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtdG9nZ2xlJyxcbiAgYXJnczoge1xuICAgIG9wdGlvbnM6IGR1bW15T3B0aW9ucyxcbiAgfSxcbiAgLy8gYXJnVHlwZXM6IHtcbiAgLy8gICBvcHRpb25zOiB7dHlwZTogJ29iamVjdCcsIGNvbnRyb2w6ICdvYmplY3QnfSxcbiAgLy8gICB0aGVtZToge3R5cGU6ICdzdHJpbmcnLCBjb250cm9sOiAncmFkaW8nLCBvcHRpb25zOlsnbGlnaHQnLCAnZGFyayddLCBkZWZhdWx0VmFsdWU6ICdsaWdodCd9XG4gIC8vIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBUb2dnbGUgPSAoe29wdGlvbnMsIHRoZW1lfSkgPT4gaHRtbGA8dmVyZG9jcy10b2dnbGUgLm9wdGlvbnM9JHtvcHRpb25zfSAudGhlbWU9JHt0aGVtZX0+PC92ZXJkb2NzLXRvZ2dsZT5gO1xuXG5cblxuVG9nZ2xlLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe29wdGlvbnMsIHRoZW1lfSkgPT4gaHRtbGA8dmVyZG9jcy10b2dnbGUgLm9wdGlvbnM9JHtvcHRpb25zfSAudGhlbWU9JHt0aGVtZX0+PC92ZXJkb2NzLXRvZ2dsZT5gXCIgfSwgLi4uVG9nZ2xlLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdDb250cm9scy9Ub29sYmFyIEljb24nLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy10b29sYmFyLWljb24nLFxcbiAgYXJnczoge1xcbiAgICB0ZXh0OiAnU2FtcGxlIHRvb2x0aXAgdGV4dCcsXFxuICAgIGljb246ICc8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgd2lkdGg9XFxcIjI0XFxcIj48cGF0aCBkPVxcXCJNNy42IDEzLjkyNXEtLjU1IDAtLjkyNS0uMzc1dC0uMzc1LS45MjVxMC0uNTUuMzc1LS45MzcuMzc1LS4zODguOTI1LS4zODh0LjkyNS4zODhxLjM3NS4zODcuMzc1LjkzN3QtLjM3NS45MjVxLS4zNzUuMzc1LS45MjUuMzc1Wm00LjQgMHEtLjU1IDAtLjkyNS0uMzc1dC0uMzc1LS45MjVxMC0uNTUuMzc1LS45MzcuMzc1LS4zODguOTI1LS4zODh0LjkyNS4zODhxLjM3NS4zODcuMzc1LjkzN3QtLjM3NS45MjVxLS4zNzUuMzc1LS45MjUuMzc1Wm00LjQgMHEtLjU1IDAtLjkyNS0uMzc1dC0uMzc1LS45MjVxMC0uNTUuMzc1LS45MzcuMzc1LS4zODguOTI1LS4zODh0LjkyNS4zODhxLjM3NS4zODcuMzc1LjkzN3QtLjM3NS45MjVxLS4zNzUuMzc1LS45MjUuMzc1Wk01LjMgMjIuODVxLTEuMzI1IDAtMi4yMzgtLjkxMi0uOTEyLS45MTMtLjkxMi0yLjIzOFY2LjNxMC0xLjMyNS45MTItMi4yMzguOTEzLS45MTIgMi4yMzgtLjkxMkg2di0yaDIuNTc1djJoNi44NXYtMkgxOHYyaC43cTEuMzI1IDAgMi4yMzguOTEyLjkxMi45MTMuOTEyIDIuMjM4djEzLjRxMCAxLjMyNS0uOTEyIDIuMjM4LS45MTMuOTEyLTIuMjM4LjkxMlptMC0zLjE1aDEzLjRWMTBINS4zdjkuN1pNNS4zIDhoMTMuNFY2LjNINS4zWm0wIDBWNi4zIDhaXFxcIi8+PC9zdmc+JyxcXG4gIH0sXFxuICBhcmdUeXBlczoge30sXFxuICBwYXJhbWV0ZXJzOiB7XFxuICAgIGxheW91dDogJ2Z1bGxzY3JlZW4nLFxcbiAgfSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IFRvb2xiYXJJY29uID0gKHt0ZXh0LCBpY29ufSkgPT4gaHRtbGA8dmVyZG9jcy10b29sYmFyLWljb24gLnRleHQ9JHt0ZXh0fSAuaWNvbj0ke2ljb259IC8+IGA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIlRvb2xiYXJJY29uXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjoxN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxMDQsXCJsaW5lXCI6MTd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjcsXCJsaW5lXCI6MTd9LFwiZW5kQm9keVwiOntcImNvbFwiOjEwNCxcImxpbmVcIjoxN319fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0NvbnRyb2xzL1Rvb2xiYXIgSWNvbicsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtdG9vbGJhci1pY29uJyxcbiAgYXJnczoge1xuICAgIHRleHQ6ICdTYW1wbGUgdG9vbHRpcCB0ZXh0JyxcbiAgICBpY29uOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCI+PHBhdGggZD1cIk03LjYgMTMuOTI1cS0uNTUgMC0uOTI1LS4zNzV0LS4zNzUtLjkyNXEwLS41NS4zNzUtLjkzNy4zNzUtLjM4OC45MjUtLjM4OHQuOTI1LjM4OHEuMzc1LjM4Ny4zNzUuOTM3dC0uMzc1LjkyNXEtLjM3NS4zNzUtLjkyNS4zNzVabTQuNCAwcS0uNTUgMC0uOTI1LS4zNzV0LS4zNzUtLjkyNXEwLS41NS4zNzUtLjkzNy4zNzUtLjM4OC45MjUtLjM4OHQuOTI1LjM4OHEuMzc1LjM4Ny4zNzUuOTM3dC0uMzc1LjkyNXEtLjM3NS4zNzUtLjkyNS4zNzVabTQuNCAwcS0uNTUgMC0uOTI1LS4zNzV0LS4zNzUtLjkyNXEwLS41NS4zNzUtLjkzNy4zNzUtLjM4OC45MjUtLjM4OHQuOTI1LjM4OHEuMzc1LjM4Ny4zNzUuOTM3dC0uMzc1LjkyNXEtLjM3NS4zNzUtLjkyNS4zNzVaTTUuMyAyMi44NXEtMS4zMjUgMC0yLjIzOC0uOTEyLS45MTItLjkxMy0uOTEyLTIuMjM4VjYuM3EwLTEuMzI1LjkxMi0yLjIzOC45MTMtLjkxMiAyLjIzOC0uOTEySDZ2LTJoMi41NzV2Mmg2Ljg1di0ySDE4djJoLjdxMS4zMjUgMCAyLjIzOC45MTIuOTEyLjkxMy45MTIgMi4yMzh2MTMuNHEwIDEuMzI1LS45MTIgMi4yMzgtLjkxMy45MTItMi4yMzguOTEyWm0wLTMuMTVoMTMuNFYxMEg1LjN2OS43Wk01LjMgOGgxMy40VjYuM0g1LjNabTAgMFY2LjMgOFpcIi8+PC9zdmc+JyxcbiAgfSxcbiAgYXJnVHlwZXM6IHt9LFxuICBwYXJhbWV0ZXJzOiB7XG4gICAgbGF5b3V0OiAnZnVsbHNjcmVlbicsXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBUb29sYmFySWNvbiA9ICh7dGV4dCwgaWNvbn0pID0+IGh0bWxgPHZlcmRvY3MtdG9vbGJhci1pY29uIC50ZXh0PSR7dGV4dH0gLmljb249JHtpY29ufSAvPiBgO1xuXG5cblxuVG9vbGJhckljb24ucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7dGV4dCwgaWNvbn0pID0+IGh0bWxgPHZlcmRvY3MtdG9vbGJhci1pY29uIC50ZXh0PSR7dGV4dH0gLmljb249JHtpY29ufSAvPiBgXCIgfSwgLi4uVG9vbGJhckljb24ucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0RpYWxvZ3MvSW5pdGlhbCBEaWFsb2cnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1pbml0aWFsLWRpYWxvZycsXFxuICBhcmdzOiB7XFxuICAgIGluaXRpYWxzOiAnUFQnLFxcbiAgfSxcXG4gIGFyZ1R5cGVzOiB7XFxuICAgIG9uTmV4dDoge1xcbiAgICAgIGFjdGlvbjogJ25leHQnLFxcbiAgICAgIGRlc2NyaXB0aW9uOiAnRmlyZWQgd2hlbiB0aGUgdXNlciBjb21wbGV0ZXMgdGhlIGRpYWxvZyBhbmQgY2xpY2tzIEFkb3B0LiBUaGUgZXZlbnQgZGV0YWlsIHdpbGwgY29udGFpbiBhIGJhc2U2NC1lbmNvZGVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5pdGlhbHMgYWRvcHRlZC4nLFxcbiAgICB9LFxcbiAgICBvbkNhbmNlbDoge1xcbiAgICAgIGFjdGlvbjogJ2NhbmNlbCcsXFxuICAgICAgZGVzY3JpcHRpb246ICdGaXJlZCBpZiB0aGUgdXNlciBjYW5jZWxzIHRoZSBkaWFsb2cuJyxcXG4gICAgfSxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBJbml0aWFsRGlhbG9nID0gKHtpbml0aWFscywgb25OZXh0LCBvbkNhbmNlbH0pID0+IGh0bWxgPHZlcmRvY3MtaW5pdGlhbC1kaWFsb2cgLmluaXRpYWxzPSR7aW5pdGlhbHN9IEBjYW5jZWw9JHtvbkNhbmNlbH0gQG5leHQ9JHtvbk5leHR9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiSW5pdGlhbERpYWxvZ1wiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjksXCJsaW5lXCI6MjJ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MTUzLFwibGluZVwiOjIyfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI5LFwibGluZVwiOjIyfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxNTMsXCJsaW5lXCI6MjJ9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdEaWFsb2dzL0luaXRpYWwgRGlhbG9nJyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1pbml0aWFsLWRpYWxvZycsXG4gIGFyZ3M6IHtcbiAgICBpbml0aWFsczogJ1BUJyxcbiAgfSxcbiAgYXJnVHlwZXM6IHtcbiAgICBvbk5leHQ6IHtcbiAgICAgIGFjdGlvbjogJ25leHQnLFxuICAgICAgZGVzY3JpcHRpb246ICdGaXJlZCB3aGVuIHRoZSB1c2VyIGNvbXBsZXRlcyB0aGUgZGlhbG9nIGFuZCBjbGlja3MgQWRvcHQuIFRoZSBldmVudCBkZXRhaWwgd2lsbCBjb250YWluIGEgYmFzZTY0LWVuY29kZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbml0aWFscyBhZG9wdGVkLicsXG4gICAgfSxcbiAgICBvbkNhbmNlbDoge1xuICAgICAgYWN0aW9uOiAnY2FuY2VsJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnRmlyZWQgaWYgdGhlIHVzZXIgY2FuY2VscyB0aGUgZGlhbG9nLicsXG4gICAgfSxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IEluaXRpYWxEaWFsb2cgPSAoe2luaXRpYWxzLCBvbk5leHQsIG9uQ2FuY2VsfSkgPT4gaHRtbGA8dmVyZG9jcy1pbml0aWFsLWRpYWxvZyAuaW5pdGlhbHM9JHtpbml0aWFsc30gQGNhbmNlbD0ke29uQ2FuY2VsfSBAbmV4dD0ke29uTmV4dH0gLz5gO1xuXG5cblxuSW5pdGlhbERpYWxvZy5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHtpbml0aWFscywgb25OZXh0LCBvbkNhbmNlbH0pID0+IGh0bWxgPHZlcmRvY3MtaW5pdGlhbC1kaWFsb2cgLmluaXRpYWxzPSR7aW5pdGlhbHN9IEBjYW5jZWw9JHtvbkNhbmNlbH0gQG5leHQ9JHtvbk5leHR9IC8+YFwiIH0sIC4uLkluaXRpYWxEaWFsb2cucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0RpYWxvZ3MvS0JBIERpYWxvZycsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWtiYS1kaWFsb2cnLFxcbiAgYXJnczoge1xcbiAgICBtb2RlOiAnY2hvaWNlJyxcXG4gICAgaGVscHRpdGxlOiAnT25lIFRpbWUgQ29kZScsXFxuICAgIGhlbHB0ZXh0OiAnUGxlYXNlIGNoZWNrIHlvdXIgdGV4dCBtZXNzYWdlcyBmb3IgYSBzZWN1cml0eSBjb2RlLCBhbmQgZW50ZXIgdGhlIGNvZGUgYmVsb3cuJyxcXG4gICAgbGFiZWw6ICdQSU4nLFxcbiAgICBwbGFjZWhvbGRlcjogJ0VudGVyIHlvdXIgUElOLi4uJyxcXG4gICAgc3RlcDogMSxcXG4gICAgc3RlcHM6IDMsXFxuICAgIGNob2ljZXM6IFsnNTUzIEFyYm9yIERyJywgJzE4IExhY2V5IExuJywgJzIzQSBCYWxsIEN0JywgJzIzNzUgQ2F2YWxsbyBCbHZkJywgJzIzLTEgUlItNycsICcxNTEgQm91bGRlciBSZCddLFxcbiAgfSxcXG4gIGFyZ1R5cGVzOiB7XFxuICAgIG9uTmV4dDoge1xcbiAgICAgIGFjdGlvbjogJ25leHQnLFxcbiAgICAgIHRhYmxlOiB7ZGlzYWJsZTogdHJ1ZX0sXFxuICAgIH0sXFxuICAgIG9uQ2FuY2VsOiB7XFxuICAgICAgYWN0aW9uOiAnY2FuY2VsJyxcXG4gICAgICB0YWJsZToge2Rpc2FibGU6IHRydWV9LFxcbiAgICB9LFxcbiAgfSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IEtCQURpYWxvZyA9ICh7aGVscHRpdGxlLCBoZWxwdGV4dCwgbGFiZWwsIHBsYWNlaG9sZGVyLCBtb2RlLCBzdGVwLCBzdGVwcywgY2hvaWNlcywgb25OZXh0LCBvbkNhbmNlbH0pID0+XFxuICBodG1sYDx2ZXJkb2NzLWtiYS1kaWFsb2dcXG4gICAgLm1vZGU9JHttb2RlfVxcbiAgICAuaGVscHRpdGxlPSR7aGVscHRpdGxlfVxcbiAgICAuaGVscHRleHQ9JHtoZWxwdGV4dH1cXG4gICAgLmxhYmVsPSR7bGFiZWx9XFxuICAgIC5wbGFjZWhvbGRlcj0ke3BsYWNlaG9sZGVyfVxcbiAgICAuc3RlcD0ke3N0ZXB9XFxuICAgIC5zdGVwcz0ke3N0ZXBzfVxcbiAgICAuY2hvaWNlcz0ke2Nob2ljZXN9XFxuICAgIEBuZXh0PSR7b25OZXh0fVxcbiAgICBAY2FuY2VsPSR7b25DYW5jZWx9XFxuICAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIktCQURpYWxvZ1wiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjUsXCJsaW5lXCI6Mjl9LFwiZW5kTG9jXCI6e1wiY29sXCI6NSxcImxpbmVcIjo0MX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNSxcImxpbmVcIjoyOX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6NSxcImxpbmVcIjo0MX19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0RpYWxvZ3MvS0JBIERpYWxvZycsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3Mta2JhLWRpYWxvZycsXG4gIGFyZ3M6IHtcbiAgICBtb2RlOiAnY2hvaWNlJyxcbiAgICBoZWxwdGl0bGU6ICdPbmUgVGltZSBDb2RlJyxcbiAgICBoZWxwdGV4dDogJ1BsZWFzZSBjaGVjayB5b3VyIHRleHQgbWVzc2FnZXMgZm9yIGEgc2VjdXJpdHkgY29kZSwgYW5kIGVudGVyIHRoZSBjb2RlIGJlbG93LicsXG4gICAgbGFiZWw6ICdQSU4nLFxuICAgIHBsYWNlaG9sZGVyOiAnRW50ZXIgeW91ciBQSU4uLi4nLFxuICAgIHN0ZXA6IDEsXG4gICAgc3RlcHM6IDMsXG4gICAgY2hvaWNlczogWyc1NTMgQXJib3IgRHInLCAnMTggTGFjZXkgTG4nLCAnMjNBIEJhbGwgQ3QnLCAnMjM3NSBDYXZhbGxvIEJsdmQnLCAnMjMtMSBSUi03JywgJzE1MSBCb3VsZGVyIFJkJ10sXG4gIH0sXG4gIGFyZ1R5cGVzOiB7XG4gICAgb25OZXh0OiB7XG4gICAgICBhY3Rpb246ICduZXh0JyxcbiAgICAgIHRhYmxlOiB7ZGlzYWJsZTogdHJ1ZX0sXG4gICAgfSxcbiAgICBvbkNhbmNlbDoge1xuICAgICAgYWN0aW9uOiAnY2FuY2VsJyxcbiAgICAgIHRhYmxlOiB7ZGlzYWJsZTogdHJ1ZX0sXG4gICAgfSxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IEtCQURpYWxvZyA9ICh7aGVscHRpdGxlLCBoZWxwdGV4dCwgbGFiZWwsIHBsYWNlaG9sZGVyLCBtb2RlLCBzdGVwLCBzdGVwcywgY2hvaWNlcywgb25OZXh0LCBvbkNhbmNlbH0pID0+XG4gIGh0bWxgPHZlcmRvY3Mta2JhLWRpYWxvZ1xuICAgIC5tb2RlPSR7bW9kZX1cbiAgICAuaGVscHRpdGxlPSR7aGVscHRpdGxlfVxuICAgIC5oZWxwdGV4dD0ke2hlbHB0ZXh0fVxuICAgIC5sYWJlbD0ke2xhYmVsfVxuICAgIC5wbGFjZWhvbGRlcj0ke3BsYWNlaG9sZGVyfVxuICAgIC5zdGVwPSR7c3RlcH1cbiAgICAuc3RlcHM9JHtzdGVwc31cbiAgICAuY2hvaWNlcz0ke2Nob2ljZXN9XG4gICAgQG5leHQ9JHtvbk5leHR9XG4gICAgQGNhbmNlbD0ke29uQ2FuY2VsfVxuICAvPmA7XG5cblxuXG5LQkFEaWFsb2cucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7aGVscHRpdGxlLCBoZWxwdGV4dCwgbGFiZWwsIHBsYWNlaG9sZGVyLCBtb2RlLCBzdGVwLCBzdGVwcywgY2hvaWNlcywgb25OZXh0LCBvbkNhbmNlbH0pID0+XFxuICBodG1sYDx2ZXJkb2NzLWtiYS1kaWFsb2dcXG4gICAgLm1vZGU9JHttb2RlfVxcbiAgICAuaGVscHRpdGxlPSR7aGVscHRpdGxlfVxcbiAgICAuaGVscHRleHQ9JHtoZWxwdGV4dH1cXG4gICAgLmxhYmVsPSR7bGFiZWx9XFxuICAgIC5wbGFjZWhvbGRlcj0ke3BsYWNlaG9sZGVyfVxcbiAgICAuc3RlcD0ke3N0ZXB9XFxuICAgIC5zdGVwcz0ke3N0ZXBzfVxcbiAgICAuY2hvaWNlcz0ke2Nob2ljZXN9XFxuICAgIEBuZXh0PSR7b25OZXh0fVxcbiAgICBAY2FuY2VsPSR7b25DYW5jZWx9XFxuICAvPmBcIiB9LCAuLi5LQkFEaWFsb2cucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0RpYWxvZ3MvT2sgRGlhbG9nJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3Mtb2stZGlhbG9nJyxcXG4gIGFyZ3M6IHtcXG4gICAgc2hvd0NhbmNlbDogdHJ1ZSxcXG4gICAgaGVhZGluZzogJ0xvZ2luIEVycm9yJyxcXG4gICAgbWVzc2FnZTogJ0xvZ2luIGZhaWxlZC4gUGxlYXNlIGNoZWNrIHlvdXIgdXNlcm5hbWUgYW5kIHBhc3N3b3JkIGFuZCB0cnkgYWdhaW4uJyxcXG4gIH0sXFxuICBhcmdUeXBlczoge1xcbiAgICBvbk5leHQ6IHtcXG4gICAgICBhY3Rpb246ICduZXh0JyxcXG4gICAgICB0YWJsZToge2Rpc2FibGU6IHRydWV9LFxcbiAgICB9LFxcbiAgICBvbkNhbmNlbDoge1xcbiAgICAgIGFjdGlvbjogJ2NhbmNlbCcsXFxuICAgICAgdGFibGU6IHtkaXNhYmxlOiB0cnVlfSxcXG4gICAgfSxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBPa0RpYWxvZyA9ICh7aGVhZGluZywgbWVzc2FnZSwgc2hvd0NhbmNlbCwgb25OZXh0LCBvbkNhbmNlbH0pID0+XFxuICBodG1sYDx2ZXJkb2NzLW9rLWRpYWxvZyAuaGVhZGluZz0ke2hlYWRpbmd9IC5tZXNzYWdlPSR7bWVzc2FnZX0gLnNob3dDYW5jZWw9JHtzaG93Q2FuY2VsfSBAY2FuY2VsPSR7b25DYW5jZWx9IEBuZXh0PSR7b25OZXh0fSAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIk9rRGlhbG9nXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNCxcImxpbmVcIjoyNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxMzEsXCJsaW5lXCI6MjV9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjQsXCJsaW5lXCI6MjR9LFwiZW5kQm9keVwiOntcImNvbFwiOjEzMSxcImxpbmVcIjoyNX19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0RpYWxvZ3MvT2sgRGlhbG9nJyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1vay1kaWFsb2cnLFxuICBhcmdzOiB7XG4gICAgc2hvd0NhbmNlbDogdHJ1ZSxcbiAgICBoZWFkaW5nOiAnTG9naW4gRXJyb3InLFxuICAgIG1lc3NhZ2U6ICdMb2dpbiBmYWlsZWQuIFBsZWFzZSBjaGVjayB5b3VyIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBhbmQgdHJ5IGFnYWluLicsXG4gIH0sXG4gIGFyZ1R5cGVzOiB7XG4gICAgb25OZXh0OiB7XG4gICAgICBhY3Rpb246ICduZXh0JyxcbiAgICAgIHRhYmxlOiB7ZGlzYWJsZTogdHJ1ZX0sXG4gICAgfSxcbiAgICBvbkNhbmNlbDoge1xuICAgICAgYWN0aW9uOiAnY2FuY2VsJyxcbiAgICAgIHRhYmxlOiB7ZGlzYWJsZTogdHJ1ZX0sXG4gICAgfSxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IE9rRGlhbG9nID0gKHtoZWFkaW5nLCBtZXNzYWdlLCBzaG93Q2FuY2VsLCBvbk5leHQsIG9uQ2FuY2VsfSkgPT5cbiAgaHRtbGA8dmVyZG9jcy1vay1kaWFsb2cgLmhlYWRpbmc9JHtoZWFkaW5nfSAubWVzc2FnZT0ke21lc3NhZ2V9IC5zaG93Q2FuY2VsPSR7c2hvd0NhbmNlbH0gQGNhbmNlbD0ke29uQ2FuY2VsfSBAbmV4dD0ke29uTmV4dH0gLz5gO1xuXG5cblxuT2tEaWFsb2cucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7aGVhZGluZywgbWVzc2FnZSwgc2hvd0NhbmNlbCwgb25OZXh0LCBvbkNhbmNlbH0pID0+XFxuICBodG1sYDx2ZXJkb2NzLW9rLWRpYWxvZyAuaGVhZGluZz0ke2hlYWRpbmd9IC5tZXNzYWdlPSR7bWVzc2FnZX0gLnNob3dDYW5jZWw9JHtzaG93Q2FuY2VsfSBAY2FuY2VsPSR7b25DYW5jZWx9IEBuZXh0PSR7b25OZXh0fSAvPmBcIiB9LCAuLi5Pa0RpYWxvZy5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRGlhbG9ncy9TaWduYXR1cmUgRGlhbG9nJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3Mtc2lnbmF0dXJlLWRpYWxvZycsXFxuICBhcmdzOiB7XFxuICAgIG5hbWU6ICdQYWlnZSBUdXJuZXInLFxcbiAgfSxcXG4gIGFyZ1R5cGVzOiB7XFxuICAgIG9uTmV4dDoge1xcbiAgICAgIGFjdGlvbjogJ25leHQnLFxcbiAgICAgIHRhYmxlOiB7ZGlzYWJsZTogdHJ1ZX0sXFxuICAgIH0sXFxuICAgIG9uQ2FuY2VsOiB7XFxuICAgICAgYWN0aW9uOiAnY2FuY2VsJyxcXG4gICAgICB0YWJsZToge2Rpc2FibGU6IHRydWV9LFxcbiAgICB9LFxcbiAgfSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IFNpZ25hdHVyZURpYWxvZyA9ICh7bmFtZSwgb25DYW5jZWwsIG9uTmV4dH0pID0+IGh0bWxgPHZlcmRvY3Mtc2lnbmF0dXJlLWRpYWxvZyAubmFtZT0ke25hbWV9IEBjYW5jZWw9JHtvbkNhbmNlbH0gQG5leHQ9JHtvbk5leHR9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiU2lnbmF0dXJlRGlhbG9nXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMSxcImxpbmVcIjoyMn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxNDUsXCJsaW5lXCI6MjJ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzEsXCJsaW5lXCI6MjJ9LFwiZW5kQm9keVwiOntcImNvbFwiOjE0NSxcImxpbmVcIjoyMn19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0RpYWxvZ3MvU2lnbmF0dXJlIERpYWxvZycsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3Mtc2lnbmF0dXJlLWRpYWxvZycsXG4gIGFyZ3M6IHtcbiAgICBuYW1lOiAnUGFpZ2UgVHVybmVyJyxcbiAgfSxcbiAgYXJnVHlwZXM6IHtcbiAgICBvbk5leHQ6IHtcbiAgICAgIGFjdGlvbjogJ25leHQnLFxuICAgICAgdGFibGU6IHtkaXNhYmxlOiB0cnVlfSxcbiAgICB9LFxuICAgIG9uQ2FuY2VsOiB7XG4gICAgICBhY3Rpb246ICdjYW5jZWwnLFxuICAgICAgdGFibGU6IHtkaXNhYmxlOiB0cnVlfSxcbiAgICB9LFxuICB9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgU2lnbmF0dXJlRGlhbG9nID0gKHtuYW1lLCBvbkNhbmNlbCwgb25OZXh0fSkgPT4gaHRtbGA8dmVyZG9jcy1zaWduYXR1cmUtZGlhbG9nIC5uYW1lPSR7bmFtZX0gQGNhbmNlbD0ke29uQ2FuY2VsfSBAbmV4dD0ke29uTmV4dH0gLz5gO1xuXG5cblxuU2lnbmF0dXJlRGlhbG9nLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe25hbWUsIG9uQ2FuY2VsLCBvbk5leHR9KSA9PiBodG1sYDx2ZXJkb2NzLXNpZ25hdHVyZS1kaWFsb2cgLm5hbWU9JHtuYW1lfSBAY2FuY2VsPSR7b25DYW5jZWx9IEBuZXh0PSR7b25OZXh0fSAvPmBcIiB9LCAuLi5TaWduYXR1cmVEaWFsb2cucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5pbXBvcnQge1RlbXBsYXRlU2VuZGVyVHlwZXN9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9UZW1wbGF0ZXMvVHlwZXMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRGlhbG9ncy9UZW1wbGF0ZSBTZW5kZXIgRGlhbG9nJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtdGVtcGxhdGUtc2VuZGVyLWRpYWxvZycsXFxuICBhcmdzOiB7XFxuICAgIHZhbHVlOiAnZXZlcnlvbmUnLFxcbiAgfSxcXG4gIGFyZ1R5cGVzOiB7XFxuICAgIHZhbHVlOiB7XFxuICAgICAgb3B0aW9uczogW1xcbiAgICAgICAgVGVtcGxhdGVTZW5kZXJUeXBlcy5DUkVBVE9SLFxcbiAgICAgICAgVGVtcGxhdGVTZW5kZXJUeXBlcy5PUkdBTklaQVRJT05fTUVNQkVSLFxcbiAgICAgICAgVGVtcGxhdGVTZW5kZXJUeXBlcy5PUkdBTklaQVRJT05fTUVNQkVSX0FTX0NSRUFUT1IsXFxuICAgICAgICBUZW1wbGF0ZVNlbmRlclR5cGVzLkVWRVJZT05FLFxcbiAgICAgICAgVGVtcGxhdGVTZW5kZXJUeXBlcy5FVkVSWU9ORV9BU19DUkVBVE9SLFxcbiAgICAgIF0sXFxuICAgICAgbWFwcGluZzoge1xcbiAgICAgICAgW1RlbXBsYXRlU2VuZGVyVHlwZXMuQ1JFQVRPUl06ICdjcmVhdG9yJyxcXG4gICAgICAgIFtUZW1wbGF0ZVNlbmRlclR5cGVzLk9SR0FOSVpBVElPTl9NRU1CRVJdOiAnb3JnYW5pemF0aW9uX21lbWJlcicsXFxuICAgICAgICBbVGVtcGxhdGVTZW5kZXJUeXBlcy5PUkdBTklaQVRJT05fTUVNQkVSX0FTX0NSRUFUT1JdOiAnb3JnYW5pemF0aW9uX21lbWJlcl9hc19jcmVhdG9yJyxcXG4gICAgICAgIFtUZW1wbGF0ZVNlbmRlclR5cGVzLkVWRVJZT05FXTogJ2V2ZXJ5b25lJyxcXG4gICAgICAgIFtUZW1wbGF0ZVNlbmRlclR5cGVzLkVWRVJZT05FX0FTX0NSRUFUT1JdOiAnZXZlcnlvbmVfYXNfY3JlYXRvcicsXFxuICAgICAgfSxcXG4gICAgICBjb250cm9sOiB7XFxuICAgICAgICB0eXBlOiAnc2VsZWN0JyxcXG4gICAgICAgIGxhYmVsczoge1xcbiAgICAgICAgICBbVGVtcGxhdGVTZW5kZXJUeXBlcy5DUkVBVE9SXTogJ2NyZWF0b3InLFxcbiAgICAgICAgICBbVGVtcGxhdGVTZW5kZXJUeXBlcy5PUkdBTklaQVRJT05fTUVNQkVSXTogJ29yZ2FuaXphdGlvbl9tZW1iZXInLFxcbiAgICAgICAgICBbVGVtcGxhdGVTZW5kZXJUeXBlcy5PUkdBTklaQVRJT05fTUVNQkVSX0FTX0NSRUFUT1JdOiAnb3JnYW5pemF0aW9uX21lbWJlcl9hc19jcmVhdG9yJyxcXG4gICAgICAgICAgW1RlbXBsYXRlU2VuZGVyVHlwZXMuRVZFUllPTkVdOiAnZXZlcnlvbmUnLFxcbiAgICAgICAgICBbVGVtcGxhdGVTZW5kZXJUeXBlcy5FVkVSWU9ORV9BU19DUkVBVE9SXTogJ2V2ZXJ5b25lX2FzX2NyZWF0b3InLFxcbiAgICAgICAgfSxcXG4gICAgICB9LFxcbiAgICB9LFxcbiAgICBvbk5leHQ6IHtcXG4gICAgICBhY3Rpb246ICduZXh0JyxcXG4gICAgICB0YWJsZToge2Rpc2FibGU6IHRydWV9LFxcbiAgICB9LFxcbiAgICBvbkNhbmNlbDoge1xcbiAgICAgIGFjdGlvbjogJ2NhbmNlbCcsXFxuICAgICAgdGFibGU6IHtkaXNhYmxlOiB0cnVlfSxcXG4gICAgfSxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBUZW1wbGF0ZVNlbmRlckRpYWxvZyA9ICh7dmFsdWUsIG9uQ2FuY2VsLCBvbk5leHR9KSA9PiBodG1sYDx2ZXJkb2NzLXRlbXBsYXRlLXNlbmRlci1kaWFsb2cgLnZhbHVlPSR7dmFsdWV9IEBjYW5jZWw9JHtvbkNhbmNlbH0gQG5leHQ9JHtvbk5leHR9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiVGVtcGxhdGVTZW5kZXJEaWFsb2dcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM2LFwibGluZVwiOjQ5fSxcImVuZExvY1wiOntcImNvbFwiOjE1OSxcImxpbmVcIjo0OX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNixcImxpbmVcIjo0OX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTU5LFwibGluZVwiOjQ5fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtUZW1wbGF0ZVNlbmRlclR5cGVzfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvVGVtcGxhdGVzL1R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0RpYWxvZ3MvVGVtcGxhdGUgU2VuZGVyIERpYWxvZycsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtdGVtcGxhdGUtc2VuZGVyLWRpYWxvZycsXG4gIGFyZ3M6IHtcbiAgICB2YWx1ZTogJ2V2ZXJ5b25lJyxcbiAgfSxcbiAgYXJnVHlwZXM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgb3B0aW9uczogW1xuICAgICAgICBUZW1wbGF0ZVNlbmRlclR5cGVzLkNSRUFUT1IsXG4gICAgICAgIFRlbXBsYXRlU2VuZGVyVHlwZXMuT1JHQU5JWkFUSU9OX01FTUJFUixcbiAgICAgICAgVGVtcGxhdGVTZW5kZXJUeXBlcy5PUkdBTklaQVRJT05fTUVNQkVSX0FTX0NSRUFUT1IsXG4gICAgICAgIFRlbXBsYXRlU2VuZGVyVHlwZXMuRVZFUllPTkUsXG4gICAgICAgIFRlbXBsYXRlU2VuZGVyVHlwZXMuRVZFUllPTkVfQVNfQ1JFQVRPUixcbiAgICAgIF0sXG4gICAgICBtYXBwaW5nOiB7XG4gICAgICAgIFtUZW1wbGF0ZVNlbmRlclR5cGVzLkNSRUFUT1JdOiAnY3JlYXRvcicsXG4gICAgICAgIFtUZW1wbGF0ZVNlbmRlclR5cGVzLk9SR0FOSVpBVElPTl9NRU1CRVJdOiAnb3JnYW5pemF0aW9uX21lbWJlcicsXG4gICAgICAgIFtUZW1wbGF0ZVNlbmRlclR5cGVzLk9SR0FOSVpBVElPTl9NRU1CRVJfQVNfQ1JFQVRPUl06ICdvcmdhbml6YXRpb25fbWVtYmVyX2FzX2NyZWF0b3InLFxuICAgICAgICBbVGVtcGxhdGVTZW5kZXJUeXBlcy5FVkVSWU9ORV06ICdldmVyeW9uZScsXG4gICAgICAgIFtUZW1wbGF0ZVNlbmRlclR5cGVzLkVWRVJZT05FX0FTX0NSRUFUT1JdOiAnZXZlcnlvbmVfYXNfY3JlYXRvcicsXG4gICAgICB9LFxuICAgICAgY29udHJvbDoge1xuICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgW1RlbXBsYXRlU2VuZGVyVHlwZXMuQ1JFQVRPUl06ICdjcmVhdG9yJyxcbiAgICAgICAgICBbVGVtcGxhdGVTZW5kZXJUeXBlcy5PUkdBTklaQVRJT05fTUVNQkVSXTogJ29yZ2FuaXphdGlvbl9tZW1iZXInLFxuICAgICAgICAgIFtUZW1wbGF0ZVNlbmRlclR5cGVzLk9SR0FOSVpBVElPTl9NRU1CRVJfQVNfQ1JFQVRPUl06ICdvcmdhbml6YXRpb25fbWVtYmVyX2FzX2NyZWF0b3InLFxuICAgICAgICAgIFtUZW1wbGF0ZVNlbmRlclR5cGVzLkVWRVJZT05FXTogJ2V2ZXJ5b25lJyxcbiAgICAgICAgICBbVGVtcGxhdGVTZW5kZXJUeXBlcy5FVkVSWU9ORV9BU19DUkVBVE9SXTogJ2V2ZXJ5b25lX2FzX2NyZWF0b3InLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIG9uTmV4dDoge1xuICAgICAgYWN0aW9uOiAnbmV4dCcsXG4gICAgICB0YWJsZToge2Rpc2FibGU6IHRydWV9LFxuICAgIH0sXG4gICAgb25DYW5jZWw6IHtcbiAgICAgIGFjdGlvbjogJ2NhbmNlbCcsXG4gICAgICB0YWJsZToge2Rpc2FibGU6IHRydWV9LFxuICAgIH0sXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBUZW1wbGF0ZVNlbmRlckRpYWxvZyA9ICh7dmFsdWUsIG9uQ2FuY2VsLCBvbk5leHR9KSA9PiBodG1sYDx2ZXJkb2NzLXRlbXBsYXRlLXNlbmRlci1kaWFsb2cgLnZhbHVlPSR7dmFsdWV9IEBjYW5jZWw9JHtvbkNhbmNlbH0gQG5leHQ9JHtvbk5leHR9IC8+YDtcblxuXG5cblRlbXBsYXRlU2VuZGVyRGlhbG9nLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe3ZhbHVlLCBvbkNhbmNlbCwgb25OZXh0fSkgPT4gaHRtbGA8dmVyZG9jcy10ZW1wbGF0ZS1zZW5kZXItZGlhbG9nIC52YWx1ZT0ke3ZhbHVlfSBAY2FuY2VsPSR7b25DYW5jZWx9IEBuZXh0PSR7b25OZXh0fSAvPmBcIiB9LCAuLi5UZW1wbGF0ZVNlbmRlckRpYWxvZy5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRGlhbG9ncy9VcGxvYWQgRGlhbG9nJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtdXBsb2FkLWRpYWxvZycsXFxuICBhcmdzOiB7XFxuICAgIG9wZW46IHRydWUsXFxuICAgIG1lc3NhZ2U6ICdMb2dpbiBmYWlsZWQuIFBsZWFzZSBjaGVjayB5b3VyIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBhbmQgdHJ5IGFnYWluLicsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHtcXG4gICAgY2xvc2VkOiB7XFxuICAgICAgYWN0aW9uOiAnY2xvc2VkJyxcXG4gICAgICB0YWJsZToge1xcbiAgICAgICAgZGlzYWJsZTogdHJ1ZSxcXG4gICAgICB9LFxcbiAgICB9LFxcbiAgfSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IFVwbG9hZERpYWxvZyA9ICh7bWVzc2FnZSwgb3BlbiwgY2xvc2VkfSkgPT4gaHRtbGA8dmVyZG9jcy11cGxvYWQtZGlhbG9nIC5tZXNzYWdlPSR7bWVzc2FnZX0gLm9wZW49JHtvcGVufSBAY2xvc2VkPSR7Y2xvc2VkfSAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIlVwbG9hZERpYWxvZ1wiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjgsXCJsaW5lXCI6MjF9LFwiZW5kTG9jXCI6e1wiY29sXCI6MTQwLFwibGluZVwiOjIxfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI4LFwibGluZVwiOjIxfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxNDAsXCJsaW5lXCI6MjF9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdEaWFsb2dzL1VwbG9hZCBEaWFsb2cnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXVwbG9hZC1kaWFsb2cnLFxuICBhcmdzOiB7XG4gICAgb3BlbjogdHJ1ZSxcbiAgICBtZXNzYWdlOiAnTG9naW4gZmFpbGVkLiBQbGVhc2UgY2hlY2sgeW91ciB1c2VybmFtZSBhbmQgcGFzc3dvcmQgYW5kIHRyeSBhZ2Fpbi4nLFxuICB9LFxuICBhcmdUeXBlczoge1xuICAgIGNsb3NlZDoge1xuICAgICAgYWN0aW9uOiAnY2xvc2VkJyxcbiAgICAgIHRhYmxlOiB7XG4gICAgICAgIGRpc2FibGU6IHRydWUsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBVcGxvYWREaWFsb2cgPSAoe21lc3NhZ2UsIG9wZW4sIGNsb3NlZH0pID0+IGh0bWxgPHZlcmRvY3MtdXBsb2FkLWRpYWxvZyAubWVzc2FnZT0ke21lc3NhZ2V9IC5vcGVuPSR7b3Blbn0gQGNsb3NlZD0ke2Nsb3NlZH0gLz5gO1xuXG5cblxuVXBsb2FkRGlhbG9nLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe21lc3NhZ2UsIG9wZW4sIGNsb3NlZH0pID0+IGh0bWxgPHZlcmRvY3MtdXBsb2FkLWRpYWxvZyAubWVzc2FnZT0ke21lc3NhZ2V9IC5vcGVuPSR7b3Blbn0gQGNsb3NlZD0ke2Nsb3NlZH0gLz5gXCIgfSwgLi4uVXBsb2FkRGlhbG9nLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdFbGVtZW50cy9Db250YWN0IFBpY2tlcicsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWNvbnRhY3QtcGlja2VyJyxcXG4gIGFyZ3M6IHtcXG4gICAgdGVtcGxhdGVSb2xlOiB7XFxuICAgICAgdGVtcGxhdGVfaWQ6ICc2NWNiYmEwNy1kMGFjLTRiNjItYWZlMy0yNWQxODYyMzg5MzgnLFxcbiAgICAgIG5hbWU6ICdSZWNpcGllbnQgMScsXFxuICAgICAgZnVsbF9uYW1lOiAnJyxcXG4gICAgICBlbWFpbDogJycsXFxuICAgICAgcGhvbmU6ICcnLFxcbiAgICAgIHR5cGU6ICdzaWduZXInLFxcbiAgICAgIHNlcXVlbmNlOiAxLFxcbiAgICAgIG1lc3NhZ2U6ICcnLFxcbiAgICB9LFxcbiAgICBjb250YWN0U3VnZ2VzdGlvbnM6IFtcXG4gICAgICB7bmFtZTogJ01lJywgZW1haWw6ICdteXVzZXJAbm9tYWlsLmNvbScsIHBob25lOiAnMjEyLTU1NS02NjY0J30sXFxuICAgICAge25hbWU6ICdXaWxsIFBvd2VyJywgZW1haWw6ICd3aWxsLnBvd2VyQG5vbWFpbC5jb20nLCBhdmF0YXI6ICdodHRwczovL2kucHJhdmF0YXIuY2MvNDg/aW1nPTU5J30sXFxuICAgICAge25hbWU6ICdQYWlnZSBUdXJuZXInLCBlbWFpbDogJ3BhaWdlLnR1cm5lckBub21haWwuY29tJywgcGhvbmU6ICcyMTItNTU1LTY2NjQnLCBhdmF0YXI6ICdodHRwczovL2kucHJhdmF0YXIuY2MvNDg/aW1nPTQxJ30sXFxuICAgICAge25hbWU6ICdCaWxsIEJvYXJkJywgcGhvbmU6ICcyMTItNTU1LTY2NjQnfSxcXG4gICAgXSxcXG4gIH0sXFxuICBhcmdUeXBlczoge1xcbiAgICBzZWFyY2hDb250YWN0czoge2FjdGlvbjogJ3NlYXJjaENvbnRhY3RzJ30sXFxuICAgIG9uQ2FuY2VsOiB7YWN0aW9uOiAnY2FuY2VsJ30sXFxuICAgIG9uTmV4dDoge2FjdGlvbjogJ25leHQnfSxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBDb250YWN0UGlja2VyID0gKHt0ZW1wbGF0ZVJvbGUsIGNvbnRhY3RTdWdnZXN0aW9ucywgc2VhcmNoQ29udGFjdHMsIG9uQ2FuY2VsLCBvbk5leHR9KSA9PlxcbiAgaHRtbGA8dmVyZG9jcy1jb250YWN0LXBpY2tlciAudGVtcGxhdGVSb2xlPSR7dGVtcGxhdGVSb2xlfSAuY29udGFjdFN1Z2dlc3Rpb25zPSR7Y29udGFjdFN1Z2dlc3Rpb25zfSBAc2VhcmNoQ29udGFjdHM9JHtzZWFyY2hDb250YWN0c30gQGNhbmNlbD0ke29uQ2FuY2VsfSBAbmV4dD0ke29uTmV4dH0gLz5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJDb250YWN0UGlja2VyXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyOSxcImxpbmVcIjozMn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxNzYsXCJsaW5lXCI6MzN9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjksXCJsaW5lXCI6MzJ9LFwiZW5kQm9keVwiOntcImNvbFwiOjE3NixcImxpbmVcIjozM319fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0VsZW1lbnRzL0NvbnRhY3QgUGlja2VyJyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1jb250YWN0LXBpY2tlcicsXG4gIGFyZ3M6IHtcbiAgICB0ZW1wbGF0ZVJvbGU6IHtcbiAgICAgIHRlbXBsYXRlX2lkOiAnNjVjYmJhMDctZDBhYy00YjYyLWFmZTMtMjVkMTg2MjM4OTM4JyxcbiAgICAgIG5hbWU6ICdSZWNpcGllbnQgMScsXG4gICAgICBmdWxsX25hbWU6ICcnLFxuICAgICAgZW1haWw6ICcnLFxuICAgICAgcGhvbmU6ICcnLFxuICAgICAgdHlwZTogJ3NpZ25lcicsXG4gICAgICBzZXF1ZW5jZTogMSxcbiAgICAgIG1lc3NhZ2U6ICcnLFxuICAgIH0sXG4gICAgY29udGFjdFN1Z2dlc3Rpb25zOiBbXG4gICAgICB7bmFtZTogJ01lJywgZW1haWw6ICdteXVzZXJAbm9tYWlsLmNvbScsIHBob25lOiAnMjEyLTU1NS02NjY0J30sXG4gICAgICB7bmFtZTogJ1dpbGwgUG93ZXInLCBlbWFpbDogJ3dpbGwucG93ZXJAbm9tYWlsLmNvbScsIGF2YXRhcjogJ2h0dHBzOi8vaS5wcmF2YXRhci5jYy80OD9pbWc9NTknfSxcbiAgICAgIHtuYW1lOiAnUGFpZ2UgVHVybmVyJywgZW1haWw6ICdwYWlnZS50dXJuZXJAbm9tYWlsLmNvbScsIHBob25lOiAnMjEyLTU1NS02NjY0JywgYXZhdGFyOiAnaHR0cHM6Ly9pLnByYXZhdGFyLmNjLzQ4P2ltZz00MSd9LFxuICAgICAge25hbWU6ICdCaWxsIEJvYXJkJywgcGhvbmU6ICcyMTItNTU1LTY2NjQnfSxcbiAgICBdLFxuICB9LFxuICBhcmdUeXBlczoge1xuICAgIHNlYXJjaENvbnRhY3RzOiB7YWN0aW9uOiAnc2VhcmNoQ29udGFjdHMnfSxcbiAgICBvbkNhbmNlbDoge2FjdGlvbjogJ2NhbmNlbCd9LFxuICAgIG9uTmV4dDoge2FjdGlvbjogJ25leHQnfSxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IENvbnRhY3RQaWNrZXIgPSAoe3RlbXBsYXRlUm9sZSwgY29udGFjdFN1Z2dlc3Rpb25zLCBzZWFyY2hDb250YWN0cywgb25DYW5jZWwsIG9uTmV4dH0pID0+XG4gIGh0bWxgPHZlcmRvY3MtY29udGFjdC1waWNrZXIgLnRlbXBsYXRlUm9sZT0ke3RlbXBsYXRlUm9sZX0gLmNvbnRhY3RTdWdnZXN0aW9ucz0ke2NvbnRhY3RTdWdnZXN0aW9uc30gQHNlYXJjaENvbnRhY3RzPSR7c2VhcmNoQ29udGFjdHN9IEBjYW5jZWw9JHtvbkNhbmNlbH0gQG5leHQ9JHtvbk5leHR9IC8+YDtcblxuXG5cbkNvbnRhY3RQaWNrZXIucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7dGVtcGxhdGVSb2xlLCBjb250YWN0U3VnZ2VzdGlvbnMsIHNlYXJjaENvbnRhY3RzLCBvbkNhbmNlbCwgb25OZXh0fSkgPT5cXG4gIGh0bWxgPHZlcmRvY3MtY29udGFjdC1waWNrZXIgLnRlbXBsYXRlUm9sZT0ke3RlbXBsYXRlUm9sZX0gLmNvbnRhY3RTdWdnZXN0aW9ucz0ke2NvbnRhY3RTdWdnZXN0aW9uc30gQHNlYXJjaENvbnRhY3RzPSR7c2VhcmNoQ29udGFjdHN9IEBjYW5jZWw9JHtvbkNhbmNlbH0gQG5leHQ9JHtvbk5leHR9IC8+YFwiIH0sIC4uLkNvbnRhY3RQaWNrZXIucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0ZpZWxkcy9BdHRhY2htZW50JyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtZmllbGQtYXR0YWNobWVudCcsXFxuICBhcmdzOiB7XFxuICAgIGZpZWxkOiB7XFxuICAgICAgeDogMCxcXG4gICAgICB5OiAwLFxcbiAgICB9LFxcbiAgICBkaXNhYmxlZDogZmFsc2UsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHt9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgQXR0YWNobWVudCA9ICh7ZmllbGQsIGRpc2FibGVkfSkgPT4gaHRtbGA8dmVyZG9jcy1maWVsZC1hdHRhY2htZW50IC5maWVsZD0ke2ZpZWxkfSAuZGlzYWJsZWQ9JHtkaXNhYmxlZH0gLz5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJBdHRhY2htZW50XCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNixcImxpbmVcIjoxN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxMjEsXCJsaW5lXCI6MTd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjYsXCJsaW5lXCI6MTd9LFwiZW5kQm9keVwiOntcImNvbFwiOjEyMSxcImxpbmVcIjoxN319fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0ZpZWxkcy9BdHRhY2htZW50JyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1maWVsZC1hdHRhY2htZW50JyxcbiAgYXJnczoge1xuICAgIGZpZWxkOiB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICB9LFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgfSxcbiAgYXJnVHlwZXM6IHt9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgQXR0YWNobWVudCA9ICh7ZmllbGQsIGRpc2FibGVkfSkgPT4gaHRtbGA8dmVyZG9jcy1maWVsZC1hdHRhY2htZW50IC5maWVsZD0ke2ZpZWxkfSAuZGlzYWJsZWQ9JHtkaXNhYmxlZH0gLz5gO1xuXG5cblxuQXR0YWNobWVudC5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHtmaWVsZCwgZGlzYWJsZWR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLWF0dGFjaG1lbnQgLmZpZWxkPSR7ZmllbGR9IC5kaXNhYmxlZD0ke2Rpc2FibGVkfSAvPmBcIiB9LCAuLi5BdHRhY2htZW50LnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdGaWVsZHMvQ2hlY2tib3gnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1maWVsZC1jaGVja2JveCcsXFxuICBhcmdzOiB7XFxuICAgIGZpZWxkOiB7XFxuICAgICAgc2V0dGluZ3M6IHtcXG4gICAgICAgIHg6IDAsXFxuICAgICAgICB5OiAwLFxcbiAgICAgIH0sXFxuICAgIH0sXFxuICAgIG9wdGlvbjogMCxcXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxcbiAgfSxcXG4gIGFyZ1R5cGVzOiB7fSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IENoZWNrYm94ID0gKHtmaWVsZCwgb3B0aW9uLCBkaXNhYmxlZH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtY2hlY2tib3ggLmZpZWxkPSR7ZmllbGR9IC5vcHRpb249JHtvcHRpb259IC5kaXNhYmxlZD0ke2Rpc2FibGVkfSAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIkNoZWNrYm94XCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNCxcImxpbmVcIjoyMH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxNDMsXCJsaW5lXCI6MjB9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjQsXCJsaW5lXCI6MjB9LFwiZW5kQm9keVwiOntcImNvbFwiOjE0MyxcImxpbmVcIjoyMH19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0ZpZWxkcy9DaGVja2JveCcsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtZmllbGQtY2hlY2tib3gnLFxuICBhcmdzOiB7XG4gICAgZmllbGQ6IHtcbiAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICB9LFxuICAgIH0sXG4gICAgb3B0aW9uOiAwLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgfSxcbiAgYXJnVHlwZXM6IHt9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgQ2hlY2tib3ggPSAoe2ZpZWxkLCBvcHRpb24sIGRpc2FibGVkfSkgPT4gaHRtbGA8dmVyZG9jcy1maWVsZC1jaGVja2JveCAuZmllbGQ9JHtmaWVsZH0gLm9wdGlvbj0ke29wdGlvbn0gLmRpc2FibGVkPSR7ZGlzYWJsZWR9IC8+YDtcblxuXG5cbkNoZWNrYm94LnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe2ZpZWxkLCBvcHRpb24sIGRpc2FibGVkfSkgPT4gaHRtbGA8dmVyZG9jcy1maWVsZC1jaGVja2JveCAuZmllbGQ9JHtmaWVsZH0gLm9wdGlvbj0ke29wdGlvbn0gLmRpc2FibGVkPSR7ZGlzYWJsZWR9IC8+YFwiIH0sIC4uLkNoZWNrYm94LnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdGaWVsZHMvRGF0ZScsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLWRhdGUnLFxcbiAgYXJnczoge1xcbiAgICBmaWVsZDoge1xcbiAgICAgIHNldHRpbmdzOiB7XFxuICAgICAgICB4OiAwLFxcbiAgICAgICAgeTogMCxcXG4gICAgICB9LFxcbiAgICB9LFxcbiAgICBkaXNhYmxlZDogZmFsc2UsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHt9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgRGF0ZSA9ICh7ZmllbGQsIGRpc2FibGVkfSkgPT4gaHRtbGA8dmVyZG9jcy1maWVsZC1kYXRlIC5maWVsZD1cXFwiJHtmaWVsZH0uZGlzYWJsZWRcXFwiID0ke2Rpc2FibGVkfSAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIkRhdGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjIwLFwibGluZVwiOjE5fSxcImVuZExvY1wiOntcImNvbFwiOjExMSxcImxpbmVcIjoxOX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMCxcImxpbmVcIjoxOX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTExLFwibGluZVwiOjE5fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnRmllbGRzL0RhdGUnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLWRhdGUnLFxuICBhcmdzOiB7XG4gICAgZmllbGQ6IHtcbiAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICB9LFxuICAgIH0sXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICB9LFxuICBhcmdUeXBlczoge30sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBEYXRlID0gKHtmaWVsZCwgZGlzYWJsZWR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLWRhdGUgLmZpZWxkPVwiJHtmaWVsZH0uZGlzYWJsZWRcIiA9JHtkaXNhYmxlZH0gLz5gO1xuXG5cblxuRGF0ZS5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHtmaWVsZCwgZGlzYWJsZWR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLWRhdGUgLmZpZWxkPVxcXCIke2ZpZWxkfS5kaXNhYmxlZFxcXCIgPSR7ZGlzYWJsZWR9IC8+YFwiIH0sIC4uLkRhdGUucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0ZpZWxkcy9Ecm9wZG93bicsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLWRyb3Bkb3duJyxcXG4gIGFyZ3M6IHtcXG4gICAgZmllbGQ6IHtcXG4gICAgICBzZXR0aW5nczoge1xcbiAgICAgICAgeDogMCxcXG4gICAgICAgIHk6IDAsXFxuICAgICAgICBvcHRpb25zOiBbe2lkOiAnaWQxJywgdmFsdWU6ICdPcHRpb24gMSd9XSxcXG4gICAgICB9LFxcbiAgICB9LFxcbiAgfSxcXG4gIGFyZ1R5cGVzOiB7fSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IERyb3Bkb3duID0gKHtmaWVsZH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtZHJvcGRvd24gLmZpZWxkPSR7ZmllbGR9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiRHJvcGRvd25cIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI0LFwibGluZVwiOjE5fSxcImVuZExvY1wiOntcImNvbFwiOjg1LFwibGluZVwiOjE5fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI0LFwibGluZVwiOjE5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjo4NSxcImxpbmVcIjoxOX19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0ZpZWxkcy9Ecm9wZG93bicsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtZmllbGQtZHJvcGRvd24nLFxuICBhcmdzOiB7XG4gICAgZmllbGQ6IHtcbiAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIG9wdGlvbnM6IFt7aWQ6ICdpZDEnLCB2YWx1ZTogJ09wdGlvbiAxJ31dLFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICBhcmdUeXBlczoge30sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93biA9ICh7ZmllbGR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLWRyb3Bkb3duIC5maWVsZD0ke2ZpZWxkfSAvPmA7XG5cblxuXG5Ecm9wZG93bi5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHtmaWVsZH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtZHJvcGRvd24gLmZpZWxkPSR7ZmllbGR9IC8+YFwiIH0sIC4uLkRyb3Bkb3duLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdGaWVsZHMvSW5pdGlhbCcsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLWluaXRpYWwnLFxcbiAgYXJnczoge1xcbiAgICBpbml0aWFsczogJ1BUJyxcXG4gICAgZmllbGQ6IHtcXG4gICAgICBzZXR0aW5nczoge1xcbiAgICAgICAgeDogMCxcXG4gICAgICAgIHk6IDAsXFxuICAgICAgfSxcXG4gICAgfSxcXG4gIH0sXFxuICBhcmdUeXBlczoge30sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBJbml0aWFsID0gKHtpbml0aWFscywgZmllbGR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLWluaXRpYWwgLmZpZWxkPSR7ZmllbGR9IC5pbml0aWFscz0ke2luaXRpYWxzfSAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIkluaXRpYWxcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjIzLFwibGluZVwiOjE5fSxcImVuZExvY1wiOntcImNvbFwiOjExNSxcImxpbmVcIjoxOX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMyxcImxpbmVcIjoxOX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTE1LFwibGluZVwiOjE5fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnRmllbGRzL0luaXRpYWwnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLWluaXRpYWwnLFxuICBhcmdzOiB7XG4gICAgaW5pdGlhbHM6ICdQVCcsXG4gICAgZmllbGQ6IHtcbiAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG4gIGFyZ1R5cGVzOiB7fSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IEluaXRpYWwgPSAoe2luaXRpYWxzLCBmaWVsZH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtaW5pdGlhbCAuZmllbGQ9JHtmaWVsZH0gLmluaXRpYWxzPSR7aW5pdGlhbHN9IC8+YDtcblxuXG5cbkluaXRpYWwucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7aW5pdGlhbHMsIGZpZWxkfSkgPT4gaHRtbGA8dmVyZG9jcy1maWVsZC1pbml0aWFsIC5maWVsZD0ke2ZpZWxkfSAuaW5pdGlhbHM9JHtpbml0aWFsc30gLz5gXCIgfSwgLi4uSW5pdGlhbC5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRmllbGRzL1BheW1lbnQnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1maWVsZC1wYXltZW50JyxcXG4gIGFyZ3M6IHtcXG4gICAgZmllbGQ6IHtcXG4gICAgICBzZXR0aW5nczoge1xcbiAgICAgICAgeDogMCxcXG4gICAgICAgIHk6IDAsXFxuICAgICAgfSxcXG4gICAgfSxcXG4gIH0sXFxuICBhcmdUeXBlczoge30sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBQYXltZW50ID0gKHtmaWVsZH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtcGF5bWVudCAuZmllbGQ9JHtmaWVsZH0gLz5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJQYXltZW50XCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyMyxcImxpbmVcIjoxOH0sXCJlbmRMb2NcIjp7XCJjb2xcIjo4MyxcImxpbmVcIjoxOH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMyxcImxpbmVcIjoxOH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6ODMsXCJsaW5lXCI6MTh9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdGaWVsZHMvUGF5bWVudCcsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtZmllbGQtcGF5bWVudCcsXG4gIGFyZ3M6IHtcbiAgICBmaWVsZDoge1xuICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbiAgYXJnVHlwZXM6IHt9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgUGF5bWVudCA9ICh7ZmllbGR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLXBheW1lbnQgLmZpZWxkPSR7ZmllbGR9IC8+YDtcblxuXG5cblBheW1lbnQucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7ZmllbGR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLXBheW1lbnQgLmZpZWxkPSR7ZmllbGR9IC8+YFwiIH0sIC4uLlBheW1lbnQucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0ZpZWxkcy9SYWRpbyBCdXR0b24nLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1maWVsZC1yYWRpby1idXR0b24nLFxcbiAgYXJnczoge1xcbiAgICBmaWVsZDoge1xcbiAgICAgIHNldHRpbmdzOiB7XFxuICAgICAgICB4OiAwLFxcbiAgICAgICAgeTogMCxcXG4gICAgICAgIGNoZWNrZWQ6IGZhbHNlLFxcbiAgICAgICAgbmFtZTogJ3JhZGlvLTEnLFxcbiAgICAgIH0sXFxuICAgIH0sXFxuICB9LFxcbiAgYXJnVHlwZXM6IHt9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgUmFkaW9CdXR0b24gPSAoe2ZpZWxkfSkgPT4gaHRtbGA8dmVyZG9jcy1maWVsZC1yYWRpby1idXR0b24gLmZpZWxkPSR7ZmllbGR9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiUmFkaW9CdXR0b25cIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI3LFwibGluZVwiOjIwfSxcImVuZExvY1wiOntcImNvbFwiOjkyLFwibGluZVwiOjIwfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI3LFwibGluZVwiOjIwfSxcImVuZEJvZHlcIjp7XCJjb2xcIjo5MixcImxpbmVcIjoyMH19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0ZpZWxkcy9SYWRpbyBCdXR0b24nLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLXJhZGlvLWJ1dHRvbicsXG4gIGFyZ3M6IHtcbiAgICBmaWVsZDoge1xuICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgY2hlY2tlZDogZmFsc2UsXG4gICAgICAgIG5hbWU6ICdyYWRpby0xJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbiAgYXJnVHlwZXM6IHt9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgUmFkaW9CdXR0b24gPSAoe2ZpZWxkfSkgPT4gaHRtbGA8dmVyZG9jcy1maWVsZC1yYWRpby1idXR0b24gLmZpZWxkPSR7ZmllbGR9IC8+YDtcblxuXG5cblJhZGlvQnV0dG9uLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe2ZpZWxkfSkgPT4gaHRtbGA8dmVyZG9jcy1maWVsZC1yYWRpby1idXR0b24gLmZpZWxkPSR7ZmllbGR9IC8+YFwiIH0sIC4uLlJhZGlvQnV0dG9uLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdGaWVsZHMvU2lnbmF0dXJlJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtZmllbGQtc2lnbmF0dXJlJyxcXG4gIGFyZ3M6IHtcXG4gICAgbmFtZTogJ1BhaWdlIFR1cm5lcicsXFxuICAgIGZpZWxkOiB7XFxuICAgICAgc2V0dGluZ3M6IHtcXG4gICAgICAgIHg6IDAsXFxuICAgICAgICB5OiAwLFxcbiAgICAgIH0sXFxuICAgIH0sXFxuICB9LFxcbiAgYXJnVHlwZXM6IHt9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgU2lnbmF0dXJlID0gKHtuYW1lLCBmaWVsZH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtc2lnbmF0dXJlIC5uYW1lPSR7bmFtZX0gLmZpZWxkPSR7ZmllbGR9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiU2lnbmF0dXJlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNSxcImxpbmVcIjoxOX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxMDcsXCJsaW5lXCI6MTl9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjUsXCJsaW5lXCI6MTl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEwNyxcImxpbmVcIjoxOX19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0ZpZWxkcy9TaWduYXR1cmUnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLXNpZ25hdHVyZScsXG4gIGFyZ3M6IHtcbiAgICBuYW1lOiAnUGFpZ2UgVHVybmVyJyxcbiAgICBmaWVsZDoge1xuICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbiAgYXJnVHlwZXM6IHt9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgU2lnbmF0dXJlID0gKHtuYW1lLCBmaWVsZH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtc2lnbmF0dXJlIC5uYW1lPSR7bmFtZX0gLmZpZWxkPSR7ZmllbGR9IC8+YDtcblxuXG5cblNpZ25hdHVyZS5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHtuYW1lLCBmaWVsZH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtc2lnbmF0dXJlIC5uYW1lPSR7bmFtZX0gLmZpZWxkPSR7ZmllbGR9IC8+YFwiIH0sIC4uLlNpZ25hdHVyZS5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRmllbGRzL1RleHRhcmVhJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtZmllbGQtdGV4dGFyZWEnLFxcbiAgYXJnczoge1xcbiAgICBmaWVsZDoge1xcbiAgICAgIHNldHRpbmdzOiB7XFxuICAgICAgICBwbGFjZWhvbGRlcjogJ0VtYWlsIGFkZHJlc3MuLi4nLFxcbiAgICAgICAgeDogMCxcXG4gICAgICAgIHk6IDAsXFxuICAgICAgfSxcXG4gICAgfSxcXG4gIH0sXFxuICBhcmdUeXBlczoge30sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBUZXh0YXJlYSA9ICh7ZmllbGR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLXRleHRhcmVhIC5maWVsZD0ke2ZpZWxkfSAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIlRleHRhcmVhXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNCxcImxpbmVcIjoxOX0sXCJlbmRMb2NcIjp7XCJjb2xcIjo4NSxcImxpbmVcIjoxOX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNCxcImxpbmVcIjoxOX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6ODUsXCJsaW5lXCI6MTl9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdGaWVsZHMvVGV4dGFyZWEnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLXRleHRhcmVhJyxcbiAgYXJnczoge1xuICAgIGZpZWxkOiB7XG4gICAgICBzZXR0aW5nczoge1xuICAgICAgICBwbGFjZWhvbGRlcjogJ0VtYWlsIGFkZHJlc3MuLi4nLFxuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICBhcmdUeXBlczoge30sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBUZXh0YXJlYSA9ICh7ZmllbGR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLXRleHRhcmVhIC5maWVsZD0ke2ZpZWxkfSAvPmA7XG5cblxuXG5UZXh0YXJlYS5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHtmaWVsZH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtdGV4dGFyZWEgLmZpZWxkPSR7ZmllbGR9IC8+YFwiIH0sIC4uLlRleHRhcmVhLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdGaWVsZHMvVGV4dGJveCcsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLXRleHRib3gnLFxcbiAgYXJnczoge1xcbiAgICBmaWVsZDoge1xcbiAgICAgIHNldHRpbmdzOiB7XFxuICAgICAgICB4OiAwLFxcbiAgICAgICAgeTogMCxcXG4gICAgICB9LFxcbiAgICB9LFxcbiAgICBkaXNhYmxlZDogZmFsc2UsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHtcXG4gICAgaW5wdXQ6IHtcXG4gICAgICBhY3Rpb246ICdpbnB1dCcsXFxuICAgICAgZGVzY3JpcHRpb246ICdGaXJlZCBmb3IgZWFjaCBjaGFyYWN0ZXIgZW50ZXJlZCBpbiB0aGUgZmllbGQuIGUudGFyZ2V0LnZhbHVlIHdpbGwgY29udGFpbiB0aGUgY3VycmVudCB0ZXh0IHZhbHVlLicsXFxuICAgIH0sXFxuICB9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgVGV4dGJveCA9ICh7ZmllbGQsIGRpc2FibGVkLCBpbnB1dH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtdGV4dGJveCAuZmllbGQ9JHtmaWVsZH0gLmRpc2FibGVkPSR7ZGlzYWJsZWR9IEBpbnB1dD0ke2lucHV0fSAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIlRleHRib3hcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjIzLFwibGluZVwiOjI0fSxcImVuZExvY1wiOntcImNvbFwiOjEzOCxcImxpbmVcIjoyNH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMyxcImxpbmVcIjoyNH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTM4LFwibGluZVwiOjI0fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnRmllbGRzL1RleHRib3gnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLXRleHRib3gnLFxuICBhcmdzOiB7XG4gICAgZmllbGQ6IHtcbiAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICB9LFxuICAgIH0sXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICB9LFxuICBhcmdUeXBlczoge1xuICAgIGlucHV0OiB7XG4gICAgICBhY3Rpb246ICdpbnB1dCcsXG4gICAgICBkZXNjcmlwdGlvbjogJ0ZpcmVkIGZvciBlYWNoIGNoYXJhY3RlciBlbnRlcmVkIGluIHRoZSBmaWVsZC4gZS50YXJnZXQudmFsdWUgd2lsbCBjb250YWluIHRoZSBjdXJyZW50IHRleHQgdmFsdWUuJyxcbiAgICB9LFxuICB9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgVGV4dGJveCA9ICh7ZmllbGQsIGRpc2FibGVkLCBpbnB1dH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtdGV4dGJveCAuZmllbGQ9JHtmaWVsZH0gLmRpc2FibGVkPSR7ZGlzYWJsZWR9IEBpbnB1dD0ke2lucHV0fSAvPmA7XG5cblxuXG5UZXh0Ym94LnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe2ZpZWxkLCBkaXNhYmxlZCwgaW5wdXR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLXRleHRib3ggLmZpZWxkPSR7ZmllbGR9IC5kaXNhYmxlZD0ke2Rpc2FibGVkfSBAaW5wdXQ9JHtpbnB1dH0gLz5gXCIgfSwgLi4uVGV4dGJveC5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRmllbGRzL1RpbWVzdGFtcCcsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLWZpZWxkLXRpbWVzdGFtcCcsXFxuICBhcmdzOiB7XFxuICAgIGZpZWxkOiB7XFxuICAgICAgbmFtZTogJ3RpbWVzdGFtcFAxLTgnLFxcbiAgICAgIHJlY2lwaWVudF9yb2xlOiAnUmVjaXBpZW50IDInLFxcbiAgICAgIGVudmVsb3BlX2lkOiAnOTZjY2MyZTktMWJiOC00YmU4LTlkYmQtNzExMzEwNzM4M2VlJyxcXG4gICAgICBwYWdlOiAxLFxcbiAgICAgIHR5cGU6ICd0aW1lc3RhbXAnLFxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxcbiAgICAgIHNldHRpbmdzOiB7XFxuICAgICAgICB4OiA0MjYuOTk5OTk5OTk5OTk5OTQsXFxuICAgICAgICB5OiA0OTMuMjUsXFxuICAgICAgICB3aWR0aDogNjQsXFxuICAgICAgICBoZWlnaHQ6IDE1LFxcbiAgICAgIH0sXFxuICAgICAgdmFsaWRhdG9yOiBudWxsLFxcbiAgICAgIGxhYmVsOiBudWxsLFxcbiAgICAgIHByZXBhcmVkOiBmYWxzZSxcXG4gICAgICByZWNpcGllbnRzOiBbXSxcXG4gICAgfSxcXG4gIH0sXFxuICBhcmdUeXBlczoge30sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBUaW1lc3RhbXAgPSAoe2ZpZWxkfSkgPT4gaHRtbGA8dmVyZG9jcy1maWVsZC10aW1lc3RhbXAgLmZpZWxkPSR7ZmllbGR9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiVGltZXN0YW1wXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNSxcImxpbmVcIjozMH0sXCJlbmRMb2NcIjp7XCJjb2xcIjo4NyxcImxpbmVcIjozMH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNSxcImxpbmVcIjozMH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6ODcsXCJsaW5lXCI6MzB9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdGaWVsZHMvVGltZXN0YW1wJyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1maWVsZC10aW1lc3RhbXAnLFxuICBhcmdzOiB7XG4gICAgZmllbGQ6IHtcbiAgICAgIG5hbWU6ICd0aW1lc3RhbXBQMS04JyxcbiAgICAgIHJlY2lwaWVudF9yb2xlOiAnUmVjaXBpZW50IDInLFxuICAgICAgZW52ZWxvcGVfaWQ6ICc5NmNjYzJlOS0xYmI4LTRiZTgtOWRiZC03MTEzMTA3MzgzZWUnLFxuICAgICAgcGFnZTogMSxcbiAgICAgIHR5cGU6ICd0aW1lc3RhbXAnLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBzZXR0aW5nczoge1xuICAgICAgICB4OiA0MjYuOTk5OTk5OTk5OTk5OTQsXG4gICAgICAgIHk6IDQ5My4yNSxcbiAgICAgICAgd2lkdGg6IDY0LFxuICAgICAgICBoZWlnaHQ6IDE1LFxuICAgICAgfSxcbiAgICAgIHZhbGlkYXRvcjogbnVsbCxcbiAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgcHJlcGFyZWQ6IGZhbHNlLFxuICAgICAgcmVjaXBpZW50czogW10sXG4gICAgfSxcbiAgfSxcbiAgYXJnVHlwZXM6IHt9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgVGltZXN0YW1wID0gKHtmaWVsZH0pID0+IGh0bWxgPHZlcmRvY3MtZmllbGQtdGltZXN0YW1wIC5maWVsZD0ke2ZpZWxkfSAvPmA7XG5cblxuXG5UaW1lc3RhbXAucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7ZmllbGR9KSA9PiBodG1sYDx2ZXJkb2NzLWZpZWxkLXRpbWVzdGFtcCAuZmllbGQ9JHtmaWVsZH0gLz5gXCIgfSwgLi4uVGltZXN0YW1wLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdTZWFyY2gvUXVpY2sgRnVuY3Rpb25zJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtcXVpY2stZnVuY3Rpb25zJyxcXG4gIGFyZ3M6IHtcXG4gICAgb3B0aW9uczoge1xcbiAgICAgIHRpdGxlOiAnUXVpY2sgQ3JlYXRlJyxcXG4gICAgfSxcXG4gIH0sXFxuICBhcmdUeXBlczoge1xcbiAgICBjcmVhdGVUZW1wbGF0ZToge2FjdGlvbjogJ2NyZWF0ZVRlbXBsYXRlJ30sXFxuICAgIGNyZWF0ZURvY3VtZW50OiB7YWN0aW9uOiAnY3JlYXRlRG9jdW1lbnQnfSxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBRdWlja0Z1bmN0aW9ucyA9ICh7b3B0aW9ucywgY3JlYXRlVGVtcGxhdGUsIGNyZWF0ZURvY3VtZW50fSkgPT5cXG4gIGh0bWxgPHZlcmRvY3MtcXVpY2stZnVuY3Rpb25zIC5vcHRpb25zPSR7b3B0aW9uc30gQGNyZWF0ZVRlbXBsYXRlPSR7Y3JlYXRlVGVtcGxhdGV9IEBjcmVhdGVEb2N1bWVudD0ke2NyZWF0ZURvY3VtZW50fSB0YWxsIC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiUXVpY2tGdW5jdGlvbnNcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMwLFwibGluZVwiOjE4fSxcImVuZExvY1wiOntcImNvbFwiOjEyOCxcImxpbmVcIjoxOX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjoxOH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTI4LFwibGluZVwiOjE5fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnU2VhcmNoL1F1aWNrIEZ1bmN0aW9ucycsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtcXVpY2stZnVuY3Rpb25zJyxcbiAgYXJnczoge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHRpdGxlOiAnUXVpY2sgQ3JlYXRlJyxcbiAgICB9LFxuICB9LFxuICBhcmdUeXBlczoge1xuICAgIGNyZWF0ZVRlbXBsYXRlOiB7YWN0aW9uOiAnY3JlYXRlVGVtcGxhdGUnfSxcbiAgICBjcmVhdGVEb2N1bWVudDoge2FjdGlvbjogJ2NyZWF0ZURvY3VtZW50J30sXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBRdWlja0Z1bmN0aW9ucyA9ICh7b3B0aW9ucywgY3JlYXRlVGVtcGxhdGUsIGNyZWF0ZURvY3VtZW50fSkgPT5cbiAgaHRtbGA8dmVyZG9jcy1xdWljay1mdW5jdGlvbnMgLm9wdGlvbnM9JHtvcHRpb25zfSBAY3JlYXRlVGVtcGxhdGU9JHtjcmVhdGVUZW1wbGF0ZX0gQGNyZWF0ZURvY3VtZW50PSR7Y3JlYXRlRG9jdW1lbnR9IHRhbGwgLz5gO1xuXG5cblxuUXVpY2tGdW5jdGlvbnMucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7b3B0aW9ucywgY3JlYXRlVGVtcGxhdGUsIGNyZWF0ZURvY3VtZW50fSkgPT5cXG4gIGh0bWxgPHZlcmRvY3MtcXVpY2stZnVuY3Rpb25zIC5vcHRpb25zPSR7b3B0aW9uc30gQGNyZWF0ZVRlbXBsYXRlPSR7Y3JlYXRlVGVtcGxhdGV9IEBjcmVhdGVEb2N1bWVudD0ke2NyZWF0ZURvY3VtZW50fSB0YWxsIC8+YFwiIH0sIC4uLlF1aWNrRnVuY3Rpb25zLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuLyoqXFxuICogRGlzcGxheSBhIGxpc3Qgb2Ygc3RhcnJlZCBpdGVtcyAoZmF2b3JpdGUgdGVtcGxhdGVzKS5cXG4gKi9cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ1NlYXJjaC9TZWFyY2ggQWN0aXZpdHknLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1zZWFyY2gtYWN0aXZpdHknLFxcbiAgYXJnczoge30sXFxuICBhcmdUeXBlczoge1xcbiAgICB0eXBlOiB7ZGVmYXVsdFZhbHVlOiAncmVjZW50J30sXFxuICAgIGVudHJ5U2VsZWN0ZWQ6IHthY3Rpb246ICdlbnRyeVNlbGVjdGVkJ30sXFxuICB9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgU2VhcmNoQWN0aXZpdHkgPSAoe3R5cGUsIGVudHJ5U2VsZWN0ZWR9KSA9PiBodG1sYDx2ZXJkb2NzLXNlYXJjaC1hY3Rpdml0eSAudHlwZT0ke3R5cGV9IEBlbnRyeVNlbGVjdGVkPSR7ZW50cnlTZWxlY3RlZH0gdGFsbCAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIlNlYXJjaEFjdGl2aXR5XCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMCxcImxpbmVcIjoxN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxNDEsXCJsaW5lXCI6MTd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MTd9LFwiZW5kQm9keVwiOntcImNvbFwiOjE0MSxcImxpbmVcIjoxN319fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuLyoqXG4gKiBEaXNwbGF5IGEgbGlzdCBvZiBzdGFycmVkIGl0ZW1zIChmYXZvcml0ZSB0ZW1wbGF0ZXMpLlxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnU2VhcmNoL1NlYXJjaCBBY3Rpdml0eScsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3Mtc2VhcmNoLWFjdGl2aXR5JyxcbiAgYXJnczoge30sXG4gIGFyZ1R5cGVzOiB7XG4gICAgdHlwZToge2RlZmF1bHRWYWx1ZTogJ3JlY2VudCd9LFxuICAgIGVudHJ5U2VsZWN0ZWQ6IHthY3Rpb246ICdlbnRyeVNlbGVjdGVkJ30sXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBTZWFyY2hBY3Rpdml0eSA9ICh7dHlwZSwgZW50cnlTZWxlY3RlZH0pID0+IGh0bWxgPHZlcmRvY3Mtc2VhcmNoLWFjdGl2aXR5IC50eXBlPSR7dHlwZX0gQGVudHJ5U2VsZWN0ZWQ9JHtlbnRyeVNlbGVjdGVkfSB0YWxsIC8+YDtcblxuXG5cblNlYXJjaEFjdGl2aXR5LnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe3R5cGUsIGVudHJ5U2VsZWN0ZWR9KSA9PiBodG1sYDx2ZXJkb2NzLXNlYXJjaC1hY3Rpdml0eSAudHlwZT0ke3R5cGV9IEBlbnRyeVNlbGVjdGVkPSR7ZW50cnlTZWxlY3RlZH0gdGFsbCAvPmBcIiB9LCAuLi5TZWFyY2hBY3Rpdml0eS5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnU2VhcmNoL1NlYXJjaCBCb3gnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1zZWFyY2gtYm94JyxcXG4gIGFyZ3M6IHtcXG4gICAgdHlwZTogJ2FsbCcsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHtcXG4gICAgc2VhcmNoQ2xpY2tlZDoge2FjdGlvbjogJ3NlYXJjaENsaWNrZWQnfSxcXG4gICAgdHlwZUNoYW5nZWQ6IHthY3Rpb246ICd0eXBlQ2hhbmdlZCd9LFxcbiAgICBxdWVyeUNoYW5nZWQ6IHthY3Rpb246ICdxdWVyeUNoYW5nZWQnfSxcXG4gICAgdHlwZToge3R5cGU6ICdzdHJpbmcnLCBjb250cm9sOiAncmFkaW8nLCBvcHRpb25zOiBbJ2FsbCcsICdkb2N1bWVudCcsICd0ZW1wbGF0ZScsICdvcmdhbml6YXRpb24nXX0sXFxuICB9LFxcbiAgcGFyYW1ldGVyczoge1xcbiAgICBsYXlvdXQ6ICdmdWxsc2NyZWVuJyxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBTZWFyY2hCb3ggPSAoe3R5cGUsIHNlYXJjaENsaWNrZWQsIHR5cGVDaGFuZ2VkLCBxdWVyeUNoYW5nZWR9KSA9PlxcbiAgaHRtbGA8dmVyZG9jcy1zZWFyY2gtYm94IC50eXBlPSR7dHlwZX0gQHNlYXJjaENsaWNrZWQ9JHtzZWFyY2hDbGlja2VkfSBAdHlwZUNoYW5nZWQ9JHt0eXBlQ2hhbmdlZH0gQHF1ZXJ5Q2hhbmdlZD0ke3F1ZXJ5Q2hhbmdlZH0gLz5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJTZWFyY2hCb3hcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI1LFwibGluZVwiOjIxfSxcImVuZExvY1wiOntcImNvbFwiOjEzNCxcImxpbmVcIjoyMn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNSxcImxpbmVcIjoyMX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MTM0LFwibGluZVwiOjIyfX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnU2VhcmNoL1NlYXJjaCBCb3gnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXNlYXJjaC1ib3gnLFxuICBhcmdzOiB7XG4gICAgdHlwZTogJ2FsbCcsXG4gIH0sXG4gIGFyZ1R5cGVzOiB7XG4gICAgc2VhcmNoQ2xpY2tlZDoge2FjdGlvbjogJ3NlYXJjaENsaWNrZWQnfSxcbiAgICB0eXBlQ2hhbmdlZDoge2FjdGlvbjogJ3R5cGVDaGFuZ2VkJ30sXG4gICAgcXVlcnlDaGFuZ2VkOiB7YWN0aW9uOiAncXVlcnlDaGFuZ2VkJ30sXG4gICAgdHlwZToge3R5cGU6ICdzdHJpbmcnLCBjb250cm9sOiAncmFkaW8nLCBvcHRpb25zOiBbJ2FsbCcsICdkb2N1bWVudCcsICd0ZW1wbGF0ZScsICdvcmdhbml6YXRpb24nXX0sXG4gIH0sXG4gIHBhcmFtZXRlcnM6IHtcbiAgICBsYXlvdXQ6ICdmdWxsc2NyZWVuJyxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IFNlYXJjaEJveCA9ICh7dHlwZSwgc2VhcmNoQ2xpY2tlZCwgdHlwZUNoYW5nZWQsIHF1ZXJ5Q2hhbmdlZH0pID0+XG4gIGh0bWxgPHZlcmRvY3Mtc2VhcmNoLWJveCAudHlwZT0ke3R5cGV9IEBzZWFyY2hDbGlja2VkPSR7c2VhcmNoQ2xpY2tlZH0gQHR5cGVDaGFuZ2VkPSR7dHlwZUNoYW5nZWR9IEBxdWVyeUNoYW5nZWQ9JHtxdWVyeUNoYW5nZWR9IC8+YDtcblxuXG5cblNlYXJjaEJveC5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHt0eXBlLCBzZWFyY2hDbGlja2VkLCB0eXBlQ2hhbmdlZCwgcXVlcnlDaGFuZ2VkfSkgPT5cXG4gIGh0bWxgPHZlcmRvY3Mtc2VhcmNoLWJveCAudHlwZT0ke3R5cGV9IEBzZWFyY2hDbGlja2VkPSR7c2VhcmNoQ2xpY2tlZH0gQHR5cGVDaGFuZ2VkPSR7dHlwZUNoYW5nZWR9IEBxdWVyeUNoYW5nZWQ9JHtxdWVyeUNoYW5nZWR9IC8+YFwiIH0sIC4uLlNlYXJjaEJveC5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcbmltcG9ydCB7YWN0aW9ufSBmcm9tICdAc3Rvcnlib29rL2FkZG9uLWFjdGlvbnMnO1xcblxcbi8qKlxcbiAqIERpc3BsYXkgYSBzZXQgb2YgdGFicyB0byBmaWx0ZXIgYnkgc2VhcmNoYWJsZSBjb250ZW50IHR5cGVzLlxcbiAqL1xcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnU2VhcmNoL1RhYnMnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1zZWFyY2gtdGFicycsXFxuICBhcmdzOiB7fSxcXG4gIGFyZ1R5cGVzOiB7fSxcXG59IGFzIE1ldGE7XFxuXFxuY29uc3QgbGlzdGVuZXIgPSB7XFxuICBoYW5kbGVFdmVudChlKSB7XFxuICAgIGFjdGlvbignc2VsZWN0ZWQnLCBlKTtcXG4gIH0sXFxuICBjYXB0dXJlOiB0cnVlLFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IFRhYnMgPSAoe29wdGlvbnN9KSA9PiBodG1sYDx2ZXJkb2NzLXNlYXJjaC10YWJzIC5vcHRpb25zPSR7b3B0aW9uc30gQG9wdGlvblNlbGVjdGVkPSR7bGlzdGVuZXJ9IHRhbGwgLz5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJUYWJzXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyMCxcImxpbmVcIjoyMn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxMTcsXCJsaW5lXCI6MjJ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6MjJ9LFwiZW5kQm9keVwiOntcImNvbFwiOjExNyxcImxpbmVcIjoyMn19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcbmltcG9ydCB7YWN0aW9ufSBmcm9tICdAc3Rvcnlib29rL2FkZG9uLWFjdGlvbnMnO1xuXG4vKipcbiAqIERpc3BsYXkgYSBzZXQgb2YgdGFicyB0byBmaWx0ZXIgYnkgc2VhcmNoYWJsZSBjb250ZW50IHR5cGVzLlxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnU2VhcmNoL1RhYnMnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXNlYXJjaC10YWJzJyxcbiAgYXJnczoge30sXG4gIGFyZ1R5cGVzOiB7fSxcbn0gYXMgTWV0YTtcblxuY29uc3QgbGlzdGVuZXIgPSB7XG4gIGhhbmRsZUV2ZW50KGUpIHtcbiAgICBhY3Rpb24oJ3NlbGVjdGVkJywgZSk7XG4gIH0sXG4gIGNhcHR1cmU6IHRydWUsXG59O1xuXG5leHBvcnQgY29uc3QgVGFicyA9ICh7b3B0aW9uc30pID0+IGh0bWxgPHZlcmRvY3Mtc2VhcmNoLXRhYnMgLm9wdGlvbnM9JHtvcHRpb25zfSBAb3B0aW9uU2VsZWN0ZWQ9JHtsaXN0ZW5lcn0gdGFsbCAvPmA7XG5cblxuXG5UYWJzLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe29wdGlvbnN9KSA9PiBodG1sYDx2ZXJkb2NzLXNlYXJjaC10YWJzIC5vcHRpb25zPSR7b3B0aW9uc30gQG9wdGlvblNlbGVjdGVkPSR7bGlzdGVuZXJ9IHRhbGwgLz5gXCIgfSwgLi4uVGFicy5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRWxlbWVudHMvVGVtcGxhdGUgQ3JlYXRlJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtdGVtcGxhdGUtY3JlYXRlJyxcXG4gIGFyZ3M6IHtcXG4gICAgdGVtcGxhdGVSb2xlOiB7XFxuICAgICAgdGVtcGxhdGVfaWQ6ICc2NWNiYmEwNy1kMGFjLTRiNjItYWZlMy0yNWQxODYyMzg5MzgnLFxcbiAgICAgIG5hbWU6ICdSZWNpcGllbnQgMScsXFxuICAgICAgZnVsbF9uYW1lOiAnJyxcXG4gICAgICBlbWFpbDogJycsXFxuICAgICAgcGhvbmU6ICcnLFxcbiAgICAgIHR5cGU6ICdzaWduZXInLFxcbiAgICAgIHNlcXVlbmNlOiAxLFxcbiAgICAgIG1lc3NhZ2U6ICcnLFxcbiAgICB9LFxcbiAgICBjb250YWN0U3VnZ2VzdGlvbnM6IFtcXG4gICAgICB7bmFtZTogJ01lJywgZW1haWw6ICdteXVzZXJAbm9tYWlsLmNvbScsIHBob25lOiAnMjEyLTU1NS02NjY0J30sXFxuICAgICAge25hbWU6ICdXaWxsIFBvd2VyJywgZW1haWw6ICd3aWxsLnBvd2VyQG5vbWFpbC5jb20nLCBhdmF0YXI6ICdodHRwczovL2kucHJhdmF0YXIuY2MvNDg/aW1nPTU5J30sXFxuICAgICAge25hbWU6ICdQYWlnZSBUdXJuZXInLCBlbWFpbDogJ3BhaWdlLnR1cm5lckBub21haWwuY29tJywgcGhvbmU6ICcyMTItNTU1LTY2NjQnLCBhdmF0YXI6ICdodHRwczovL2kucHJhdmF0YXIuY2MvNDg/aW1nPTQxJ30sXFxuICAgICAge25hbWU6ICdCaWxsIEJvYXJkJywgcGhvbmU6ICcyMTItNTU1LTY2NjQnfSxcXG4gICAgXSxcXG4gIH0sXFxuICBhcmdUeXBlczoge1xcbiAgICBzZWFyY2hDb250YWN0czoge2FjdGlvbjogJ3NlYXJjaENvbnRhY3RzJ30sXFxuICAgIGNhbmNlbDoge2FjdGlvbjogJ2NhbmNlbCd9LFxcbiAgICBjb250YWN0U2VsZWN0ZWQ6IHthY3Rpb246ICdjb250YWN0U2VsZWN0ZWQnfSxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBUZW1wbGF0ZUNyZWF0ZSA9ICh7dGVtcGxhdGVSb2xlLCBjb250YWN0U3VnZ2VzdGlvbnMsIHNlYXJjaENvbnRhY3RzLCBjYW5jZWwsIGNvbnRhY3RTZWxlY3RlZH0pID0+XFxuICBodG1sYDx2ZXJkb2NzLXRlbXBsYXRlLWNyZWF0ZVxcbiAgICAudGVtcGxhdGVSb2xlPSR7dGVtcGxhdGVSb2xlfVxcbiAgICAuY29udGFjdFN1Z2dlc3Rpb25zPSR7Y29udGFjdFN1Z2dlc3Rpb25zfVxcbiAgICBAc2VhcmNoQ29udGFjdHM9JHtzZWFyY2hDb250YWN0c31cXG4gICAgQGNhbmNlbD0ke2NhbmNlbH1cXG4gICAgQGNvbnRhY3RTZWxlY3RlZD0ke2NvbnRhY3RTZWxlY3RlZH1cXG4gIC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiVGVtcGxhdGVDcmVhdGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMwLFwibGluZVwiOjMyfSxcImVuZExvY1wiOntcImNvbFwiOjUsXCJsaW5lXCI6Mzl9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzJ9LFwiZW5kQm9keVwiOntcImNvbFwiOjUsXCJsaW5lXCI6Mzl9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdFbGVtZW50cy9UZW1wbGF0ZSBDcmVhdGUnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXRlbXBsYXRlLWNyZWF0ZScsXG4gIGFyZ3M6IHtcbiAgICB0ZW1wbGF0ZVJvbGU6IHtcbiAgICAgIHRlbXBsYXRlX2lkOiAnNjVjYmJhMDctZDBhYy00YjYyLWFmZTMtMjVkMTg2MjM4OTM4JyxcbiAgICAgIG5hbWU6ICdSZWNpcGllbnQgMScsXG4gICAgICBmdWxsX25hbWU6ICcnLFxuICAgICAgZW1haWw6ICcnLFxuICAgICAgcGhvbmU6ICcnLFxuICAgICAgdHlwZTogJ3NpZ25lcicsXG4gICAgICBzZXF1ZW5jZTogMSxcbiAgICAgIG1lc3NhZ2U6ICcnLFxuICAgIH0sXG4gICAgY29udGFjdFN1Z2dlc3Rpb25zOiBbXG4gICAgICB7bmFtZTogJ01lJywgZW1haWw6ICdteXVzZXJAbm9tYWlsLmNvbScsIHBob25lOiAnMjEyLTU1NS02NjY0J30sXG4gICAgICB7bmFtZTogJ1dpbGwgUG93ZXInLCBlbWFpbDogJ3dpbGwucG93ZXJAbm9tYWlsLmNvbScsIGF2YXRhcjogJ2h0dHBzOi8vaS5wcmF2YXRhci5jYy80OD9pbWc9NTknfSxcbiAgICAgIHtuYW1lOiAnUGFpZ2UgVHVybmVyJywgZW1haWw6ICdwYWlnZS50dXJuZXJAbm9tYWlsLmNvbScsIHBob25lOiAnMjEyLTU1NS02NjY0JywgYXZhdGFyOiAnaHR0cHM6Ly9pLnByYXZhdGFyLmNjLzQ4P2ltZz00MSd9LFxuICAgICAge25hbWU6ICdCaWxsIEJvYXJkJywgcGhvbmU6ICcyMTItNTU1LTY2NjQnfSxcbiAgICBdLFxuICB9LFxuICBhcmdUeXBlczoge1xuICAgIHNlYXJjaENvbnRhY3RzOiB7YWN0aW9uOiAnc2VhcmNoQ29udGFjdHMnfSxcbiAgICBjYW5jZWw6IHthY3Rpb246ICdjYW5jZWwnfSxcbiAgICBjb250YWN0U2VsZWN0ZWQ6IHthY3Rpb246ICdjb250YWN0U2VsZWN0ZWQnfSxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IFRlbXBsYXRlQ3JlYXRlID0gKHt0ZW1wbGF0ZVJvbGUsIGNvbnRhY3RTdWdnZXN0aW9ucywgc2VhcmNoQ29udGFjdHMsIGNhbmNlbCwgY29udGFjdFNlbGVjdGVkfSkgPT5cbiAgaHRtbGA8dmVyZG9jcy10ZW1wbGF0ZS1jcmVhdGVcbiAgICAudGVtcGxhdGVSb2xlPSR7dGVtcGxhdGVSb2xlfVxuICAgIC5jb250YWN0U3VnZ2VzdGlvbnM9JHtjb250YWN0U3VnZ2VzdGlvbnN9XG4gICAgQHNlYXJjaENvbnRhY3RzPSR7c2VhcmNoQ29udGFjdHN9XG4gICAgQGNhbmNlbD0ke2NhbmNlbH1cbiAgICBAY29udGFjdFNlbGVjdGVkPSR7Y29udGFjdFNlbGVjdGVkfVxuICAvPmA7XG5cblxuXG5UZW1wbGF0ZUNyZWF0ZS5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHt0ZW1wbGF0ZVJvbGUsIGNvbnRhY3RTdWdnZXN0aW9ucywgc2VhcmNoQ29udGFjdHMsIGNhbmNlbCwgY29udGFjdFNlbGVjdGVkfSkgPT5cXG4gIGh0bWxgPHZlcmRvY3MtdGVtcGxhdGUtY3JlYXRlXFxuICAgIC50ZW1wbGF0ZVJvbGU9JHt0ZW1wbGF0ZVJvbGV9XFxuICAgIC5jb250YWN0U3VnZ2VzdGlvbnM9JHtjb250YWN0U3VnZ2VzdGlvbnN9XFxuICAgIEBzZWFyY2hDb250YWN0cz0ke3NlYXJjaENvbnRhY3RzfVxcbiAgICBAY2FuY2VsPSR7Y2FuY2VsfVxcbiAgICBAY29udGFjdFNlbGVjdGVkPSR7Y29udGFjdFNlbGVjdGVkfVxcbiAgLz5gXCIgfSwgLi4uVGVtcGxhdGVDcmVhdGUucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0VsZW1lbnRzL1RlbXBsYXRlIEZpZWxkcycsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXRlbXBsYXRlLWZpZWxkcycsXFxuICBhcmdzOiB7XFxuICAgIHRlbXBsYXRlSWQ6ICdkMjMzODc0Mi1mM2ExLTQ2NWItODU5Mi04MDY1ODc0MTNjYzEnLFxcbiAgfSxcXG4gIGFyZ1R5cGVzOiB7XFxuICAgIG9uQ2FuY2VsOiB7YWN0aW9uOiAnY2FuY2VsJ30sXFxuICAgIG9uTmV4dDoge2FjdGlvbjogJ25leHQnfSxcXG4gIH0sXFxuICBwYXJhbWV0ZXJzOiB7XFxuICAgIGxheW91dDogJ2Z1bGxzY3JlZW4nLFxcbiAgfSxcXG59IGFzIE1ldGE7XFxuXFxuLy9leHBvcnQgY29uc3QgVGVtcGxhdGVGaWVsZHMgPSAoe3RlbXBsYXRlSWQsIGNhbmNlbCwgc2F2ZX0pID0+IGh0bWxgPGRpdiBzdHlsZT1cXFwiaGVpZ2h0OiA2MDBweDsgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xcXCI+XFxuZXhwb3J0IGNvbnN0IFRlbXBsYXRlRmllbGRzID0gKHt0ZW1wbGF0ZUlkLCBvbkNhbmNlbCwgb25OZXh0fSkgPT4gaHRtbGA8ZGl2IHN0eWxlPVxcXCJoZWlnaHQ6IDYwMHB4XFxcIj5cXG4gIDx2ZXJkb2NzLXRlbXBsYXRlLWZpZWxkcyAudGVtcGxhdGVJZD0ke3RlbXBsYXRlSWR9IEBjYW5jZWw9JHtvbkNhbmNlbH0gQG5leHQ9JHtvbk5leHR9IC8+XFxuPC9kaXY+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiVGVtcGxhdGVGaWVsZHNcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMwLFwibGluZVwiOjIwfSxcImVuZExvY1wiOntcImNvbFwiOjcsXCJsaW5lXCI6MjJ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MjB9LFwiZW5kQm9keVwiOntcImNvbFwiOjcsXCJsaW5lXCI6MjJ9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdFbGVtZW50cy9UZW1wbGF0ZSBGaWVsZHMnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXRlbXBsYXRlLWZpZWxkcycsXG4gIGFyZ3M6IHtcbiAgICB0ZW1wbGF0ZUlkOiAnZDIzMzg3NDItZjNhMS00NjViLTg1OTItODA2NTg3NDEzY2MxJyxcbiAgfSxcbiAgYXJnVHlwZXM6IHtcbiAgICBvbkNhbmNlbDoge2FjdGlvbjogJ2NhbmNlbCd9LFxuICAgIG9uTmV4dDoge2FjdGlvbjogJ25leHQnfSxcbiAgfSxcbiAgcGFyYW1ldGVyczoge1xuICAgIGxheW91dDogJ2Z1bGxzY3JlZW4nLFxuICB9LFxufSBhcyBNZXRhO1xuXG4vL2V4cG9ydCBjb25zdCBUZW1wbGF0ZUZpZWxkcyA9ICh7dGVtcGxhdGVJZCwgY2FuY2VsLCBzYXZlfSkgPT4gaHRtbGA8ZGl2IHN0eWxlPVwiaGVpZ2h0OiA2MDBweDsgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1wiPlxuZXhwb3J0IGNvbnN0IFRlbXBsYXRlRmllbGRzID0gKHt0ZW1wbGF0ZUlkLCBvbkNhbmNlbCwgb25OZXh0fSkgPT4gaHRtbGA8ZGl2IHN0eWxlPVwiaGVpZ2h0OiA2MDBweFwiPlxuICA8dmVyZG9jcy10ZW1wbGF0ZS1maWVsZHMgLnRlbXBsYXRlSWQ9JHt0ZW1wbGF0ZUlkfSBAY2FuY2VsPSR7b25DYW5jZWx9IEBuZXh0PSR7b25OZXh0fSAvPlxuPC9kaXY+YDtcblxuXG5cblRlbXBsYXRlRmllbGRzLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe3RlbXBsYXRlSWQsIG9uQ2FuY2VsLCBvbk5leHR9KSA9PiBodG1sYDxkaXYgc3R5bGU9XFxcImhlaWdodDogNjAwcHhcXFwiPlxcbiAgPHZlcmRvY3MtdGVtcGxhdGUtZmllbGRzIC50ZW1wbGF0ZUlkPSR7dGVtcGxhdGVJZH0gQGNhbmNlbD0ke29uQ2FuY2VsfSBAbmV4dD0ke29uTmV4dH0gLz5cXG48L2Rpdj5gXCIgfSwgLi4uVGVtcGxhdGVGaWVsZHMucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0VsZW1lbnRzL1RlbXBsYXRlIFByb3BlcnRpZXMnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy10ZW1wbGF0ZS1wcm9wZXJ0aWVzJyxcXG4gIGFyZ3M6IHtcXG4gICAgdGVtcGxhdGVJZDogJzk1MTAxNmIwLWM1ZWYtNDUwZC1iNjI4LTlhMGM1Yjg0YjE2MycsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHtcXG4gICAgb25DYW5jZWw6IHthY3Rpb246ICdjYW5jZWwnfSxcXG4gICAgb25OZXh0OiB7YWN0aW9uOiAnbmV4dCd9LFxcbiAgfSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IFRlbXBsYXRlUHJvcGVydGllcyA9ICh7b25DYW5jZWwsIG9uTmV4dCwgdGVtcGxhdGVJZH0pID0+IGh0bWxgPHZlcmRvY3MtdGVtcGxhdGUtcHJvcGVydGllcyAudGVtcGxhdGVJZD0ke3RlbXBsYXRlSWR9IEBjYW5jZWw9JHtvbkNhbmNlbH0gQG5leHQ9JHtvbk5leHR9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiVGVtcGxhdGVQcm9wZXJ0aWVzXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNCxcImxpbmVcIjoxNn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxNjksXCJsaW5lXCI6MTZ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzQsXCJsaW5lXCI6MTZ9LFwiZW5kQm9keVwiOntcImNvbFwiOjE2OSxcImxpbmVcIjoxNn19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0VsZW1lbnRzL1RlbXBsYXRlIFByb3BlcnRpZXMnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXRlbXBsYXRlLXByb3BlcnRpZXMnLFxuICBhcmdzOiB7XG4gICAgdGVtcGxhdGVJZDogJzk1MTAxNmIwLWM1ZWYtNDUwZC1iNjI4LTlhMGM1Yjg0YjE2MycsXG4gIH0sXG4gIGFyZ1R5cGVzOiB7XG4gICAgb25DYW5jZWw6IHthY3Rpb246ICdjYW5jZWwnfSxcbiAgICBvbk5leHQ6IHthY3Rpb246ICduZXh0J30sXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBUZW1wbGF0ZVByb3BlcnRpZXMgPSAoe29uQ2FuY2VsLCBvbk5leHQsIHRlbXBsYXRlSWR9KSA9PiBodG1sYDx2ZXJkb2NzLXRlbXBsYXRlLXByb3BlcnRpZXMgLnRlbXBsYXRlSWQ9JHt0ZW1wbGF0ZUlkfSBAY2FuY2VsPSR7b25DYW5jZWx9IEBuZXh0PSR7b25OZXh0fSAvPmA7XG5cblxuXG5UZW1wbGF0ZVByb3BlcnRpZXMucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7b25DYW5jZWwsIG9uTmV4dCwgdGVtcGxhdGVJZH0pID0+IGh0bWxgPHZlcmRvY3MtdGVtcGxhdGUtcHJvcGVydGllcyAudGVtcGxhdGVJZD0ke3RlbXBsYXRlSWR9IEBjYW5jZWw9JHtvbkNhbmNlbH0gQG5leHQ9JHtvbk5leHR9IC8+YFwiIH0sIC4uLlRlbXBsYXRlUHJvcGVydGllcy5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRWxlbWVudHMvVGVtcGxhdGUgUmVjaXBpZW50cycsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXRlbXBsYXRlLXJlY2lwaWVudHMnLFxcbiAgYXJnczoge1xcbiAgICB0ZW1wbGF0ZVJvbGU6IHtcXG4gICAgICB0ZW1wbGF0ZV9pZDogJzY1Y2JiYTA3LWQwYWMtNGI2Mi1hZmUzLTI1ZDE4NjIzODkzOCcsXFxuICAgICAgbmFtZTogJ1JlY2lwaWVudCAxJyxcXG4gICAgICBmdWxsX25hbWU6ICcnLFxcbiAgICAgIGVtYWlsOiAnJyxcXG4gICAgICBwaG9uZTogJycsXFxuICAgICAgdHlwZTogJ3NpZ25lcicsXFxuICAgICAgc2VxdWVuY2U6IDEsXFxuICAgICAgbWVzc2FnZTogJycsXFxuICAgIH0sXFxuICAgIGNvbnRhY3RTdWdnZXN0aW9uczogW1xcbiAgICAgIHtuYW1lOiAnTWUnLCBlbWFpbDogJ215dXNlckBub21haWwuY29tJywgcGhvbmU6ICcyMTItNTU1LTY2NjQnfSxcXG4gICAgICB7bmFtZTogJ1dpbGwgUG93ZXInLCBlbWFpbDogJ3dpbGwucG93ZXJAbm9tYWlsLmNvbScsIGF2YXRhcjogJ2h0dHBzOi8vaS5wcmF2YXRhci5jYy80OD9pbWc9NTknfSxcXG4gICAgICB7bmFtZTogJ1BhaWdlIFR1cm5lcicsIGVtYWlsOiAncGFpZ2UudHVybmVyQG5vbWFpbC5jb20nLCBwaG9uZTogJzIxMi01NTUtNjY2NCcsIGF2YXRhcjogJ2h0dHBzOi8vaS5wcmF2YXRhci5jYy80OD9pbWc9NDEnfSxcXG4gICAgICB7bmFtZTogJ0JpbGwgQm9hcmQnLCBwaG9uZTogJzIxMi01NTUtNjY2NCd9LFxcbiAgICBdLFxcbiAgfSxcXG4gIGFyZ1R5cGVzOiB7XFxuICAgIHNlYXJjaENvbnRhY3RzOiB7YWN0aW9uOiAnc2VhcmNoQ29udGFjdHMnfSxcXG4gICAgY2FuY2VsOiB7YWN0aW9uOiAnY2FuY2VsJ30sXFxuICAgIGNvbnRhY3RTZWxlY3RlZDoge2FjdGlvbjogJ2NvbnRhY3RTZWxlY3RlZCd9LFxcbiAgfSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IFRlbXBsYXRlUmVjaXBpZW50cyA9ICh7dGVtcGxhdGVSb2xlLCBjb250YWN0U3VnZ2VzdGlvbnMsIHNlYXJjaENvbnRhY3RzLCBjYW5jZWwsIGNvbnRhY3RTZWxlY3RlZH0pID0+XFxuICBodG1sYDx2ZXJkb2NzLXRlbXBsYXRlLXJlY2lwaWVudHNcXG4gICAgLnRlbXBsYXRlUm9sZT0ke3RlbXBsYXRlUm9sZX1cXG4gICAgLmNvbnRhY3RTdWdnZXN0aW9ucz0ke2NvbnRhY3RTdWdnZXN0aW9uc31cXG4gICAgQHNlYXJjaENvbnRhY3RzPSR7c2VhcmNoQ29udGFjdHN9XFxuICAgIEBjYW5jZWw9JHtjYW5jZWx9XFxuICAgIEBjb250YWN0U2VsZWN0ZWQ9JHtjb250YWN0U2VsZWN0ZWR9XFxuICAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIlRlbXBsYXRlUmVjaXBpZW50c1wiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzQsXCJsaW5lXCI6MzJ9LFwiZW5kTG9jXCI6e1wiY29sXCI6NSxcImxpbmVcIjozOX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNCxcImxpbmVcIjozMn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6NSxcImxpbmVcIjozOX19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0VsZW1lbnRzL1RlbXBsYXRlIFJlY2lwaWVudHMnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXRlbXBsYXRlLXJlY2lwaWVudHMnLFxuICBhcmdzOiB7XG4gICAgdGVtcGxhdGVSb2xlOiB7XG4gICAgICB0ZW1wbGF0ZV9pZDogJzY1Y2JiYTA3LWQwYWMtNGI2Mi1hZmUzLTI1ZDE4NjIzODkzOCcsXG4gICAgICBuYW1lOiAnUmVjaXBpZW50IDEnLFxuICAgICAgZnVsbF9uYW1lOiAnJyxcbiAgICAgIGVtYWlsOiAnJyxcbiAgICAgIHBob25lOiAnJyxcbiAgICAgIHR5cGU6ICdzaWduZXInLFxuICAgICAgc2VxdWVuY2U6IDEsXG4gICAgICBtZXNzYWdlOiAnJyxcbiAgICB9LFxuICAgIGNvbnRhY3RTdWdnZXN0aW9uczogW1xuICAgICAge25hbWU6ICdNZScsIGVtYWlsOiAnbXl1c2VyQG5vbWFpbC5jb20nLCBwaG9uZTogJzIxMi01NTUtNjY2NCd9LFxuICAgICAge25hbWU6ICdXaWxsIFBvd2VyJywgZW1haWw6ICd3aWxsLnBvd2VyQG5vbWFpbC5jb20nLCBhdmF0YXI6ICdodHRwczovL2kucHJhdmF0YXIuY2MvNDg/aW1nPTU5J30sXG4gICAgICB7bmFtZTogJ1BhaWdlIFR1cm5lcicsIGVtYWlsOiAncGFpZ2UudHVybmVyQG5vbWFpbC5jb20nLCBwaG9uZTogJzIxMi01NTUtNjY2NCcsIGF2YXRhcjogJ2h0dHBzOi8vaS5wcmF2YXRhci5jYy80OD9pbWc9NDEnfSxcbiAgICAgIHtuYW1lOiAnQmlsbCBCb2FyZCcsIHBob25lOiAnMjEyLTU1NS02NjY0J30sXG4gICAgXSxcbiAgfSxcbiAgYXJnVHlwZXM6IHtcbiAgICBzZWFyY2hDb250YWN0czoge2FjdGlvbjogJ3NlYXJjaENvbnRhY3RzJ30sXG4gICAgY2FuY2VsOiB7YWN0aW9uOiAnY2FuY2VsJ30sXG4gICAgY29udGFjdFNlbGVjdGVkOiB7YWN0aW9uOiAnY29udGFjdFNlbGVjdGVkJ30sXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBUZW1wbGF0ZVJlY2lwaWVudHMgPSAoe3RlbXBsYXRlUm9sZSwgY29udGFjdFN1Z2dlc3Rpb25zLCBzZWFyY2hDb250YWN0cywgY2FuY2VsLCBjb250YWN0U2VsZWN0ZWR9KSA9PlxuICBodG1sYDx2ZXJkb2NzLXRlbXBsYXRlLXJlY2lwaWVudHNcbiAgICAudGVtcGxhdGVSb2xlPSR7dGVtcGxhdGVSb2xlfVxuICAgIC5jb250YWN0U3VnZ2VzdGlvbnM9JHtjb250YWN0U3VnZ2VzdGlvbnN9XG4gICAgQHNlYXJjaENvbnRhY3RzPSR7c2VhcmNoQ29udGFjdHN9XG4gICAgQGNhbmNlbD0ke2NhbmNlbH1cbiAgICBAY29udGFjdFNlbGVjdGVkPSR7Y29udGFjdFNlbGVjdGVkfVxuICAvPmA7XG5cblxuXG5UZW1wbGF0ZVJlY2lwaWVudHMucGFyYW1ldGVycyA9IHsgc3RvcnlTb3VyY2U6IHsgc291cmNlOiBcIih7dGVtcGxhdGVSb2xlLCBjb250YWN0U3VnZ2VzdGlvbnMsIHNlYXJjaENvbnRhY3RzLCBjYW5jZWwsIGNvbnRhY3RTZWxlY3RlZH0pID0+XFxuICBodG1sYDx2ZXJkb2NzLXRlbXBsYXRlLXJlY2lwaWVudHNcXG4gICAgLnRlbXBsYXRlUm9sZT0ke3RlbXBsYXRlUm9sZX1cXG4gICAgLmNvbnRhY3RTdWdnZXN0aW9ucz0ke2NvbnRhY3RTdWdnZXN0aW9uc31cXG4gICAgQHNlYXJjaENvbnRhY3RzPSR7c2VhcmNoQ29udGFjdHN9XFxuICAgIEBjYW5jZWw9JHtjYW5jZWx9XFxuICAgIEBjb250YWN0U2VsZWN0ZWQ9JHtjb250YWN0U2VsZWN0ZWR9XFxuICAvPmBcIiB9LCAuLi5UZW1wbGF0ZVJlY2lwaWVudHMucGFyYW1ldGVycyB9OyIsIlxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgLy8gQHRzLW5vY2hlY2tcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XFxuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0VtYmVkcy9BdXRoJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtYXV0aCcsXFxuICBhcmdzOiB7XFxuICAgIHZpc2libGU6IHRydWUsXFxuICAgIGxvZ286ICdodHRwczovL3ZlcmRvY3MuY29tL2Fzc2V0cy9ibHVlLWxvZ28uc3ZnJyxcXG4gIH0sXFxuICBhcmdUeXBlczoge1xcbiAgICBzZGtFcnJvcjoge1xcbiAgICAgIGFjdGlvbjogJ2Vycm9yJyxcXG4gICAgICB0YWJsZToge1xcbiAgICAgICAgZGlzYWJsZTogdHJ1ZSxcXG4gICAgICB9LFxcbiAgICB9LFxcbiAgICBhdXRoZW50aWNhdGVkOiB7XFxuICAgICAgYWN0aW9uOiAnYXV0aGVudGljYXRlZCcsXFxuICAgICAgdGFibGU6IHtcXG4gICAgICAgIGRpc2FibGU6IHRydWUsXFxuICAgICAgfSxcXG4gICAgfSxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBBdXRoID0gKHt2aXNpYmxlLCBsb2dvLCBhdXRoZW50aWNhdGVkLCBzZGtFcnJvcn0pID0+IGh0bWxgPHZlcmRvY3MtYXV0aCAudmlzaWJsZT0ke3Zpc2libGV9IC5sb2dvPSR7bG9nb30gQGF1dGhlbnRpY2F0ZWQ9JHthdXRoZW50aWNhdGVkfSBAc2RrRXJyb3I9JHtzZGtFcnJvcn0gLz5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJBdXRoXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyMCxcImxpbmVcIjoyN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxNzYsXCJsaW5lXCI6Mjd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6Mjd9LFwiZW5kQm9keVwiOntcImNvbFwiOjE3NixcImxpbmVcIjoyN319fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0VtYmVkcy9BdXRoJyxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1hdXRoJyxcbiAgYXJnczoge1xuICAgIHZpc2libGU6IHRydWUsXG4gICAgbG9nbzogJ2h0dHBzOi8vdmVyZG9jcy5jb20vYXNzZXRzL2JsdWUtbG9nby5zdmcnLFxuICB9LFxuICBhcmdUeXBlczoge1xuICAgIHNka0Vycm9yOiB7XG4gICAgICBhY3Rpb246ICdlcnJvcicsXG4gICAgICB0YWJsZToge1xuICAgICAgICBkaXNhYmxlOiB0cnVlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGF1dGhlbnRpY2F0ZWQ6IHtcbiAgICAgIGFjdGlvbjogJ2F1dGhlbnRpY2F0ZWQnLFxuICAgICAgdGFibGU6IHtcbiAgICAgICAgZGlzYWJsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IEF1dGggPSAoe3Zpc2libGUsIGxvZ28sIGF1dGhlbnRpY2F0ZWQsIHNka0Vycm9yfSkgPT4gaHRtbGA8dmVyZG9jcy1hdXRoIC52aXNpYmxlPSR7dmlzaWJsZX0gLmxvZ289JHtsb2dvfSBAYXV0aGVudGljYXRlZD0ke2F1dGhlbnRpY2F0ZWR9IEBzZGtFcnJvcj0ke3Nka0Vycm9yfSAvPmA7XG5cblxuXG5BdXRoLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe3Zpc2libGUsIGxvZ28sIGF1dGhlbnRpY2F0ZWQsIHNka0Vycm9yfSkgPT4gaHRtbGA8dmVyZG9jcy1hdXRoIC52aXNpYmxlPSR7dmlzaWJsZX0gLmxvZ289JHtsb2dvfSBAYXV0aGVudGljYXRlZD0ke2F1dGhlbnRpY2F0ZWR9IEBzZGtFcnJvcj0ke3Nka0Vycm9yfSAvPmBcIiB9LCAuLi5BdXRoLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdFbWJlZHMvQnVpbGQnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1idWlsZCcsXFxuICBwYXJhbWV0ZXJzOiB7XFxuICAgIGxheW91dDogJ2Z1bGxzY3JlZW4nLFxcbiAgfSxcXG59IGFzIE1ldGE7XFxuXFxuZXhwb3J0IGNvbnN0IEJ1aWxkID0gKHt9KSA9PiBodG1sYDx2ZXJkb2NzLWJ1aWxkIC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiQnVpbGRcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjIxLFwibGluZVwiOjEyfSxcImVuZExvY1wiOntcImNvbFwiOjUyLFwibGluZVwiOjEyfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjIxLFwibGluZVwiOjEyfSxcImVuZEJvZHlcIjp7XCJjb2xcIjo1MixcImxpbmVcIjoxMn19fTtcbiAgICBcbmltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtNZXRhfSBmcm9tICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0VtYmVkcy9CdWlsZCcsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtYnVpbGQnLFxuICBwYXJhbWV0ZXJzOiB7XG4gICAgbGF5b3V0OiAnZnVsbHNjcmVlbicsXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBCdWlsZCA9ICh7fSkgPT4gaHRtbGA8dmVyZG9jcy1idWlsZCAvPmA7XG5cblxuXG5CdWlsZC5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHt9KSA9PiBodG1sYDx2ZXJkb2NzLWJ1aWxkIC8+YFwiIH0sIC4uLkJ1aWxkLnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdFbWJlZHMvUHJldmlldycsXFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXByZXZpZXcnLFxcbiAgYXJnczoge1xcbiAgICB0ZW1wbGF0ZUlkOiAnZDIzMzg3NDItZjNhMS00NjViLTg1OTItODA2NTg3NDEzY2MxJyxcXG4gIH0sXFxuICBhcmdUeXBlczoge1xcbiAgICB0ZW1wbGF0ZUlkOiB7Y29udHJvbDoge3R5cGU6ICdzdHJpbmcnfX0sXFxuICB9LFxcbiAgcGFyYW1ldGVyczoge1xcbiAgICBsYXlvdXQ6ICdmdWxsc2NyZWVuJyxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBQcmV2aWV3ID0gKHt0ZW1wbGF0ZUlkfSkgPT4gaHRtbGA8dmVyZG9jcy1wcmV2aWV3IC50ZW1wbGF0ZUlkPSR7dGVtcGxhdGVJZH0gLz5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJQcmV2aWV3XCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyMyxcImxpbmVcIjoxOH0sXCJlbmRMb2NcIjp7XCJjb2xcIjo5MixcImxpbmVcIjoxOH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMyxcImxpbmVcIjoxOH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6OTIsXCJsaW5lXCI6MTh9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdFbWJlZHMvUHJldmlldycsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtcHJldmlldycsXG4gIGFyZ3M6IHtcbiAgICB0ZW1wbGF0ZUlkOiAnZDIzMzg3NDItZjNhMS00NjViLTg1OTItODA2NTg3NDEzY2MxJyxcbiAgfSxcbiAgYXJnVHlwZXM6IHtcbiAgICB0ZW1wbGF0ZUlkOiB7Y29udHJvbDoge3R5cGU6ICdzdHJpbmcnfX0sXG4gIH0sXG4gIHBhcmFtZXRlcnM6IHtcbiAgICBsYXlvdXQ6ICdmdWxsc2NyZWVuJyxcbiAgfSxcbn0gYXMgTWV0YTtcblxuZXhwb3J0IGNvbnN0IFByZXZpZXcgPSAoe3RlbXBsYXRlSWR9KSA9PiBodG1sYDx2ZXJkb2NzLXByZXZpZXcgLnRlbXBsYXRlSWQ9JHt0ZW1wbGF0ZUlkfSAvPmA7XG5cblxuXG5QcmV2aWV3LnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe3RlbXBsYXRlSWR9KSA9PiBodG1sYDx2ZXJkb2NzLXByZXZpZXcgLnRlbXBsYXRlSWQ9JHt0ZW1wbGF0ZUlkfSAvPmBcIiB9LCAuLi5QcmV2aWV3LnBhcmFtZXRlcnMgfTsiLCJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7aHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XFxuaW1wb3J0IHthY3Rpb259IGZyb20gJ0BzdG9yeWJvb2svYWRkb24tYWN0aW9ucyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdFbWJlZHMvU2VhcmNoJyxcXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3Mtc2VhcmNoJyxcXG4gIGFyZ3M6IHt9LFxcbiAgYXJnVHlwZXM6IHt9LFxcbn0gYXMgTWV0YTtcXG5cXG5jb25zdCBsaXN0ZW5lciA9IHtcXG4gIGhhbmRsZUV2ZW50KGUpIHtcXG4gICAgYWN0aW9uKCdzZWxlY3RlZCcsIGUpO1xcbiAgfSxcXG4gIGNhcHR1cmU6IHRydWUsXFxufTtcXG5cXG5leHBvcnQgY29uc3QgU2VhcmNoID0gKHtvcHRpb25zfSkgPT4gaHRtbGA8dmVyZG9jcy1zZWFyY2ggLm9wdGlvbnM9JHtvcHRpb25zfSBAb3B0aW9uU2VsZWN0ZWQ9JHtsaXN0ZW5lcn0gdGFsbCAvPmA7XFxuXCI7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIlNlYXJjaFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjIsXCJsaW5lXCI6MTl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MTE0LFwibGluZVwiOjE5fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjIyLFwibGluZVwiOjE5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxMTQsXCJsaW5lXCI6MTl9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5pbXBvcnQge2FjdGlvbn0gZnJvbSAnQHN0b3J5Ym9vay9hZGRvbi1hY3Rpb25zJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0VtYmVkcy9TZWFyY2gnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXNlYXJjaCcsXG4gIGFyZ3M6IHt9LFxuICBhcmdUeXBlczoge30sXG59IGFzIE1ldGE7XG5cbmNvbnN0IGxpc3RlbmVyID0ge1xuICBoYW5kbGVFdmVudChlKSB7XG4gICAgYWN0aW9uKCdzZWxlY3RlZCcsIGUpO1xuICB9LFxuICBjYXB0dXJlOiB0cnVlLFxufTtcblxuZXhwb3J0IGNvbnN0IFNlYXJjaCA9ICh7b3B0aW9uc30pID0+IGh0bWxgPHZlcmRvY3Mtc2VhcmNoIC5vcHRpb25zPSR7b3B0aW9uc30gQG9wdGlvblNlbGVjdGVkPSR7bGlzdGVuZXJ9IHRhbGwgLz5gO1xuXG5cblxuU2VhcmNoLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe29wdGlvbnN9KSA9PiBodG1sYDx2ZXJkb2NzLXNlYXJjaCAub3B0aW9ucz0ke29wdGlvbnN9IEBvcHRpb25TZWxlY3RlZD0ke2xpc3RlbmVyfSB0YWxsIC8+YFwiIH0sIC4uLlNlYXJjaC5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRW1iZWRzL1NlbmQnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1zZW5kJyxcXG4gIGFyZ3M6IHtcXG4gICAgdGVtcGxhdGVJZDogJ2QyMzM4NzQyLWYzYTEtNDY1Yi04NTkyLTgwNjU4NzQxM2NjMScsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHtcXG4gICAgdGVtcGxhdGVJZDoge2NvbnRyb2w6IHt0eXBlOiAnc3RyaW5nJ319LFxcbiAgfSxcXG4gIHBhcmFtZXRlcnM6IHtcXG4gICAgbGF5b3V0OiAnZnVsbHNjcmVlbicsXFxuICB9LFxcbn0gYXMgTWV0YTtcXG5cXG5leHBvcnQgY29uc3QgU2VuZCA9ICh7dGVtcGxhdGVJZH0pID0+IGh0bWxgPHZlcmRvY3Mtc2VuZCAudGVtcGxhdGVJZD0ke3RlbXBsYXRlSWR9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiU2VuZFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6MTh9LFwiZW5kTG9jXCI6e1wiY29sXCI6ODYsXCJsaW5lXCI6MTh9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6MTh9LFwiZW5kQm9keVwiOntcImNvbFwiOjg2LFwibGluZVwiOjE4fX19O1xuICAgIFxuaW1wb3J0IHtodG1sfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnRW1iZWRzL1NlbmQnLFxuICBjb21wb25lbnQ6ICd2ZXJkb2NzLXNlbmQnLFxuICBhcmdzOiB7XG4gICAgdGVtcGxhdGVJZDogJ2QyMzM4NzQyLWYzYTEtNDY1Yi04NTkyLTgwNjU4NzQxM2NjMScsXG4gIH0sXG4gIGFyZ1R5cGVzOiB7XG4gICAgdGVtcGxhdGVJZDoge2NvbnRyb2w6IHt0eXBlOiAnc3RyaW5nJ319LFxuICB9LFxuICBwYXJhbWV0ZXJzOiB7XG4gICAgbGF5b3V0OiAnZnVsbHNjcmVlbicsXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBTZW5kID0gKHt0ZW1wbGF0ZUlkfSkgPT4gaHRtbGA8dmVyZG9jcy1zZW5kIC50ZW1wbGF0ZUlkPSR7dGVtcGxhdGVJZH0gLz5gO1xuXG5cblxuU2VuZC5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHt0ZW1wbGF0ZUlkfSkgPT4gaHRtbGA8dmVyZG9jcy1zZW5kIC50ZW1wbGF0ZUlkPSR7dGVtcGxhdGVJZH0gLz5gXCIgfSwgLi4uU2VuZC5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRW1iZWRzL1NpZ24nLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy1zaWduJyxcXG4gIGFyZ3M6IHtcXG4gICAgZW52ZWxvcGVJZDogJ2I0YTAzZjdlLThhMmItNDc1Mi1hYzY1LTYyMTExNGExZjg3OCcsXFxuICAgIHJvbGVJZDogJ1NlbGxlcicsXFxuICAgIGludml0ZUNvZGU6ICdlNGJlZTI0YzNkMjc5NWYzNDBjZWViNTNmNmZlZmMxYScsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHt9LFxcbiAgcGFyYW1ldGVyczoge1xcbiAgICBsYXlvdXQ6ICdmdWxsc2NyZWVuJyxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBTaWduID0gKHtlbnZlbG9wZUlkLCByb2xlSWQsIGludml0ZUNvZGV9KSA9PiBodG1sYDx2ZXJkb2NzLXNpZ24gLmVudmVsb3BlSWQ9JHtlbnZlbG9wZUlkfSAucm9sZUlkPSR7cm9sZUlkfSAuaW52aXRlQ29kZT0ke2ludml0ZUNvZGV9IC8+YDtcXG5cIjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiU2lnblwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6MTh9LFwiZW5kTG9jXCI6e1wiY29sXCI6MTUwLFwibGluZVwiOjE4fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjIwLFwibGluZVwiOjE4fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxNTAsXCJsaW5lXCI6MTh9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdFbWJlZHMvU2lnbicsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3Mtc2lnbicsXG4gIGFyZ3M6IHtcbiAgICBlbnZlbG9wZUlkOiAnYjRhMDNmN2UtOGEyYi00NzUyLWFjNjUtNjIxMTE0YTFmODc4JyxcbiAgICByb2xlSWQ6ICdTZWxsZXInLFxuICAgIGludml0ZUNvZGU6ICdlNGJlZTI0YzNkMjc5NWYzNDBjZWViNTNmNmZlZmMxYScsXG4gIH0sXG4gIGFyZ1R5cGVzOiB7fSxcbiAgcGFyYW1ldGVyczoge1xuICAgIGxheW91dDogJ2Z1bGxzY3JlZW4nLFxuICB9LFxufSBhcyBNZXRhO1xuXG5leHBvcnQgY29uc3QgU2lnbiA9ICh7ZW52ZWxvcGVJZCwgcm9sZUlkLCBpbnZpdGVDb2RlfSkgPT4gaHRtbGA8dmVyZG9jcy1zaWduIC5lbnZlbG9wZUlkPSR7ZW52ZWxvcGVJZH0gLnJvbGVJZD0ke3JvbGVJZH0gLmludml0ZUNvZGU9JHtpbnZpdGVDb2RlfSAvPmA7XG5cblxuXG5TaWduLnBhcmFtZXRlcnMgPSB7IHN0b3J5U291cmNlOiB7IHNvdXJjZTogXCIoe2VudmVsb3BlSWQsIHJvbGVJZCwgaW52aXRlQ29kZX0pID0+IGh0bWxgPHZlcmRvY3Mtc2lnbiAuZW52ZWxvcGVJZD0ke2VudmVsb3BlSWR9IC5yb2xlSWQ9JHtyb2xlSWR9IC5pbnZpdGVDb2RlPSR7aW52aXRlQ29kZX0gLz5gXCIgfSwgLi4uU2lnbi5wYXJhbWV0ZXJzIH07IiwiXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAvLyBAdHMtbm9jaGVja1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcXG5pbXBvcnQge01ldGF9IGZyb20gJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnRW1iZWRzL1ZpZXcnLFxcbiAgY29tcG9uZW50OiAndmVyZG9jcy12aWV3JyxcXG4gIGFyZ3M6IHtcXG4gICAgZW52ZWxvcGVJZDogJzkyZjNkZDFlLTlmZjItNDRjMy04Yzk2LTMyYTViNjUwZWQ2ZCcsXFxuICB9LFxcbiAgYXJnVHlwZXM6IHt9LFxcbiAgcGFyYW1ldGVyczoge1xcbiAgICBsYXlvdXQ6ICdmdWxsc2NyZWVuJyxcXG4gIH0sXFxufSBhcyBNZXRhO1xcblxcbmV4cG9ydCBjb25zdCBWaWV3ID0gKHtlbnZlbG9wZUlkfSkgPT4gaHRtbGA8dmVyZG9jcy12aWV3IC5lbnZlbG9wZUlkPSR7ZW52ZWxvcGVJZH0gLz5gO1xcblwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJWaWV3XCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyMCxcImxpbmVcIjoxNn0sXCJlbmRMb2NcIjp7XCJjb2xcIjo4NixcImxpbmVcIjoxNn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMCxcImxpbmVcIjoxNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6ODYsXCJsaW5lXCI6MTZ9fX07XG4gICAgXG5pbXBvcnQge2h0bWx9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7TWV0YX0gZnJvbSAnQHN0b3J5Ym9vay93ZWItY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdGl0bGU6ICdFbWJlZHMvVmlldycsXG4gIGNvbXBvbmVudDogJ3ZlcmRvY3MtdmlldycsXG4gIGFyZ3M6IHtcbiAgICBlbnZlbG9wZUlkOiAnOTJmM2RkMWUtOWZmMi00NGMzLThjOTYtMzJhNWI2NTBlZDZkJyxcbiAgfSxcbiAgYXJnVHlwZXM6IHt9LFxuICBwYXJhbWV0ZXJzOiB7XG4gICAgbGF5b3V0OiAnZnVsbHNjcmVlbicsXG4gIH0sXG59IGFzIE1ldGE7XG5cbmV4cG9ydCBjb25zdCBWaWV3ID0gKHtlbnZlbG9wZUlkfSkgPT4gaHRtbGA8dmVyZG9jcy12aWV3IC5lbnZlbG9wZUlkPSR7ZW52ZWxvcGVJZH0gLz5gO1xuXG5cblxuVmlldy5wYXJhbWV0ZXJzID0geyBzdG9yeVNvdXJjZTogeyBzb3VyY2U6IFwiKHtlbnZlbG9wZUlkfSkgPT4gaHRtbGA8dmVyZG9jcy12aWV3IC5lbnZlbG9wZUlkPSR7ZW52ZWxvcGVJZH0gLz5gXCIgfSwgLi4uVmlldy5wYXJhbWV0ZXJzIH07IiwiaW1wb3J0ICdAc3Rvcnlib29rL3dlYi1jb21wb25lbnRzJzsiXSwic291cmNlUm9vdCI6IiJ9