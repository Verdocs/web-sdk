(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{"./dist/esm/verdocs-initial-dialog.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_initial_dialog",(function(){return VerdocsInitialDialog}));__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var _index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./dist/esm/index-5d92e60f.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var VerdocsInitialDialog=function(){function VerdocsInitialDialog(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsInitialDialog),Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.h)(this,hostRef),this.adopt=Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.d)(this,"adopt",7),this.cancel=Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.d)(this,"cancel",7),this.fullname="",this.open=!1,this.fontLoaded=!1,this.enteredInitials="",this.mode="type"}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsInitialDialog,[{key:"componentWillLoad",value:function componentWillLoad(){var _this=this;this.enteredInitials=this.fullname.split(" ").map((function(s){return s.substring(0,1)})).join("").toUpperCase(),new FontFace("Dancing Script","url(https://fonts.gstatic.com/s/dancingscript/v19/If2cXTr6YS-zF4S-kcSWSVi_sxjsohD9F50Ruu7BMSo3Sup6hNX6plRP.woff)").load().then((function(font){document.fonts.add(font),_this.fontLoaded=!0}))}},{key:"componentDidLoad",value:function componentDidLoad(){this.redrawSignature()}},{key:"componentDidUpdate",value:function componentDidUpdate(){this.redrawSignature()}},{key:"redrawSignature",value:function redrawSignature(){if(this.canvasElement){var canvasWidth=this.canvasElement.width,context=this.canvasElement.getContext("2d");context.clearRect(0,0,this.canvasElement.width,this.canvasElement.height);var fontSize=100;do{fontSize-=2,context.font=fontSize+"px Dancing Script"}while(context.measureText(this.enteredInitials).width>canvasWidth-32);context.textAlign="center",context.textBaseline="middle",context.font=fontSize+"px Dancing Script",context.fillText(this.enteredInitials,this.canvasElement.width/2,this.canvasElement.height/2)}}},{key:"handleDismiss",value:function handleDismiss(e){"background-overlay"===e.target.className&&(e.preventDefault(),this.handleCancel())}},{key:"handleNameChange",value:function handleNameChange(e){this.enteredInitials=e.detail}},{key:"handleAdopt",value:function handleAdopt(){var data=this.canvasElement.toDataURL("image/png");this.adopt.emit(data),this.open=!1}},{key:"handleCancel",value:function handleCancel(){this.cancel.emit(),this.open=!1}},{key:"render",value:function render(){var _this2=this;return Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.b,{class:{open:this.open}},Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{class:"background-overlay",onClick:function onClick(e){return _this2.handleDismiss(e)}},Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{class:"dialog"},Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{class:"heading"},"Create Your Initial"),Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{class:"content"},Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("verdocs-text-input",{placeholder:"Initials...",label:"Initials",value:this.enteredInitials,onFieldInput:function onFieldInput(e){return _this2.handleNameChange(e)}}),Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{class:"as-shown"},"As shown on driver's license or govt. ID card."),Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{class:"tabs"},Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{class:{tab:!0,active:"type"===this.mode},onClick:function onClick(){return _this2.mode="type"}},"Type"),Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{class:{tab:!0,active:"draw"===this.mode},onClick:function onClick(){return _this2.mode="draw"}},"Draw")),this.fontLoaded?Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("canvas",{ref:function ref(el){return _this2.canvasElement=el}}):Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{style:{display:"none"}}),Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{class:"disclaimer"},"By clicking Adopt, I agree that the signature will be the electronic representation of my signature for all purposes when I (or my agent) use them on documents, including legally binding contracts â€” just the same as a pen-and-paper signature or initial."),Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("div",{class:"buttons"},Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("verdocs-button",{label:"CANCEL",variant:"outline",onPress:function onPress(){return _this2.handleCancel()}}),Object(_index_5d92e60f_js__WEBPACK_IMPORTED_MODULE_5__.f)("verdocs-button",{label:"Adopt & Sign",onPress:function onPress(){return _this2.handleAdopt()}}))))))}}]),VerdocsInitialDialog}();VerdocsInitialDialog.style='verdocs-initial-dialog{font-family:"Barlow", sans-serif;-webkit-box-sizing:border-box;box-sizing:border-box;display:none}verdocs-initial-dialog.open{display:block}verdocs-initial-dialog .background-overlay{position:absolute;z-index:10000;top:0;left:0;right:0;bottom:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;background:#0000007f}verdocs-initial-dialog .dialog{width:100%;max-width:340px;border-radius:4px;overflow:hidden;-webkit-box-shadow:3px 3px 5px 1px rgba(40, 40, 40, 0.4);box-shadow:3px 3px 5px 1px rgba(40, 40, 40, 0.4);background:#f9f9f9}verdocs-initial-dialog .heading{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;padding:20px 20px 0 20px;line-height:28px;font-size:20px;font-weight:500}verdocs-initial-dialog .content{font-size:14px;padding:20px}verdocs-initial-dialog .buttons{display:-ms-flexbox;display:flex;margin:20px 0 0 0;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:end;justify-content:flex-end;-ms-flex-align:center;align-items:center}verdocs-initial-dialog .buttons verdocs-button{margin-left:16px}verdocs-initial-dialog canvas{background:#fff;-webkit-box-sizing:border-box;box-sizing:border-box;margin:0 auto;width:300px;height:79px;max-width:100%;-webkit-box-shadow:0 0 6px 0 #0000001f;box-shadow:0 0 6px 0 #0000001f}verdocs-initial-dialog .disclaimer{text-align:justify;padding:8px 0;font-size:11px;line-height:14px;color:rgba(0, 0, 0, 0.54)}verdocs-initial-dialog .as-shown{font-size:11px;margin:4px 0 20px 4px;color:rgba(0, 0, 0, 0.54)}verdocs-initial-dialog .tabs{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}verdocs-initial-dialog .tabs .tab{padding:8px 15px;cursor:pointer}verdocs-initial-dialog .tabs .tab.active{border-bottom:2px solid #cccccc}verdocs-initial-dialog .tabs .tab:hover{color:#55bc81}'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,