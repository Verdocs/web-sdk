/*! For license information please see 17.20c1d59b.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"./dist/esm/Fields-95e4be98.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function getRGBA(roleIndex){switch(roleIndex%10){case 0:return 0===roleIndex?"rgba(255, 193, 7, 0.4)":"rgba(134, 134, 134, 0.3)";case 1:return"rgba(156, 39, 176, .4)";case 2:return"rgba(33, 150, 243, .4)";case 3:return"rgba(220, 231, 117, 0.3)";case 4:return"rgba(121, 134, 203, 0.3)";case 5:return"rgba(77, 182, 172, 0.3)";case 6:return"rgba(255, 202, 165, 0.3)";case 7:return"rgba(2, 247, 190, 0.3)";case 8:return"rgba(255, 138, 101, 0.3)";case 9:return"rgba(82, 255, 79, 0.3)";default:return"rgba(229, 115, 155, 0.3)"}}function rescale(r,n){return r*n}__webpack_require__.d(__webpack_exports__,"a",(function(){return getRGBA})),__webpack_require__.d(__webpack_exports__,"b",(function(){return rescale}))},"./dist/esm/verdocs-sign.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_sign",(function(){return VerdocsSign}));__webpack_require__("./node_modules/core-js/modules/es.regexp.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.find-index.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/web.url.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.async-iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js");var _index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__=__webpack_require__("./dist/esm/index-542510c1.js"),_VerdocsEndpoint_89cdf06e_js__WEBPACK_IMPORTED_MODULE_30__=__webpack_require__("./dist/esm/VerdocsEndpoint-89cdf06e.js"),_Fields_95e4be98_js__WEBPACK_IMPORTED_MODULE_31__=__webpack_require__("./dist/esm/Fields-95e4be98.js");function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function define(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return generator._invoke=function(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}(innerFn,self,context),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;this._invoke=function(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}}function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(void 0===method){if(context.delegate=null,"throw"===context.method){if(delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method))return ContinueSentinel;context.method="throw",context.arg=new TypeError("The iterator does not provide a 'throw' method")}return ContinueSentinel}var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,define(Gp,"constructor",GeneratorFunctionPrototype),define(GeneratorFunctionPrototype,"constructor",GeneratorFunction),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(object){var keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var e164Regex=new RegExp(/\+[1-9]\d{6,14}/g);var EmailRegEx=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,isValidPhone=function isValidPhone(value){return function simpleE164Validator(code){return null!==code&&code.length<16&&code.length>6&&e164Regex.test(code)||""===code||null===code}(value)},VerdocsSign=function(){function VerdocsSign(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsSign),Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.h)(this,hostRef),this.endpoint=_VerdocsEndpoint_89cdf06e_js__WEBPACK_IMPORTED_MODULE_30__.a.getDefault(),this.documentId=null,this.roleId=null,this.inviteCode=null,this.recipient=null,this.signerToken=null,this.pdfUrl=null,this.recipientIndex=-1,this.document=null,this.fields=[],this.hasSignature=!1,this.nextButtonLabel="Start",this.focusedField=""}var _handleFieldChange,_handleOptionSelected,_savePDF,_componentDidLoad;return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsSign,[{key:"componentDidLoad",value:(_componentDidLoad=_asyncToGenerator(_regeneratorRuntime().mark((function _callee(){var _yield$getSigningSess,session,recipient,signerToken,_document,_this=this;return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return _context.prev=0,console.log("[SIGN] Processing invite code for "+this.documentId+" / "+this.documentId),_context.next=4,Object(_VerdocsEndpoint_89cdf06e_js__WEBPACK_IMPORTED_MODULE_30__.e)(this.endpoint,{documentId:this.documentId,roleId:this.roleId,inviteCode:this.inviteCode});case 4:return _yield$getSigningSess=_context.sent,session=_yield$getSigningSess.session,recipient=_yield$getSigningSess.recipient,signerToken=_yield$getSigningSess.signerToken,console.log("[SIGN] Got signing session "+session.email+" / "+session.profile_id),this.recipient=recipient,this.signerToken=signerToken,this.endpoint.setToken(signerToken),this.recipient.agreed&&(this.nextButtonLabel="Next"),_context.next=15,Object(_VerdocsEndpoint_89cdf06e_js__WEBPACK_IMPORTED_MODULE_30__.b)(this.endpoint,this.documentId);case 15:_document=_context.sent,this.document=_document,console.log("[SIGN] Signing document",_document),this.pdfUrl=this.endpoint.getBaseURL()+"/documents/"+this.documentId+"/envelope_documents/"+_document.envelope_document_id+"?file=true",this.recipientIndex=this.document.recipients.findIndex((function(recipient){return recipient.role_name==_this.roleId})),this.recipientIndex>-1&&console.log("Found recipient",this.document.recipients[this.recipientIndex]),this.fields=this.document.fields.filter((function(field){return field.recipient_role===_this.roleId})),console.log("Loaded fields",this.fields),_context.next=28;break;case 25:_context.prev=25,_context.t0=_context.catch(0),console.log("Error with signing session",_context.t0);case 28:case"end":return _context.stop()}}),_callee,this,[[0,25]])}))),function componentDidLoad(){return _componentDidLoad.apply(this,arguments)})},{key:"handleClickAgree",value:function handleClickAgree(){var _this2=this;console.log("agree clicked"),Object(_VerdocsEndpoint_89cdf06e_js__WEBPACK_IMPORTED_MODULE_30__.f)(this.endpoint,this.documentId,this.roleId,"update",{agreed:!0}).then((function(r){console.log("update result",r),_this2.nextButtonLabel="Next",_this2.recipient=r})).catch((function(e){console.log("update failure",e)}))}},{key:"savePDF",value:(_savePDF=_asyncToGenerator(_regeneratorRuntime().mark((function _callee2(){var fileName,data,xhr,url;return _regeneratorRuntime().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return fileName=this.document.name+" - "+this.document.updated_at.split("T")[0]+".pdf",_context2.next=3,Object(_VerdocsEndpoint_89cdf06e_js__WEBPACK_IMPORTED_MODULE_30__.c)(this.endpoint,this.documentId,this.document.envelope_document_id);case 3:data=_context2.sent,(xhr=new XMLHttpRequest).responseType="blob",xhr.onload=function(){var a=document.createElement("a");a.href=window.URL.createObjectURL(xhr.response),a.download=fileName,a.style.display="none",document.body.appendChild(a),a.click(),a.remove()},url="data:application/pdf;base64,"+data,console.log("url",url.length,url),xhr.open("GET","data:application/pdf;base64,"+data),xhr.send();case 11:case"end":return _context2.stop()}}),_callee2,this)}))),function savePDF(){return _savePDF.apply(this,arguments)})},{key:"handleOptionSelected",value:(_handleOptionSelected=_asyncToGenerator(_regeneratorRuntime().mark((function _callee3(e){return _regeneratorRuntime().wrap((function _callee3$(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:_context3.t0=e.detail.id,_context3.next="later"===_context3.t0?3:"claim"===_context3.t0?5:"decline"===_context3.t0?6:"print"===_context3.t0?7:"download"===_context3.t0?8:10;break;case 3:return(null===window||void 0===window?void 0:window.STORYBOOK_ENV)||window.alert("User intends to sign later."),_context3.abrupt("break",10);case 5:case 6:case 7:return _context3.abrupt("break",10);case 8:return this.savePDF().catch((function(){})),_context3.abrupt("break",10);case 10:case"end":return _context3.stop()}}),_callee3,this)}))),function handleOptionSelected(_x){return _handleOptionSelected.apply(this,arguments)})},{key:"handleFieldChange",value:(_handleFieldChange=_asyncToGenerator(_regeneratorRuntime().mark((function _callee4(field,e,optionId){var options;return _regeneratorRuntime().wrap((function _callee4$(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:console.log("fieldChange",field,e.detail),_context4.t0=field.type,_context4.next="textbox"===_context4.t0?4:"checkbox_group"===_context4.t0?6:"radio_button_group"===_context4.t0?8:"dropdown"===_context4.t0?11:"initial"===_context4.t0?13:"signature"===_context4.t0?15:17;break;case 4:return Object(_VerdocsEndpoint_89cdf06e_js__WEBPACK_IMPORTED_MODULE_30__.d)(this.endpoint,this.documentId,field.name,{prepared:!1,value:e.detail}).then((function(r){return console.log("Update result",r)})).catch((function(e){var _a,_b,_c;401===(null===(_a=e.response)||void 0===_a?void 0:_a.status)&&"jwt expired"===(null===(_c=null===(_b=e.response)||void 0===_b?void 0:_b.data)||void 0===_c?void 0:_c.error)&&console.log("jwt expired"),console.log("Error updating",e)})),_context4.abrupt("break",17);case 6:return Object(_VerdocsEndpoint_89cdf06e_js__WEBPACK_IMPORTED_MODULE_30__.d)(this.endpoint,this.documentId,field.name,{prepared:!1,value:{options:[{id:optionId,checked:e.detail}]}}).then((function(r){return console.log("Update result",r)})).catch((function(e){return console.log("Error updating",e)})),_context4.abrupt("break",17);case 8:return options=field.settings.options.map((function(option){return{id:option.id,selected:optionId===option.id}})),Object(_VerdocsEndpoint_89cdf06e_js__WEBPACK_IMPORTED_MODULE_30__.d)(this.endpoint,this.documentId,field.name,{prepared:!1,value:{options:options}}).then((function(r){return console.log("Update result",r)})).catch((function(e){return console.log("Error updating",e)})),_context4.abrupt("break",17);case 11:return Object(_VerdocsEndpoint_89cdf06e_js__WEBPACK_IMPORTED_MODULE_30__.d)(this.endpoint,this.documentId,field.name,{prepared:!1,value:e.detail}).then((function(r){return console.log("Update result",r)})).catch((function(e){return console.log("Error updating",e)})),_context4.abrupt("break",17);case 13:return console.log("Got initial",e.detail),_context4.abrupt("break",17);case 15:return console.log("Got signature",e.detail),_context4.abrupt("break",17);case 17:case"end":return _context4.stop()}}),_callee4,this)}))),function handleFieldChange(_x2,_x3,_x4){return _handleFieldChange.apply(this,arguments)})},{key:"renderCheckboxGroupOption",value:function renderCheckboxGroupOption(page,field,option){var _this3=this,style={left:Object(_Fields_95e4be98_js__WEBPACK_IMPORTED_MODULE_31__.b)(page.xScale,option.x)+"px",bottom:Object(_Fields_95e4be98_js__WEBPACK_IMPORTED_MODULE_31__.b)(page.yScale,option.y)+"px",position:"absolute",transform:"scale("+page.xScale+", "+page.yScale+")",backgroundColor:Object(_Fields_95e4be98_js__WEBPACK_IMPORTED_MODULE_31__.a)(this.recipientIndex)};return Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("verdocs-field-checkbox",{style:style,field:field,onFieldChange:function onFieldChange(e){return _this3.handleFieldChange(field,e,option.id)}})}},{key:"renderRadioGroupOption",value:function renderRadioGroupOption(page,field,option){var _this4=this,style={left:Object(_Fields_95e4be98_js__WEBPACK_IMPORTED_MODULE_31__.b)(page.xScale,option.x)+"px",bottom:Object(_Fields_95e4be98_js__WEBPACK_IMPORTED_MODULE_31__.b)(page.yScale,option.y)+"px",position:"absolute",transform:"scale("+page.xScale+", "+page.yScale+")",backgroundColor:Object(_Fields_95e4be98_js__WEBPACK_IMPORTED_MODULE_31__.a)(this.recipientIndex)};return Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("verdocs-field-radio-button",{style:style,field:field,onFieldChange:function onFieldChange(e){return _this4.handleFieldChange(field,e,option.id)}})}},{key:"isFieldValid",value:function isFieldValid(field){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m;switch(field.type){case"textbox":switch((null===(_a=field.settings)||void 0===_a?void 0:_a.validator)||""){case"email":return function isValidEmail(value){return EmailRegEx.test(value)}((null===(_b=field.settings)||void 0===_b?void 0:_b.result)||"");case"phone":return isValidPhone((null===(_c=field.settings)||void 0===_c?void 0:_c.result)||"");default:return!!(null===(_d=field.settings)||void 0===_d?void 0:_d.result)}case"signature":case"initial":case"textarea":case"date":case"timestamp":case"attachment":return!!(null===(_e=field.settings)||void 0===_e?void 0:_e.result);case"dropdown":return!!(null===(_f=field.settings)||void 0===_f?void 0:_f.value);case"checkbox_group":var checked=((null===(_h=null===(_g=field.settings)||void 0===_g?void 0:_g.options)||void 0===_h?void 0:_h.filter((function(option){return option.checked})))||[]).length;return checked>=((null===(_j=field.settings)||void 0===_j?void 0:_j.minimum_checked)||0)&&checked<=((null===(_k=field.settings)||void 0===_k?void 0:_k.maximum_checked)||999);case"radio_button_group":return((null===(_m=null===(_l=field.settings)||void 0===_l?void 0:_l.options)||void 0===_m?void 0:_m.filter((function(option){return option.selected})))||[]).length>0;default:return!1}}},{key:"getFieldId",value:function getFieldId(field){return"verdocs-doc-fld-"+field.name}},{key:"handleNext",value:function handleNext(){var _this5=this,requiredFields=this.fields.filter((function(field){return field.required}));console.log("required Fields",requiredFields);var focusedIndex=requiredFields.findIndex((function(field){return field.name===_this5.focusedField}));console.log("focused Index",focusedIndex);var nextFocusedIndex=focusedIndex+1;nextFocusedIndex>=requiredFields.length&&(nextFocusedIndex=0);var nextRequiredField=requiredFields[nextFocusedIndex];if(console.log("next required field",nextRequiredField),nextRequiredField){var id=this.getFieldId(nextRequiredField),el=document.getElementById(id);console.log("focusing",id,el),null==el||el.focusField(),this.focusedField=nextRequiredField.name}}},{key:"setControlStyles",value:function setControlStyles(el,field,docPage){var _field$settings=field.settings,_field$settings$x=_field$settings.x,x=void 0===_field$settings$x?0:_field$settings$x,_field$settings$y=_field$settings.y,y=void 0===_field$settings$y?0:_field$settings$y,_field$settings$width=_field$settings.width,width=void 0===_field$settings$width?150:_field$settings$width,_field$settings$heigh=_field$settings.height,height=void 0===_field$settings$heigh?50:_field$settings$heigh;el.style.width=width+"px",el.style.height=height+"px",el.style.position="absolute",el.style.left=Object(_Fields_95e4be98_js__WEBPACK_IMPORTED_MODULE_31__.b)(docPage.xScale,x)+"px",el.style.bottom=Object(_Fields_95e4be98_js__WEBPACK_IMPORTED_MODULE_31__.b)(docPage.yScale,y)+"px",el.style.transform="scale("+docPage.xScale+", "+docPage.yScale+")",el.style.backgroundColor=field.rgba||Object(_Fields_95e4be98_js__WEBPACK_IMPORTED_MODULE_31__.a)(this.recipientIndex)}},{key:"renderField",value:function renderField(field,docPage){var _this6=this,controlsDiv=document.getElementById(docPage.containerId+"-controls");if(controlsDiv){var id=this.getFieldId(field),existingField=document.getElementById(id);if(existingField)this.setControlStyles(existingField,field,docPage);else{var el;switch(field.type){case"attachment":case"checkbox":case"date":case"dropdown":case"initial":case"payment":case"signature":case"timestamp":case"textarea":case"textbox":el=document.createElement("verdocs-field-"+field.type);break;case"checkbox_group":case"radio_button_group":break;default:console.log("[SIGN] Skipping unsupported field type",field)}el&&(el.field=field,el.recipient=this.recipient,el.setAttribute("id",id),el.addEventListener("fieldChange",(function(e){return _this6.handleFieldChange(field,e)})),this.setControlStyles(el,field,docPage),controlsDiv.appendChild(el))}}}},{key:"handlePageRendered",value:function handlePageRendered(e){var _this7=this,pageInfo=e.detail;console.log("[SIGN] Page rendered",pageInfo);var fields=this.fields.filter((function(field){return field.page===pageInfo.renderedPage.pageNumber}));console.log("[SIGN] Fields on page",fields),fields.forEach((function(field){return _this7.renderField(field,pageInfo.renderedPage)}))}},{key:"render",value:function render(){var _a,_b,_c,_d,_this8=this;return Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.b,{class:{storybook:!!(null===window||void 0===window?void 0:window.STORYBOOK_ENV),agreed:null===(_a=this.recipient)||void 0===_a?void 0:_a.agreed}},Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"intro"},Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"inner"},"Please review and act on these documents.")),Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"header"},Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"inner"},Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"toolbar"},Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"tools"},Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("verdocs-dropdown",{options:[{id:"later",label:"Finish Later"},{id:"claim",label:"Claim the Document",disabled:!0},{id:"decline",label:"Decline to Sign"},{id:"print",label:"Print Without Signing"},{id:"download",label:"Download"}],onOptionSelected:function onOptionSelected(e){return _this8.handleOptionSelected(e)}}),(null===(_b=this.recipient)||void 0===_b?void 0:_b.agreed)?Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{style:{flex:"1"}}):Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"agree"},Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"agree-checkbox"},Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("input",{type:"checkbox",value:"None",id:"agree-checkbox-element",name:"agree",onChange:function onChange(){return _this8.handleClickAgree()}}),Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("label",{htmlFor:"agree-checkbox-element"})),Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("span",null,"I agree to use electronic records and signatures.")),Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("verdocs-button",{size:"small",label:this.nextButtonLabel,disabled:!(null===(_c=this.recipient)||void 0===_c?void 0:_c.agreed),onClick:function onClick(){return _this8.handleNext()}}))))),(null===(_d=this.recipient)||void 0===_d?void 0:_d.agreed)?Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{style:{display:"none"}}):Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"cover"}),Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"document"},this.pdfUrl?Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"inner"},Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("verdocs-view",{source:this.pdfUrl,endpoint:this.endpoint,onPageRendered:function onPageRendered(e){return _this8.handlePageRendered(e)},pageLayers:[{name:"page",type:"canvas"},{name:"controls",type:"div"}]})):Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_29__.f)("verdocs-loader",null)))}}]),VerdocsSign}();VerdocsSign.style='verdocs-sign{display:-ms-flexbox;display:flex;overflow:hidden;position:relative;min-height:600px;-ms-flex-direction:column;flex-direction:column;-webkit-box-sizing:border-box;box-sizing:border-box;font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif}verdocs-sign div{-webkit-box-sizing:border-box;box-sizing:border-box}verdocs-sign .header{-ms-flex:0;flex:0;display:-ms-flexbox;display:flex;z-index:1000;-ms-flex-align:center;align-items:center;-webkit-transition:all 0.25s;transition:all 0.25s;-ms-flex-pack:center;justify-content:center;background-color:#33354c;-webkit-box-shadow:0 4px 4px 0 rgba(0, 0, 0, 0.24), 0 0 4px 0 rgba(0, 0, 0, 0.12);box-shadow:0 4px 4px 0 rgba(0, 0, 0, 0.24), 0 0 4px 0 rgba(0, 0, 0, 0.12)}verdocs-sign .header .inner{width:100%;max-width:1028px}verdocs-sign .intro{width:100%;height:60px;display:-ms-flexbox;display:flex;background:#ffffff;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}verdocs-sign .intro .inner{width:100%;color:#111111;padding:0 14px;font-size:20px;font-weight:500;line-height:28px;max-width:1024px}verdocs-sign .toolbar{width:100%;margin:0 auto;padding:0 14px;position:relative}verdocs-sign .tools{width:100%;color:#fff;height:56px;display:-ms-flexbox;display:flex;font-size:12px;-ms-flex-align:center;align-items:center;-ms-flex-direction:row;flex-direction:row;background-color:#33354c}verdocs-sign .cover{top:0;left:0;right:0;bottom:0;z-index:999;position:absolute;background:rgba(0, 0, 0, 0.5)}verdocs-sign .document{-ms-flex:1;flex:1;height:100%;display:-ms-flexbox;display:flex;position:relative;overflow-y:scroll;-ms-flex-align:center;align-items:center;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center}verdocs-sign .document .inner{width:100%;max-width:1028px}verdocs-sign .agree{-ms-flex:1;flex:1;-ms-flex-direction:row;flex-direction:row;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;margin-right:10px}verdocs-sign .agree .intro{display:none}verdocs-sign .agree .header{-ms-flex:0 0 56px;flex:0 0 56px}verdocs-sign .agree .agree-checkbox{background:#ccc;-ms-flex:0 0 20px;flex:0 0 20px;display:-ms-flexbox;display:flex;width:20px;height:20px;border-radius:3px;position:relative;margin:0 10px 0 14px}verdocs-sign .agree .agree-checkbox input[type=checkbox]:checked+label:after{filter:alpha(opacity=100);opacity:1}verdocs-sign .agree .agree-checkbox label{left:2px;top:2px;width:16px;height:16px;cursor:pointer;position:absolute;background:#33354c;-webkit-box-shadow:inset 0 -1px 1px rgba(255, 255, 255, 0.8);box-shadow:inset 0 -1px 1px rgba(255, 255, 255, 0.8)}verdocs-sign .agree .agree-checkbox label .agree-checkbox label:hover::after{filter:alpha(opacity=30);opacity:0.3}verdocs-sign .agree .agree-checkbox label:after{top:2px;left:3px;width:8px;opacity:0;height:5px;content:"";position:absolute;background:transparent;filter:alpha(opacity=0);-webkit-transform:rotate(-45deg);transform:rotate(-45deg);border:2px solid #fcfff4;border-top:none;border-right:none}'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,