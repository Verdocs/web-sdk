/*! For license information please see 13.99c567e6.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{"./dist/esm/Colors-1b298092.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function getRGBA(roleIndex){switch(roleIndex%10){case 0:return 0===roleIndex?"rgba(255, 193, 7, 0.4)":"rgba(134, 134, 134, 0.3)";case 1:return"rgba(156, 39, 176, .4)";case 2:return"rgba(33, 150, 243, .4)";case 3:return"rgba(220, 231, 117, 0.3)";case 4:return"rgba(121, 134, 203, 0.3)";case 5:return"rgba(77, 182, 172, 0.3)";case 6:return"rgba(255, 202, 165, 0.3)";case 7:return"rgba(2, 247, 190, 0.3)";case 8:return"rgba(255, 138, 101, 0.3)";case 9:return"rgba(82, 255, 79, 0.3)";default:return"rgba(229, 115, 155, 0.3)"}}__webpack_require__.d(__webpack_exports__,"a",(function(){return getRGBA}))},"./dist/esm/utils-3f23facc.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getRoleIndex})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getFieldId})),__webpack_require__.d(__webpack_exports__,"c",(function(){return rescale})),__webpack_require__.d(__webpack_exports__,"d",(function(){return fullNameToInitials})),__webpack_require__.d(__webpack_exports__,"e",(function(){return getFieldSettings})),__webpack_require__.d(__webpack_exports__,"f",(function(){return integerSequence})),__webpack_require__.d(__webpack_exports__,"g",(function(){return renderDocumentField})),__webpack_require__.d(__webpack_exports__,"h",(function(){return setControlStyles}));__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.array.fill.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js");function rescale(r,n){return r*n}var integerSequence=function integerSequence(start,count){return Array(count).fill(1).map((function(_,index){return index+start}))},fullNameToInitials=function fullNameToInitials(name){return name.split(" ").map((function(word){return word[0]})).join("")},setControlStyles=function setControlStyles(el,field,xScale,yScale,option){var _a,_b,_c,_d,settings=field.setting||field.settings,_settings$x=settings.x,x=void 0===_settings$x?0:_settings$x,_settings$y=settings.y,y=void 0===_settings$y?0:_settings$y,_settings$width=settings.width,width=void 0===_settings$width?function defaultWidth(field){switch(field.type){case"attachment":case"payment":return 24;case"checkbox":case"checkbox_group":case"radio_button_group":return 14;case"signature":case"initial":return 82}return 150}(field):_settings$width,_settings$height=settings.height,height=void 0===_settings$height?function defaultHeight(field){switch(field.type){case"attachment":case"payment":return 24;case"checkbox":case"checkbox_group":case"radio_button_group":return 14;case"signature":case"initial":return 41}return 50}(field):_settings$height,optionSettings=void 0!==option&&settings.options[option]?settings.options[option]:null;optionSettings&&(x=null!==(_a=optionSettings.x)&&void 0!==_a?_a:x,y=null!==(_b=optionSettings.y)&&void 0!==_b?_b:y,width=null!==(_c=optionSettings.width)&&void 0!==_c?_c:width,height=null!==(_d=optionSettings.height)&&void 0!==_d?_d:height),el.style.width=width+"px",el.style.height=height+"px",el.style.position="absolute",el.style.left=rescale(xScale,x)+"px",el.style.bottom=rescale(yScale,y)+"px",el.style.transform="scale("+xScale+", "+yScale+")"},getFieldId=function getFieldId(field){return"verdocs-doc-fld-"+field.name},getFieldOptionId=function getFieldOptionId(field,index){return"verdocs-doc-fld-"+field.name+"-"+index},renderDocumentField=function renderDocumentField(field,docPage,roleIndex,handleFieldChange,disabled){var editable=arguments.length>5&&void 0!==arguments[5]&&arguments[5],draggable=arguments.length>6&&void 0!==arguments[6]&&arguments[6],controlsDiv=document.getElementById(docPage.containerId+"-controls");if(controlsDiv)switch(field.type){case"attachment":case"date":case"dropdown":case"initial":case"payment":case"signature":case"timestamp":case"textarea":case"textbox":var id=getFieldId(field),existingField=document.getElementById(id);if(existingField)return void setControlStyles(existingField,field,docPage.xScale,docPage.yScale);var el=document.createElement("verdocs-field-"+field.type);return el.field=field,el.setAttribute("id",id),el.setAttribute("roleindex",roleIndex),disabled&&el.setAttribute("disabled",!0),editable&&el.setAttribute("editable",!0),draggable&&el.setAttribute("draggable",!0),el.addEventListener("fieldChange",(function(e){return handleFieldChange(field,e)})),setControlStyles(el,field,docPage.xScale,docPage.yScale),controlsDiv.appendChild(el),el;case"checkbox_group":field.setting.options.forEach((function(_,checkboxIndex){var id=getFieldOptionId(field,checkboxIndex),existingField=document.getElementById(id);if(!existingField){var cbEl=document.createElement("verdocs-field-checkbox");return cbEl.field=field,cbEl.setAttribute("id",id),cbEl.setAttribute("roleindex",roleIndex),cbEl.setAttribute("option",checkboxIndex),disabled&&cbEl.setAttribute("disabled",!0),cbEl.addEventListener("fieldChange",(function(e){return handleFieldChange(field,e)})),setControlStyles(cbEl,field,docPage.xScale,docPage.yScale),controlsDiv.appendChild(cbEl),cbEl}setControlStyles(existingField,field,docPage.xScale,docPage.yScale)}));break;case"radio_button_group":field.setting.options.forEach((function(_,buttonIndex){var id=getFieldOptionId(field,buttonIndex),existingField=document.getElementById(id);if(!existingField){var cbEl=document.createElement("verdocs-field-radio-button");return cbEl.field=field,cbEl.setAttribute("id",id),cbEl.setAttribute("roleindex",roleIndex),cbEl.setAttribute("option",buttonIndex),disabled&&cbEl.setAttribute("disabled",!0),cbEl.addEventListener("fieldChange",(function(e){return handleFieldChange(field,e)})),setControlStyles(cbEl,field,docPage.xScale,docPage.yScale,buttonIndex),controlsDiv.appendChild(cbEl),cbEl}setControlStyles(existingField,field,docPage.xScale,docPage.yScale)}));break;default:return console.log("[PREVIEW] Skipping unsupported field type",field),null}},getRoleIndex=function getRoleIndex(roles,role){return roles.indexOf(role)||0},getFieldSettings=function getFieldSettings(field){return field.setting?field.setting:field.settings?field.settings:{x:0,y:0,required:!1,disabled:!1,result:"",value:""}}},"./dist/esm/verdocs-field-date.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_field_date",(function(){return VerdocsFieldDate}));__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/web.timers.js"),__webpack_require__("./node_modules/core-js/modules/es.parse-float.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.parse-int.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-iso-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.number.to-fixed.js"),__webpack_require__("./node_modules/core-js/modules/es.string.trim.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.array.splice.js"),__webpack_require__("./node_modules/core-js/modules/es.array.some.js"),__webpack_require__("./node_modules/core-js/modules/es.string.trim-end.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.async-iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js");var _index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__=__webpack_require__("./dist/esm/index-f78d163d.js"),_utils_3f23facc_js__WEBPACK_IMPORTED_MODULE_50__=__webpack_require__("./dist/esm/utils-3f23facc.js"),_Colors_1b298092_js__WEBPACK_IMPORTED_MODULE_51__=__webpack_require__("./dist/esm/Colors-1b298092.js");function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function define(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(void 0===method)return context.delegate=null,"throw"===methodName&&delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}var HOOKS=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange","onPreCalendarPosition"],defaults={_disable:[],allowInput:!1,allowInvalidPreload:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",autoFillDefaultTime:!0,clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enableSeconds:!1,enableTime:!1,errorHandler:function errorHandler(err){return"undefined"!=typeof console&&console.warn(err)},getWeek:function getWeek(givenDate){var date=new Date(givenDate.getTime());date.setHours(0,0,0,0),date.setDate(date.getDate()+3-(date.getDay()+6)%7);var week1=new Date(date.getFullYear(),0,4);return 1+Math.round(((date.getTime()-week1.getTime())/864e5-3+(week1.getDay()+6)%7)/7)},hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",monthSelectorType:"dropdown",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,now:new Date,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],onPreCalendarPosition:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,showMonths:1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},english={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function ordinal(nth){var s=nth%100;if(s>3&&s<21)return"th";switch(s%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"],yearAriaLabel:"Year",monthAriaLabel:"Month",hourAriaLabel:"Hour",minuteAriaLabel:"Minute",time_24hr:!1},pad=function pad(number,length){return void 0===length&&(length=2),("000"+number).slice(-1*length)},_int=function _int(bool){return!0===bool?1:0};function debounce(fn,wait){var t;return function(){var _this=this,args=arguments;clearTimeout(t),t=setTimeout((function(){return fn.apply(_this,args)}),wait)}}var arrayify=function arrayify(obj){return obj instanceof Array?obj:[obj]};function toggleClass(elem,className,bool){if(!0===bool)return elem.classList.add(className);elem.classList.remove(className)}function createElement(tag,className,content){var e=window.document.createElement(tag);return className=className||"",content=content||"",e.className=className,void 0!==content&&(e.textContent=content),e}function clearNode(node){for(;node.firstChild;)node.removeChild(node.firstChild)}function findParent(node,condition){return condition(node)?node:node.parentNode?findParent(node.parentNode,condition):void 0}function createNumberInput(inputClassName,opts){var wrapper=createElement("div","numInputWrapper"),numInput=createElement("input","numInput "+inputClassName),arrowUp=createElement("span","arrowUp"),arrowDown=createElement("span","arrowDown");if(-1===navigator.userAgent.indexOf("MSIE 9.0")?numInput.type="number":(numInput.type="text",numInput.pattern="\\d*"),void 0!==opts)for(var key in opts)numInput.setAttribute(key,opts[key]);return wrapper.appendChild(numInput),wrapper.appendChild(arrowUp),wrapper.appendChild(arrowDown),wrapper}function getEventTarget(event){try{return"function"==typeof event.composedPath?event.composedPath()[0]:event.target}catch(error){return event.target}}var doNothing=function doNothing(){},monthToStr=function monthToStr(monthNumber,shorthand,locale){return locale.months[shorthand?"shorthand":"longhand"][monthNumber]},revFormat={D:doNothing,F:function F(dateObj,monthName,locale){dateObj.setMonth(locale.months.longhand.indexOf(monthName))},G:function G(dateObj,hour){dateObj.setHours((dateObj.getHours()>=12?12:0)+parseFloat(hour))},H:function H(dateObj,hour){dateObj.setHours(parseFloat(hour))},J:function J(dateObj,day){dateObj.setDate(parseFloat(day))},K:function K(dateObj,amPM,locale){dateObj.setHours(dateObj.getHours()%12+12*_int(new RegExp(locale.amPM[1],"i").test(amPM)))},M:function M(dateObj,shortMonth,locale){dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth))},S:function S(dateObj,seconds){dateObj.setSeconds(parseFloat(seconds))},U:function U(_,unixSeconds){return new Date(1e3*parseFloat(unixSeconds))},W:function W(dateObj,weekNum,locale){var weekNumber=parseInt(weekNum),date=new Date(dateObj.getFullYear(),0,2+7*(weekNumber-1),0,0,0,0);return date.setDate(date.getDate()-date.getDay()+locale.firstDayOfWeek),date},Y:function Y(dateObj,year){dateObj.setFullYear(parseFloat(year))},Z:function Z(_,ISODate){return new Date(ISODate)},d:function d(dateObj,day){dateObj.setDate(parseFloat(day))},h:function h(dateObj,hour){dateObj.setHours((dateObj.getHours()>=12?12:0)+parseFloat(hour))},i:function i(dateObj,minutes){dateObj.setMinutes(parseFloat(minutes))},j:function j(dateObj,day){dateObj.setDate(parseFloat(day))},l:doNothing,m:function m(dateObj,month){dateObj.setMonth(parseFloat(month)-1)},n:function n(dateObj,month){dateObj.setMonth(parseFloat(month)-1)},s:function s(dateObj,seconds){dateObj.setSeconds(parseFloat(seconds))},u:function u(_,unixMillSeconds){return new Date(parseFloat(unixMillSeconds))},w:doNothing,y:function y(dateObj,year){dateObj.setFullYear(2e3+parseFloat(year))}},tokenRegex={D:"",F:"",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"",M:"",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",u:"(.+)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},formats={Z:function Z(date){return date.toISOString()},D:function D(date,locale,options){return locale.weekdays.shorthand[formats.w(date,locale,options)]},F:function F(date,locale,options){return monthToStr(formats.n(date,locale,options)-1,!1,locale)},G:function G(date,locale,options){return pad(formats.h(date,locale,options))},H:function H(date){return pad(date.getHours())},J:function J(date,locale){return void 0!==locale.ordinal?date.getDate()+locale.ordinal(date.getDate()):date.getDate()},K:function K(date,locale){return locale.amPM[_int(date.getHours()>11)]},M:function M(date,locale){return monthToStr(date.getMonth(),!0,locale)},S:function S(date){return pad(date.getSeconds())},U:function U(date){return date.getTime()/1e3},W:function W(date,_,options){return options.getWeek(date)},Y:function Y(date){return pad(date.getFullYear(),4)},d:function d(date){return pad(date.getDate())},h:function h(date){return date.getHours()%12?date.getHours()%12:12},i:function i(date){return pad(date.getMinutes())},j:function j(date){return date.getDate()},l:function l(date,locale){return locale.weekdays.longhand[date.getDay()]},m:function m(date){return pad(date.getMonth()+1)},n:function n(date){return date.getMonth()+1},s:function s(date){return date.getSeconds()},u:function u(date){return date.getTime()},w:function w(date){return date.getDay()},y:function y(date){return String(date.getFullYear()).substring(2)}},createDateFormatter=function createDateFormatter(_a){var _b=_a.config,config=void 0===_b?defaults:_b,_c=_a.l10n,l10n=void 0===_c?english:_c,_d=_a.isMobile,isMobile=void 0!==_d&&_d;return function(dateObj,frmt,overrideLocale){var locale=overrideLocale||l10n;return void 0===config.formatDate||isMobile?frmt.split("").map((function(c,i,arr){return formats[c]&&"\\"!==arr[i-1]?formats[c](dateObj,locale,config):"\\"!==c?c:""})).join(""):config.formatDate(dateObj,frmt,locale)}},createDateParser=function createDateParser(_a){var _b=_a.config,config=void 0===_b?defaults:_b,_c=_a.l10n,l10n=void 0===_c?english:_c;return function(date,givenFormat,timeless,customLocale){if(0===date||date){var parsedDate,locale=customLocale||l10n,dateOrig=date;if(date instanceof Date)parsedDate=new Date(date.getTime());else if("string"!=typeof date&&void 0!==date.toFixed)parsedDate=new Date(date);else if("string"==typeof date){var format=givenFormat||(config||defaults).dateFormat,datestr=String(date).trim();if("today"===datestr)parsedDate=new Date,timeless=!0;else if(config&&config.parseDate)parsedDate=config.parseDate(date,format);else if(/Z$/.test(datestr)||/GMT$/.test(datestr))parsedDate=new Date(date);else{for(var matched=void 0,ops=[],i=0,matchIndex=0,regexStr="";i<format.length;i++){var token=format[i],isBackSlash="\\"===token,escaped="\\"===format[i-1]||isBackSlash;if(tokenRegex[token]&&!escaped){regexStr+=tokenRegex[token];var match=new RegExp(regexStr).exec(date);match&&(matched=!0)&&ops["Y"!==token?"push":"unshift"]({fn:revFormat[token],val:match[++matchIndex]})}else isBackSlash||(regexStr+=".")}parsedDate=config&&config.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0),ops.forEach((function(_a){var fn=_a.fn,val=_a.val;return parsedDate=fn(parsedDate,val,locale)||parsedDate})),parsedDate=matched?parsedDate:void 0}}if(parsedDate instanceof Date&&!isNaN(parsedDate.getTime()))return!0===timeless&&parsedDate.setHours(0,0,0,0),parsedDate;config.errorHandler(new Error("Invalid date provided: "+dateOrig))}}};function compareDates(date1,date2,timeless){return void 0===timeless&&(timeless=!0),!1!==timeless?new Date(date1.getTime()).setHours(0,0,0,0)-new Date(date2.getTime()).setHours(0,0,0,0):date1.getTime()-date2.getTime()}var calculateSecondsSinceMidnight=function calculateSecondsSinceMidnight(hours,minutes,seconds){return 3600*hours+60*minutes+seconds},duration_DAY=864e5;function getDefaultHours(config){var hours=config.defaultHour,minutes=config.defaultMinute,seconds=config.defaultSeconds;if(void 0!==config.minDate){var minHour=config.minDate.getHours(),minMinutes=config.minDate.getMinutes(),minSeconds=config.minDate.getSeconds();hours<minHour&&(hours=minHour),hours===minHour&&minutes<minMinutes&&(minutes=minMinutes),hours===minHour&&minutes===minMinutes&&seconds<minSeconds&&(seconds=config.minDate.getSeconds())}if(void 0!==config.maxDate){var maxHr=config.maxDate.getHours(),maxMinutes=config.maxDate.getMinutes();(hours=Math.min(hours,maxHr))===maxHr&&(minutes=Math.min(maxMinutes,minutes)),hours===maxHr&&minutes===maxMinutes&&(seconds=config.maxDate.getSeconds())}return{hours:hours,minutes:minutes,seconds:seconds}}"function"!=typeof Object.assign&&(Object.assign=function(target){for(var args=[],_i=1;_i<arguments.length;_i++)args[_i-1]=arguments[_i];if(!target)throw TypeError("Cannot convert undefined or null to object");for(var _loop_1=function _loop_1(source){source&&Object.keys(source).forEach((function(key){return target[key]=source[key]}))},_a=0,args_1=args;_a<args_1.length;_a++){var source=args_1[_a];_loop_1(source)}return target});var __assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__spreadArrays=function(){for(var s=0,i=0,il=arguments.length;i<il;i++)s+=arguments[i].length;var r=Array(s),k=0;for(i=0;i<il;i++)for(var a=arguments[i],j=0,jl=a.length;j<jl;j++,k++)r[k]=a[j];return r};function FlatpickrInstance(element,instanceConfig){var self={config:__assign(__assign({},defaults),flatpickr.defaultConfig),l10n:english};function getClosestActiveElement(){var _a;return(null===(_a=self.calendarContainer)||void 0===_a?void 0:_a.getRootNode()).activeElement||document.activeElement}function bindToInstance(fn){return fn.bind(self)}function setCalendarWidth(){var config=self.config;!1===config.weekNumbers&&1===config.showMonths||!0!==config.noCalendar&&window.requestAnimationFrame((function(){if(void 0!==self.calendarContainer&&(self.calendarContainer.style.visibility="hidden",self.calendarContainer.style.display="block"),void 0!==self.daysContainer){var daysWidth=(self.days.offsetWidth+1)*config.showMonths;self.daysContainer.style.width=daysWidth+"px",self.calendarContainer.style.width=daysWidth+(void 0!==self.weekWrapper?self.weekWrapper.offsetWidth:0)+"px",self.calendarContainer.style.removeProperty("visibility"),self.calendarContainer.style.removeProperty("display")}}))}function updateTime(e){if(0===self.selectedDates.length){var defaultDate=void 0===self.config.minDate||compareDates(new Date,self.config.minDate)>=0?new Date:new Date(self.config.minDate.getTime()),defaults=getDefaultHours(self.config);defaultDate.setHours(defaults.hours,defaults.minutes,defaults.seconds,defaultDate.getMilliseconds()),self.selectedDates=[defaultDate],self.latestSelectedDateObj=defaultDate}void 0!==e&&"blur"!==e.type&&function timeWrapper(e){e.preventDefault();var isKeyDown="keydown"===e.type,eventTarget=getEventTarget(e),input=eventTarget;void 0!==self.amPM&&eventTarget===self.amPM&&(self.amPM.textContent=self.l10n.amPM[_int(self.amPM.textContent===self.l10n.amPM[0])]);var min=parseFloat(input.getAttribute("min")),max=parseFloat(input.getAttribute("max")),step=parseFloat(input.getAttribute("step")),curValue=parseInt(input.value,10),delta=e.delta||(isKeyDown?38===e.which?1:-1:0),newValue=curValue+step*delta;if(void 0!==input.value&&2===input.value.length){var isHourElem=input===self.hourElement,isMinuteElem=input===self.minuteElement;newValue<min?(newValue=max+newValue+_int(!isHourElem)+(_int(isHourElem)&&_int(!self.amPM)),isMinuteElem&&incrementNumInput(void 0,-1,self.hourElement)):newValue>max&&(newValue=input===self.hourElement?newValue-max-_int(!self.amPM):min,isMinuteElem&&incrementNumInput(void 0,1,self.hourElement)),self.amPM&&isHourElem&&(1===step?newValue+curValue===23:Math.abs(newValue-curValue)>step)&&(self.amPM.textContent=self.l10n.amPM[_int(self.amPM.textContent===self.l10n.amPM[0])]),input.value=pad(newValue)}}(e);var prevValue=self._input.value;setHoursFromInputs(),updateValue(),self._input.value!==prevValue&&self._debouncedChange()}function setHoursFromInputs(){if(void 0!==self.hourElement&&void 0!==self.minuteElement){var hours=(parseInt(self.hourElement.value.slice(-2),10)||0)%24,minutes=(parseInt(self.minuteElement.value,10)||0)%60,seconds=void 0!==self.secondElement?(parseInt(self.secondElement.value,10)||0)%60:0;void 0!==self.amPM&&(hours=function ampm2military(hour,amPM){return hour%12+12*_int(amPM===self.l10n.amPM[1])}(hours,self.amPM.textContent));var limitMinHours=void 0!==self.config.minTime||self.config.minDate&&self.minDateHasTime&&self.latestSelectedDateObj&&0===compareDates(self.latestSelectedDateObj,self.config.minDate,!0),limitMaxHours=void 0!==self.config.maxTime||self.config.maxDate&&self.maxDateHasTime&&self.latestSelectedDateObj&&0===compareDates(self.latestSelectedDateObj,self.config.maxDate,!0);if(void 0!==self.config.maxTime&&void 0!==self.config.minTime&&self.config.minTime>self.config.maxTime){var minBound=calculateSecondsSinceMidnight(self.config.minTime.getHours(),self.config.minTime.getMinutes(),self.config.minTime.getSeconds()),maxBound=calculateSecondsSinceMidnight(self.config.maxTime.getHours(),self.config.maxTime.getMinutes(),self.config.maxTime.getSeconds()),currentTime=calculateSecondsSinceMidnight(hours,minutes,seconds);if(currentTime>maxBound&&currentTime<minBound){var result=function parseSeconds(secondsSinceMidnight){var hours=Math.floor(secondsSinceMidnight/3600),minutes=(secondsSinceMidnight-3600*hours)/60;return[hours,minutes,secondsSinceMidnight-3600*hours-60*minutes]}(minBound);hours=result[0],minutes=result[1],seconds=result[2]}}else{if(limitMaxHours){var maxTime=void 0!==self.config.maxTime?self.config.maxTime:self.config.maxDate;(hours=Math.min(hours,maxTime.getHours()))===maxTime.getHours()&&(minutes=Math.min(minutes,maxTime.getMinutes())),minutes===maxTime.getMinutes()&&(seconds=Math.min(seconds,maxTime.getSeconds()))}if(limitMinHours){var minTime=void 0!==self.config.minTime?self.config.minTime:self.config.minDate;(hours=Math.max(hours,minTime.getHours()))===minTime.getHours()&&minutes<minTime.getMinutes()&&(minutes=minTime.getMinutes()),minutes===minTime.getMinutes()&&(seconds=Math.max(seconds,minTime.getSeconds()))}}setHours(hours,minutes,seconds)}}function setHoursFromDate(dateObj){var date=dateObj||self.latestSelectedDateObj;date&&date instanceof Date&&setHours(date.getHours(),date.getMinutes(),date.getSeconds())}function setHours(hours,minutes,seconds){void 0!==self.latestSelectedDateObj&&self.latestSelectedDateObj.setHours(hours%24,minutes,seconds||0,0),self.hourElement&&self.minuteElement&&!self.isMobile&&(self.hourElement.value=pad(self.config.time_24hr?hours:(12+hours)%12+12*_int(hours%12==0)),self.minuteElement.value=pad(minutes),void 0!==self.amPM&&(self.amPM.textContent=self.l10n.amPM[_int(hours>=12)]),void 0!==self.secondElement&&(self.secondElement.value=pad(seconds)))}function onYearInput(event){var eventTarget=getEventTarget(event),year=parseInt(eventTarget.value)+(event.delta||0);(year/1e3>1||"Enter"===event.key&&!/[^\d]/.test(year.toString()))&&changeYear(year)}function bind(element,event,handler,options){return event instanceof Array?event.forEach((function(ev){return bind(element,ev,handler,options)})):element instanceof Array?element.forEach((function(el){return bind(el,event,handler,options)})):(element.addEventListener(event,handler,options),void self._handlers.push({remove:function remove(){return element.removeEventListener(event,handler,options)}}))}function triggerChange(){triggerEvent("onChange")}function jumpToDate(jumpDate,triggerChange){var jumpTo=void 0!==jumpDate?self.parseDate(jumpDate):self.latestSelectedDateObj||(self.config.minDate&&self.config.minDate>self.now?self.config.minDate:self.config.maxDate&&self.config.maxDate<self.now?self.config.maxDate:self.now),oldYear=self.currentYear,oldMonth=self.currentMonth;try{void 0!==jumpTo&&(self.currentYear=jumpTo.getFullYear(),self.currentMonth=jumpTo.getMonth())}catch(e){e.message="Invalid date supplied: "+jumpTo,self.config.errorHandler(e)}triggerChange&&self.currentYear!==oldYear&&(triggerEvent("onYearChange"),buildMonthSwitch()),!triggerChange||self.currentYear===oldYear&&self.currentMonth===oldMonth||triggerEvent("onMonthChange"),self.redraw()}function timeIncrement(e){var eventTarget=getEventTarget(e);~eventTarget.className.indexOf("arrow")&&incrementNumInput(e,eventTarget.classList.contains("arrowUp")?1:-1)}function incrementNumInput(e,delta,inputElem){var target=e&&getEventTarget(e),input=inputElem||target&&target.parentNode&&target.parentNode.firstChild,event=createEvent("increment");event.delta=delta,input&&input.dispatchEvent(event)}function createDay(className,date,_dayNumber,i){var dateIsEnabled=isEnabled(date,!0),dayElement=createElement("span",className,date.getDate().toString());return dayElement.dateObj=date,dayElement.$i=i,dayElement.setAttribute("aria-label",self.formatDate(date,self.config.ariaDateFormat)),-1===className.indexOf("hidden")&&0===compareDates(date,self.now)&&(self.todayDateElem=dayElement,dayElement.classList.add("today"),dayElement.setAttribute("aria-current","date")),dateIsEnabled?(dayElement.tabIndex=-1,isDateSelected(date)&&(dayElement.classList.add("selected"),self.selectedDateElem=dayElement,"range"===self.config.mode&&(toggleClass(dayElement,"startRange",self.selectedDates[0]&&0===compareDates(date,self.selectedDates[0],!0)),toggleClass(dayElement,"endRange",self.selectedDates[1]&&0===compareDates(date,self.selectedDates[1],!0)),"nextMonthDay"===className&&dayElement.classList.add("inRange")))):dayElement.classList.add("flatpickr-disabled"),"range"===self.config.mode&&function isDateInRange(date){return!("range"!==self.config.mode||self.selectedDates.length<2)&&(compareDates(date,self.selectedDates[0])>=0&&compareDates(date,self.selectedDates[1])<=0)}(date)&&!isDateSelected(date)&&dayElement.classList.add("inRange"),self.weekNumbers&&1===self.config.showMonths&&"prevMonthDay"!==className&&i%7==6&&self.weekNumbers.insertAdjacentHTML("beforeend","<span class='flatpickr-day'>"+self.config.getWeek(date)+"</span>"),triggerEvent("onDayCreate",dayElement),dayElement}function focusOnDayElem(targetNode){targetNode.focus(),"range"===self.config.mode&&onMouseOver(targetNode)}function getFirstAvailableDay(delta){for(var startMonth=delta>0?0:self.config.showMonths-1,endMonth=delta>0?self.config.showMonths:-1,m=startMonth;m!=endMonth;m+=delta)for(var month=self.daysContainer.children[m],startIndex=delta>0?0:month.children.length-1,endIndex=delta>0?month.children.length:-1,i=startIndex;i!=endIndex;i+=delta){var c=month.children[i];if(-1===c.className.indexOf("hidden")&&isEnabled(c.dateObj))return c}}function focusOnDay(current,offset){var activeElement=getClosestActiveElement(),dayFocused=isInView(activeElement||document.body),startElem=void 0!==current?current:dayFocused?activeElement:void 0!==self.selectedDateElem&&isInView(self.selectedDateElem)?self.selectedDateElem:void 0!==self.todayDateElem&&isInView(self.todayDateElem)?self.todayDateElem:getFirstAvailableDay(offset>0?1:-1);void 0===startElem?self._input.focus():dayFocused?function getNextAvailableDay(current,delta){for(var givenMonth=-1===current.className.indexOf("Month")?current.dateObj.getMonth():self.currentMonth,endMonth=delta>0?self.config.showMonths:-1,loopDelta=delta>0?1:-1,m=givenMonth-self.currentMonth;m!=endMonth;m+=loopDelta)for(var month=self.daysContainer.children[m],startIndex=givenMonth-self.currentMonth===m?current.$i+delta:delta<0?month.children.length-1:0,numMonthDays=month.children.length,i=startIndex;i>=0&&i<numMonthDays&&i!=(delta>0?numMonthDays:-1);i+=loopDelta){var c=month.children[i];if(-1===c.className.indexOf("hidden")&&isEnabled(c.dateObj)&&Math.abs(current.$i-i)>=Math.abs(delta))return focusOnDayElem(c)}self.changeMonth(loopDelta),focusOnDay(getFirstAvailableDay(loopDelta),0)}(startElem,offset):focusOnDayElem(startElem)}function buildMonthDays(year,month){for(var firstOfMonth=(new Date(year,month,1).getDay()-self.l10n.firstDayOfWeek+7)%7,prevMonthDays=self.utils.getDaysInMonth((month-1+12)%12,year),daysInMonth=self.utils.getDaysInMonth(month,year),days=window.document.createDocumentFragment(),isMultiMonth=self.config.showMonths>1,prevMonthDayClass=isMultiMonth?"prevMonthDay hidden":"prevMonthDay",nextMonthDayClass=isMultiMonth?"nextMonthDay hidden":"nextMonthDay",dayNumber=prevMonthDays+1-firstOfMonth,dayIndex=0;dayNumber<=prevMonthDays;dayNumber++,dayIndex++)days.appendChild(createDay("flatpickr-day "+prevMonthDayClass,new Date(year,month-1,dayNumber),0,dayIndex));for(dayNumber=1;dayNumber<=daysInMonth;dayNumber++,dayIndex++)days.appendChild(createDay("flatpickr-day",new Date(year,month,dayNumber),0,dayIndex));for(var dayNum=daysInMonth+1;dayNum<=42-firstOfMonth&&(1===self.config.showMonths||dayIndex%7!=0);dayNum++,dayIndex++)days.appendChild(createDay("flatpickr-day "+nextMonthDayClass,new Date(year,month+1,dayNum%daysInMonth),0,dayIndex));var dayContainer=createElement("div","dayContainer");return dayContainer.appendChild(days),dayContainer}function buildDays(){if(void 0!==self.daysContainer){clearNode(self.daysContainer),self.weekNumbers&&clearNode(self.weekNumbers);for(var frag=document.createDocumentFragment(),i=0;i<self.config.showMonths;i++){var d=new Date(self.currentYear,self.currentMonth,1);d.setMonth(self.currentMonth+i),frag.appendChild(buildMonthDays(d.getFullYear(),d.getMonth()))}self.daysContainer.appendChild(frag),self.days=self.daysContainer.firstChild,"range"===self.config.mode&&1===self.selectedDates.length&&onMouseOver()}}function buildMonthSwitch(){if(!(self.config.showMonths>1||"dropdown"!==self.config.monthSelectorType)){var shouldBuildMonth=function shouldBuildMonth(month){return!(void 0!==self.config.minDate&&self.currentYear===self.config.minDate.getFullYear()&&month<self.config.minDate.getMonth())&&!(void 0!==self.config.maxDate&&self.currentYear===self.config.maxDate.getFullYear()&&month>self.config.maxDate.getMonth())};self.monthsDropdownContainer.tabIndex=-1,self.monthsDropdownContainer.innerHTML="";for(var i=0;i<12;i++)if(shouldBuildMonth(i)){var month=createElement("option","flatpickr-monthDropdown-month");month.value=new Date(self.currentYear,i).getMonth().toString(),month.textContent=monthToStr(i,self.config.shorthandCurrentMonth,self.l10n),month.tabIndex=-1,self.currentMonth===i&&(month.selected=!0),self.monthsDropdownContainer.appendChild(month)}}}function buildMonth(){var monthElement,container=createElement("div","flatpickr-month"),monthNavFragment=window.document.createDocumentFragment();self.config.showMonths>1||"static"===self.config.monthSelectorType?monthElement=createElement("span","cur-month"):(self.monthsDropdownContainer=createElement("select","flatpickr-monthDropdown-months"),self.monthsDropdownContainer.setAttribute("aria-label",self.l10n.monthAriaLabel),bind(self.monthsDropdownContainer,"change",(function(e){var target=getEventTarget(e),selectedMonth=parseInt(target.value,10);self.changeMonth(selectedMonth-self.currentMonth),triggerEvent("onMonthChange")})),buildMonthSwitch(),monthElement=self.monthsDropdownContainer);var yearInput=createNumberInput("cur-year",{tabindex:"-1"}),yearElement=yearInput.getElementsByTagName("input")[0];yearElement.setAttribute("aria-label",self.l10n.yearAriaLabel),self.config.minDate&&yearElement.setAttribute("min",self.config.minDate.getFullYear().toString()),self.config.maxDate&&(yearElement.setAttribute("max",self.config.maxDate.getFullYear().toString()),yearElement.disabled=!!self.config.minDate&&self.config.minDate.getFullYear()===self.config.maxDate.getFullYear());var currentMonth=createElement("div","flatpickr-current-month");return currentMonth.appendChild(monthElement),currentMonth.appendChild(yearInput),monthNavFragment.appendChild(currentMonth),container.appendChild(monthNavFragment),{container:container,yearElement:yearElement,monthElement:monthElement}}function buildMonths(){clearNode(self.monthNav),self.monthNav.appendChild(self.prevMonthNav),self.config.showMonths&&(self.yearElements=[],self.monthElements=[]);for(var m=self.config.showMonths;m--;){var month=buildMonth();self.yearElements.push(month.yearElement),self.monthElements.push(month.monthElement),self.monthNav.appendChild(month.container)}self.monthNav.appendChild(self.nextMonthNav)}function buildWeekdays(){self.weekdayContainer?clearNode(self.weekdayContainer):self.weekdayContainer=createElement("div","flatpickr-weekdays");for(var i=self.config.showMonths;i--;){var container=createElement("div","flatpickr-weekdaycontainer");self.weekdayContainer.appendChild(container)}return updateWeekdays(),self.weekdayContainer}function updateWeekdays(){if(self.weekdayContainer){var firstDayOfWeek=self.l10n.firstDayOfWeek,weekdays=__spreadArrays(self.l10n.weekdays.shorthand);firstDayOfWeek>0&&firstDayOfWeek<weekdays.length&&(weekdays=__spreadArrays(weekdays.splice(firstDayOfWeek,weekdays.length),weekdays.splice(0,firstDayOfWeek)));for(var i=self.config.showMonths;i--;)self.weekdayContainer.children[i].innerHTML="\n      <span class='flatpickr-weekday'>\n        "+weekdays.join("</span><span class='flatpickr-weekday'>")+"\n      </span>\n      "}}function changeMonth(value,isOffset){void 0===isOffset&&(isOffset=!0);var delta=isOffset?value:value-self.currentMonth;delta<0&&!0===self._hidePrevMonthArrow||delta>0&&!0===self._hideNextMonthArrow||(self.currentMonth+=delta,(self.currentMonth<0||self.currentMonth>11)&&(self.currentYear+=self.currentMonth>11?1:-1,self.currentMonth=(self.currentMonth+12)%12,triggerEvent("onYearChange"),buildMonthSwitch()),buildDays(),triggerEvent("onMonthChange"),updateNavigationCurrentMonth())}function isCalendarElem(elem){return self.calendarContainer.contains(elem)}function documentClick(e){if(self.isOpen&&!self.config.inline){var eventTarget_1=getEventTarget(e),isCalendarElement=isCalendarElem(eventTarget_1),lostFocus=!(eventTarget_1===self.input||eventTarget_1===self.altInput||self.element.contains(eventTarget_1)||e.path&&e.path.indexOf&&(~e.path.indexOf(self.input)||~e.path.indexOf(self.altInput)))&&!isCalendarElement&&!isCalendarElem(e.relatedTarget),isIgnored=!self.config.ignoredFocusElements.some((function(elem){return elem.contains(eventTarget_1)}));lostFocus&&isIgnored&&(self.config.allowInput&&self.setDate(self._input.value,!1,self.config.altInput?self.config.altFormat:self.config.dateFormat),void 0!==self.timeContainer&&void 0!==self.minuteElement&&void 0!==self.hourElement&&""!==self.input.value&&void 0!==self.input.value&&updateTime(),self.close(),self.config&&"range"===self.config.mode&&1===self.selectedDates.length&&self.clear(!1))}}function changeYear(newYear){if(!(!newYear||self.config.minDate&&newYear<self.config.minDate.getFullYear()||self.config.maxDate&&newYear>self.config.maxDate.getFullYear())){var newYearNum=newYear,isNewYear=self.currentYear!==newYearNum;self.currentYear=newYearNum||self.currentYear,self.config.maxDate&&self.currentYear===self.config.maxDate.getFullYear()?self.currentMonth=Math.min(self.config.maxDate.getMonth(),self.currentMonth):self.config.minDate&&self.currentYear===self.config.minDate.getFullYear()&&(self.currentMonth=Math.max(self.config.minDate.getMonth(),self.currentMonth)),isNewYear&&(self.redraw(),triggerEvent("onYearChange"),buildMonthSwitch())}}function isEnabled(date,timeless){var _a;void 0===timeless&&(timeless=!0);var dateToCheck=self.parseDate(date,void 0,timeless);if(self.config.minDate&&dateToCheck&&compareDates(dateToCheck,self.config.minDate,void 0!==timeless?timeless:!self.minDateHasTime)<0||self.config.maxDate&&dateToCheck&&compareDates(dateToCheck,self.config.maxDate,void 0!==timeless?timeless:!self.maxDateHasTime)>0)return!1;if(!self.config.enable&&0===self.config.disable.length)return!0;if(void 0===dateToCheck)return!1;for(var bool=!!self.config.enable,array=null!==(_a=self.config.enable)&&void 0!==_a?_a:self.config.disable,i=0,d=void 0;i<array.length;i++){if("function"==typeof(d=array[i])&&d(dateToCheck))return bool;if(d instanceof Date&&void 0!==dateToCheck&&d.getTime()===dateToCheck.getTime())return bool;if("string"==typeof d){var parsed=self.parseDate(d,void 0,!0);return parsed&&parsed.getTime()===dateToCheck.getTime()?bool:!bool}if("object"==typeof d&&void 0!==dateToCheck&&d.from&&d.to&&dateToCheck.getTime()>=d.from.getTime()&&dateToCheck.getTime()<=d.to.getTime())return bool}return!bool}function isInView(elem){return void 0!==self.daysContainer&&(-1===elem.className.indexOf("hidden")&&-1===elem.className.indexOf("flatpickr-disabled")&&self.daysContainer.contains(elem))}function onBlur(e){var isInput=e.target===self._input,valueChanged=self._input.value.trimEnd()!==getDateStr();!isInput||!valueChanged||e.relatedTarget&&isCalendarElem(e.relatedTarget)||self.setDate(self._input.value,!0,e.target===self.altInput?self.config.altFormat:self.config.dateFormat)}function onKeyDown(e){var eventTarget=getEventTarget(e),isInput=self.config.wrap?element.contains(eventTarget):eventTarget===self._input,allowInput=self.config.allowInput,allowKeydown=self.isOpen&&(!allowInput||!isInput),allowInlineKeydown=self.config.inline&&isInput&&!allowInput;if(13===e.keyCode&&isInput){if(allowInput)return self.setDate(self._input.value,!0,eventTarget===self.altInput?self.config.altFormat:self.config.dateFormat),self.close(),eventTarget.blur();self.open()}else if(isCalendarElem(eventTarget)||allowKeydown||allowInlineKeydown){var isTimeObj=!!self.timeContainer&&self.timeContainer.contains(eventTarget);switch(e.keyCode){case 13:isTimeObj?(e.preventDefault(),updateTime(),focusAndClose()):selectDate(e);break;case 27:e.preventDefault(),focusAndClose();break;case 8:case 46:isInput&&!self.config.allowInput&&(e.preventDefault(),self.clear());break;case 37:case 39:if(isTimeObj||isInput)self.hourElement&&self.hourElement.focus();else{e.preventDefault();var activeElement=getClosestActiveElement();if(void 0!==self.daysContainer&&(!1===allowInput||activeElement&&isInView(activeElement))){var delta_1=39===e.keyCode?1:-1;e.ctrlKey?(e.stopPropagation(),changeMonth(delta_1),focusOnDay(getFirstAvailableDay(1),0)):focusOnDay(void 0,delta_1)}}break;case 38:case 40:e.preventDefault();var delta=40===e.keyCode?1:-1;self.daysContainer&&void 0!==eventTarget.$i||eventTarget===self.input||eventTarget===self.altInput?e.ctrlKey?(e.stopPropagation(),changeYear(self.currentYear-delta),focusOnDay(getFirstAvailableDay(1),0)):isTimeObj||focusOnDay(void 0,7*delta):eventTarget===self.currentYearElement?changeYear(self.currentYear-delta):self.config.enableTime&&(!isTimeObj&&self.hourElement&&self.hourElement.focus(),updateTime(e),self._debouncedChange());break;case 9:if(isTimeObj){var elems=[self.hourElement,self.minuteElement,self.secondElement,self.amPM].concat(self.pluginElements).filter((function(x){return x})),i=elems.indexOf(eventTarget);if(-1!==i){var target=elems[i+(e.shiftKey?-1:1)];e.preventDefault(),(target||self._input).focus()}}else!self.config.noCalendar&&self.daysContainer&&self.daysContainer.contains(eventTarget)&&e.shiftKey&&(e.preventDefault(),self._input.focus())}}if(void 0!==self.amPM&&eventTarget===self.amPM)switch(e.key){case self.l10n.amPM[0].charAt(0):case self.l10n.amPM[0].charAt(0).toLowerCase():self.amPM.textContent=self.l10n.amPM[0],setHoursFromInputs(),updateValue();break;case self.l10n.amPM[1].charAt(0):case self.l10n.amPM[1].charAt(0).toLowerCase():self.amPM.textContent=self.l10n.amPM[1],setHoursFromInputs(),updateValue()}(isInput||isCalendarElem(eventTarget))&&triggerEvent("onKeyDown",e)}function onMouseOver(elem,cellClass){if(void 0===cellClass&&(cellClass="flatpickr-day"),1===self.selectedDates.length&&(!elem||elem.classList.contains(cellClass)&&!elem.classList.contains("flatpickr-disabled"))){for(var hoverDate=elem?elem.dateObj.getTime():self.days.firstElementChild.dateObj.getTime(),initialDate=self.parseDate(self.selectedDates[0],void 0,!0).getTime(),rangeStartDate=Math.min(hoverDate,self.selectedDates[0].getTime()),rangeEndDate=Math.max(hoverDate,self.selectedDates[0].getTime()),containsDisabled=!1,minRange=0,maxRange=0,t=rangeStartDate;t<rangeEndDate;t+=duration_DAY)isEnabled(new Date(t),!0)||(containsDisabled=containsDisabled||t>rangeStartDate&&t<rangeEndDate,t<initialDate&&(!minRange||t>minRange)?minRange=t:t>initialDate&&(!maxRange||t<maxRange)&&(maxRange=t));Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+"+self.config.showMonths+") > ."+cellClass)).forEach((function(dayElem){var timestamp=dayElem.dateObj.getTime(),outOfRange=minRange>0&&timestamp<minRange||maxRange>0&&timestamp>maxRange;if(outOfRange)return dayElem.classList.add("notAllowed"),void["inRange","startRange","endRange"].forEach((function(c){dayElem.classList.remove(c)}));containsDisabled&&!outOfRange||(["startRange","inRange","endRange","notAllowed"].forEach((function(c){dayElem.classList.remove(c)})),void 0!==elem&&(elem.classList.add(hoverDate<=self.selectedDates[0].getTime()?"startRange":"endRange"),initialDate<hoverDate&&timestamp===initialDate?dayElem.classList.add("startRange"):initialDate>hoverDate&&timestamp===initialDate&&dayElem.classList.add("endRange"),timestamp>=minRange&&(0===maxRange||timestamp<=maxRange)&&function isBetween(ts,ts1,ts2){return ts>Math.min(ts1,ts2)&&ts<Math.max(ts1,ts2)}(timestamp,initialDate,hoverDate)&&dayElem.classList.add("inRange")))}))}}function onResize(){!self.isOpen||self.config.static||self.config.inline||positionCalendar()}function minMaxDateSetter(type){return function(date){var dateObj=self.config["_"+type+"Date"]=self.parseDate(date,self.config.dateFormat),inverseDateObj=self.config["_"+("min"===type?"max":"min")+"Date"];void 0!==dateObj&&(self["min"===type?"minDateHasTime":"maxDateHasTime"]=dateObj.getHours()>0||dateObj.getMinutes()>0||dateObj.getSeconds()>0),self.selectedDates&&(self.selectedDates=self.selectedDates.filter((function(d){return isEnabled(d)})),self.selectedDates.length||"min"!==type||setHoursFromDate(dateObj),updateValue()),self.daysContainer&&(redraw(),void 0!==dateObj?self.currentYearElement[type]=dateObj.getFullYear().toString():self.currentYearElement.removeAttribute(type),self.currentYearElement.disabled=!!inverseDateObj&&void 0!==dateObj&&inverseDateObj.getFullYear()===dateObj.getFullYear())}}function getInputElem(){return self.config.wrap?element.querySelector("[data-input]"):element}function setupLocale(){"object"!=typeof self.config.locale&&void 0===flatpickr.l10ns[self.config.locale]&&self.config.errorHandler(new Error("flatpickr: invalid locale "+self.config.locale)),self.l10n=__assign(__assign({},flatpickr.l10ns.default),"object"==typeof self.config.locale?self.config.locale:"default"!==self.config.locale?flatpickr.l10ns[self.config.locale]:void 0),tokenRegex.D="("+self.l10n.weekdays.shorthand.join("|")+")",tokenRegex.l="("+self.l10n.weekdays.longhand.join("|")+")",tokenRegex.M="("+self.l10n.months.shorthand.join("|")+")",tokenRegex.F="("+self.l10n.months.longhand.join("|")+")",tokenRegex.K="("+self.l10n.amPM[0]+"|"+self.l10n.amPM[1]+"|"+self.l10n.amPM[0].toLowerCase()+"|"+self.l10n.amPM[1].toLowerCase()+")",void 0===__assign(__assign({},instanceConfig),JSON.parse(JSON.stringify(element.dataset||{}))).time_24hr&&void 0===flatpickr.defaultConfig.time_24hr&&(self.config.time_24hr=self.l10n.time_24hr),self.formatDate=createDateFormatter(self),self.parseDate=createDateParser({config:self.config,l10n:self.l10n})}function positionCalendar(customPositionElement){if("function"!=typeof self.config.position){if(void 0!==self.calendarContainer){triggerEvent("onPreCalendarPosition");var positionElement=customPositionElement||self._positionElement,calendarHeight=Array.prototype.reduce.call(self.calendarContainer.children,(function(acc,child){return acc+child.offsetHeight}),0),calendarWidth=self.calendarContainer.offsetWidth,configPos=self.config.position.split(" "),configPosVertical=configPos[0],configPosHorizontal=configPos.length>1?configPos[1]:null,inputBounds=positionElement.getBoundingClientRect(),distanceFromBottom=window.innerHeight-inputBounds.bottom,showOnTop="above"===configPosVertical||"below"!==configPosVertical&&distanceFromBottom<calendarHeight&&inputBounds.top>calendarHeight,top=window.pageYOffset+inputBounds.top+(showOnTop?-calendarHeight-2:positionElement.offsetHeight+2);if(toggleClass(self.calendarContainer,"arrowTop",!showOnTop),toggleClass(self.calendarContainer,"arrowBottom",showOnTop),!self.config.inline){var left=window.pageXOffset+inputBounds.left,isCenter=!1,isRight=!1;"center"===configPosHorizontal?(left-=(calendarWidth-inputBounds.width)/2,isCenter=!0):"right"===configPosHorizontal&&(left-=calendarWidth-inputBounds.width,isRight=!0),toggleClass(self.calendarContainer,"arrowLeft",!isCenter&&!isRight),toggleClass(self.calendarContainer,"arrowCenter",isCenter),toggleClass(self.calendarContainer,"arrowRight",isRight);var right=window.document.body.offsetWidth-(window.pageXOffset+inputBounds.right),rightMost=left+calendarWidth>window.document.body.offsetWidth,centerMost=right+calendarWidth>window.document.body.offsetWidth;if(toggleClass(self.calendarContainer,"rightMost",rightMost),!self.config.static)if(self.calendarContainer.style.top=top+"px",rightMost)if(centerMost){var doc=function getDocumentStyleSheet(){for(var editableSheet=null,i=0;i<document.styleSheets.length;i++){var sheet=document.styleSheets[i];if(sheet.cssRules){editableSheet=sheet;break}}return null!=editableSheet?editableSheet:function createStyleSheet(){var style=document.createElement("style");return document.head.appendChild(style),style.sheet}()}();if(void 0===doc)return;var bodyWidth=window.document.body.offsetWidth,centerLeft=Math.max(0,bodyWidth/2-calendarWidth/2),centerIndex=doc.cssRules.length,centerStyle="{left:"+inputBounds.left+"px;right:auto;}";toggleClass(self.calendarContainer,"rightMost",!1),toggleClass(self.calendarContainer,"centerMost",!0),doc.insertRule(".flatpickr-calendar.centerMost:before,.flatpickr-calendar.centerMost:after"+centerStyle,centerIndex),self.calendarContainer.style.left=centerLeft+"px",self.calendarContainer.style.right="auto"}else self.calendarContainer.style.left="auto",self.calendarContainer.style.right=right+"px";else self.calendarContainer.style.left=left+"px",self.calendarContainer.style.right="auto"}}}else self.config.position(self,customPositionElement)}function redraw(){self.config.noCalendar||self.isMobile||(buildMonthSwitch(),updateNavigationCurrentMonth(),buildDays())}function focusAndClose(){self._input.focus(),-1!==window.navigator.userAgent.indexOf("MSIE")||void 0!==navigator.msMaxTouchPoints?setTimeout(self.close,0):self.close()}function selectDate(e){e.preventDefault(),e.stopPropagation();var t=findParent(getEventTarget(e),(function isSelectable(day){return day.classList&&day.classList.contains("flatpickr-day")&&!day.classList.contains("flatpickr-disabled")&&!day.classList.contains("notAllowed")}));if(void 0!==t){var target=t,selectedDate=self.latestSelectedDateObj=new Date(target.dateObj.getTime()),shouldChangeMonth=(selectedDate.getMonth()<self.currentMonth||selectedDate.getMonth()>self.currentMonth+self.config.showMonths-1)&&"range"!==self.config.mode;if(self.selectedDateElem=target,"single"===self.config.mode)self.selectedDates=[selectedDate];else if("multiple"===self.config.mode){var selectedIndex=isDateSelected(selectedDate);selectedIndex?self.selectedDates.splice(parseInt(selectedIndex),1):self.selectedDates.push(selectedDate)}else"range"===self.config.mode&&(2===self.selectedDates.length&&self.clear(!1,!1),self.latestSelectedDateObj=selectedDate,self.selectedDates.push(selectedDate),0!==compareDates(selectedDate,self.selectedDates[0],!0)&&self.selectedDates.sort((function(a,b){return a.getTime()-b.getTime()})));if(setHoursFromInputs(),shouldChangeMonth){var isNewYear=self.currentYear!==selectedDate.getFullYear();self.currentYear=selectedDate.getFullYear(),self.currentMonth=selectedDate.getMonth(),isNewYear&&(triggerEvent("onYearChange"),buildMonthSwitch()),triggerEvent("onMonthChange")}if(updateNavigationCurrentMonth(),buildDays(),updateValue(),shouldChangeMonth||"range"===self.config.mode||1!==self.config.showMonths?void 0!==self.selectedDateElem&&void 0===self.hourElement&&self.selectedDateElem&&self.selectedDateElem.focus():focusOnDayElem(target),void 0!==self.hourElement&&void 0!==self.hourElement&&self.hourElement.focus(),self.config.closeOnSelect){var single="single"===self.config.mode&&!self.config.enableTime,range="range"===self.config.mode&&2===self.selectedDates.length&&!self.config.enableTime;(single||range)&&focusAndClose()}triggerChange()}}self.parseDate=createDateParser({config:self.config,l10n:self.l10n}),self._handlers=[],self.pluginElements=[],self.loadedPlugins=[],self._bind=bind,self._setHoursFromDate=setHoursFromDate,self._positionCalendar=positionCalendar,self.changeMonth=changeMonth,self.changeYear=changeYear,self.clear=function clear(triggerChangeEvent,toInitial){void 0===triggerChangeEvent&&(triggerChangeEvent=!0);void 0===toInitial&&(toInitial=!0);self.input.value="",void 0!==self.altInput&&(self.altInput.value="");void 0!==self.mobileInput&&(self.mobileInput.value="");self.selectedDates=[],self.latestSelectedDateObj=void 0,!0===toInitial&&(self.currentYear=self._initialDate.getFullYear(),self.currentMonth=self._initialDate.getMonth());if(!0===self.config.enableTime){var _a=getDefaultHours(self.config);setHours(_a.hours,_a.minutes,_a.seconds)}self.redraw(),triggerChangeEvent&&triggerEvent("onChange")},self.close=function close(){self.isOpen=!1,self.isMobile||(void 0!==self.calendarContainer&&self.calendarContainer.classList.remove("open"),void 0!==self._input&&self._input.classList.remove("active"));triggerEvent("onClose")},self.onMouseOver=onMouseOver,self._createElement=createElement,self.createDay=createDay,self.destroy=function destroy(){void 0!==self.config&&triggerEvent("onDestroy");for(var i=self._handlers.length;i--;)self._handlers[i].remove();if(self._handlers=[],self.mobileInput)self.mobileInput.parentNode&&self.mobileInput.parentNode.removeChild(self.mobileInput),self.mobileInput=void 0;else if(self.calendarContainer&&self.calendarContainer.parentNode)if(self.config.static&&self.calendarContainer.parentNode){var wrapper=self.calendarContainer.parentNode;if(wrapper.lastChild&&wrapper.removeChild(wrapper.lastChild),wrapper.parentNode){for(;wrapper.firstChild;)wrapper.parentNode.insertBefore(wrapper.firstChild,wrapper);wrapper.parentNode.removeChild(wrapper)}}else self.calendarContainer.parentNode.removeChild(self.calendarContainer);self.altInput&&(self.input.type="text",self.altInput.parentNode&&self.altInput.parentNode.removeChild(self.altInput),delete self.altInput);self.input&&(self.input.type=self.input._type,self.input.classList.remove("flatpickr-input"),self.input.removeAttribute("readonly"));["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","monthsDropdownContainer","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach((function(k){try{delete self[k]}catch(_){}}))},self.isEnabled=isEnabled,self.jumpToDate=jumpToDate,self.updateValue=updateValue,self.open=function open(e,positionElement){void 0===positionElement&&(positionElement=self._positionElement);if(!0===self.isMobile){if(e){e.preventDefault();var eventTarget=getEventTarget(e);eventTarget&&eventTarget.blur()}return void 0!==self.mobileInput&&(self.mobileInput.focus(),self.mobileInput.click()),void triggerEvent("onOpen")}if(self._input.disabled||self.config.inline)return;var wasOpen=self.isOpen;self.isOpen=!0,wasOpen||(self.calendarContainer.classList.add("open"),self._input.classList.add("active"),triggerEvent("onOpen"),positionCalendar(positionElement));!0===self.config.enableTime&&!0===self.config.noCalendar&&(!1!==self.config.allowInput||void 0!==e&&self.timeContainer.contains(e.relatedTarget)||setTimeout((function(){return self.hourElement.select()}),50))},self.redraw=redraw,self.set=function set(option,value){if(null!==option&&"object"==typeof option)for(var key in Object.assign(self.config,option),option)void 0!==CALLBACKS[key]&&CALLBACKS[key].forEach((function(x){return x()}));else self.config[option]=value,void 0!==CALLBACKS[option]?CALLBACKS[option].forEach((function(x){return x()})):HOOKS.indexOf(option)>-1&&(self.config[option]=arrayify(value));self.redraw(),updateValue(!0)},self.setDate=function setDate(date,triggerChange,format){void 0===triggerChange&&(triggerChange=!1);void 0===format&&(format=self.config.dateFormat);if(0!==date&&!date||date instanceof Array&&0===date.length)return self.clear(triggerChange);setSelectedDate(date,format),self.latestSelectedDateObj=self.selectedDates[self.selectedDates.length-1],self.redraw(),jumpToDate(void 0,triggerChange),setHoursFromDate(),0===self.selectedDates.length&&self.clear(!1);updateValue(triggerChange),triggerChange&&triggerEvent("onChange")},self.toggle=function toggle(e){if(!0===self.isOpen)return self.close();self.open(e)};var CALLBACKS={locale:[setupLocale,updateWeekdays],showMonths:[buildMonths,setCalendarWidth,buildWeekdays],minDate:[jumpToDate],maxDate:[jumpToDate],positionElement:[updatePositionElement],clickOpens:[function(){!0===self.config.clickOpens?(bind(self._input,"focus",self.open),bind(self._input,"click",self.open)):(self._input.removeEventListener("focus",self.open),self._input.removeEventListener("click",self.open))}]};function setSelectedDate(inputDate,format){var dates=[];if(inputDate instanceof Array)dates=inputDate.map((function(d){return self.parseDate(d,format)}));else if(inputDate instanceof Date||"number"==typeof inputDate)dates=[self.parseDate(inputDate,format)];else if("string"==typeof inputDate)switch(self.config.mode){case"single":case"time":dates=[self.parseDate(inputDate,format)];break;case"multiple":dates=inputDate.split(self.config.conjunction).map((function(date){return self.parseDate(date,format)}));break;case"range":dates=inputDate.split(self.l10n.rangeSeparator).map((function(date){return self.parseDate(date,format)}))}else self.config.errorHandler(new Error("Invalid date supplied: "+JSON.stringify(inputDate)));self.selectedDates=self.config.allowInvalidPreload?dates:dates.filter((function(d){return d instanceof Date&&isEnabled(d,!1)})),"range"===self.config.mode&&self.selectedDates.sort((function(a,b){return a.getTime()-b.getTime()}))}function parseDateRules(arr){return arr.slice().map((function(rule){return"string"==typeof rule||"number"==typeof rule||rule instanceof Date?self.parseDate(rule,void 0,!0):rule&&"object"==typeof rule&&rule.from&&rule.to?{from:self.parseDate(rule.from,void 0),to:self.parseDate(rule.to,void 0)}:rule})).filter((function(x){return x}))}function updatePositionElement(){self._positionElement=self.config.positionElement||self._input}function triggerEvent(event,data){if(void 0!==self.config){var hooks=self.config[event];if(void 0!==hooks&&hooks.length>0)for(var i=0;hooks[i]&&i<hooks.length;i++)hooks[i](self.selectedDates,self.input.value,self,data);"onChange"===event&&(self.input.dispatchEvent(createEvent("change")),self.input.dispatchEvent(createEvent("input")))}}function createEvent(name){var e=document.createEvent("Event");return e.initEvent(name,!0,!0),e}function isDateSelected(date){for(var i=0;i<self.selectedDates.length;i++){var selectedDate=self.selectedDates[i];if(selectedDate instanceof Date&&0===compareDates(selectedDate,date))return""+i}return!1}function updateNavigationCurrentMonth(){self.config.noCalendar||self.isMobile||!self.monthNav||(self.yearElements.forEach((function(yearElement,i){var d=new Date(self.currentYear,self.currentMonth,1);d.setMonth(self.currentMonth+i),self.config.showMonths>1||"static"===self.config.monthSelectorType?self.monthElements[i].textContent=monthToStr(d.getMonth(),self.config.shorthandCurrentMonth,self.l10n)+" ":self.monthsDropdownContainer.value=d.getMonth().toString(),yearElement.value=d.getFullYear().toString()})),self._hidePrevMonthArrow=void 0!==self.config.minDate&&(self.currentYear===self.config.minDate.getFullYear()?self.currentMonth<=self.config.minDate.getMonth():self.currentYear<self.config.minDate.getFullYear()),self._hideNextMonthArrow=void 0!==self.config.maxDate&&(self.currentYear===self.config.maxDate.getFullYear()?self.currentMonth+1>self.config.maxDate.getMonth():self.currentYear>self.config.maxDate.getFullYear()))}function getDateStr(specificFormat){var format=specificFormat||(self.config.altInput?self.config.altFormat:self.config.dateFormat);return self.selectedDates.map((function(dObj){return self.formatDate(dObj,format)})).filter((function(d,i,arr){return"range"!==self.config.mode||self.config.enableTime||arr.indexOf(d)===i})).join("range"!==self.config.mode?self.config.conjunction:self.l10n.rangeSeparator)}function updateValue(triggerChange){void 0===triggerChange&&(triggerChange=!0),void 0!==self.mobileInput&&self.mobileFormatStr&&(self.mobileInput.value=void 0!==self.latestSelectedDateObj?self.formatDate(self.latestSelectedDateObj,self.mobileFormatStr):""),self.input.value=getDateStr(self.config.dateFormat),void 0!==self.altInput&&(self.altInput.value=getDateStr(self.config.altFormat)),!1!==triggerChange&&triggerEvent("onValueUpdate")}function onMonthNavClick(e){var eventTarget=getEventTarget(e),isPrevMonth=self.prevMonthNav.contains(eventTarget),isNextMonth=self.nextMonthNav.contains(eventTarget);isPrevMonth||isNextMonth?changeMonth(isPrevMonth?-1:1):self.yearElements.indexOf(eventTarget)>=0?eventTarget.select():eventTarget.classList.contains("arrowUp")?self.changeYear(self.currentYear+1):eventTarget.classList.contains("arrowDown")&&self.changeYear(self.currentYear-1)}return function init(){self.element=self.input=element,self.isOpen=!1,function parseConfig(){var boolOpts=["wrap","weekNumbers","allowInput","allowInvalidPreload","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],userConfig=__assign(__assign({},JSON.parse(JSON.stringify(element.dataset||{}))),instanceConfig),formats={};self.config.parseDate=userConfig.parseDate,self.config.formatDate=userConfig.formatDate,Object.defineProperty(self.config,"enable",{get:function get(){return self.config._enable},set:function set(dates){self.config._enable=parseDateRules(dates)}}),Object.defineProperty(self.config,"disable",{get:function get(){return self.config._disable},set:function set(dates){self.config._disable=parseDateRules(dates)}});var timeMode="time"===userConfig.mode;if(!userConfig.dateFormat&&(userConfig.enableTime||timeMode)){var defaultDateFormat=flatpickr.defaultConfig.dateFormat||defaults.dateFormat;formats.dateFormat=userConfig.noCalendar||timeMode?"H:i"+(userConfig.enableSeconds?":S":""):defaultDateFormat+" H:i"+(userConfig.enableSeconds?":S":"")}if(userConfig.altInput&&(userConfig.enableTime||timeMode)&&!userConfig.altFormat){var defaultAltFormat=flatpickr.defaultConfig.altFormat||defaults.altFormat;formats.altFormat=userConfig.noCalendar||timeMode?"h:i"+(userConfig.enableSeconds?":S K":" K"):defaultAltFormat+" h:i"+(userConfig.enableSeconds?":S":"")+" K"}Object.defineProperty(self.config,"minDate",{get:function get(){return self.config._minDate},set:minMaxDateSetter("min")}),Object.defineProperty(self.config,"maxDate",{get:function get(){return self.config._maxDate},set:minMaxDateSetter("max")});var minMaxTimeSetter=function minMaxTimeSetter(type){return function(val){self.config["min"===type?"_minTime":"_maxTime"]=self.parseDate(val,"H:i:S")}};Object.defineProperty(self.config,"minTime",{get:function get(){return self.config._minTime},set:minMaxTimeSetter("min")}),Object.defineProperty(self.config,"maxTime",{get:function get(){return self.config._maxTime},set:minMaxTimeSetter("max")}),"time"===userConfig.mode&&(self.config.noCalendar=!0,self.config.enableTime=!0);Object.assign(self.config,formats,userConfig);for(var i=0;i<boolOpts.length;i++)self.config[boolOpts[i]]=!0===self.config[boolOpts[i]]||"true"===self.config[boolOpts[i]];HOOKS.filter((function(hook){return void 0!==self.config[hook]})).forEach((function(hook){self.config[hook]=arrayify(self.config[hook]||[]).map(bindToInstance)})),self.isMobile=!self.config.disableMobile&&!self.config.inline&&"single"===self.config.mode&&!self.config.disable.length&&!self.config.enable&&!self.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);for(i=0;i<self.config.plugins.length;i++){var pluginConf=self.config.plugins[i](self)||{};for(var key in pluginConf)HOOKS.indexOf(key)>-1?self.config[key]=arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]):void 0===userConfig[key]&&(self.config[key]=pluginConf[key])}userConfig.altInputClass||(self.config.altInputClass=getInputElem().className+" "+self.config.altInputClass);triggerEvent("onParseConfig")}(),setupLocale(),function setupInputs(){if(self.input=getInputElem(),!self.input)return void self.config.errorHandler(new Error("Invalid input element specified"));self.input._type=self.input.type,self.input.type="text",self.input.classList.add("flatpickr-input"),self._input=self.input,self.config.altInput&&(self.altInput=createElement(self.input.nodeName,self.config.altInputClass),self._input=self.altInput,self.altInput.placeholder=self.input.placeholder,self.altInput.disabled=self.input.disabled,self.altInput.required=self.input.required,self.altInput.tabIndex=self.input.tabIndex,self.altInput.type="text",self.input.setAttribute("type","hidden"),!self.config.static&&self.input.parentNode&&self.input.parentNode.insertBefore(self.altInput,self.input.nextSibling));self.config.allowInput||self._input.setAttribute("readonly","readonly");updatePositionElement()}(),function setupDates(){self.selectedDates=[],self.now=self.parseDate(self.config.now)||new Date;var preloadedDate=self.config.defaultDate||("INPUT"!==self.input.nodeName&&"TEXTAREA"!==self.input.nodeName||!self.input.placeholder||self.input.value!==self.input.placeholder?self.input.value:null);preloadedDate&&setSelectedDate(preloadedDate,self.config.dateFormat);self._initialDate=self.selectedDates.length>0?self.selectedDates[0]:self.config.minDate&&self.config.minDate.getTime()>self.now.getTime()?self.config.minDate:self.config.maxDate&&self.config.maxDate.getTime()<self.now.getTime()?self.config.maxDate:self.now,self.currentYear=self._initialDate.getFullYear(),self.currentMonth=self._initialDate.getMonth(),self.selectedDates.length>0&&(self.latestSelectedDateObj=self.selectedDates[0]);void 0!==self.config.minTime&&(self.config.minTime=self.parseDate(self.config.minTime,"H:i"));void 0!==self.config.maxTime&&(self.config.maxTime=self.parseDate(self.config.maxTime,"H:i"));self.minDateHasTime=!!self.config.minDate&&(self.config.minDate.getHours()>0||self.config.minDate.getMinutes()>0||self.config.minDate.getSeconds()>0),self.maxDateHasTime=!!self.config.maxDate&&(self.config.maxDate.getHours()>0||self.config.maxDate.getMinutes()>0||self.config.maxDate.getSeconds()>0)}(),function setupHelperFunctions(){self.utils={getDaysInMonth:function getDaysInMonth(month,yr){return void 0===month&&(month=self.currentMonth),void 0===yr&&(yr=self.currentYear),1===month&&(yr%4==0&&yr%100!=0||yr%400==0)?29:self.l10n.daysInMonth[month]}}}(),self.isMobile||function build(){var fragment=window.document.createDocumentFragment();if(self.calendarContainer=createElement("div","flatpickr-calendar"),self.calendarContainer.tabIndex=-1,!self.config.noCalendar){if(fragment.appendChild(function buildMonthNav(){return self.monthNav=createElement("div","flatpickr-months"),self.yearElements=[],self.monthElements=[],self.prevMonthNav=createElement("span","flatpickr-prev-month"),self.prevMonthNav.innerHTML=self.config.prevArrow,self.nextMonthNav=createElement("span","flatpickr-next-month"),self.nextMonthNav.innerHTML=self.config.nextArrow,buildMonths(),Object.defineProperty(self,"_hidePrevMonthArrow",{get:function get(){return self.__hidePrevMonthArrow},set:function set(bool){self.__hidePrevMonthArrow!==bool&&(toggleClass(self.prevMonthNav,"flatpickr-disabled",bool),self.__hidePrevMonthArrow=bool)}}),Object.defineProperty(self,"_hideNextMonthArrow",{get:function get(){return self.__hideNextMonthArrow},set:function set(bool){self.__hideNextMonthArrow!==bool&&(toggleClass(self.nextMonthNav,"flatpickr-disabled",bool),self.__hideNextMonthArrow=bool)}}),self.currentYearElement=self.yearElements[0],updateNavigationCurrentMonth(),self.monthNav}()),self.innerContainer=createElement("div","flatpickr-innerContainer"),self.config.weekNumbers){var _a=function buildWeeks(){self.calendarContainer.classList.add("hasWeeks");var weekWrapper=createElement("div","flatpickr-weekwrapper");weekWrapper.appendChild(createElement("span","flatpickr-weekday",self.l10n.weekAbbreviation));var weekNumbers=createElement("div","flatpickr-weeks");return weekWrapper.appendChild(weekNumbers),{weekWrapper:weekWrapper,weekNumbers:weekNumbers}}(),weekWrapper=_a.weekWrapper,weekNumbers=_a.weekNumbers;self.innerContainer.appendChild(weekWrapper),self.weekNumbers=weekNumbers,self.weekWrapper=weekWrapper}self.rContainer=createElement("div","flatpickr-rContainer"),self.rContainer.appendChild(buildWeekdays()),self.daysContainer||(self.daysContainer=createElement("div","flatpickr-days"),self.daysContainer.tabIndex=-1),buildDays(),self.rContainer.appendChild(self.daysContainer),self.innerContainer.appendChild(self.rContainer),fragment.appendChild(self.innerContainer)}self.config.enableTime&&fragment.appendChild(function buildTime(){self.calendarContainer.classList.add("hasTime"),self.config.noCalendar&&self.calendarContainer.classList.add("noCalendar");var defaults=getDefaultHours(self.config);self.timeContainer=createElement("div","flatpickr-time"),self.timeContainer.tabIndex=-1;var separator=createElement("span","flatpickr-time-separator",":"),hourInput=createNumberInput("flatpickr-hour",{"aria-label":self.l10n.hourAriaLabel});self.hourElement=hourInput.getElementsByTagName("input")[0];var minuteInput=createNumberInput("flatpickr-minute",{"aria-label":self.l10n.minuteAriaLabel});self.minuteElement=minuteInput.getElementsByTagName("input")[0],self.hourElement.tabIndex=self.minuteElement.tabIndex=-1,self.hourElement.value=pad(self.latestSelectedDateObj?self.latestSelectedDateObj.getHours():self.config.time_24hr?defaults.hours:function military2ampm(hour){switch(hour%24){case 0:case 12:return 12;default:return hour%12}}(defaults.hours)),self.minuteElement.value=pad(self.latestSelectedDateObj?self.latestSelectedDateObj.getMinutes():defaults.minutes),self.hourElement.setAttribute("step",self.config.hourIncrement.toString()),self.minuteElement.setAttribute("step",self.config.minuteIncrement.toString()),self.hourElement.setAttribute("min",self.config.time_24hr?"0":"1"),self.hourElement.setAttribute("max",self.config.time_24hr?"23":"12"),self.hourElement.setAttribute("maxlength","2"),self.minuteElement.setAttribute("min","0"),self.minuteElement.setAttribute("max","59"),self.minuteElement.setAttribute("maxlength","2"),self.timeContainer.appendChild(hourInput),self.timeContainer.appendChild(separator),self.timeContainer.appendChild(minuteInput),self.config.time_24hr&&self.timeContainer.classList.add("time24hr");if(self.config.enableSeconds){self.timeContainer.classList.add("hasSeconds");var secondInput=createNumberInput("flatpickr-second");self.secondElement=secondInput.getElementsByTagName("input")[0],self.secondElement.value=pad(self.latestSelectedDateObj?self.latestSelectedDateObj.getSeconds():defaults.seconds),self.secondElement.setAttribute("step",self.minuteElement.getAttribute("step")),self.secondElement.setAttribute("min","0"),self.secondElement.setAttribute("max","59"),self.secondElement.setAttribute("maxlength","2"),self.timeContainer.appendChild(createElement("span","flatpickr-time-separator",":")),self.timeContainer.appendChild(secondInput)}self.config.time_24hr||(self.amPM=createElement("span","flatpickr-am-pm",self.l10n.amPM[_int((self.latestSelectedDateObj?self.hourElement.value:self.config.defaultHour)>11)]),self.amPM.title=self.l10n.toggleTitle,self.amPM.tabIndex=-1,self.timeContainer.appendChild(self.amPM));return self.timeContainer}());toggleClass(self.calendarContainer,"rangeMode","range"===self.config.mode),toggleClass(self.calendarContainer,"animate",!0===self.config.animate),toggleClass(self.calendarContainer,"multiMonth",self.config.showMonths>1),self.calendarContainer.appendChild(fragment);var customAppend=void 0!==self.config.appendTo&&void 0!==self.config.appendTo.nodeType;if((self.config.inline||self.config.static)&&(self.calendarContainer.classList.add(self.config.inline?"inline":"static"),self.config.inline&&(!customAppend&&self.element.parentNode?self.element.parentNode.insertBefore(self.calendarContainer,self._input.nextSibling):void 0!==self.config.appendTo&&self.config.appendTo.appendChild(self.calendarContainer)),self.config.static)){var wrapper=createElement("div","flatpickr-wrapper");self.element.parentNode&&self.element.parentNode.insertBefore(wrapper,self.element),wrapper.appendChild(self.element),self.altInput&&wrapper.appendChild(self.altInput),wrapper.appendChild(self.calendarContainer)}self.config.static||self.config.inline||(void 0!==self.config.appendTo?self.config.appendTo:window.document.body).appendChild(self.calendarContainer)}(),function bindEvents(){self.config.wrap&&["open","close","toggle","clear"].forEach((function(evt){Array.prototype.forEach.call(self.element.querySelectorAll("[data-"+evt+"]"),(function(el){return bind(el,"click",self[evt])}))}));if(self.isMobile)return void function setupMobile(){var inputType=self.config.enableTime?self.config.noCalendar?"time":"datetime-local":"date";self.mobileInput=createElement("input",self.input.className+" flatpickr-mobile"),self.mobileInput.tabIndex=1,self.mobileInput.type=inputType,self.mobileInput.disabled=self.input.disabled,self.mobileInput.required=self.input.required,self.mobileInput.placeholder=self.input.placeholder,self.mobileFormatStr="datetime-local"===inputType?"Y-m-d\\TH:i:S":"date"===inputType?"Y-m-d":"H:i:S",self.selectedDates.length>0&&(self.mobileInput.defaultValue=self.mobileInput.value=self.formatDate(self.selectedDates[0],self.mobileFormatStr));self.config.minDate&&(self.mobileInput.min=self.formatDate(self.config.minDate,"Y-m-d"));self.config.maxDate&&(self.mobileInput.max=self.formatDate(self.config.maxDate,"Y-m-d"));self.input.getAttribute("step")&&(self.mobileInput.step=String(self.input.getAttribute("step")));self.input.type="hidden",void 0!==self.altInput&&(self.altInput.type="hidden");try{self.input.parentNode&&self.input.parentNode.insertBefore(self.mobileInput,self.input.nextSibling)}catch(_a){}bind(self.mobileInput,"change",(function(e){self.setDate(getEventTarget(e).value,!1,self.mobileFormatStr),triggerEvent("onChange"),triggerEvent("onClose")}))}();var debouncedResize=debounce(onResize,50);self._debouncedChange=debounce(triggerChange,300),self.daysContainer&&!/iPhone|iPad|iPod/i.test(navigator.userAgent)&&bind(self.daysContainer,"mouseover",(function(e){"range"===self.config.mode&&onMouseOver(getEventTarget(e))}));bind(self._input,"keydown",onKeyDown),void 0!==self.calendarContainer&&bind(self.calendarContainer,"keydown",onKeyDown);self.config.inline||self.config.static||bind(window,"resize",debouncedResize);void 0!==window.ontouchstart?bind(window.document,"touchstart",documentClick):bind(window.document,"mousedown",documentClick);bind(window.document,"focus",documentClick,{capture:!0}),!0===self.config.clickOpens&&(bind(self._input,"focus",self.open),bind(self._input,"click",self.open));void 0!==self.daysContainer&&(bind(self.monthNav,"click",onMonthNavClick),bind(self.monthNav,["keyup","increment"],onYearInput),bind(self.daysContainer,"click",selectDate));if(void 0!==self.timeContainer&&void 0!==self.minuteElement&&void 0!==self.hourElement){var selText=function selText(e){return getEventTarget(e).select()};bind(self.timeContainer,["increment"],updateTime),bind(self.timeContainer,"blur",updateTime,{capture:!0}),bind(self.timeContainer,"click",timeIncrement),bind([self.hourElement,self.minuteElement],["focus","click"],selText),void 0!==self.secondElement&&bind(self.secondElement,"focus",(function(){return self.secondElement&&self.secondElement.select()})),void 0!==self.amPM&&bind(self.amPM,"click",(function(e){updateTime(e)}))}self.config.allowInput&&bind(self._input,"blur",onBlur)}(),(self.selectedDates.length||self.config.noCalendar)&&(self.config.enableTime&&setHoursFromDate(self.config.noCalendar?self.latestSelectedDateObj:void 0),updateValue(!1)),setCalendarWidth();var isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);!self.isMobile&&isSafari&&positionCalendar(),triggerEvent("onReady")}(),self}function _flatpickr(nodeList,config){for(var nodes=Array.prototype.slice.call(nodeList).filter((function(x){return x instanceof HTMLElement})),instances=[],i=0;i<nodes.length;i++){var node=nodes[i];try{if(null!==node.getAttribute("data-fp-omit"))continue;void 0!==node._flatpickr&&(node._flatpickr.destroy(),node._flatpickr=void 0),node._flatpickr=FlatpickrInstance(node,config||{}),instances.push(node._flatpickr)}catch(e){console.error(e)}}return 1===instances.length?instances[0]:instances}"undefined"!=typeof HTMLElement&&"undefined"!=typeof HTMLCollection&&"undefined"!=typeof NodeList&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(config){return _flatpickr(this,config)},HTMLElement.prototype.flatpickr=function(config){return _flatpickr([this],config)});var flatpickr=function flatpickr(selector,config){return"string"==typeof selector?_flatpickr(window.document.querySelectorAll(selector),config):selector instanceof Node?_flatpickr([selector],config):_flatpickr(selector,config)};flatpickr.defaultConfig={},flatpickr.l10ns={en:__assign({},english),default:__assign({},english)},flatpickr.localize=function(l10n){flatpickr.l10ns.default=__assign(__assign({},flatpickr.l10ns.default),l10n)},flatpickr.setDefaults=function(config){flatpickr.defaultConfig=__assign(__assign({},flatpickr.defaultConfig),config)},flatpickr.parseDate=createDateParser({}),flatpickr.formatDate=createDateFormatter({}),flatpickr.compareDates=compareDates,"undefined"!=typeof jQuery&&void 0!==jQuery.fn&&(jQuery.fn.flatpickr=function(config){return _flatpickr(this,config)}),Date.prototype.fp_incr=function(days){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof days?parseInt(days,10):days))},"undefined"!=typeof window&&(window.flatpickr=flatpickr);var VerdocsFieldDate=function(){function VerdocsFieldDate(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsFieldDate),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.j)(this,hostRef),this.fieldFocus=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.e)(this,"fieldFocus",7),this.fieldBlur=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.e)(this,"fieldBlur",7),this.fieldChange=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.e)(this,"fieldChange",7),this.fieldInput=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.e)(this,"fieldInput",7),this.settingsPress=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.e)(this,"settingsPress",7),this.field=null,this.recipient=void 0,this.disabled=!1,this.editable=!1,this.moveable=!1,this.roleindex=0,this.focused=!1,this.containerId="verdocs-date-picker-"+Math.random().toString(36).substring(2,11)}var _focusField;return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsFieldDate,[{key:"focusField",value:(_focusField=function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}(_regeneratorRuntime().mark((function _callee(){return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:this.focused=!0,this.el.focus(),this.fieldFocus.emit(!0);case 3:case"end":return _context.stop()}}),_callee,this)}))),function focusField(){return _focusField.apply(this,arguments)})},{key:"componentDidLoad",value:function componentDidLoad(){flatpickr("#"+this.containerId,{positionElement:this.el,onChange:function onChange(selectedDate,dateStr,instance){console.log("Selected",selectedDate,dateStr,instance)}})}},{key:"handleBlur",value:function handleBlur(){this.focused=!1,this.fieldBlur.emit(!0)}},{key:"handleFocus",value:function handleFocus(){this.focused=!0,this.fieldFocus.emit(!0)}},{key:"handleChange",value:function handleChange(e){this.fieldChange.emit(e.target.value)}},{key:"handleInput",value:function handleInput(e){this.fieldInput.emit(e.target.value)}},{key:"render",value:function render(){var _a,_b,_this2=this,settings=Object(_utils_3f23facc_js__WEBPACK_IMPORTED_MODULE_50__.e)(this.field),disabled=null!==(_b=null!==(_a=this.disabled)&&void 0!==_a?_a:settings.disabled)&&void 0!==_b&&_b,backgroundColor=this.field.rgba||Object(_Colors_1b298092_js__WEBPACK_IMPORTED_MODULE_51__.a)(this.roleindex);return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.b,{class:{focused:this.focused,required:settings.required,disabled:disabled},style:{backgroundColor:backgroundColor}},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("input",{type:"text",value:"",id:this.containerId,disabled:disabled,placeholder:settings.placeholder,required:settings.required,ref:function ref(el){return _this2.el=el},onBlur:function onBlur(){return _this2.handleBlur()},onFocus:function onFocus(){return _this2.handleFocus()},onChange:function onChange(e){return _this2.handleChange(e)},onInput:function onInput(e){return _this2.handleInput(e)}}),this.editable&&Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("verdocs-button-panel",{icon:'<svg xmlns="http://www.w3.org/2000/svg" height="20" width="20"><path d="m7.5 18.5-.312-2.667q-.188-.125-.396-.25-.209-.125-.396-.229l-2.479 1.063-2.521-4.334 2.125-1.625q.021-.104.021-.229v-.458q0-.125-.021-.229L1.396 7.917l2.521-4.313 2.5 1.042q.166-.104.375-.229.208-.125.396-.229L7.5 1.5h5l.312 2.688q.188.104.396.229.209.125.396.229l2.479-1.042 2.521 4.313-2.125 1.625v.916l2.125 1.625-2.521 4.334-2.5-1.063q-.166.104-.375.229-.208.125-.396.25L12.5 18.5Zm2.479-5.521q1.229 0 2.104-.875T12.958 10q0-1.229-.875-2.104t-2.104-.875q-1.208 0-2.094.875Q7 8.771 7 10t.885 2.104q.886.875 2.094.875Zm0-1.75q-.5 0-.864-.364Q8.75 10.5 8.75 10t.365-.865q.364-.364.864-.364t.865.364q.364.365.364.865t-.364.865q-.365.364-.865.364ZM10.021 10Zm-.792 6.521h1.542l.25-2.146q.625-.167 1.198-.51.573-.344 1.031-.823l2.021.854.771-1.271-1.771-1.354q.104-.292.156-.615.052-.323.052-.656 0-.292-.052-.604-.052-.313-.135-.646l1.77-1.375-.77-1.271-2.021.875q-.479-.5-1.042-.833-.562-.334-1.187-.5l-.271-2.167H9.208l-.25 2.167q-.625.166-1.187.5-.563.333-1.042.812l-2-.854-.771 1.271 1.73 1.354q-.084.333-.136.656Q5.5 9.708 5.5 10t.052.604q.052.313.136.667l-1.73 1.354.771 1.271 2-.834q.479.459 1.042.792.562.334 1.187.5Z"/></svg>'},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("h6",null,"Field Settings"),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("form",null,Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("verdocs-select-input",{label:"Recipient",options:[{label:"Buyer",value:"Buyer"},{label:"Seller",value:"Seller"}]}),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("verdocs-text-input",{label:"Field Name",value:"",placeholder:"Stored field name...",onInput:function onInput(e){return console.log("ipt",e)}}),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("verdocs-text-input",{label:"Placeholder",value:"",placeholder:"Placeholder text...",onInput:function onInput(e){return console.log("ipt",e)}}))))}}]),VerdocsFieldDate}();VerdocsFieldDate.style='.flatpickr-calendar{background:transparent;opacity:0;display:none;text-align:center;visibility:hidden;padding:0;-webkit-animation:none;animation:none;direction:ltr;border:0;font-size:14px;line-height:24px;border-radius:5px;position:absolute;width:307.875px;-webkit-box-sizing:border-box;box-sizing:border-box;-ms-touch-action:manipulation;touch-action:manipulation;-webkit-box-shadow:0 3px 13px rgba(0,0,0,0.08);box-shadow:0 3px 13px rgba(0,0,0,0.08)}.flatpickr-calendar.open,.flatpickr-calendar.inline{opacity:1;max-height:640px;visibility:visible}.flatpickr-calendar.open{display:inline-block;z-index:99999}.flatpickr-calendar.animate.open{-webkit-animation:fpFadeInDown 300ms cubic-bezier(0.23, 1, 0.32, 1);animation:fpFadeInDown 300ms cubic-bezier(0.23, 1, 0.32, 1)}.flatpickr-calendar.inline{display:block;position:relative;top:2px}.flatpickr-calendar.static{position:absolute;top:calc(100% + 2px)}.flatpickr-calendar.static.open{z-index:999;display:block}.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+1) .flatpickr-day.inRange:nth-child(7n+7){-webkit-box-shadow:none !important;box-shadow:none !important}.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+2) .flatpickr-day.inRange:nth-child(7n+1){-webkit-box-shadow:-2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;box-shadow:-2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6}.flatpickr-calendar .hasWeeks .dayContainer,.flatpickr-calendar .hasTime .dayContainer{border-bottom:0;border-bottom-right-radius:0;border-bottom-left-radius:0}.flatpickr-calendar .hasWeeks .dayContainer{border-left:0}.flatpickr-calendar.hasTime .flatpickr-time{height:40px;border-top:1px solid #eceef1}.flatpickr-calendar.hasTime .flatpickr-innerContainer{border-bottom:0}.flatpickr-calendar.hasTime .flatpickr-time{border:1px solid #eceef1}.flatpickr-calendar.noCalendar.hasTime .flatpickr-time{height:auto}.flatpickr-calendar:before,.flatpickr-calendar:after{position:absolute;display:block;pointer-events:none;border:solid transparent;content:\'\';height:0;width:0;left:22px}.flatpickr-calendar.rightMost:before,.flatpickr-calendar.arrowRight:before,.flatpickr-calendar.rightMost:after,.flatpickr-calendar.arrowRight:after{left:auto;right:22px}.flatpickr-calendar.arrowCenter:before,.flatpickr-calendar.arrowCenter:after{left:50%;right:50%}.flatpickr-calendar:before{border-width:5px;margin:0 -5px}.flatpickr-calendar:after{border-width:4px;margin:0 -4px}.flatpickr-calendar.arrowTop:before,.flatpickr-calendar.arrowTop:after{bottom:100%}.flatpickr-calendar.arrowTop:before{border-bottom-color:#eceef1}.flatpickr-calendar.arrowTop:after{border-bottom-color:#eceef1}.flatpickr-calendar.arrowBottom:before,.flatpickr-calendar.arrowBottom:after{top:100%}.flatpickr-calendar.arrowBottom:before{border-top-color:#eceef1}.flatpickr-calendar.arrowBottom:after{border-top-color:#eceef1}.flatpickr-calendar:focus{outline:0}.flatpickr-wrapper{position:relative;display:inline-block}.flatpickr-months{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex}.flatpickr-months .flatpickr-month{border-radius:5px 5px 0 0;background:#eceef1;color:#5a6171;fill:#5a6171;height:34px;line-height:1;text-align:center;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}.flatpickr-months .flatpickr-prev-month,.flatpickr-months .flatpickr-next-month{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-decoration:none;cursor:pointer;position:absolute;top:0;height:34px;padding:10px;z-index:3;color:#5a6171;fill:#5a6171}.flatpickr-months .flatpickr-prev-month.flatpickr-disabled,.flatpickr-months .flatpickr-next-month.flatpickr-disabled{display:none}.flatpickr-months .flatpickr-prev-month i,.flatpickr-months .flatpickr-next-month i{position:relative}.flatpickr-months .flatpickr-prev-month.flatpickr-prev-month,.flatpickr-months .flatpickr-next-month.flatpickr-prev-month{left:0;}.flatpickr-months .flatpickr-prev-month.flatpickr-next-month,.flatpickr-months .flatpickr-next-month.flatpickr-next-month{right:0;}.flatpickr-months .flatpickr-prev-month:hover,.flatpickr-months .flatpickr-next-month:hover{color:#bbb}.flatpickr-months .flatpickr-prev-month:hover svg,.flatpickr-months .flatpickr-next-month:hover svg{fill:#f64747}.flatpickr-months .flatpickr-prev-month svg,.flatpickr-months .flatpickr-next-month svg{width:14px;height:14px}.flatpickr-months .flatpickr-prev-month svg path,.flatpickr-months .flatpickr-next-month svg path{-webkit-transition:fill 0.1s;transition:fill 0.1s;fill:inherit}.numInputWrapper{position:relative;height:auto}.numInputWrapper input,.numInputWrapper span{display:inline-block}.numInputWrapper input{width:100%}.numInputWrapper input::-ms-clear{display:none}.numInputWrapper input::-webkit-outer-spin-button,.numInputWrapper input::-webkit-inner-spin-button{margin:0;-webkit-appearance:none}.numInputWrapper span{position:absolute;right:0;width:14px;padding:0 4px 0 2px;height:50%;line-height:50%;opacity:0;cursor:pointer;border:1px solid rgba(72,72,72,0.15);-webkit-box-sizing:border-box;box-sizing:border-box}.numInputWrapper span:hover{background:rgba(0,0,0,0.1)}.numInputWrapper span:active{background:rgba(0,0,0,0.2)}.numInputWrapper span:after{display:block;content:"";position:absolute}.numInputWrapper span.arrowUp{top:0;border-bottom:0}.numInputWrapper span.arrowUp:after{border-left:4px solid transparent;border-right:4px solid transparent;border-bottom:4px solid rgba(72,72,72,0.6);top:26%}.numInputWrapper span.arrowDown{top:50%}.numInputWrapper span.arrowDown:after{border-left:4px solid transparent;border-right:4px solid transparent;border-top:4px solid rgba(72,72,72,0.6);top:40%}.numInputWrapper span svg{width:inherit;height:auto}.numInputWrapper span svg path{fill:rgba(90,97,113,0.5)}.numInputWrapper:hover{background:rgba(0,0,0,0.05)}.numInputWrapper:hover span{opacity:1}.flatpickr-current-month{font-size:135%;line-height:inherit;font-weight:300;color:inherit;position:absolute;width:75%;left:12.5%;padding:7.48px 0 0 0;line-height:1;height:34px;display:inline-block;text-align:center;-webkit-transform:translate3d(0px, 0px, 0px);transform:translate3d(0px, 0px, 0px)}.flatpickr-current-month span.cur-month{font-family:inherit;font-weight:700;color:inherit;display:inline-block;margin-left:0.5ch;padding:0}.flatpickr-current-month span.cur-month:hover{background:rgba(0,0,0,0.05)}.flatpickr-current-month .numInputWrapper{width:6ch;width:7ch\\0;display:inline-block}.flatpickr-current-month .numInputWrapper span.arrowUp:after{border-bottom-color:#5a6171}.flatpickr-current-month .numInputWrapper span.arrowDown:after{border-top-color:#5a6171}.flatpickr-current-month input.cur-year{background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;cursor:text;padding:0 0 0 0.5ch;margin:0;display:inline-block;font-size:inherit;font-family:inherit;font-weight:300;line-height:inherit;height:auto;border:0;border-radius:0;vertical-align:initial;-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.flatpickr-current-month input.cur-year:focus{outline:0}.flatpickr-current-month input.cur-year[disabled],.flatpickr-current-month input.cur-year[disabled]:hover{font-size:100%;color:rgba(90,97,113,0.5);background:transparent;pointer-events:none}.flatpickr-current-month .flatpickr-monthDropdown-months{appearance:menulist;background:#eceef1;border:none;border-radius:0;box-sizing:border-box;color:inherit;cursor:pointer;font-size:inherit;font-family:inherit;font-weight:300;height:auto;line-height:inherit;margin:-1px 0 0 0;outline:none;padding:0 0 0 0.5ch;position:relative;vertical-align:initial;-webkit-box-sizing:border-box;-webkit-appearance:menulist;-moz-appearance:menulist;width:auto}.flatpickr-current-month .flatpickr-monthDropdown-months:focus,.flatpickr-current-month .flatpickr-monthDropdown-months:active{outline:none}.flatpickr-current-month .flatpickr-monthDropdown-months:hover{background:rgba(0,0,0,0.05)}.flatpickr-current-month .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month{background-color:#eceef1;outline:none;padding:0}.flatpickr-weekdays{background:#eceef1;text-align:center;overflow:hidden;width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;height:28px}.flatpickr-weekdays .flatpickr-weekdaycontainer{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}span.flatpickr-weekday{cursor:default;font-size:90%;background:#eceef1;color:#5a6171;line-height:1;margin:0;text-align:center;display:block;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;font-weight:bolder}.dayContainer,.flatpickr-weeks{padding:1px 0 0 0}.flatpickr-days{position:relative;overflow:hidden;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:start;-webkit-align-items:flex-start;-ms-flex-align:start;align-items:flex-start;width:307.875px;border-left:1px solid #eceef1;border-right:1px solid #eceef1}.flatpickr-days:focus{outline:0}.dayContainer{padding:0;outline:0;text-align:left;width:307.875px;min-width:307.875px;max-width:307.875px;-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;display:-ms-flexbox;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-wrap:wrap;-ms-flex-pack:justify;-webkit-justify-content:space-around;justify-content:space-around;-webkit-transform:translate3d(0px, 0px, 0px);transform:translate3d(0px, 0px, 0px);opacity:1}.dayContainer+.dayContainer{-webkit-box-shadow:-1px 0 0 #eceef1;box-shadow:-1px 0 0 #eceef1}.flatpickr-day{background:none;border:1px solid transparent;border-radius:150px;-webkit-box-sizing:border-box;box-sizing:border-box;color:#484848;cursor:pointer;font-weight:400;width:14.2857143%;-webkit-flex-basis:14.2857143%;-ms-flex-preferred-size:14.2857143%;flex-basis:14.2857143%;max-width:39px;height:39px;line-height:39px;margin:0;display:inline-block;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:center}.flatpickr-day.inRange,.flatpickr-day.prevMonthDay.inRange,.flatpickr-day.nextMonthDay.inRange,.flatpickr-day.today.inRange,.flatpickr-day.prevMonthDay.today.inRange,.flatpickr-day.nextMonthDay.today.inRange,.flatpickr-day:hover,.flatpickr-day.prevMonthDay:hover,.flatpickr-day.nextMonthDay:hover,.flatpickr-day:focus,.flatpickr-day.prevMonthDay:focus,.flatpickr-day.nextMonthDay:focus{cursor:pointer;outline:0;background:#e2e2e2;border-color:#e2e2e2}.flatpickr-day.today{border-color:#bbb}.flatpickr-day.today:hover,.flatpickr-day.today:focus{border-color:#bbb;background:#bbb;color:#fff}.flatpickr-day.selected,.flatpickr-day.startRange,.flatpickr-day.endRange,.flatpickr-day.selected.inRange,.flatpickr-day.startRange.inRange,.flatpickr-day.endRange.inRange,.flatpickr-day.selected:focus,.flatpickr-day.startRange:focus,.flatpickr-day.endRange:focus,.flatpickr-day.selected:hover,.flatpickr-day.startRange:hover,.flatpickr-day.endRange:hover,.flatpickr-day.selected.prevMonthDay,.flatpickr-day.startRange.prevMonthDay,.flatpickr-day.endRange.prevMonthDay,.flatpickr-day.selected.nextMonthDay,.flatpickr-day.startRange.nextMonthDay,.flatpickr-day.endRange.nextMonthDay{background:#ff5a5f;-webkit-box-shadow:none;box-shadow:none;color:#fff;border-color:#ff5a5f}.flatpickr-day.selected.startRange,.flatpickr-day.startRange.startRange,.flatpickr-day.endRange.startRange{border-radius:50px 0 0 50px}.flatpickr-day.selected.endRange,.flatpickr-day.startRange.endRange,.flatpickr-day.endRange.endRange{border-radius:0 50px 50px 0}.flatpickr-day.selected.startRange+.endRange:not(:nth-child(7n+1)),.flatpickr-day.startRange.startRange+.endRange:not(:nth-child(7n+1)),.flatpickr-day.endRange.startRange+.endRange:not(:nth-child(7n+1)){-webkit-box-shadow:-10px 0 0 #ff5a5f;box-shadow:-10px 0 0 #ff5a5f}.flatpickr-day.selected.startRange.endRange,.flatpickr-day.startRange.startRange.endRange,.flatpickr-day.endRange.startRange.endRange{border-radius:50px}.flatpickr-day.inRange{border-radius:0;-webkit-box-shadow:-5px 0 0 #e2e2e2, 5px 0 0 #e2e2e2;box-shadow:-5px 0 0 #e2e2e2, 5px 0 0 #e2e2e2}.flatpickr-day.flatpickr-disabled,.flatpickr-day.flatpickr-disabled:hover,.flatpickr-day.prevMonthDay,.flatpickr-day.nextMonthDay,.flatpickr-day.notAllowed,.flatpickr-day.notAllowed.prevMonthDay,.flatpickr-day.notAllowed.nextMonthDay{color:rgba(72,72,72,0.3);background:transparent;border-color:transparent;cursor:default}.flatpickr-day.flatpickr-disabled,.flatpickr-day.flatpickr-disabled:hover{cursor:not-allowed;color:rgba(72,72,72,0.1)}.flatpickr-day.week.selected{border-radius:0;-webkit-box-shadow:-5px 0 0 #ff5a5f, 5px 0 0 #ff5a5f;box-shadow:-5px 0 0 #ff5a5f, 5px 0 0 #ff5a5f}.flatpickr-day.hidden{visibility:hidden}.rangeMode .flatpickr-day{margin-top:1px}.flatpickr-weekwrapper{float:left}.flatpickr-weekwrapper .flatpickr-weeks{padding:0 12px;border-left:1px solid #eceef1}.flatpickr-weekwrapper .flatpickr-weekday{float:none;width:100%;line-height:28px}.flatpickr-weekwrapper span.flatpickr-day,.flatpickr-weekwrapper span.flatpickr-day:hover{display:block;width:100%;max-width:none;color:rgba(72,72,72,0.3);background:transparent;cursor:default;border:none}.flatpickr-innerContainer{display:block;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;background:#fff;border-bottom:1px solid #eceef1}.flatpickr-rContainer{display:inline-block;padding:0;-webkit-box-sizing:border-box;box-sizing:border-box}.flatpickr-time{text-align:center;outline:0;display:block;height:0;line-height:40px;max-height:40px;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;background:#fff;border-radius:0 0 5px 5px}.flatpickr-time:after{content:"";display:table;clear:both}.flatpickr-time .numInputWrapper{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;width:40%;height:40px;float:left}.flatpickr-time .numInputWrapper span.arrowUp:after{border-bottom-color:#484848}.flatpickr-time .numInputWrapper span.arrowDown:after{border-top-color:#484848}.flatpickr-time.hasSeconds .numInputWrapper{width:26%}.flatpickr-time.time24hr .numInputWrapper{width:49%}.flatpickr-time input{background:transparent;-webkit-box-shadow:none;box-shadow:none;border:0;border-radius:0;text-align:center;margin:0;padding:0;height:inherit;line-height:inherit;color:#484848;font-size:14px;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.flatpickr-time input.flatpickr-hour{font-weight:bold}.flatpickr-time input.flatpickr-minute,.flatpickr-time input.flatpickr-second{font-weight:400}.flatpickr-time input:focus{outline:0;border:0}.flatpickr-time .flatpickr-time-separator,.flatpickr-time .flatpickr-am-pm{height:inherit;float:left;line-height:inherit;color:#484848;font-weight:bold;width:2%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center}.flatpickr-time .flatpickr-am-pm{outline:0;width:18%;cursor:pointer;text-align:center;font-weight:400}.flatpickr-time input:hover,.flatpickr-time .flatpickr-am-pm:hover,.flatpickr-time input:focus,.flatpickr-time .flatpickr-am-pm:focus{background:#eaeaea}.flatpickr-input[readonly]{cursor:pointer}@-webkit-keyframes fpFadeInDown{from{opacity:0;-webkit-transform:translate3d(0, -20px, 0);transform:translate3d(0, -20px, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes fpFadeInDown{from{opacity:0;-webkit-transform:translate3d(0, -20px, 0);transform:translate3d(0, -20px, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}span.flatpickr-day.selected{font-weight:bold}verdocs-field-date{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;width:64px;height:20px;display:block;font-size:11px;position:relative;letter-spacing:0.3px;background-color:transparent;-webkit-transform-origin:bottom left;transform-origin:bottom left}verdocs-field-date.disabled{opacity:0.5}verdocs-field-date input{-webkit-box-sizing:border-box;box-sizing:border-box;color:rgba(0, 0, 0, 0.87);font-weight:500;-webkit-transform-origin:0 0;transform-origin:0 0;height:100%;width:100%;background:none;font-size:11px;border:1px solid #cccccc;-webkit-appearance:none;-moz-appearance:none;appearance:none}verdocs-field-date input.hide{display:none}verdocs-field-date.required input{border:1px solid #cc0000}verdocs-field-date.focused{-webkit-animation:verdocs-field-pulse 0.75s 2;animation:verdocs-field-pulse 0.75s 2}verdocs-field-date verdocs-button-panel{top:-3px;left:-2px;opacity:0.5;z-index:1000;cursor:pointer;position:absolute;-webkit-transform:scale(0.6);transform:scale(0.6)}verdocs-field-date verdocs-button-panel[data-active],verdocs-field-date verdocs-button-panel:hover{opacity:1}verdocs-field-date verdocs-button-panel .icon svg{fill:#333333}verdocs-field-date verdocs-button-panel .icon:hover svg{fill:#000000}'},"./node_modules/core-js/internals/array-reduce.js":function(module,exports,__webpack_require__){var aCallable=__webpack_require__("./node_modules/core-js/internals/a-callable.js"),toObject=__webpack_require__("./node_modules/core-js/internals/to-object.js"),IndexedObject=__webpack_require__("./node_modules/core-js/internals/indexed-object.js"),lengthOfArrayLike=__webpack_require__("./node_modules/core-js/internals/length-of-array-like.js"),$TypeError=TypeError,createMethod=function(IS_RIGHT){return function(that,callbackfn,argumentsLength,memo){aCallable(callbackfn);var O=toObject(that),self=IndexedObject(O),length=lengthOfArrayLike(O),index=IS_RIGHT?length-1:0,i=IS_RIGHT?-1:1;if(argumentsLength<2)for(;;){if(index in self){memo=self[index],index+=i;break}if(index+=i,IS_RIGHT?index<0:length<=index)throw $TypeError("Reduce of empty array with no initial value")}for(;IS_RIGHT?index>=0:length>index;index+=i)index in self&&(memo=callbackfn(memo,self[index],index,O));return memo}};module.exports={left:createMethod(!1),right:createMethod(!0)}},"./node_modules/core-js/internals/array-set-length.js":function(module,exports,__webpack_require__){"use strict";var DESCRIPTORS=__webpack_require__("./node_modules/core-js/internals/descriptors.js"),isArray=__webpack_require__("./node_modules/core-js/internals/is-array.js"),$TypeError=TypeError,getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor,SILENT_ON_NON_WRITABLE_LENGTH_SET=DESCRIPTORS&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(error){return error instanceof TypeError}}();module.exports=SILENT_ON_NON_WRITABLE_LENGTH_SET?function(O,length){if(isArray(O)&&!getOwnPropertyDescriptor(O,"length").writable)throw $TypeError("Cannot set read only .length");return O.length=length}:function(O,length){return O.length=length}},"./node_modules/core-js/internals/date-to-iso-string.js":function(module,exports,__webpack_require__){"use strict";var uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),padStart=__webpack_require__("./node_modules/core-js/internals/string-pad.js").start,$RangeError=RangeError,$isFinite=isFinite,abs=Math.abs,DatePrototype=Date.prototype,nativeDateToISOString=DatePrototype.toISOString,thisTimeValue=uncurryThis(DatePrototype.getTime),getUTCDate=uncurryThis(DatePrototype.getUTCDate),getUTCFullYear=uncurryThis(DatePrototype.getUTCFullYear),getUTCHours=uncurryThis(DatePrototype.getUTCHours),getUTCMilliseconds=uncurryThis(DatePrototype.getUTCMilliseconds),getUTCMinutes=uncurryThis(DatePrototype.getUTCMinutes),getUTCMonth=uncurryThis(DatePrototype.getUTCMonth),getUTCSeconds=uncurryThis(DatePrototype.getUTCSeconds);module.exports=fails((function(){return"0385-07-25T07:06:39.999Z"!=nativeDateToISOString.call(new Date(-50000000000001))}))||!fails((function(){nativeDateToISOString.call(new Date(NaN))}))?function toISOString(){if(!$isFinite(thisTimeValue(this)))throw $RangeError("Invalid time value");var year=getUTCFullYear(this),milliseconds=getUTCMilliseconds(this),sign=year<0?"-":year>9999?"+":"";return sign+padStart(abs(year),sign?6:4,0)+"-"+padStart(getUTCMonth(this)+1,2,0)+"-"+padStart(getUTCDate(this),2,0)+"T"+padStart(getUTCHours(this),2,0)+":"+padStart(getUTCMinutes(this),2,0)+":"+padStart(getUTCSeconds(this),2,0)+"."+padStart(milliseconds,3,0)+"Z"}:nativeDateToISOString},"./node_modules/core-js/internals/number-parse-int.js":function(module,exports,__webpack_require__){var global=__webpack_require__("./node_modules/core-js/internals/global.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),toString=__webpack_require__("./node_modules/core-js/internals/to-string.js"),trim=__webpack_require__("./node_modules/core-js/internals/string-trim.js").trim,whitespaces=__webpack_require__("./node_modules/core-js/internals/whitespaces.js"),$parseInt=global.parseInt,Symbol=global.Symbol,ITERATOR=Symbol&&Symbol.iterator,hex=/^[+-]?0x/i,exec=uncurryThis(hex.exec),FORCED=8!==$parseInt(whitespaces+"08")||22!==$parseInt(whitespaces+"0x16")||ITERATOR&&!fails((function(){$parseInt(Object(ITERATOR))}));module.exports=FORCED?function parseInt(string,radix){var S=trim(toString(string));return $parseInt(S,radix>>>0||(exec(hex,S)?16:10))}:$parseInt},"./node_modules/core-js/internals/string-pad.js":function(module,exports,__webpack_require__){var uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),toLength=__webpack_require__("./node_modules/core-js/internals/to-length.js"),toString=__webpack_require__("./node_modules/core-js/internals/to-string.js"),$repeat=__webpack_require__("./node_modules/core-js/internals/string-repeat.js"),requireObjectCoercible=__webpack_require__("./node_modules/core-js/internals/require-object-coercible.js"),repeat=uncurryThis($repeat),stringSlice=uncurryThis("".slice),ceil=Math.ceil,createMethod=function(IS_END){return function($this,maxLength,fillString){var fillLen,stringFiller,S=toString(requireObjectCoercible($this)),intMaxLength=toLength(maxLength),stringLength=S.length,fillStr=void 0===fillString?" ":toString(fillString);return intMaxLength<=stringLength||""==fillStr?S:((stringFiller=repeat(fillStr,ceil((fillLen=intMaxLength-stringLength)/fillStr.length))).length>fillLen&&(stringFiller=stringSlice(stringFiller,0,fillLen)),IS_END?S+stringFiller:stringFiller+S)}};module.exports={start:createMethod(!1),end:createMethod(!0)}},"./node_modules/core-js/internals/string-trim-end.js":function(module,exports,__webpack_require__){"use strict";var $trimEnd=__webpack_require__("./node_modules/core-js/internals/string-trim.js").end,forcedStringTrimMethod=__webpack_require__("./node_modules/core-js/internals/string-trim-forced.js");module.exports=forcedStringTrimMethod("trimEnd")?function trimEnd(){return $trimEnd(this)}:"".trimEnd},"./node_modules/core-js/modules/es.array.reduce.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),$reduce=__webpack_require__("./node_modules/core-js/internals/array-reduce.js").left,arrayMethodIsStrict=__webpack_require__("./node_modules/core-js/internals/array-method-is-strict.js"),CHROME_VERSION=__webpack_require__("./node_modules/core-js/internals/engine-v8-version.js"),IS_NODE=__webpack_require__("./node_modules/core-js/internals/engine-is-node.js");$({target:"Array",proto:!0,forced:!arrayMethodIsStrict("reduce")||!IS_NODE&&CHROME_VERSION>79&&CHROME_VERSION<83},{reduce:function reduce(callbackfn){var length=arguments.length;return $reduce(this,callbackfn,length,length>1?arguments[1]:void 0)}})},"./node_modules/core-js/modules/es.array.splice.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),toObject=__webpack_require__("./node_modules/core-js/internals/to-object.js"),toAbsoluteIndex=__webpack_require__("./node_modules/core-js/internals/to-absolute-index.js"),toIntegerOrInfinity=__webpack_require__("./node_modules/core-js/internals/to-integer-or-infinity.js"),lengthOfArrayLike=__webpack_require__("./node_modules/core-js/internals/length-of-array-like.js"),setArrayLength=__webpack_require__("./node_modules/core-js/internals/array-set-length.js"),doesNotExceedSafeInteger=__webpack_require__("./node_modules/core-js/internals/does-not-exceed-safe-integer.js"),arraySpeciesCreate=__webpack_require__("./node_modules/core-js/internals/array-species-create.js"),createProperty=__webpack_require__("./node_modules/core-js/internals/create-property.js"),deletePropertyOrThrow=__webpack_require__("./node_modules/core-js/internals/delete-property-or-throw.js"),HAS_SPECIES_SUPPORT=__webpack_require__("./node_modules/core-js/internals/array-method-has-species-support.js")("splice"),max=Math.max,min=Math.min;$({target:"Array",proto:!0,forced:!HAS_SPECIES_SUPPORT},{splice:function splice(start,deleteCount){var insertCount,actualDeleteCount,A,k,from,to,O=toObject(this),len=lengthOfArrayLike(O),actualStart=toAbsoluteIndex(start,len),argumentsLength=arguments.length;for(0===argumentsLength?insertCount=actualDeleteCount=0:1===argumentsLength?(insertCount=0,actualDeleteCount=len-actualStart):(insertCount=argumentsLength-2,actualDeleteCount=min(max(toIntegerOrInfinity(deleteCount),0),len-actualStart)),doesNotExceedSafeInteger(len+insertCount-actualDeleteCount),A=arraySpeciesCreate(O,actualDeleteCount),k=0;k<actualDeleteCount;k++)(from=actualStart+k)in O&&createProperty(A,k,O[from]);if(A.length=actualDeleteCount,insertCount<actualDeleteCount){for(k=actualStart;k<len-actualDeleteCount;k++)to=k+insertCount,(from=k+actualDeleteCount)in O?O[to]=O[from]:deletePropertyOrThrow(O,to);for(k=len;k>len-actualDeleteCount+insertCount;k--)deletePropertyOrThrow(O,k-1)}else if(insertCount>actualDeleteCount)for(k=len-actualDeleteCount;k>actualStart;k--)to=k+insertCount-1,(from=k+actualDeleteCount-1)in O?O[to]=O[from]:deletePropertyOrThrow(O,to);for(k=0;k<insertCount;k++)O[k+actualStart]=arguments[k+2];return setArrayLength(O,len-actualDeleteCount+insertCount),A}})},"./node_modules/core-js/modules/es.date.to-iso-string.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),toISOString=__webpack_require__("./node_modules/core-js/internals/date-to-iso-string.js");$({target:"Date",proto:!0,forced:Date.prototype.toISOString!==toISOString},{toISOString:toISOString})},"./node_modules/core-js/modules/es.parse-int.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),$parseInt=__webpack_require__("./node_modules/core-js/internals/number-parse-int.js");$({global:!0,forced:parseInt!=$parseInt},{parseInt:$parseInt})},"./node_modules/core-js/modules/es.string.trim-end.js":function(module,exports,__webpack_require__){__webpack_require__("./node_modules/core-js/modules/es.string.trim-right.js");var $=__webpack_require__("./node_modules/core-js/internals/export.js"),trimEnd=__webpack_require__("./node_modules/core-js/internals/string-trim-end.js");$({target:"String",proto:!0,name:"trimEnd",forced:"".trimEnd!==trimEnd},{trimEnd:trimEnd})},"./node_modules/core-js/modules/es.string.trim-right.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),trimEnd=__webpack_require__("./node_modules/core-js/internals/string-trim-end.js");$({target:"String",proto:!0,name:"trimEnd",forced:"".trimRight!==trimEnd},{trimRight:trimEnd})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,