(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{"./dist/esm/Colors-1b298092.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function getRGBA(roleIndex){switch(roleIndex%10){case 0:return 0===roleIndex?"rgba(255, 193, 7, 0.4)":"rgba(134, 134, 134, 0.3)";case 1:return"rgba(156, 39, 176, .4)";case 2:return"rgba(33, 150, 243, .4)";case 3:return"rgba(220, 231, 117, 0.3)";case 4:return"rgba(121, 134, 203, 0.3)";case 5:return"rgba(77, 182, 172, 0.3)";case 6:return"rgba(255, 202, 165, 0.3)";case 7:return"rgba(2, 247, 190, 0.3)";case 8:return"rgba(255, 138, 101, 0.3)";case 9:return"rgba(82, 255, 79, 0.3)";default:return"rgba(229, 115, 155, 0.3)"}}__webpack_require__.d(__webpack_exports__,"a",(function(){return getRGBA}))},"./dist/esm/verdocs-field-checkbox.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_field_checkbox",(function(){return VerdocsFieldCheckbox}));__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var _index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./dist/esm/index-f78d163d.js"),_Colors_1b298092_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./dist/esm/Colors-1b298092.js"),_utils_4053ca0e_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./dist/esm/utils-4053ca0e.js");__webpack_require__("./dist/esm/Token-54690789.js"),__webpack_require__("./dist/esm/Files-70a192df.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}var VerdocsFieldCheckbox=function(){function VerdocsFieldCheckbox(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsFieldCheckbox),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.j)(this,hostRef),this.field=null,this.option=0,this.disabled=!1,this.done=!1,this.roleindex=0}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsFieldCheckbox,[{key:"render",value:function render(){var _a,_b,_c,_d,settings=Object(_utils_4053ca0e_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.field),option=null!==(_b=null===(_a=settings.options)||void 0===_a?void 0:_a[this.option])&&void 0!==_b?_b:{checked:!1},disabled=null!==(_d=null!==(_c=this.disabled)&&void 0!==_c?_c:settings.disabled)&&void 0!==_d&&_d,backgroundColor=this.field.rgba||Object(_Colors_1b298092_js__WEBPACK_IMPORTED_MODULE_8__.a)(this.roleindex);return this.done?Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.b,{class:{done:this.done}},option.checked?"✓":"☐"):Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.b,{class:{required:settings.required,disabled:disabled},style:{backgroundColor:backgroundColor}},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("label",null,Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("input",{type:"checkbox",tabIndex:settings.order,checked:option.checked,disabled:disabled,required:settings.required,value:option.id}),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("span",null)))}}]),VerdocsFieldCheckbox}();VerdocsFieldCheckbox.style='@charset "UTF-8";verdocs-field-checkbox{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;font-size:14px;position:relative;background-color:transparent;-webkit-transform-origin:bottom left;transform-origin:bottom left}verdocs-field-checkbox.disabled{opacity:0.5}verdocs-field-checkbox label>input[type=checkbox]{display:none}verdocs-field-checkbox label>input[type=checkbox]+*::before{content:"";position:absolute;display:block;top:1px;left:1px;width:10px;height:10px;border-radius:2px;border:1px solid rgba(0, 0, 0, 0.7)}verdocs-field-checkbox label>input[type=checkbox]:checked+*{color:#55bc81}verdocs-field-checkbox label>input[type=checkbox]:checked+*::before{content:"✓";color:white;text-align:center;background:#55bc81;border-color:#55bc81}verdocs-field-checkbox.required label>input[type=checkbox]+*::before{border:1px solid #cc0000}verdocs-field-checkbox.hide{display:none}verdocs-field-checkbox.focused{-webkit-animation:verdocs-field-pulse 0.75s 2;animation:verdocs-field-pulse 0.75s 2}'},"./node_modules/core-js/modules/es.string.match-all.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),call=__webpack_require__("./node_modules/core-js/internals/function-call.js"),uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this-clause.js"),createIteratorConstructor=__webpack_require__("./node_modules/core-js/internals/iterator-create-constructor.js"),createIterResultObject=__webpack_require__("./node_modules/core-js/internals/create-iter-result-object.js"),requireObjectCoercible=__webpack_require__("./node_modules/core-js/internals/require-object-coercible.js"),toLength=__webpack_require__("./node_modules/core-js/internals/to-length.js"),toString=__webpack_require__("./node_modules/core-js/internals/to-string.js"),anObject=__webpack_require__("./node_modules/core-js/internals/an-object.js"),isNullOrUndefined=__webpack_require__("./node_modules/core-js/internals/is-null-or-undefined.js"),classof=__webpack_require__("./node_modules/core-js/internals/classof-raw.js"),isRegExp=__webpack_require__("./node_modules/core-js/internals/is-regexp.js"),getRegExpFlags=__webpack_require__("./node_modules/core-js/internals/regexp-get-flags.js"),getMethod=__webpack_require__("./node_modules/core-js/internals/get-method.js"),defineBuiltIn=__webpack_require__("./node_modules/core-js/internals/define-built-in.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),wellKnownSymbol=__webpack_require__("./node_modules/core-js/internals/well-known-symbol.js"),speciesConstructor=__webpack_require__("./node_modules/core-js/internals/species-constructor.js"),advanceStringIndex=__webpack_require__("./node_modules/core-js/internals/advance-string-index.js"),regExpExec=__webpack_require__("./node_modules/core-js/internals/regexp-exec-abstract.js"),InternalStateModule=__webpack_require__("./node_modules/core-js/internals/internal-state.js"),IS_PURE=__webpack_require__("./node_modules/core-js/internals/is-pure.js"),MATCH_ALL=wellKnownSymbol("matchAll"),setInternalState=InternalStateModule.set,getInternalState=InternalStateModule.getterFor("RegExp String Iterator"),RegExpPrototype=RegExp.prototype,$TypeError=TypeError,stringIndexOf=uncurryThis("".indexOf),nativeMatchAll=uncurryThis("".matchAll),WORKS_WITH_NON_GLOBAL_REGEX=!!nativeMatchAll&&!fails((function(){nativeMatchAll("a",/./)})),$RegExpStringIterator=createIteratorConstructor((function RegExpStringIterator(regexp,string,$global,fullUnicode){setInternalState(this,{type:"RegExp String Iterator",regexp:regexp,string:string,global:$global,unicode:fullUnicode,done:!1})}),"RegExp String",(function next(){var state=getInternalState(this);if(state.done)return createIterResultObject(void 0,!0);var R=state.regexp,S=state.string,match=regExpExec(R,S);return null===match?(state.done=!0,createIterResultObject(void 0,!0)):state.global?(""===toString(match[0])&&(R.lastIndex=advanceStringIndex(S,toLength(R.lastIndex),state.unicode)),createIterResultObject(match,!1)):(state.done=!0,createIterResultObject(match,!1))})),$matchAll=function(string){var matcher,$global,fullUnicode,R=anObject(this),S=toString(string),C=speciesConstructor(R,RegExp),flags=toString(getRegExpFlags(R));return matcher=new C(C===RegExp?R.source:R,flags),$global=!!~stringIndexOf(flags,"g"),fullUnicode=!!~stringIndexOf(flags,"u"),matcher.lastIndex=toLength(R.lastIndex),new $RegExpStringIterator(matcher,S,$global,fullUnicode)};$({target:"String",proto:!0,forced:WORKS_WITH_NON_GLOBAL_REGEX},{matchAll:function matchAll(regexp){var flags,S,matcher,rx,O=requireObjectCoercible(this);if(isNullOrUndefined(regexp)){if(WORKS_WITH_NON_GLOBAL_REGEX)return nativeMatchAll(O,regexp)}else{if(isRegExp(regexp)&&(flags=toString(requireObjectCoercible(getRegExpFlags(regexp))),!~stringIndexOf(flags,"g")))throw $TypeError("`.matchAll` does not allow non-global regexes");if(WORKS_WITH_NON_GLOBAL_REGEX)return nativeMatchAll(O,regexp);if(void 0===(matcher=getMethod(regexp,MATCH_ALL))&&IS_PURE&&"RegExp"==classof(regexp)&&(matcher=$matchAll),matcher)return call(matcher,regexp,O)}return S=toString(O),rx=new RegExp(regexp,"g"),IS_PURE?call($matchAll,rx,S):rx[MATCH_ALL](S)}}),IS_PURE||MATCH_ALL in RegExpPrototype||defineBuiltIn(RegExpPrototype,MATCH_ALL,$matchAll)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,