(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{"./dist/esm/verdocs-templates-list.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_templates_list",(function(){return VerdocsTemplatesList}));__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var _index_b18c0348_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./dist/esm/index-b18c0348.js"),_VerdocsEndpoint_5b92f115_js__WEBPACK_IMPORTED_MODULE_9__=(__webpack_require__("./dist/esm/Types-5f31149e.js"),__webpack_require__("./dist/esm/VerdocsEndpoint-5b92f115.js"));function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}var VerdocsTemplatesList=function(){function VerdocsTemplatesList(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsTemplatesList),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_7__.j)(this,hostRef),this.close=Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_7__.e)(this,"close",7),this.sdkError=Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_7__.e)(this,"sdkError",7),this.store=null,this.endpoint=_VerdocsEndpoint_5b92f115_js__WEBPACK_IMPORTED_MODULE_9__.b.getDefault(),this.templateId="",this.dirty=!1,this.personal=!1,this.public=!1}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsTemplatesList,[{key:"render",value:function render(){return Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_7__.h)(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_7__.b,null)}}]),VerdocsTemplatesList}();VerdocsTemplatesList.style='verdocs-templates-list{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif}'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,