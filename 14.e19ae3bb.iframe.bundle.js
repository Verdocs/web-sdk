/*! For license information please see 14.e19ae3bb.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"./dist/esm/verdocs-field-date.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_field_date",(function(){return VerdocsFieldDate}));__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.string.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.string.replace.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.parse-int.js"),__webpack_require__("./node_modules/core-js/modules/es.string.starts-with.js"),__webpack_require__("./node_modules/core-js/modules/es.array.find-index.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.string.pad-start.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.weak-map.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.values.js"),__webpack_require__("./node_modules/core-js/modules/web.timers.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-iso-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.reflect.construct.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.reflect.get.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.async-iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js");var _index_542510c1_js__WEBPACK_IMPORTED_MODULE_54__=__webpack_require__("./dist/esm/index-542510c1.js");function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function define(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return generator._invoke=function(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}(innerFn,self,context),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;this._invoke=function(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}}function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(void 0===method){if(context.delegate=null,"throw"===context.method){if(delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method))return ContinueSentinel;context.method="throw",context.arg=new TypeError("The iterator does not provide a 'throw' method")}return ContinueSentinel}var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,define(Gp,"constructor",GeneratorFunctionPrototype),define(GeneratorFunctionPrototype,"constructor",GeneratorFunction),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(object){var keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function _get(target,property,receiver){var base=_superPropBase(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(arguments.length<3?target:receiver):desc.value}},_get.apply(this,arguments)}function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"==typeof call||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self)}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)},_getPrototypeOf(o)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function hasProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop)}function lastItemOf(arr){return arr[arr.length-1]}function pushUnique(arr){for(var _len=arguments.length,items=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)items[_key-1]=arguments[_key];return items.forEach((function(item){arr.includes(item)||arr.push(item)})),arr}function stringToArray(str,separator){return str?str.split(separator):[]}function isInRange(testVal,min,max){return(void 0===min||testVal>=min)&&(void 0===max||testVal<=max)}function limitToRange(val,min,max){return val<min?min:val>max?max:val}function createTagRepeat(tagName,repeat){var attributes=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},index=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,html=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",openTagSrc=Object.keys(attributes).reduce((function(src,attr){var val=attributes[attr];return"function"==typeof val&&(val=val(index)),src+" "+attr+'="'+val+'"'}),tagName);html+="<"+openTagSrc+"></"+tagName+">";var next=index+1;return next<repeat?createTagRepeat(tagName,repeat,attributes,next,html):html}function optimizeTemplateHTML(html){return html.replace(/>\s+/g,">").replace(/\s+</,"<")}function stripTime(timeValue){return new Date(timeValue).setHours(0,0,0,0)}function today(){return(new Date).setHours(0,0,0,0)}function dateValue(){switch(arguments.length){case 0:return today();case 1:return stripTime(arguments.length<=0?void 0:arguments[0])}var newDate=new Date(0);return newDate.setFullYear.apply(newDate,arguments),newDate.setHours(0,0,0,0)}function addDays(date,amount){var newDate=new Date(date);return newDate.setDate(newDate.getDate()+amount)}function addMonths(date,amount){var newDate=new Date(date),monthsToSet=newDate.getMonth()+amount,expectedMonth=monthsToSet%12;expectedMonth<0&&(expectedMonth+=12);var time=newDate.setMonth(monthsToSet);return newDate.getMonth()!==expectedMonth?newDate.setDate(0):time}function addYears(date,amount){var newDate=new Date(date),expectedMonth=newDate.getMonth(),time=newDate.setFullYear(newDate.getFullYear()+amount);return 1===expectedMonth&&2===newDate.getMonth()?newDate.setDate(0):time}function dayDiff(day,from){return(day-from+7)%7}function dayOfTheWeekOf(baseDate,dayOfWeek){var weekStart=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,baseDay=new Date(baseDate).getDay();return addDays(baseDate,dayDiff(dayOfWeek,weekStart)-dayDiff(baseDay,weekStart))}function startOfYearPeriod(date,years){var year=new Date(date).getFullYear();return Math.floor(year/years)*years}function regularizeDate(date,timeSpan,useLastDate){if(1!==timeSpan&&2!==timeSpan)return date;var newDate=new Date(date);return 1===timeSpan?useLastDate?newDate.setMonth(newDate.getMonth()+1,0):newDate.setDate(1):useLastDate?newDate.setFullYear(newDate.getFullYear()+1,0,0):newDate.setMonth(0,1),newDate.setHours(0,0,0,0)}var reFormatTokens=/dd?|DD?|mm?|MM?|yy?(?:yy)?/,reNonDateParts=/[\s!-/:-@[-`{-~年月日]+/,knownFormats={},parseFns={y:function y(date,year){return new Date(date).setFullYear(parseInt(year,10))},m:function m(date,month,locale){var newDate=new Date(date),monthIndex=parseInt(month,10)-1;if(isNaN(monthIndex)){if(!month)return NaN;var monthName=month.toLowerCase(),compareNames=function compareNames(name){return name.toLowerCase().startsWith(monthName)};if((monthIndex=locale.monthsShort.findIndex(compareNames))<0&&(monthIndex=locale.months.findIndex(compareNames)),monthIndex<0)return NaN}return newDate.setMonth(monthIndex),newDate.getMonth()!==normalizeMonth(monthIndex)?newDate.setDate(0):newDate.getTime()},d:function d(date,day){return new Date(date).setDate(parseInt(day,10))}},formatFns={d:function d(date){return date.getDate()},dd:function dd(date){return padZero(date.getDate(),2)},D:function D(date,locale){return locale.daysShort[date.getDay()]},DD:function DD(date,locale){return locale.days[date.getDay()]},m:function m(date){return date.getMonth()+1},mm:function mm(date){return padZero(date.getMonth()+1,2)},M:function M(date,locale){return locale.monthsShort[date.getMonth()]},MM:function MM(date,locale){return locale.months[date.getMonth()]},y:function y(date){return date.getFullYear()},yy:function yy(date){return padZero(date.getFullYear(),2).slice(-2)},yyyy:function yyyy(date){return padZero(date.getFullYear(),4)}};function normalizeMonth(monthIndex){return monthIndex>-1?monthIndex%12:normalizeMonth(monthIndex+12)}function padZero(num,length){return num.toString().padStart(length,"0")}function parseFormatString(format){if("string"!=typeof format)throw new Error("Invalid date format.");if(format in knownFormats)return knownFormats[format];var separators=format.split(reFormatTokens),parts=format.match(new RegExp(reFormatTokens,"g"));if(0===separators.length||!parts)throw new Error("Invalid date format.");var partFormatters=parts.map((function(token){return formatFns[token]})),partParserKeys=Object.keys(parseFns).reduce((function(keys,key){return parts.find((function(part){return"D"!==part[0]&&part[0].toLowerCase()===key}))&&keys.push(key),keys}),[]);return knownFormats[format]={parser:function parser(dateStr,locale){var dateParts=dateStr.split(reNonDateParts).reduce((function(dtParts,part,index){if(part.length>0&&parts[index]){var token=parts[index][0];"M"===token?dtParts.m=part:"D"!==token&&(dtParts[token]=part)}return dtParts}),{});return partParserKeys.reduce((function(origDate,key){var newDate=parseFns[key](origDate,dateParts[key],locale);return isNaN(newDate)?origDate:newDate}),today())},formatter:function formatter(date,locale){return partFormatters.reduce((function(str,fn,index){return str+""+separators[index]+fn(date,locale)}),"")+lastItemOf(separators)}}}function _parseDate(dateStr,format,locale){if(dateStr instanceof Date||"number"==typeof dateStr){var date=stripTime(dateStr);return isNaN(date)?void 0:date}if(dateStr){if("today"===dateStr)return today();if(format&&format.toValue){var _date=format.toValue(dateStr,format,locale);return isNaN(_date)?void 0:stripTime(_date)}return parseFormatString(format).parser(dateStr,locale)}}function _formatDate(date,format,locale){if(isNaN(date)||!date&&0!==date)return"";var dateObj="number"==typeof date?new Date(date):date;return format.toDisplay?format.toDisplay(dateObj,format,locale):parseFormatString(format).formatter(dateObj,locale)}var range=document.createRange();function parseHTML(html){return range.createContextualFragment(html)}function getParent(el){return el.parentElement||(el.parentNode instanceof ShadowRoot?el.parentNode.host:void 0)}function isActiveElement(el){return el.getRootNode().activeElement===el}function hideElement(el){"none"!==el.style.display&&(el.style.display&&(el.dataset.styleDisplay=el.style.display),el.style.display="none")}function showElement(el){"none"===el.style.display&&(el.dataset.styleDisplay?(el.style.display=el.dataset.styleDisplay,delete el.dataset.styleDisplay):el.style.display="")}function emptyChildNodes(el){el.firstChild&&(el.removeChild(el.firstChild),emptyChildNodes(el))}var listenerRegistry=new WeakMap,_EventTarget$prototyp=EventTarget.prototype,addEventListener=_EventTarget$prototyp.addEventListener,removeEventListener=_EventTarget$prototyp.removeEventListener;function registerListeners(keyObj,listeners){var registered=listenerRegistry.get(keyObj);registered||(registered=[],listenerRegistry.set(keyObj,registered)),listeners.forEach((function(listener){addEventListener.call.apply(addEventListener,_toConsumableArray(listener)),registered.push(listener)}))}if(!Event.prototype.composedPath){var getComposedPath=function getComposedPath(node){var parent,path=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return path.push(node),node.parentNode?parent=node.parentNode:node.host?parent=node.host:node.defaultView&&(parent=node.defaultView),parent?getComposedPath(parent,path):path};Event.prototype.composedPath=function(){return getComposedPath(this.target)}}function findFromPath(path,criteria,currentTarget){var _path=function _toArray(arr){return _arrayWithHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableRest()}(path),node=_path[0],rest=_path.slice(1);return criteria(node)?node:node!==currentTarget&&"HTML"!==node.tagName&&0!==rest.length?findFromPath(rest,criteria,currentTarget):void 0}function findElementInEventPath(ev,selector){var criteria="function"==typeof selector?selector:function(el){return el instanceof Element&&el.matches(selector)};return findFromPath(ev.composedPath(),criteria,ev.currentTarget)}var locales={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",titleFormat:"MM y"}},defaultOptions={autohide:!1,beforeShowDay:null,beforeShowDecade:null,beforeShowMonth:null,beforeShowYear:null,calendarWeeks:!1,clearBtn:!1,dateDelimiter:",",datesDisabled:[],daysOfWeekDisabled:[],daysOfWeekHighlighted:[],defaultViewDate:void 0,disableTouchKeyboard:!1,format:"mm/dd/yyyy",language:"en",maxDate:null,maxNumberOfDates:1,maxView:3,minDate:null,nextArrow:"»",orientation:"auto",pickLevel:0,prevArrow:"«",showDaysOfWeek:!0,showOnClick:!0,showOnFocus:!0,startView:0,title:"",todayBtn:!1,todayBtnMode:0,todayHighlight:!1,updateOnBlur:!0,weekStart:0},defaultLang=defaultOptions.language,defaultFormat=defaultOptions.format,defaultWeekStart=defaultOptions.weekStart;function sanitizeDOW(dow,day){return dow.length<6&&day>=0&&day<7?pushUnique(dow,day):dow}function calcEndOfWeek(startOfWeek){return(startOfWeek+6)%7}function validateDate(value,format,locale,origValue){var date=_parseDate(value,format,locale);return void 0!==date?date:origValue}function validateViewId(value,origValue){var max=arguments.length>2&&void 0!==arguments[2]?arguments[2]:3,viewId=parseInt(value,10);return viewId>=0&&viewId<=max?viewId:origValue}function processOptions(options,datepicker){var lang,inOpts=Object.assign({},options),config={},locales=datepicker.constructor.locales,rangeSideIndex=datepicker.rangeSideIndex,_ref=datepicker.config||{},format=_ref.format,language=_ref.language,locale=_ref.locale,maxDate=_ref.maxDate,maxView=_ref.maxView,minDate=_ref.minDate,pickLevel=_ref.pickLevel,startView=_ref.startView,weekStart=_ref.weekStart;if(inOpts.language&&(inOpts.language!==language&&(locales[inOpts.language]?lang=inOpts.language:void 0===locales[lang=inOpts.language.split("-")[0]]&&(lang=!1)),delete inOpts.language,lang)){language=config.language=lang;var origLocale=locale||locales[defaultLang];locale=Object.assign({format:defaultFormat,weekStart:defaultWeekStart},locales[defaultLang]),language!==defaultLang&&Object.assign(locale,locales[language]),config.locale=locale,format===origLocale.format&&(format=config.format=locale.format),weekStart===origLocale.weekStart&&(weekStart=config.weekStart=locale.weekStart,config.weekEnd=calcEndOfWeek(locale.weekStart))}if(inOpts.format){var hasToDisplay="function"==typeof inOpts.format.toDisplay,hasToValue="function"==typeof inOpts.format.toValue,validFormatString=reFormatTokens.test(inOpts.format);(hasToDisplay&&hasToValue||validFormatString)&&(format=config.format=inOpts.format),delete inOpts.format}var newPickLevel=pickLevel;void 0!==inOpts.pickLevel&&(newPickLevel=validateViewId(inOpts.pickLevel,2),delete inOpts.pickLevel),newPickLevel!==pickLevel&&(newPickLevel>pickLevel&&(void 0===inOpts.minDate&&(inOpts.minDate=minDate),void 0===inOpts.maxDate&&(inOpts.maxDate=maxDate)),inOpts.datesDisabled||(inOpts.datesDisabled=[]),pickLevel=config.pickLevel=newPickLevel);var minDt=minDate,maxDt=maxDate;if(void 0!==inOpts.minDate){var defaultMinDt=dateValue(0,0,1);(minDt=null===inOpts.minDate?defaultMinDt:validateDate(inOpts.minDate,format,locale,minDt))!==defaultMinDt&&(minDt=regularizeDate(minDt,pickLevel,!1)),delete inOpts.minDate}if(void 0!==inOpts.maxDate&&(void 0!==(maxDt=null===inOpts.maxDate?void 0:validateDate(inOpts.maxDate,format,locale,maxDt))&&(maxDt=regularizeDate(maxDt,pickLevel,!0)),delete inOpts.maxDate),maxDt<minDt?(minDate=config.minDate=maxDt,maxDate=config.maxDate=minDt):(minDate!==minDt&&(minDate=config.minDate=minDt),maxDate!==maxDt&&(maxDate=config.maxDate=maxDt)),inOpts.datesDisabled&&(config.datesDisabled=inOpts.datesDisabled.reduce((function(dates,dt){var date=_parseDate(dt,format,locale);return void 0!==date?pushUnique(dates,regularizeDate(date,pickLevel,rangeSideIndex)):dates}),[]),delete inOpts.datesDisabled),void 0!==inOpts.defaultViewDate){var viewDate=_parseDate(inOpts.defaultViewDate,format,locale);void 0!==viewDate&&(config.defaultViewDate=viewDate),delete inOpts.defaultViewDate}if(void 0!==inOpts.weekStart){var wkStart=Number(inOpts.weekStart)%7;isNaN(wkStart)||(weekStart=config.weekStart=wkStart,config.weekEnd=calcEndOfWeek(wkStart)),delete inOpts.weekStart}if(inOpts.daysOfWeekDisabled&&(config.daysOfWeekDisabled=inOpts.daysOfWeekDisabled.reduce(sanitizeDOW,[]),delete inOpts.daysOfWeekDisabled),inOpts.daysOfWeekHighlighted&&(config.daysOfWeekHighlighted=inOpts.daysOfWeekHighlighted.reduce(sanitizeDOW,[]),delete inOpts.daysOfWeekHighlighted),void 0!==inOpts.maxNumberOfDates){var maxNumberOfDates=parseInt(inOpts.maxNumberOfDates,10);maxNumberOfDates>=0&&(config.maxNumberOfDates=maxNumberOfDates,config.multidate=1!==maxNumberOfDates),delete inOpts.maxNumberOfDates}inOpts.dateDelimiter&&(config.dateDelimiter=String(inOpts.dateDelimiter),delete inOpts.dateDelimiter);var newMaxView=maxView;void 0!==inOpts.maxView&&(newMaxView=validateViewId(inOpts.maxView,maxView),delete inOpts.maxView),(newMaxView=pickLevel>newMaxView?pickLevel:newMaxView)!==maxView&&(maxView=config.maxView=newMaxView);var newStartView=startView;if(void 0!==inOpts.startView&&(newStartView=validateViewId(inOpts.startView,newStartView),delete inOpts.startView),newStartView<pickLevel?newStartView=pickLevel:newStartView>maxView&&(newStartView=maxView),newStartView!==startView&&(config.startView=newStartView),inOpts.prevArrow){var prevArrow=parseHTML(inOpts.prevArrow);prevArrow.childNodes.length>0&&(config.prevArrow=prevArrow.childNodes),delete inOpts.prevArrow}if(inOpts.nextArrow){var nextArrow=parseHTML(inOpts.nextArrow);nextArrow.childNodes.length>0&&(config.nextArrow=nextArrow.childNodes),delete inOpts.nextArrow}if(void 0!==inOpts.disableTouchKeyboard&&(config.disableTouchKeyboard="ontouchstart"in document&&!!inOpts.disableTouchKeyboard,delete inOpts.disableTouchKeyboard),inOpts.orientation){var orientation=inOpts.orientation.toLowerCase().split(/\s+/g);config.orientation={x:orientation.find((function(x){return"left"===x||"right"===x}))||"auto",y:orientation.find((function(y){return"top"===y||"bottom"===y}))||"auto"},delete inOpts.orientation}if(void 0!==inOpts.todayBtnMode){switch(inOpts.todayBtnMode){case 0:case 1:config.todayBtnMode=inOpts.todayBtnMode}delete inOpts.todayBtnMode}return Object.keys(inOpts).forEach((function(key){void 0!==inOpts[key]&&hasProperty(defaultOptions,key)&&(config[key]=inOpts[key])})),config}var pickerTemplate=optimizeTemplateHTML('<div class="datepicker">\n  <div class="datepicker-picker">\n    <div class="datepicker-header">\n      <div class="datepicker-title"></div>\n      <div class="datepicker-controls">\n        <button type="button" class="%buttonClass% prev-btn"></button>\n        <button type="button" class="%buttonClass% view-switch"></button>\n        <button type="button" class="%buttonClass% next-btn"></button>\n      </div>\n    </div>\n    <div class="datepicker-main"></div>\n    <div class="datepicker-footer">\n      <div class="datepicker-controls">\n        <button type="button" class="%buttonClass% today-btn"></button>\n        <button type="button" class="%buttonClass% clear-btn"></button>\n      </div>\n    </div>\n  </div>\n</div>'),daysTemplate=optimizeTemplateHTML('<div class="days">\n  <div class="days-of-week">'+createTagRepeat("span",7,{class:"dow"})+'</div>\n  <div class="datepicker-grid">'+createTagRepeat("span",42)+"</div>\n</div>"),calendarWeeksTemplate=optimizeTemplateHTML('<div class="calendar-weeks">\n  <div class="days-of-week"><span class="dow"></span></div>\n  <div class="weeks">'+createTagRepeat("span",6,{class:"week"})+"</div>\n</div>"),View=function(){function View(picker,config){_classCallCheck(this,View),Object.assign(this,config,{picker:picker,element:parseHTML('<div class="datepicker-view"></div>').firstChild,selected:[]}),this.init(this.picker.datepicker.config)}return _createClass(View,[{key:"init",value:function init(options){void 0!==options.pickLevel&&(this.isMinView=this.id===options.pickLevel),this.setOptions(options),this.updateFocus(),this.updateSelection()}},{key:"performBeforeHook",value:function performBeforeHook(el,current,timeValue){var result=this.beforeShow(new Date(timeValue));switch(typeof result){case"boolean":result={enabled:result};break;case"string":result={classes:result}}if(result){if(!1===result.enabled&&(el.classList.add("disabled"),pushUnique(this.disabled,current)),result.classes){var _el$classList,extraClasses=result.classes.split(/\s+/);(_el$classList=el.classList).add.apply(_el$classList,_toConsumableArray(extraClasses)),extraClasses.includes("disabled")&&pushUnique(this.disabled,current)}result.content&&function replaceChildNodes(el,newChildNodes){emptyChildNodes(el),newChildNodes instanceof DocumentFragment?el.appendChild(newChildNodes):"string"==typeof newChildNodes?el.appendChild(parseHTML(newChildNodes)):"function"==typeof newChildNodes.forEach&&newChildNodes.forEach((function(node){el.appendChild(node)}))}(el,result.content)}}}]),View}(),DaysView=function(_View){_inherits(DaysView,_View);var _super=_createSuper(DaysView);function DaysView(picker){return _classCallCheck(this,DaysView),_super.call(this,picker,{id:0,name:"days",cellClass:"day"})}return _createClass(DaysView,[{key:"init",value:function init(options){var onConstruction=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(onConstruction){var inner=parseHTML(daysTemplate).firstChild;this.dow=inner.firstChild,this.grid=inner.lastChild,this.element.appendChild(inner)}_get(_getPrototypeOf(DaysView.prototype),"init",this).call(this,options)}},{key:"setOptions",value:function setOptions(options){var updateDOW,_this=this;if(hasProperty(options,"minDate")&&(this.minDate=options.minDate),hasProperty(options,"maxDate")&&(this.maxDate=options.maxDate),options.datesDisabled&&(this.datesDisabled=options.datesDisabled),options.daysOfWeekDisabled&&(this.daysOfWeekDisabled=options.daysOfWeekDisabled,updateDOW=!0),options.daysOfWeekHighlighted&&(this.daysOfWeekHighlighted=options.daysOfWeekHighlighted),void 0!==options.todayHighlight&&(this.todayHighlight=options.todayHighlight),void 0!==options.weekStart&&(this.weekStart=options.weekStart,this.weekEnd=options.weekEnd,updateDOW=!0),options.locale){var locale=this.locale=options.locale;this.dayNames=locale.daysMin,this.switchLabelFormat=locale.titleFormat,updateDOW=!0}if(void 0!==options.beforeShowDay&&(this.beforeShow="function"==typeof options.beforeShowDay?options.beforeShowDay:void 0),void 0!==options.calendarWeeks)if(options.calendarWeeks&&!this.calendarWeeks){var weeksElem=parseHTML(calendarWeeksTemplate).firstChild;this.calendarWeeks={element:weeksElem,dow:weeksElem.firstChild,weeks:weeksElem.lastChild},this.element.insertBefore(weeksElem,this.element.firstChild)}else this.calendarWeeks&&!options.calendarWeeks&&(this.element.removeChild(this.calendarWeeks.element),this.calendarWeeks=null);void 0!==options.showDaysOfWeek&&(options.showDaysOfWeek?(showElement(this.dow),this.calendarWeeks&&showElement(this.calendarWeeks.dow)):(hideElement(this.dow),this.calendarWeeks&&hideElement(this.calendarWeeks.dow))),updateDOW&&Array.from(this.dow.children).forEach((function(el,index){var dow=(_this.weekStart+index)%7;el.textContent=_this.dayNames[dow],el.className=_this.daysOfWeekDisabled.includes(dow)?"dow disabled":"dow"}))}},{key:"updateFocus",value:function updateFocus(){var viewDate=new Date(this.picker.viewDate),viewYear=viewDate.getFullYear(),viewMonth=viewDate.getMonth(),firstOfMonth=dateValue(viewYear,viewMonth,1),start=dayOfTheWeekOf(firstOfMonth,this.weekStart,this.weekStart);this.first=firstOfMonth,this.last=dateValue(viewYear,viewMonth+1,0),this.start=start,this.focused=this.picker.viewDate}},{key:"updateSelection",value:function updateSelection(){var _this$picker$datepick=this.picker.datepicker,dates=_this$picker$datepick.dates,rangepicker=_this$picker$datepick.rangepicker;this.selected=dates,rangepicker&&(this.range=rangepicker.dates)}},{key:"render",value:function render(){var _this2=this;this.today=this.todayHighlight?today():void 0,this.disabled=_toConsumableArray(this.datesDisabled);var switchLabel=_formatDate(this.focused,this.switchLabelFormat,this.locale);if(this.picker.setViewSwitchLabel(switchLabel),this.picker.setPrevBtnDisabled(this.first<=this.minDate),this.picker.setNextBtnDisabled(this.last>=this.maxDate),this.calendarWeeks){var startOfWeek=dayOfTheWeekOf(this.first,1,1);Array.from(this.calendarWeeks.weeks.children).forEach((function(el,index){el.textContent=function getWeek(date){var thuOfTheWeek=dayOfTheWeekOf(date,4,1),firstThu=dayOfTheWeekOf(new Date(thuOfTheWeek).setMonth(0,4),4,1);return Math.round((thuOfTheWeek-firstThu)/6048e5)+1}(function addWeeks(date,amount){return addDays(date,7*amount)}(startOfWeek,index))}))}Array.from(this.grid.children).forEach((function(el,index){var classList=el.classList,current=addDays(_this2.start,index),date=new Date(current),day=date.getDay();if(el.className="datepicker-cell "+_this2.cellClass,el.dataset.date=current,el.textContent=date.getDate(),current<_this2.first?classList.add("prev"):current>_this2.last&&classList.add("next"),_this2.today===current&&classList.add("today"),(current<_this2.minDate||current>_this2.maxDate||_this2.disabled.includes(current))&&classList.add("disabled"),_this2.daysOfWeekDisabled.includes(day)&&(classList.add("disabled"),pushUnique(_this2.disabled,current)),_this2.daysOfWeekHighlighted.includes(day)&&classList.add("highlighted"),_this2.range){var _this2$range=_slicedToArray(_this2.range,2),rangeStart=_this2$range[0],rangeEnd=_this2$range[1];current>rangeStart&&current<rangeEnd&&classList.add("range"),current===rangeStart&&classList.add("range-start"),current===rangeEnd&&classList.add("range-end")}_this2.selected.includes(current)&&classList.add("selected"),current===_this2.focused&&classList.add("focused"),_this2.beforeShow&&_this2.performBeforeHook(el,current,current)}))}},{key:"refresh",value:function refresh(){var _this3=this,_ref3=_slicedToArray(this.range||[],2),rangeStart=_ref3[0],rangeEnd=_ref3[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach((function(el){el.classList.remove("range","range-start","range-end","selected","focused")})),Array.from(this.grid.children).forEach((function(el){var current=Number(el.dataset.date),classList=el.classList;current>rangeStart&&current<rangeEnd&&classList.add("range"),current===rangeStart&&classList.add("range-start"),current===rangeEnd&&classList.add("range-end"),_this3.selected.includes(current)&&classList.add("selected"),current===_this3.focused&&classList.add("focused")}))}},{key:"refreshFocus",value:function refreshFocus(){var index=Math.round((this.focused-this.start)/864e5);this.grid.querySelectorAll(".focused").forEach((function(el){el.classList.remove("focused")})),this.grid.children[index].classList.add("focused")}}]),DaysView}(View);function computeMonthRange(range,thisYear){if(range&&range[0]&&range[1]){var _range=_slicedToArray(range,2),_range$=_slicedToArray(_range[0],2),startY=_range$[0],startM=_range$[1],_range$2=_slicedToArray(_range[1],2),endY=_range$2[0],endM=_range$2[1];if(!(startY>thisYear||endY<thisYear))return[startY===thisYear?startM:-1,endY===thisYear?endM:12]}}var MonthsView=function(_View2){_inherits(MonthsView,_View2);var _super2=_createSuper(MonthsView);function MonthsView(picker){return _classCallCheck(this,MonthsView),_super2.call(this,picker,{id:1,name:"months",cellClass:"month"})}return _createClass(MonthsView,[{key:"init",value:function init(options){var onConstruction=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];onConstruction&&(this.grid=this.element,this.element.classList.add("months","datepicker-grid"),this.grid.appendChild(parseHTML(createTagRepeat("span",12,{"data-month":function dataMonth(ix){return ix}})))),_get(_getPrototypeOf(MonthsView.prototype),"init",this).call(this,options)}},{key:"setOptions",value:function setOptions(options){if(options.locale&&(this.monthNames=options.locale.monthsShort),hasProperty(options,"minDate"))if(void 0===options.minDate)this.minYear=this.minMonth=this.minDate=void 0;else{var minDateObj=new Date(options.minDate);this.minYear=minDateObj.getFullYear(),this.minMonth=minDateObj.getMonth(),this.minDate=minDateObj.setDate(1)}if(hasProperty(options,"maxDate"))if(void 0===options.maxDate)this.maxYear=this.maxMonth=this.maxDate=void 0;else{var maxDateObj=new Date(options.maxDate);this.maxYear=maxDateObj.getFullYear(),this.maxMonth=maxDateObj.getMonth(),this.maxDate=dateValue(this.maxYear,this.maxMonth+1,0)}this.isMinView?options.datesDisabled&&(this.datesDisabled=options.datesDisabled):this.datesDisabled=[],void 0!==options.beforeShowMonth&&(this.beforeShow="function"==typeof options.beforeShowMonth?options.beforeShowMonth:void 0)}},{key:"updateFocus",value:function updateFocus(){var viewDate=new Date(this.picker.viewDate);this.year=viewDate.getFullYear(),this.focused=viewDate.getMonth()}},{key:"updateSelection",value:function updateSelection(){var _this$picker$datepick2=this.picker.datepicker,dates=_this$picker$datepick2.dates,rangepicker=_this$picker$datepick2.rangepicker;this.selected=dates.reduce((function(selected,timeValue){var date=new Date(timeValue),year=date.getFullYear(),month=date.getMonth();return void 0===selected[year]?selected[year]=[month]:pushUnique(selected[year],month),selected}),{}),rangepicker&&rangepicker.dates&&(this.range=rangepicker.dates.map((function(timeValue){var date=new Date(timeValue);return isNaN(date)?void 0:[date.getFullYear(),date.getMonth()]})))}},{key:"render",value:function render(){var _this4=this;this.disabled=this.datesDisabled.reduce((function(arr,disabled){var dt=new Date(disabled);return _this4.year===dt.getFullYear()&&arr.push(dt.getMonth()),arr}),[]),this.picker.setViewSwitchLabel(this.year),this.picker.setPrevBtnDisabled(this.year<=this.minYear),this.picker.setNextBtnDisabled(this.year>=this.maxYear);var selected=this.selected[this.year]||[],yrOutOfRange=this.year<this.minYear||this.year>this.maxYear,isMinYear=this.year===this.minYear,isMaxYear=this.year===this.maxYear,range=computeMonthRange(this.range,this.year);Array.from(this.grid.children).forEach((function(el,index){var classList=el.classList,date=dateValue(_this4.year,index,1);if(el.className="datepicker-cell "+_this4.cellClass,_this4.isMinView&&(el.dataset.date=date),el.textContent=_this4.monthNames[index],(yrOutOfRange||isMinYear&&index<_this4.minMonth||isMaxYear&&index>_this4.maxMonth||_this4.disabled.includes(index))&&classList.add("disabled"),range){var _range2=_slicedToArray(range,2),rangeStart=_range2[0],rangeEnd=_range2[1];index>rangeStart&&index<rangeEnd&&classList.add("range"),index===rangeStart&&classList.add("range-start"),index===rangeEnd&&classList.add("range-end")}selected.includes(index)&&classList.add("selected"),index===_this4.focused&&classList.add("focused"),_this4.beforeShow&&_this4.performBeforeHook(el,index,date)}))}},{key:"refresh",value:function refresh(){var _this5=this,selected=this.selected[this.year]||[],_ref5=_slicedToArray(computeMonthRange(this.range,this.year)||[],2),rangeStart=_ref5[0],rangeEnd=_ref5[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach((function(el){el.classList.remove("range","range-start","range-end","selected","focused")})),Array.from(this.grid.children).forEach((function(el,index){var classList=el.classList;index>rangeStart&&index<rangeEnd&&classList.add("range"),index===rangeStart&&classList.add("range-start"),index===rangeEnd&&classList.add("range-end"),selected.includes(index)&&classList.add("selected"),index===_this5.focused&&classList.add("focused")}))}},{key:"refreshFocus",value:function refreshFocus(){this.grid.querySelectorAll(".focused").forEach((function(el){el.classList.remove("focused")})),this.grid.children[this.focused].classList.add("focused")}}]),MonthsView}(View);function toTitleCase(word){return _toConsumableArray(word).reduce((function(str,ch,ix){return str+(ix?ch:ch.toUpperCase())}),"")}var YearsView=function(_View3){_inherits(YearsView,_View3);var _super3=_createSuper(YearsView);function YearsView(picker,config){return _classCallCheck(this,YearsView),_super3.call(this,picker,config)}return _createClass(YearsView,[{key:"init",value:function init(options){var onConstruction=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];onConstruction&&(this.navStep=10*this.step,this.beforeShowOption="beforeShow"+toTitleCase(this.cellClass),this.grid=this.element,this.element.classList.add(this.name,"datepicker-grid"),this.grid.appendChild(parseHTML(createTagRepeat("span",12)))),_get(_getPrototypeOf(YearsView.prototype),"init",this).call(this,options)}},{key:"setOptions",value:function setOptions(options){if(hasProperty(options,"minDate")&&(void 0===options.minDate?this.minYear=this.minDate=void 0:(this.minYear=startOfYearPeriod(options.minDate,this.step),this.minDate=dateValue(this.minYear,0,1))),hasProperty(options,"maxDate")&&(void 0===options.maxDate?this.maxYear=this.maxDate=void 0:(this.maxYear=startOfYearPeriod(options.maxDate,this.step),this.maxDate=dateValue(this.maxYear,11,31))),this.isMinView?options.datesDisabled&&(this.datesDisabled=options.datesDisabled):this.datesDisabled=[],void 0!==options[this.beforeShowOption]){var beforeShow=options[this.beforeShowOption];this.beforeShow="function"==typeof beforeShow?beforeShow:void 0}}},{key:"updateFocus",value:function updateFocus(){var viewDate=new Date(this.picker.viewDate),first=startOfYearPeriod(viewDate,this.navStep),last=first+9*this.step;this.first=first,this.last=last,this.start=first-this.step,this.focused=startOfYearPeriod(viewDate,this.step)}},{key:"updateSelection",value:function updateSelection(){var _this6=this,_this$picker$datepick3=this.picker.datepicker,dates=_this$picker$datepick3.dates,rangepicker=_this$picker$datepick3.rangepicker;this.selected=dates.reduce((function(years,timeValue){return pushUnique(years,startOfYearPeriod(timeValue,_this6.step))}),[]),rangepicker&&rangepicker.dates&&(this.range=rangepicker.dates.map((function(timeValue){if(void 0!==timeValue)return startOfYearPeriod(timeValue,_this6.step)})))}},{key:"render",value:function render(){var _this7=this;this.disabled=this.datesDisabled.map((function(disabled){return new Date(disabled).getFullYear()})),this.picker.setViewSwitchLabel(this.first+"-"+this.last),this.picker.setPrevBtnDisabled(this.first<=this.minYear),this.picker.setNextBtnDisabled(this.last>=this.maxYear),Array.from(this.grid.children).forEach((function(el,index){var classList=el.classList,current=_this7.start+index*_this7.step,date=dateValue(current,0,1);if(el.className="datepicker-cell "+_this7.cellClass,_this7.isMinView&&(el.dataset.date=date),el.textContent=el.dataset.year=current,0===index?classList.add("prev"):11===index&&classList.add("next"),(current<_this7.minYear||current>_this7.maxYear||_this7.disabled.includes(current))&&classList.add("disabled"),_this7.range){var _this7$range=_slicedToArray(_this7.range,2),rangeStart=_this7$range[0],rangeEnd=_this7$range[1];current>rangeStart&&current<rangeEnd&&classList.add("range"),current===rangeStart&&classList.add("range-start"),current===rangeEnd&&classList.add("range-end")}_this7.selected.includes(current)&&classList.add("selected"),current===_this7.focused&&classList.add("focused"),_this7.beforeShow&&_this7.performBeforeHook(el,current,date)}))}},{key:"refresh",value:function refresh(){var _this8=this,_ref7=_slicedToArray(this.range||[],2),rangeStart=_ref7[0],rangeEnd=_ref7[1];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach((function(el){el.classList.remove("range","range-start","range-end","selected","focused")})),Array.from(this.grid.children).forEach((function(el){var current=Number(el.textContent),classList=el.classList;current>rangeStart&&current<rangeEnd&&classList.add("range"),current===rangeStart&&classList.add("range-start"),current===rangeEnd&&classList.add("range-end"),_this8.selected.includes(current)&&classList.add("selected"),current===_this8.focused&&classList.add("focused")}))}},{key:"refreshFocus",value:function refreshFocus(){var index=Math.round((this.focused-this.start)/this.step);this.grid.querySelectorAll(".focused").forEach((function(el){el.classList.remove("focused")})),this.grid.children[index].classList.add("focused")}}]),YearsView}(View);function triggerDatepickerEvent(datepicker,type){var detail={date:datepicker.getDate(),viewDate:new Date(datepicker.picker.viewDate),viewId:datepicker.picker.currentView.id,datepicker:datepicker};datepicker.element.dispatchEvent(new CustomEvent(type,{detail:detail}))}function goToPrevOrNext(datepicker,direction){var newViewDate,_datepicker$config=datepicker.config,minDate=_datepicker$config.minDate,maxDate=_datepicker$config.maxDate,_datepicker$picker=datepicker.picker,currentView=_datepicker$picker.currentView,viewDate=_datepicker$picker.viewDate;switch(currentView.id){case 0:newViewDate=addMonths(viewDate,direction);break;case 1:newViewDate=addYears(viewDate,direction);break;default:newViewDate=addYears(viewDate,direction*currentView.navStep)}newViewDate=limitToRange(newViewDate,minDate,maxDate),datepicker.picker.changeFocus(newViewDate).render()}function switchView(datepicker){var viewId=datepicker.picker.currentView.id;viewId!==datepicker.config.maxView&&datepicker.picker.changeView(viewId+1).render()}function unfocus(datepicker){datepicker.config.updateOnBlur?datepicker.update({revert:!0}):datepicker.refresh("input"),datepicker.hide()}function goToSelectedMonthOrYear(datepicker,selection){var picker=datepicker.picker,viewDate=new Date(picker.viewDate),viewId=picker.currentView.id,newDate=1===viewId?addMonths(viewDate,selection-viewDate.getMonth()):addYears(viewDate,selection-viewDate.getFullYear());picker.changeFocus(newDate).changeView(viewId-1).render()}function onClickTodayBtn(datepicker){var picker=datepicker.picker,currentDate=today();if(1===datepicker.config.todayBtnMode){if(datepicker.config.autohide)return void datepicker.setDate(currentDate);datepicker.setDate(currentDate,{render:!1}),picker.update()}picker.viewDate!==currentDate&&picker.changeFocus(currentDate),picker.changeView(0).render()}function onClickClearBtn(datepicker){datepicker.setDate({clear:!0})}function onClickViewSwitch(datepicker){switchView(datepicker)}function onClickPrevBtn(datepicker){goToPrevOrNext(datepicker,-1)}function onClickNextBtn(datepicker){goToPrevOrNext(datepicker,1)}function onClickView(datepicker,ev){var target=findElementInEventPath(ev,".datepicker-cell");if(target&&!target.classList.contains("disabled")){var _datepicker$picker$cu=datepicker.picker.currentView,id=_datepicker$picker$cu.id;_datepicker$picker$cu.isMinView?datepicker.setDate(Number(target.dataset.date)):goToSelectedMonthOrYear(datepicker,Number(1===id?target.dataset.month:target.dataset.year))}}function onMousedownPicker(ev){ev.preventDefault()}var orientClasses=["left","top","right","bottom"].reduce((function(obj,key){return obj[key]="datepicker-orient-"+key,obj}),{}),toPx=function toPx(num){return num?num+"px":num};function processPickerOptions(picker,options){if(void 0!==options.title&&(options.title?(picker.controls.title.textContent=options.title,showElement(picker.controls.title)):(picker.controls.title.textContent="",hideElement(picker.controls.title))),options.prevArrow){var prevBtn=picker.controls.prevBtn;emptyChildNodes(prevBtn),options.prevArrow.forEach((function(node){prevBtn.appendChild(node.cloneNode(!0))}))}if(options.nextArrow){var nextBtn=picker.controls.nextBtn;emptyChildNodes(nextBtn),options.nextArrow.forEach((function(node){nextBtn.appendChild(node.cloneNode(!0))}))}if(options.locale&&(picker.controls.todayBtn.textContent=options.locale.today,picker.controls.clearBtn.textContent=options.locale.clear),void 0!==options.todayBtn&&(options.todayBtn?showElement(picker.controls.todayBtn):hideElement(picker.controls.todayBtn)),hasProperty(options,"minDate")||hasProperty(options,"maxDate")){var _picker$datepicker$co=picker.datepicker.config,minDate=_picker$datepicker$co.minDate,maxDate=_picker$datepicker$co.maxDate;picker.controls.todayBtn.disabled=!isInRange(today(),minDate,maxDate)}void 0!==options.clearBtn&&(options.clearBtn?showElement(picker.controls.clearBtn):hideElement(picker.controls.clearBtn))}function computeResetViewDate(datepicker){var dates=datepicker.dates,config=datepicker.config;return limitToRange(dates.length>0?lastItemOf(dates):config.defaultViewDate,config.minDate,config.maxDate)}function setViewDate(picker,newDate){var oldViewDate=new Date(picker.viewDate),newViewDate=new Date(newDate),_picker$currentView=picker.currentView,id=_picker$currentView.id,year=_picker$currentView.year,first=_picker$currentView.first,last=_picker$currentView.last,viewYear=newViewDate.getFullYear();switch(picker.viewDate=newDate,viewYear!==oldViewDate.getFullYear()&&triggerDatepickerEvent(picker.datepicker,"changeYear"),newViewDate.getMonth()!==oldViewDate.getMonth()&&triggerDatepickerEvent(picker.datepicker,"changeMonth"),id){case 0:return newDate<first||newDate>last;case 1:return viewYear!==year;default:return viewYear<first||viewYear>last}}function getTextDirection(el){return window.getComputedStyle(el).direction}function findScrollParents(el){var parent=getParent(el);if(parent!==document.body&&parent)return"visible"!==window.getComputedStyle(parent).overflow?parent:findScrollParents(parent)}var Picker=function(){function Picker(datepicker){_classCallCheck(this,Picker);var config=(this.datepicker=datepicker).config,template=pickerTemplate.replace(/%buttonClass%/g,config.buttonClass),element=this.element=parseHTML(template).firstChild,_element$firstChild$c=_slicedToArray(element.firstChild.children,3),header=_element$firstChild$c[0],main=_element$firstChild$c[1],footer=_element$firstChild$c[2],title=header.firstElementChild,_header$lastElementCh=_slicedToArray(header.lastElementChild.children,3),prevBtn=_header$lastElementCh[0],viewSwitch=_header$lastElementCh[1],nextBtn=_header$lastElementCh[2],_footer$firstChild$ch=_slicedToArray(footer.firstChild.children,2),controls={title:title,prevBtn:prevBtn,viewSwitch:viewSwitch,nextBtn:nextBtn,todayBtn:_footer$firstChild$ch[0],clearBtn:_footer$firstChild$ch[1]};this.main=main,this.controls=controls;var elementClass=datepicker.inline?"inline":"dropdown";element.classList.add("datepicker-"+elementClass),processPickerOptions(this,config),this.viewDate=computeResetViewDate(datepicker),registerListeners(datepicker,[[element,"mousedown",onMousedownPicker],[main,"click",onClickView.bind(null,datepicker)],[controls.viewSwitch,"click",onClickViewSwitch.bind(null,datepicker)],[controls.prevBtn,"click",onClickPrevBtn.bind(null,datepicker)],[controls.nextBtn,"click",onClickNextBtn.bind(null,datepicker)],[controls.todayBtn,"click",onClickTodayBtn.bind(null,datepicker)],[controls.clearBtn,"click",onClickClearBtn.bind(null,datepicker)]]),this.views=[new DaysView(this),new MonthsView(this),new YearsView(this,{id:2,name:"years",cellClass:"year",step:1}),new YearsView(this,{id:3,name:"decades",cellClass:"decade",step:10})],this.currentView=this.views[config.startView],this.currentView.render(),this.main.appendChild(this.currentView.element),config.container?config.container.appendChild(this.element):datepicker.inputField.after(this.element)}return _createClass(Picker,[{key:"setOptions",value:function setOptions(options){processPickerOptions(this,options),this.views.forEach((function(view){view.init(options,!1)})),this.currentView.render()}},{key:"detach",value:function detach(){this.element.remove()}},{key:"show",value:function show(){if(!this.active){var datepicker=this.datepicker,element=this.element;if(datepicker.inline)element.classList.add("active");else{var inputDirection=getTextDirection(datepicker.inputField);inputDirection!==getTextDirection(getParent(element))?element.dir=inputDirection:element.dir&&element.removeAttribute("dir"),element.style.visiblity="hidden",element.classList.add("active"),this.place(),element.style.visiblity="",datepicker.config.disableTouchKeyboard&&datepicker.inputField.blur()}this.active=!0,triggerDatepickerEvent(datepicker,"show")}}},{key:"hide",value:function hide(){this.active&&(this.datepicker.exitEditMode(),this.element.classList.remove("active"),this.active=!1,triggerDatepickerEvent(this.datepicker,"hide"))}},{key:"place",value:function place(){var _this$element=this.element,classList=_this$element.classList,offsetParent=_this$element.offsetParent,style=_this$element.style,_this$datepicker2=this.datepicker,config=_this$datepicker2.config,inputField=_this$datepicker2.inputField,_this$element$getBoun=this.element.getBoundingClientRect(),calendarWidth=_this$element$getBoun.width,calendarHeight=_this$element$getBoun.height,_inputField$getBoundi=inputField.getBoundingClientRect(),inputLeft=_inputField$getBoundi.left,inputTop=_inputField$getBoundi.top,inputRight=_inputField$getBoundi.right,inputBottom=_inputField$getBoundi.bottom,inputWidth=_inputField$getBoundi.width,inputHeight=_inputField$getBoundi.height,_config$orientation=config.orientation,orientX=_config$orientation.x,orientY=_config$orientation.y,left=inputLeft,top=inputTop;if(offsetParent!==document.body&&offsetParent){var offsetParentRect=offsetParent.getBoundingClientRect();left-=offsetParentRect.left-offsetParent.scrollLeft,top-=offsetParentRect.top-offsetParent.scrollTop}else left+=window.scrollX,top+=window.scrollY;var scrollParent=findScrollParents(inputField),scrollAreaLeft=0,scrollAreaTop=0,_document$documentEle=document.documentElement,scrollAreaRight=_document$documentEle.clientWidth,scrollAreaBottom=_document$documentEle.clientHeight;if(scrollParent){var scrollParentRect=scrollParent.getBoundingClientRect();scrollParentRect.top>0&&(scrollAreaTop=scrollParentRect.top),scrollParentRect.left>0&&(scrollAreaLeft=scrollParentRect.left),scrollParentRect.right<scrollAreaRight&&(scrollAreaRight=scrollParentRect.right),scrollParentRect.bottom<scrollAreaBottom&&(scrollAreaBottom=scrollParentRect.bottom)}var adjustment=0;"auto"===orientX&&(inputLeft<scrollAreaLeft?(orientX="left",adjustment=scrollAreaLeft-inputLeft):inputLeft+calendarWidth>scrollAreaRight?(orientX="right",scrollAreaRight<inputRight&&(adjustment=scrollAreaRight-inputRight)):orientX="rtl"===getTextDirection(inputField)?inputRight-calendarWidth<scrollAreaLeft?"left":"right":"left"),"right"===orientX&&(left+=inputWidth-calendarWidth),left+=adjustment,"auto"===orientY&&(orientY=inputTop-calendarHeight>scrollAreaTop&&inputBottom+calendarHeight>scrollAreaBottom?"top":"bottom"),"top"===orientY?top-=calendarHeight:top+=inputHeight,classList.remove.apply(classList,_toConsumableArray(Object.values(orientClasses))),classList.add(orientClasses[orientX],orientClasses[orientY]),style.left=toPx(left),style.top=toPx(top)}},{key:"setViewSwitchLabel",value:function setViewSwitchLabel(labelText){this.controls.viewSwitch.textContent=labelText}},{key:"setPrevBtnDisabled",value:function setPrevBtnDisabled(disabled){this.controls.prevBtn.disabled=disabled}},{key:"setNextBtnDisabled",value:function setNextBtnDisabled(disabled){this.controls.nextBtn.disabled=disabled}},{key:"changeView",value:function changeView(viewId){var oldView=this.currentView,newView=this.views[viewId];return newView.id!==oldView.id&&(this.currentView=newView,this._renderMethod="render",triggerDatepickerEvent(this.datepicker,"changeView"),this.main.replaceChild(newView.element,oldView.element)),this}},{key:"changeFocus",value:function changeFocus(newViewDate){return this._renderMethod=setViewDate(this,newViewDate)?"render":"refreshFocus",this.views.forEach((function(view){view.updateFocus()})),this}},{key:"update",value:function update(){var newViewDate=computeResetViewDate(this.datepicker);return this._renderMethod=setViewDate(this,newViewDate)?"render":"refresh",this.views.forEach((function(view){view.updateFocus(),view.updateSelection()})),this}},{key:"render",value:function render(){var quickRender=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],renderMethod=quickRender&&this._renderMethod||"render";delete this._renderMethod,this.currentView[renderMethod]()}}]),Picker}();function findNextAvailableOne(date,addFn,increase,testFn,min,max){if(isInRange(date,min,max))return testFn(date)?findNextAvailableOne(addFn(date,increase),addFn,increase,testFn,min,max):date}function moveByArrowKey(datepicker,ev,direction,vertical){var addFn,testFn,picker=datepicker.picker,currentView=picker.currentView,step=currentView.step||1,viewDate=picker.viewDate;switch(currentView.id){case 0:viewDate=vertical?addDays(viewDate,7*direction):ev.ctrlKey||ev.metaKey?addYears(viewDate,direction):addDays(viewDate,direction),addFn=addDays,testFn=function testFn(date){return currentView.disabled.includes(date)};break;case 1:viewDate=addMonths(viewDate,vertical?4*direction:direction),addFn=addMonths,testFn=function testFn(date){var dt=new Date(date),year=currentView.year,disabled=currentView.disabled;return dt.getFullYear()===year&&disabled.includes(dt.getMonth())};break;default:viewDate=addYears(viewDate,direction*(vertical?4:1)*step),addFn=addYears,testFn=function testFn(date){return currentView.disabled.includes(startOfYearPeriod(date,step))}}void 0!==(viewDate=findNextAvailableOne(viewDate,addFn,direction<0?-step:step,testFn,currentView.minDate,currentView.maxDate))&&picker.changeFocus(viewDate).render()}function onKeydown(datepicker,ev){var key=ev.key;if("Tab"!==key){var picker=datepicker.picker,_picker$currentView2=picker.currentView,id=_picker$currentView2.id,isMinView=_picker$currentView2.isMinView;if(picker.active){if(datepicker.editMode)return void("Enter"===key?datepicker.exitEditMode({update:!0,autohide:datepicker.config.autohide}):"Escape"===key&&picker.hide());if("ArrowLeft"===key)if(ev.ctrlKey||ev.metaKey)goToPrevOrNext(datepicker,-1);else{if(ev.shiftKey)return void datepicker.enterEditMode();moveByArrowKey(datepicker,ev,-1,!1)}else if("ArrowRight"===key)if(ev.ctrlKey||ev.metaKey)goToPrevOrNext(datepicker,1);else{if(ev.shiftKey)return void datepicker.enterEditMode();moveByArrowKey(datepicker,ev,1,!1)}else if("ArrowUp"===key)if(ev.ctrlKey||ev.metaKey)switchView(datepicker);else{if(ev.shiftKey)return void datepicker.enterEditMode();moveByArrowKey(datepicker,ev,-1,!0)}else if("ArrowDown"===key){if(ev.shiftKey&&!ev.ctrlKey&&!ev.metaKey)return void datepicker.enterEditMode();moveByArrowKey(datepicker,ev,1,!0)}else{if("Enter"!==key)return void("Escape"===key?picker.hide():"Backspace"!==key&&"Delete"!==key&&(1!==key.length||ev.ctrlKey||ev.metaKey)||datepicker.enterEditMode());if(isMinView)return void datepicker.setDate(picker.viewDate);picker.changeView(id-1).render()}}else{if("ArrowDown"!==key)return void("Enter"===key?datepicker.update():"Escape"===key&&picker.show());picker.show()}ev.preventDefault()}else unfocus(datepicker)}function onFocus(datepicker){datepicker.config.showOnFocus&&!datepicker._showing&&datepicker.show()}function onMousedown(datepicker,ev){var el=ev.target;(datepicker.picker.active||datepicker.config.showOnClick)&&(el._active=isActiveElement(el),el._clicking=setTimeout((function(){delete el._active,delete el._clicking}),2e3))}function onClickInput(datepicker,ev){var el=ev.target;el._clicking&&(clearTimeout(el._clicking),delete el._clicking,el._active&&datepicker.enterEditMode(),delete el._active,datepicker.config.showOnClick&&datepicker.show())}function onPaste(datepicker,ev){ev.clipboardData.types.includes("text/plain")&&datepicker.enterEditMode()}function onClickOutside(datepicker,ev){var element=datepicker.element,picker=datepicker.picker;if(picker.active||isActiveElement(element)){var pickerElem=picker.element;findElementInEventPath(ev,(function(el){return el===element||el===pickerElem}))||unfocus(datepicker)}}function stringifyDates(dates,config){return dates.map((function(dt){return _formatDate(dt,config.format,config.locale)})).join(config.dateDelimiter)}function processInputDates(datepicker,inputDates){var clear=arguments.length>2&&void 0!==arguments[2]&&arguments[2],config=datepicker.config,origDates=datepicker.dates,rangeSideIndex=datepicker.rangeSideIndex;if(0===inputDates.length)return clear?[]:void 0;var newDates=inputDates.reduce((function(dates,dt){var date=_parseDate(dt,config.format,config.locale);return void 0===date||!isInRange(date=regularizeDate(date,config.pickLevel,rangeSideIndex),config.minDate,config.maxDate)||dates.includes(date)||config.datesDisabled.includes(date)||!(config.pickLevel>0)&&config.daysOfWeekDisabled.includes(new Date(date).getDay())||dates.push(date),dates}),[]);return 0!==newDates.length?(config.multidate&&!clear&&(newDates=newDates.reduce((function(dates,date){return origDates.includes(date)||dates.push(date),dates}),origDates.filter((function(date){return!newDates.includes(date)})))),config.maxNumberOfDates&&newDates.length>config.maxNumberOfDates?newDates.slice(-1*config.maxNumberOfDates):newDates):void 0}function refreshUI(datepicker){var mode=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,quickRender=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],config=datepicker.config,picker=datepicker.picker,inputField=datepicker.inputField;if(2&mode){var newView=picker.active?config.pickLevel:config.startView;picker.update().changeView(newView).render(quickRender)}1&mode&&inputField&&(inputField.value=stringifyDates(datepicker.dates,config))}function _setDate(datepicker,inputDates,options){var clear=options.clear,render=options.render,autohide=options.autohide,revert=options.revert;void 0===render&&(render=!0),render?void 0===autohide&&(autohide=datepicker.config.autohide):autohide=!1;var newDates=processInputDates(datepicker,inputDates,clear);(newDates||revert)&&(newDates&&newDates.toString()!==datepicker.dates.toString()?(datepicker.dates=newDates,refreshUI(datepicker,render?3:1),triggerDatepickerEvent(datepicker,"changeDate")):refreshUI(datepicker,1),autohide&&datepicker.hide())}var Datepicker=function(){function Datepicker(element){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},rangepicker=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;_classCallCheck(this,Datepicker),element.datepicker=this,this.element=element;var inputField,initialDates,config=this.config=Object.assign({buttonClass:options.buttonClass&&String(options.buttonClass)||"button",container:null,defaultViewDate:today(),maxDate:void 0,minDate:void 0},processOptions(defaultOptions,this)),inline=this.inline="INPUT"!==element.tagName;if(inline?config.container=element:(options.container&&(config.container=options.container instanceof HTMLElement?options.container:document.querySelector(options.container)),(inputField=this.inputField=element).classList.add("datepicker-input")),rangepicker){var index=rangepicker.inputs.indexOf(inputField),datepickers=rangepicker.datepickers;if(index<0||index>1||!Array.isArray(datepickers))throw Error("Invalid rangepicker object.");datepickers[index]=this,Object.defineProperty(this,"rangepicker",{get:function get(){return rangepicker}}),Object.defineProperty(this,"rangeSideIndex",{get:function get(){return index}})}this._options=options,Object.assign(config,processOptions(options,this)),inline?(initialDates=stringToArray(element.dataset.date,config.dateDelimiter),delete element.dataset.date):initialDates=stringToArray(inputField.value,config.dateDelimiter),this.dates=[];var inputDateValues=processInputDates(this,initialDates);inputDateValues&&inputDateValues.length>0&&(this.dates=inputDateValues),inputField&&(inputField.value=stringifyDates(this.dates,config));var picker=this.picker=new Picker(this);if(inline)this.show();else{var onMousedownDocument=onClickOutside.bind(null,this),listeners=[[inputField,"keydown",onKeydown.bind(null,this)],[inputField,"focus",onFocus.bind(null,this)],[inputField,"mousedown",onMousedown.bind(null,this)],[inputField,"click",onClickInput.bind(null,this)],[inputField,"paste",onPaste.bind(null,this)],[document,"mousedown",onMousedownDocument],[document,"touchstart",onMousedownDocument],[window,"resize",picker.place.bind(picker)]];registerListeners(this,listeners)}}return _createClass(Datepicker,[{key:"active",get:function get(){return!(!this.picker||!this.picker.active)}},{key:"pickerElement",get:function get(){return this.picker?this.picker.element:void 0}},{key:"setOptions",value:function setOptions(options){var picker=this.picker,newOptions=processOptions(options,this);Object.assign(this._options,options),Object.assign(this.config,newOptions),picker.setOptions(newOptions),refreshUI(this,3)}},{key:"show",value:function show(){if(this.inputField){if(this.inputField.disabled)return;isActiveElement(this.inputField)||this.config.disableTouchKeyboard||(this._showing=!0,this.inputField.focus(),delete this._showing)}this.picker.show()}},{key:"hide",value:function hide(){this.inline||(this.picker.hide(),this.picker.update().changeView(this.config.startView).render())}},{key:"destroy",value:function destroy(){return this.hide(),function unregisterListeners(keyObj){var listeners=listenerRegistry.get(keyObj);listeners&&(listeners.forEach((function(listener){removeEventListener.call.apply(removeEventListener,_toConsumableArray(listener))})),listenerRegistry.delete(keyObj))}(this),this.picker.detach(),this.inline||this.inputField.classList.remove("datepicker-input"),delete this.element.datepicker,this}},{key:"getDate",value:function getDate(){var _this9=this,format=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,callback=format?function(date){return _formatDate(date,format,_this9.config.locale)}:function(date){return new Date(date)};return this.config.multidate?this.dates.map(callback):this.dates.length>0?callback(this.dates[0]):void 0}},{key:"setDate",value:function setDate(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];var dates=[].concat(args),opts={},lastArg=lastItemOf(args);"object"!=typeof lastArg||Array.isArray(lastArg)||lastArg instanceof Date||!lastArg||Object.assign(opts,dates.pop());var inputDates=Array.isArray(dates[0])?dates[0]:dates;_setDate(this,inputDates,opts)}},{key:"update",value:function update(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(!this.inline){var opts=Object.assign(options||{},{clear:!0,render:!0}),inputDates=stringToArray(this.inputField.value,this.config.dateDelimiter);_setDate(this,inputDates,opts)}}},{key:"refresh",value:function refresh(){var target=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,forceRender=arguments.length>1&&void 0!==arguments[1]&&arguments[1];target&&"string"!=typeof target&&(forceRender=target,target=void 0),refreshUI(this,"picker"===target?2:"input"===target?1:3,!forceRender)}},{key:"enterEditMode",value:function enterEditMode(){this.inline||!this.picker.active||this.editMode||(this.editMode=!0,this.inputField.classList.add("in-edit"))}},{key:"exitEditMode",value:function exitEditMode(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(!this.inline&&this.editMode){var opts=Object.assign({update:!1},options);delete this.editMode,this.inputField.classList.remove("in-edit"),opts.update&&this.update(opts)}}}],[{key:"formatDate",value:function formatDate(date,format,lang){return _formatDate(date,format,lang&&locales[lang]||locales.en)}},{key:"parseDate",value:function parseDate(dateStr,format,lang){return _parseDate(dateStr,format,lang&&locales[lang]||locales.en)}},{key:"locales",get:function get(){return locales}}]),Datepicker}(),VerdocsFieldDate=function(){function VerdocsFieldDate(hostRef){_classCallCheck(this,VerdocsFieldDate),Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_54__.h)(this,hostRef),this.fieldFocus=Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_54__.d)(this,"fieldFocus",7),this.fieldBlur=Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_54__.d)(this,"fieldBlur",7),this.fieldChange=Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_54__.d)(this,"fieldChange",7),this.fieldInput=Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_54__.d)(this,"fieldInput",7),this.field=null,this.focused=!1}var _focusField;return _createClass(VerdocsFieldDate,[{key:"focusField",value:(_focusField=function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}(_regeneratorRuntime().mark((function _callee(){return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:this.focused=!0,this.el.focus(),this.fieldFocus.emit(!0);case 3:case"end":return _context.stop()}}),_callee,this)}))),function focusField(){return _focusField.apply(this,arguments)})},{key:"componentDidLoad",value:function componentDidLoad(){new Datepicker(this.el,{autohide:!0,todayHighlight:!0}),this.el.addEventListener("changeDate",(function(e){console.log("changeDate",e.detail.date.toISOString())}))}},{key:"handleBlur",value:function handleBlur(){this.focused=!1,this.fieldBlur.emit(!0)}},{key:"handleFocus",value:function handleFocus(){this.focused=!0,this.fieldFocus.emit(!0)}},{key:"handleChange",value:function handleChange(e){this.fieldChange.emit(e.target.value)}},{key:"handleInput",value:function handleInput(e){this.fieldInput.emit(e.target.value)}},{key:"render",value:function render(){var _a,_b,_this10=this,settings={x:0,y:0};return"settings"in this.field&&(null===(_a=this.field)||void 0===_a?void 0:_a.settings)?settings=this.field.settings:"setting"in this.field&&(null===(_b=this.field)||void 0===_b?void 0:_b.setting)&&(settings=this.field.setting),Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_54__.f)(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_54__.b,{class:{focused:this.focused,required:settings.required,storybook:!!(null===window||void 0===window?void 0:window.STORYBOOK_ENV)}},Object(_index_542510c1_js__WEBPACK_IMPORTED_MODULE_54__.f)("input",{type:"text",value:"",placeholder:settings.placeholder,required:settings.required,ref:function ref(el){return _this10.el=el},onBlur:function onBlur(){return _this10.handleBlur()},onFocus:function onFocus(){return _this10.handleFocus()},onChange:function onChange(e){return _this10.handleChange(e)},onInput:function onInput(e){return _this10.handleInput(e)}}))}}]),VerdocsFieldDate}();VerdocsFieldDate.style='.datepicker{display:none}.datepicker.active{display:block}.datepicker-dropdown{position:absolute;top:0;left:0;z-index:20;padding-top:4px}.datepicker-dropdown.datepicker-orient-top{padding-top:0;padding-bottom:4px}.datepicker-picker{display:inline-block;border-radius:4px;background-color:white}.datepicker-dropdown .datepicker-picker{-webkit-box-shadow:0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);box-shadow:0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1)}.datepicker-picker span{display:block;-ms-flex:1;flex:1;border:0;border-radius:4px;cursor:default;text-align:center;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.datepicker-main{padding:2px}.datepicker-footer{-webkit-box-shadow:inset 0 1px 1px rgba(10, 10, 10, 0.1);box-shadow:inset 0 1px 1px rgba(10, 10, 10, 0.1);background-color:whitesmoke}.datepicker-grid,.datepicker-view .days-of-week,.datepicker-view,.datepicker-controls{display:-ms-flexbox;display:flex}.datepicker-grid{-ms-flex-wrap:wrap;flex-wrap:wrap}.datepicker-view .days .datepicker-cell,.datepicker-view .dow{-ms-flex-preferred-size:14.2857142857%;flex-basis:14.2857142857%}.datepicker-view.datepicker-grid .datepicker-cell{-ms-flex-preferred-size:25%;flex-basis:25%}.datepicker-cell,.datepicker-view .week{height:2.25rem;line-height:2.25rem}.datepicker-title{-webkit-box-shadow:inset 0 -1px 1px rgba(10, 10, 10, 0.1);box-shadow:inset 0 -1px 1px rgba(10, 10, 10, 0.1);background-color:whitesmoke;padding:0.375rem 0.75rem;text-align:center;font-weight:700}.datepicker-header .datepicker-controls{padding:2px 2px 0}.datepicker-controls .button{display:-ms-inline-flexbox;display:inline-flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;margin:0;border:1px solid #dbdbdb;border-radius:4px;-webkit-box-shadow:none;box-shadow:none;background-color:white;cursor:pointer;padding:calc(0.375em - 1px) 0.75em;height:2.25em;vertical-align:top;text-align:center;line-height:1.5;white-space:nowrap;color:#363636;font-size:1rem}.datepicker-controls .button:focus,.datepicker-controls .button:active{outline:none}.datepicker-controls .button:hover{border-color:#b5b5b5;color:#363636}.datepicker-controls .button:focus{border-color:#3273dc;color:#363636}.datepicker-controls .button:focus:not(:active){-webkit-box-shadow:0 0 0 0.125em rgba(50, 115, 220, 0.25);box-shadow:0 0 0 0.125em rgba(50, 115, 220, 0.25)}.datepicker-controls .button:active{border-color:#4a4a4a;color:#363636}.datepicker-controls .button[disabled]{cursor:not-allowed}.datepicker-header .datepicker-controls .button{border-color:transparent;font-weight:bold}.datepicker-header .datepicker-controls .button:hover{background-color:#f9f9f9}.datepicker-header .datepicker-controls .button:focus:not(:active){-webkit-box-shadow:0 0 0 0.125em rgba(255, 255, 255, 0.25);box-shadow:0 0 0 0.125em rgba(255, 255, 255, 0.25)}.datepicker-header .datepicker-controls .button:active{background-color:#f2f2f2}.datepicker-header .datepicker-controls .button[disabled]{-webkit-box-shadow:none;box-shadow:none}.datepicker-footer .datepicker-controls .button{margin:calc(0.375rem - 1px) 0.375rem;border-radius:2px;width:100%;font-size:0.75rem}.datepicker-controls .view-switch{-ms-flex:auto;flex:auto}.datepicker-controls .prev-btn,.datepicker-controls .next-btn{padding-right:0.375rem;padding-left:0.375rem;width:2.25rem}.datepicker-controls .prev-btn.disabled,.datepicker-controls .next-btn.disabled{visibility:hidden}.datepicker-view .dow{height:1.5rem;line-height:1.5rem;font-size:0.875rem;font-weight:700}.datepicker-view .week{width:2.25rem;color:#b5b5b5;font-size:0.75rem}@media (max-width: 22.5rem){.datepicker-view .week{width:1.96875rem}}.datepicker-grid{width:15.75rem}@media (max-width: 22.5rem){.calendar-weeks+.days .datepicker-grid{width:13.78125rem}}.datepicker-cell:not(.disabled):hover{background-color:#f9f9f9;cursor:pointer}.datepicker-cell.focused:not(.selected){background-color:#e8e8e8}.datepicker-cell.selected,.datepicker-cell.selected:hover{background-color:#3273dc;color:#fff;font-weight:600}.datepicker-cell.disabled{color:#dbdbdb}.datepicker-cell.prev:not(.disabled),.datepicker-cell.next:not(.disabled){color:#7a7a7a}.datepicker-cell.prev.selected,.datepicker-cell.next.selected{color:#e6e6e6}.datepicker-cell.highlighted:not(.selected):not(.range):not(.today){border-radius:0;background-color:whitesmoke}.datepicker-cell.highlighted:not(.selected):not(.range):not(.today):not(.disabled):hover{background-color:#eeeeee}.datepicker-cell.highlighted:not(.selected):not(.range):not(.today).focused{background-color:#e8e8e8}.datepicker-cell.today:not(.selected){background-color:#00d1b2}.datepicker-cell.today:not(.selected):not(.disabled){color:#fff}.datepicker-cell.today.focused:not(.selected){background-color:#00c4a7}.datepicker-cell.range-end:not(.selected),.datepicker-cell.range-start:not(.selected){background-color:#b5b5b5;color:#fff}.datepicker-cell.range-end.focused:not(.selected),.datepicker-cell.range-start.focused:not(.selected){background-color:#afafaf}.datepicker-cell.range-start{border-radius:4px 0 0 4px}.datepicker-cell.range-end{border-radius:0 4px 4px 0}.datepicker-cell.range{border-radius:0;background-color:#dbdbdb}.datepicker-cell.range:not(.disabled):not(.focused):not(.today):hover{background-color:#d5d5d5}.datepicker-cell.range.disabled{color:#c2c2c2}.datepicker-cell.range.focused{background-color:#cfcfcf}.datepicker-view.datepicker-grid .datepicker-cell{height:4.5rem;line-height:4.5rem}.datepicker-input.in-edit{border-color:#2366d1}.datepicker-input.in-edit:focus,.datepicker-input.in-edit:active{-webkit-box-shadow:0 0 0.25em 0.25em rgba(35, 102, 209, 0.2);box-shadow:0 0 0.25em 0.25em rgba(35, 102, 209, 0.2)}verdocs-field-date{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;width:64px;height:15px;display:block;font-size:11px;position:relative;letter-spacing:0.3px;background-color:transparent;-webkit-transform-origin:bottom left;transform-origin:bottom left}verdocs-field-date input{-webkit-box-sizing:border-box;box-sizing:border-box;color:rgba(0, 0, 0, 0.87);font-weight:500;-webkit-transform-origin:0 0;transform-origin:0 0;height:100%;width:100%;background:none;font-size:11px;border:1px solid #ccc;-webkit-appearance:none;-moz-appearance:none;appearance:none}verdocs-field-date input.hide{display:none}verdocs-field-date.required input{border:1px solid #cc0000}verdocs-field-date.focused{-webkit-animation:verdocs-field-pulse 0.75s 2;animation:verdocs-field-pulse 0.75s 2}'},"./node_modules/core-js/internals/array-reduce.js":function(module,exports,__webpack_require__){var aCallable=__webpack_require__("./node_modules/core-js/internals/a-callable.js"),toObject=__webpack_require__("./node_modules/core-js/internals/to-object.js"),IndexedObject=__webpack_require__("./node_modules/core-js/internals/indexed-object.js"),lengthOfArrayLike=__webpack_require__("./node_modules/core-js/internals/length-of-array-like.js"),$TypeError=TypeError,createMethod=function(IS_RIGHT){return function(that,callbackfn,argumentsLength,memo){aCallable(callbackfn);var O=toObject(that),self=IndexedObject(O),length=lengthOfArrayLike(O),index=IS_RIGHT?length-1:0,i=IS_RIGHT?-1:1;if(argumentsLength<2)for(;;){if(index in self){memo=self[index],index+=i;break}if(index+=i,IS_RIGHT?index<0:length<=index)throw $TypeError("Reduce of empty array with no initial value")}for(;IS_RIGHT?index>=0:length>index;index+=i)index in self&&(memo=callbackfn(memo,self[index],index,O));return memo}};module.exports={left:createMethod(!1),right:createMethod(!0)}},"./node_modules/core-js/internals/date-to-iso-string.js":function(module,exports,__webpack_require__){"use strict";var uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),padStart=__webpack_require__("./node_modules/core-js/internals/string-pad.js").start,$RangeError=RangeError,abs=Math.abs,DatePrototype=Date.prototype,n$DateToISOString=DatePrototype.toISOString,getTime=uncurryThis(DatePrototype.getTime),getUTCDate=uncurryThis(DatePrototype.getUTCDate),getUTCFullYear=uncurryThis(DatePrototype.getUTCFullYear),getUTCHours=uncurryThis(DatePrototype.getUTCHours),getUTCMilliseconds=uncurryThis(DatePrototype.getUTCMilliseconds),getUTCMinutes=uncurryThis(DatePrototype.getUTCMinutes),getUTCMonth=uncurryThis(DatePrototype.getUTCMonth),getUTCSeconds=uncurryThis(DatePrototype.getUTCSeconds);module.exports=fails((function(){return"0385-07-25T07:06:39.999Z"!=n$DateToISOString.call(new Date(-50000000000001))}))||!fails((function(){n$DateToISOString.call(new Date(NaN))}))?function toISOString(){if(!isFinite(getTime(this)))throw $RangeError("Invalid time value");var year=getUTCFullYear(this),milliseconds=getUTCMilliseconds(this),sign=year<0?"-":year>9999?"+":"";return sign+padStart(abs(year),sign?6:4,0)+"-"+padStart(getUTCMonth(this)+1,2,0)+"-"+padStart(getUTCDate(this),2,0)+"T"+padStart(getUTCHours(this),2,0)+":"+padStart(getUTCMinutes(this),2,0)+":"+padStart(getUTCSeconds(this),2,0)+"."+padStart(milliseconds,3,0)+"Z"}:n$DateToISOString},"./node_modules/core-js/internals/number-parse-int.js":function(module,exports,__webpack_require__){var global=__webpack_require__("./node_modules/core-js/internals/global.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),toString=__webpack_require__("./node_modules/core-js/internals/to-string.js"),trim=__webpack_require__("./node_modules/core-js/internals/string-trim.js").trim,whitespaces=__webpack_require__("./node_modules/core-js/internals/whitespaces.js"),$parseInt=global.parseInt,Symbol=global.Symbol,ITERATOR=Symbol&&Symbol.iterator,hex=/^[+-]?0x/i,exec=uncurryThis(hex.exec),FORCED=8!==$parseInt(whitespaces+"08")||22!==$parseInt(whitespaces+"0x16")||ITERATOR&&!fails((function(){$parseInt(Object(ITERATOR))}));module.exports=FORCED?function parseInt(string,radix){var S=trim(toString(string));return $parseInt(S,radix>>>0||(exec(hex,S)?16:10))}:$parseInt},"./node_modules/core-js/internals/string-pad-webkit-bug.js":function(module,exports,__webpack_require__){var userAgent=__webpack_require__("./node_modules/core-js/internals/engine-user-agent.js");module.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent)},"./node_modules/core-js/internals/string-pad.js":function(module,exports,__webpack_require__){var uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),toLength=__webpack_require__("./node_modules/core-js/internals/to-length.js"),toString=__webpack_require__("./node_modules/core-js/internals/to-string.js"),$repeat=__webpack_require__("./node_modules/core-js/internals/string-repeat.js"),requireObjectCoercible=__webpack_require__("./node_modules/core-js/internals/require-object-coercible.js"),repeat=uncurryThis($repeat),stringSlice=uncurryThis("".slice),ceil=Math.ceil,createMethod=function(IS_END){return function($this,maxLength,fillString){var fillLen,stringFiller,S=toString(requireObjectCoercible($this)),intMaxLength=toLength(maxLength),stringLength=S.length,fillStr=void 0===fillString?" ":toString(fillString);return intMaxLength<=stringLength||""==fillStr?S:((stringFiller=repeat(fillStr,ceil((fillLen=intMaxLength-stringLength)/fillStr.length))).length>fillLen&&(stringFiller=stringSlice(stringFiller,0,fillLen)),IS_END?S+stringFiller:stringFiller+S)}};module.exports={start:createMethod(!1),end:createMethod(!0)}},"./node_modules/core-js/modules/es.array.reduce.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),$reduce=__webpack_require__("./node_modules/core-js/internals/array-reduce.js").left,arrayMethodIsStrict=__webpack_require__("./node_modules/core-js/internals/array-method-is-strict.js"),CHROME_VERSION=__webpack_require__("./node_modules/core-js/internals/engine-v8-version.js"),IS_NODE=__webpack_require__("./node_modules/core-js/internals/engine-is-node.js");$({target:"Array",proto:!0,forced:!arrayMethodIsStrict("reduce")||!IS_NODE&&CHROME_VERSION>79&&CHROME_VERSION<83},{reduce:function reduce(callbackfn){var length=arguments.length;return $reduce(this,callbackfn,length,length>1?arguments[1]:void 0)}})},"./node_modules/core-js/modules/es.date.to-iso-string.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),toISOString=__webpack_require__("./node_modules/core-js/internals/date-to-iso-string.js");$({target:"Date",proto:!0,forced:Date.prototype.toISOString!==toISOString},{toISOString:toISOString})},"./node_modules/core-js/modules/es.parse-int.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),$parseInt=__webpack_require__("./node_modules/core-js/internals/number-parse-int.js");$({global:!0,forced:parseInt!=$parseInt},{parseInt:$parseInt})},"./node_modules/core-js/modules/es.string.pad-start.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),$padStart=__webpack_require__("./node_modules/core-js/internals/string-pad.js").start;$({target:"String",proto:!0,forced:__webpack_require__("./node_modules/core-js/internals/string-pad-webkit-bug.js")},{padStart:function padStart(maxLength){return $padStart(this,maxLength,arguments.length>1?arguments[1]:void 0)}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,