/*! For license information please see 17.a50c556a.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"./dist/esm/Templates-22116158.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getTemplates})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getTemplate}));var getTemplates=function getTemplates(endpoint,params){return endpoint.api.get("/templates",{params:params}).then((function(r){return r.data}))},getTemplate=function getTemplate(endpoint,templateId){return endpoint.api.get("/templates/".concat(templateId)).then((function(r){return r.data}))}},"./dist/esm/Validators-f110bae2.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return isValidPhone})),__webpack_require__.d(__webpack_exports__,"b",(function(){return isValidEmail}));var EMAIL_REGEX=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,isValidEmail=function isValidEmail(email){return!!email&&EMAIL_REGEX.test(email)},PHONE_REGEX=/((?:\+|00)[17](?: |\-)?|(?:\+|00)[1-9]\d{0,2}(?: |\-)?|(?:\+|00)1\-\d{3}(?: |\-)?)?(0\d|\([0-9]{3}\)|[1-9]{0,3})(?:((?: |\-)[0-9]{2}){4}|((?:[0-9]{2}){4})|((?: |\-)[0-9]{3}(?: |\-)[0-9]{4})|([0-9]{7}))/,isValidPhone=function isValidPhone(phone){return!!phone&&PHONE_REGEX.test(phone)}},"./dist/esm/utils-cc6e4d41.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getRoleIndex})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getRGBA})),__webpack_require__.d(__webpack_exports__,"c",(function(){return getFieldId})),__webpack_require__.d(__webpack_exports__,"d",(function(){return rescale})),__webpack_require__.d(__webpack_exports__,"e",(function(){return fullNameToInitials})),__webpack_require__.d(__webpack_exports__,"f",(function(){return getFieldSettings})),__webpack_require__.d(__webpack_exports__,"g",(function(){return integerSequence})),__webpack_require__.d(__webpack_exports__,"h",(function(){return renderDocumentField})),__webpack_require__.d(__webpack_exports__,"i",(function(){return setControlStyles}));__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.array.fill.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js");function getRGBA(roleIndex){switch(roleIndex%10){case 0:return 0===roleIndex?"rgba(255, 193, 7, 0.4)":"rgba(134, 134, 134, 0.3)";case 1:return"rgba(156, 39, 176, .4)";case 2:return"rgba(33, 150, 243, .4)";case 3:return"rgba(220, 231, 117, 0.3)";case 4:return"rgba(121, 134, 203, 0.3)";case 5:return"rgba(77, 182, 172, 0.3)";case 6:return"rgba(255, 202, 165, 0.3)";case 7:return"rgba(2, 247, 190, 0.3)";case 8:return"rgba(255, 138, 101, 0.3)";case 9:return"rgba(82, 255, 79, 0.3)";default:return"rgba(229, 115, 155, 0.3)"}}function rescale(r,n){return r*n}var integerSequence=function integerSequence(start,count){return Array(count).fill(1).map((function(_,index){return index+start}))},fullNameToInitials=function fullNameToInitials(name){return name.split(" ").map((function(word){return word[0]})).join("")},setControlStyles=function setControlStyles(el,field,xScale,yScale,roleIndex,option){var _a,_b,_c,_d,settings=field.setting||field.settings,_settings$x=settings.x,x=void 0===_settings$x?0:_settings$x,_settings$y=settings.y,y=void 0===_settings$y?0:_settings$y,_settings$width=settings.width,width=void 0===_settings$width?function defaultWidth(field){switch(field.type){case"attachment":case"payment":return 24;case"checkbox":case"checkbox_group":case"radio_button_group":return 14;case"signature":case"initial":return 82}return 150}(field):_settings$width,_settings$height=settings.height,height=void 0===_settings$height?function defaultHeight(field){switch(field.type){case"attachment":case"payment":return 24;case"checkbox":case"checkbox_group":case"radio_button_group":return 14;case"signature":case"initial":return 41}return 50}(field):_settings$height,optionSettings=void 0!==option&&settings.options[option]?settings.options[option]:null;optionSettings&&(x=null!==(_a=optionSettings.x)&&void 0!==_a?_a:x,y=null!==(_b=optionSettings.y)&&void 0!==_b?_b:y,width=null!==(_c=optionSettings.width)&&void 0!==_c?_c:width,height=null!==(_d=optionSettings.height)&&void 0!==_d?_d:height),el.style.width=width+"px",el.style.height=height+"px",el.style.position="absolute",el.style.left=rescale(xScale,x)+"px",el.style.bottom=rescale(yScale,y)+"px",el.style.transform="scale("+xScale+", "+yScale+")",el.style.backgroundColor=field.rgba||getRGBA(roleIndex)},getFieldId=function getFieldId(field){return"verdocs-doc-fld-"+field.name},getFieldOptionId=function getFieldOptionId(field,index){return"verdocs-doc-fld-"+field.name+"-"+index},renderDocumentField=function renderDocumentField(field,docPage,roleIndex,handleFieldChange,disabled){var editable=arguments.length>5&&void 0!==arguments[5]&&arguments[5],draggable=arguments.length>6&&void 0!==arguments[6]&&arguments[6],controlsDiv=document.getElementById(docPage.containerId+"-controls");if(controlsDiv)switch(field.type){case"attachment":case"date":case"dropdown":case"initial":case"payment":case"signature":case"timestamp":case"textarea":case"textbox":var id=getFieldId(field),existingField=document.getElementById(id);if(existingField)return void setControlStyles(existingField,field,docPage.xScale,docPage.yScale,roleIndex);var el=document.createElement("verdocs-field-"+field.type);return el.field=field,el.setAttribute("id",id),disabled&&el.setAttribute("disabled",!0),editable&&el.setAttribute("editable",!0),draggable&&el.setAttribute("draggable",!0),el.addEventListener("fieldChange",(function(e){return handleFieldChange(field,e)})),setControlStyles(el,field,docPage.xScale,docPage.yScale,roleIndex),controlsDiv.appendChild(el),el;case"checkbox_group":field.setting.options.forEach((function(_,checkboxIndex){var id=getFieldOptionId(field,checkboxIndex),existingField=document.getElementById(id);if(!existingField){var cbEl=document.createElement("verdocs-field-checkbox");return cbEl.field=field,cbEl.setAttribute("id",id),cbEl.setAttribute("option",checkboxIndex),disabled&&cbEl.setAttribute("disabled",!0),cbEl.addEventListener("fieldChange",(function(e){return handleFieldChange(field,e)})),setControlStyles(cbEl,field,docPage.xScale,docPage.yScale,roleIndex,checkboxIndex),controlsDiv.appendChild(cbEl),cbEl}setControlStyles(existingField,field,docPage.xScale,docPage.yScale,roleIndex,checkboxIndex)}));break;case"radio_button_group":field.setting.options.forEach((function(_,buttonIndex){var id=getFieldOptionId(field,buttonIndex),existingField=document.getElementById(id);if(!existingField){var cbEl=document.createElement("verdocs-field-radio-button");return cbEl.field=field,cbEl.setAttribute("id",id),cbEl.setAttribute("option",buttonIndex),disabled&&cbEl.setAttribute("disabled",!0),cbEl.addEventListener("fieldChange",(function(e){return handleFieldChange(field,e)})),setControlStyles(cbEl,field,docPage.xScale,docPage.yScale,roleIndex,buttonIndex),controlsDiv.appendChild(cbEl),cbEl}setControlStyles(existingField,field,docPage.xScale,docPage.yScale,roleIndex,buttonIndex)}));break;default:return console.log("[PREVIEW] Skipping unsupported field type",field),null}},getRoleIndex=function getRoleIndex(roles,role){return roles.indexOf(role)||0},getFieldSettings=function getFieldSettings(field){return field.setting?field.setting:field.settings?field.settings:{x:0,y:0,required:!1,disabled:!1,result:"",value:""}}},"./dist/esm/verdocs-send.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_send",(function(){return VerdocsSend}));__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.object.values.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.async-iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js");var _index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__=__webpack_require__("./dist/esm/index-bc9b2c82.js"),_Templates_22116158_js__WEBPACK_IMPORTED_MODULE_30__=__webpack_require__("./dist/esm/Templates-22116158.js"),_Validators_f110bae2_js__WEBPACK_IMPORTED_MODULE_32__=(__webpack_require__("./dist/esm/Types-ab9f6af8.js"),__webpack_require__("./dist/esm/Validators-f110bae2.js")),_utils_cc6e4d41_js__WEBPACK_IMPORTED_MODULE_33__=__webpack_require__("./dist/esm/utils-cc6e4d41.js"),_VerdocsEndpoint_9db225a3_js__WEBPACK_IMPORTED_MODULE_34__=__webpack_require__("./dist/esm/VerdocsEndpoint-9db225a3.js");function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function define(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return generator._invoke=function(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}(innerFn,self,context),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;this._invoke=function(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}}function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(void 0===method){if(context.delegate=null,"throw"===context.method){if(delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method))return ContinueSentinel;context.method="throw",context.arg=new TypeError("The iterator does not provide a 'throw' method")}return ContinueSentinel}var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,define(Gp,"constructor",GeneratorFunctionPrototype),define(GeneratorFunctionPrototype,"constructor",GeneratorFunction),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(object){var keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var VerdocsSend=function(){function VerdocsSend(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsSend),Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.h)(this,hostRef),this.send=Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.d)(this,"send",7),this.cancel=Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.d)(this,"cancel",7),this.sdkError=Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.d)(this,"sdkError",7),this.endpoint=_VerdocsEndpoint_9db225a3_js__WEBPACK_IMPORTED_MODULE_34__.a.getDefault(),this.templateId=null,this.template=null,this.pdfUrl=null,this.containerId="verdocs-send-"+Math.random().toString(36).substring(2,11),this.rolesAtLevel={},this.showPickerForId="",this.sessionContacts=[],this.recipientsAssigned={},this.levels=[]}var _componentDidLoad,_componentWillLoad;return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsSend,[{key:"componentWillLoad",value:(_componentWillLoad=_asyncToGenerator(_regeneratorRuntime().mark((function _callee(){var _a,result;return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return this.sessionContacts=[],_context.prev=1,_context.next=4,this.endpoint.loadSession();case 4:result=_context.sent,(null===(_a=result.session)||void 0===_a?void 0:_a.profile)&&this.sessionContacts.push({id:result.session.profile.id,name:result.session.profile.first_name+" "+result.session.profile.last_name,email:result.session.profile.email,phone:result.session.profile.phone}),_context.next=11;break;case 8:_context.prev=8,_context.t0=_context.catch(1),console.log("Error loading session",_context.t0);case 11:case"end":return _context.stop()}}),_callee,this,[[1,8]])}))),function componentWillLoad(){return _componentWillLoad.apply(this,arguments)})},{key:"componentDidLoad",value:(_componentDidLoad=_asyncToGenerator(_regeneratorRuntime().mark((function _callee2(){var template,rolesAtLevel;return _regeneratorRuntime().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return console.log("[SEND] Showing template",this.templateId),_context2.prev=1,console.log("[SEND] Loading template "+this.templateId),_context2.next=5,Object(_Templates_22116158_js__WEBPACK_IMPORTED_MODULE_30__.b)(this.endpoint,this.templateId);case 5:template=_context2.sent,console.log("[SEND] Got template",template),this.template=template,(null==template?void 0:template.roles)&&(rolesAtLevel={},template.roles.forEach((function(role){var level=role.sequence-1;rolesAtLevel[level]||(rolesAtLevel[level]=[]);var id="r-"+level+"-"+rolesAtLevel[level].length;rolesAtLevel[level].push(Object.assign({},role,{id:id}))})),this.rolesAtLevel=rolesAtLevel,this.levels=Object.keys(rolesAtLevel).map((function(levelStr){return+levelStr})),this.levels.sort((function(a,b){return a-b}))),_context2.next=14;break;case 11:_context2.prev=11,_context2.t0=_context2.catch(1),console.log("[SEND] Error getting template",_context2.t0);case 14:case"end":return _context2.stop()}}),_callee2,this,[[1,11]])}))),function componentDidLoad(){return _componentDidLoad.apply(this,arguments)})},{key:"getLevelIcon",value:function getLevelIcon(level){return level<0?Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"level-icon",innerHTML:'<svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" tabindex="-1"><path d="M2 12C2 6.48 6.48 2 12 2s10 4.48 10 10-4.48 10-10 10S2 17.52 2 12zm10 6c3.31 0 6-2.69 6-6s-2.69-6-6-6-6 2.69-6 6 2.69 6 6 6z"></path></svg>'}):level>=this.levels.length?Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"level-icon",innerHTML:'<svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" tabindex="-1"><path d="m18 7-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41 6 19l1.41-1.41L1.83 12 .41 13.41z"></path></svg>'}):Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"level-icon",innerHTML:'<svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" tabindex="-1"><path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"></path></svg>'})}},{key:"handleSelectContact",value:function handleSelectContact(e,role){e.preventDefault(),this.recipientsAssigned[role.id]=Object.assign({},role,e.detail),this.showPickerForId=""}},{key:"handleClickRole",value:function handleClickRole(e,role){e.stopPropagation(),this.showPickerForId=role.id}},{key:"handleSend",value:function handleSend(e){var _a;e.stopPropagation(),null===(_a=this.send)||void 0===_a||_a.emit({recipientsAssigned:Object.values(this.recipientsAssigned)})}},{key:"handleCancel",value:function handleCancel(e){var _a;e.stopPropagation(),null===(_a=this.cancel)||void 0===_a||_a.emit()}},{key:"render",value:function render(){var _a,_b,_c,_this=this,roleNames=(null===(_b=null===(_a=this.template)||void 0===_a?void 0:_a.roles)||void 0===_b?void 0:_b.map((function(role){return role.name})))||[],allRecipientsAssigned=Object.values(this.recipientsAssigned).filter((function(recipient){return console.log("valid email",Object(_Validators_f110bae2_js__WEBPACK_IMPORTED_MODULE_32__.b)(recipient.email),recipient.email),console.log("valid phone",Object(_Validators_f110bae2_js__WEBPACK_IMPORTED_MODULE_32__.a)(recipient.phone),recipient.phone),Object(_Validators_f110bae2_js__WEBPACK_IMPORTED_MODULE_32__.b)(recipient.email)||Object(_Validators_f110bae2_js__WEBPACK_IMPORTED_MODULE_32__.a)(recipient.phone)})).length>=(null===(_c=this.template)||void 0===_c?void 0:_c.roles.length);return console.log("assigned",allRecipientsAssigned),Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.b,{class:{}},Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"recipients"},Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"left-line"}),Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"level level-start"},this.getLevelIcon(-1),Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"complete"},"Send Document")),this.levels.map((function(level){return Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"level level-"+level},_this.getLevelIcon(level),_this.rolesAtLevel[level].map((function(role){var _a,_b,_c;return Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"recipient",style:{backgroundColor:Object(_utils_cc6e4d41_js__WEBPACK_IMPORTED_MODULE_33__.b)(Object(_utils_cc6e4d41_js__WEBPACK_IMPORTED_MODULE_33__.a)(roleNames,role.name))},onClick:function onClick(e){return _this.handleClickRole(e,role)}},null!==(_b=null===(_a=_this.recipientsAssigned[role.id])||void 0===_a?void 0:_a.full_name)&&void 0!==_b?_b:role.name,Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"icon",innerHTML:'<svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" tabindex="-1"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"></path></svg>'}),_this.showPickerForId===role.id&&Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("verdocs-contact-picker",{onCancel:function onCancel(){return _this.showPickerForId=""},contactSuggestions:_this.sessionContacts,templateRole:null!==(_c=_this.recipientsAssigned[role.id])&&void 0!==_c?_c:role,onSearchContacts:function onSearchContacts(e){return console.log("Search",e.detail)},onContactSelected:function onContactSelected(e){return _this.handleSelectContact(e,role)}}))})))})),Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"level level-done"},this.getLevelIcon(this.levels.length),Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"complete"},"Document Complete"))),Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("div",{class:"buttons"},Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("verdocs-button",{label:"Cancel",size:"small",variant:"outline",onPress:function onPress(e){return _this.handleCancel(e)}}),Object(_index_bc9b2c82_js__WEBPACK_IMPORTED_MODULE_29__.f)("verdocs-button",{label:"Send",size:"small",disabled:!allRecipientsAssigned,onPress:function onPress(e){return _this.handleSend(e)}})))}}]),VerdocsSend}();VerdocsSend.style='verdocs-send{display:-ms-flexbox;display:flex;padding:10px;position:relative;background:#ffffff;-ms-flex-direction:column;flex-direction:column;font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif}verdocs-send .recipients{position:relative}verdocs-send .left-line{top:32px;left:20px;z-index:1;width:12px;bottom:30px;position:absolute;background:#ffffff;border-left:3px dotted #9b9b9b}verdocs-send .level{display:-ms-flexbox;display:flex;-webkit-column-gap:10px;-moz-column-gap:10px;column-gap:10px;margin-left:50px;position:relative;-ms-flex-direction:row;flex-direction:row;padding:8px 0 4px 0;border-bottom:1px solid #97979744}verdocs-send .level .level-icon{top:14px;z-index:2;left:-40px;width:24px;height:24px;position:absolute;background:#ffffff}verdocs-send .level .level-icon svg{fill:#00000089}verdocs-send .level .recipient{height:30px;display:-ms-flexbox;display:flex;-ms-flex:0 0 30px;flex:0 0 30px;color:#000000;cursor:pointer;font-size:14px;-ms-flex-align:center;align-items:center;border-radius:30px;-ms-flex-direction:row;flex-direction:row;background:#dddddd;white-space:nowrap;padding:2px 10px 2px 14px}verdocs-send .level .recipient .icon{width:22px;height:22px;-ms-flex:0 0 22px;flex:0 0 22px;margin:0 0 0 10px}verdocs-send .level .recipient .icon svg{width:22px;height:22px;fill:#333333;outline:none}verdocs-send .level .complete{-ms-flex:1;flex:1;height:30px;display:-ms-flexbox;display:flex;color:#000000;font-size:14px;-ms-flex-align:center;align-items:center;-ms-flex-direction:row;flex-direction:row;padding:3px 10px 3px 2px}verdocs-send .buttons{display:-ms-flexbox;display:flex;margin-top:10px;-webkit-column-gap:15px;-moz-column-gap:15px;column-gap:15px;-ms-flex-direction:row;flex-direction:row}verdocs-send verdocs-contact-picker{left:0;top:41px;z-index:10;position:absolute;border:1px solid #dddddd;-webkit-box-shadow:0 0 6px 3px rgba(0, 0, 0, 0.1);box-shadow:0 0 6px 3px rgba(0, 0, 0, 0.1)}'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL0B2ZXJkb2NzL2pzLXNkay9UZW1wbGF0ZXMvVGVtcGxhdGVzLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvQHZlcmRvY3MvanMtc2RrL1RlbXBsYXRlcy9WYWxpZGF0b3JzLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvQHZlcmRvY3MvanMtc2RrL1V0aWxzL0NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL0B2ZXJkb2NzL2pzLXNkay9VdGlscy9GaWVsZHMuanMiLCJ3ZWJwYWNrOi8vL3NyYy91dGlscy91dGlscy50cyIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvZW1iZWRzL3ZlcmRvY3Mtc2VuZC92ZXJkb2NzLXNlbmQuc2NzcyIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvZW1iZWRzL3ZlcmRvY3Mtc2VuZC92ZXJkb2NzLXNlbmQudHN4Il0sIm5hbWVzIjpbImdldFRlbXBsYXRlcyIsImVuZHBvaW50IiwicGFyYW1zIiwiYXBpIiwiZ2V0IiwidGhlbiIsInIiLCJkYXRhIiwiZ2V0VGVtcGxhdGUiLCJ0ZW1wbGF0ZUlkIiwiY29uY2F0IiwiRU1BSUxfUkVHRVgiLCJpc1ZhbGlkRW1haWwiLCJlbWFpbCIsInRlc3QiLCJQSE9ORV9SRUdFWCIsImlzVmFsaWRQaG9uZSIsInBob25lIiwiZ2V0UkdCQSIsInJvbGVJbmRleCIsInJlc2NhbGUiLCJuIiwiaW50ZWdlclNlcXVlbmNlIiwic3RhcnQiLCJjb3VudCIsIkFycmF5IiwiZmlsbCIsIm1hcCIsIl8iLCJpbmRleCIsImZ1bGxOYW1lVG9Jbml0aWFscyIsIm5hbWUiLCJzcGxpdCIsIndvcmQiLCJqb2luIiwic2V0Q29udHJvbFN0eWxlcyIsImVsIiwiZmllbGQiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJvcHRpb24iLCJzZXR0aW5ncyIsInNldHRpbmciLCJ4IiwieSIsIndpZHRoIiwiZGVmYXVsdFdpZHRoIiwidHlwZSIsImhlaWdodCIsImRlZmF1bHRIZWlnaHQiLCJvcHRpb25TZXR0aW5ncyIsInVuZGVmaW5lZCIsIm9wdGlvbnMiLCJfYSIsIl9iIiwiX2MiLCJfZCIsInN0eWxlIiwicG9zaXRpb24iLCJsZWZ0IiwiYm90dG9tIiwidHJhbnNmb3JtIiwiYmFja2dyb3VuZENvbG9yIiwiZ2V0RmllbGRJZCIsImdldEZpZWxkT3B0aW9uSWQiLCJyZW5kZXJEb2N1bWVudEZpZWxkIiwiZG9jUGFnZSIsImhhbmRsZUZpZWxkQ2hhbmdlIiwiZGlzYWJsZWQiLCJlZGl0YWJsZSIsImRyYWdnYWJsZSIsImNvbnRyb2xzRGl2IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNvbnRhaW5lcklkIiwiaWQiLCJleGlzdGluZ0ZpZWxkIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiYXBwZW5kQ2hpbGQiLCJmb3JFYWNoIiwiY2hlY2tib3hJbmRleCIsImNiRWwiLCJidXR0b25JbmRleCIsImNvbnNvbGUiLCJsb2ciLCJnZXRSb2xlSW5kZXgiLCJyb2xlcyIsInJvbGUiLCJpbmRleE9mIiwiZ2V0RmllbGRTZXR0aW5ncyIsInJlcXVpcmVkIiwicmVzdWx0IiwidmFsdWUiLCJWZXJkb2NzU2VuZCIsIlZlcmRvY3NFbmRwb2ludCIsImdldERlZmF1bHQiLCJ0ZW1wbGF0ZSIsInBkZlVybCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInJvbGVzQXRMZXZlbCIsInNob3dQaWNrZXJGb3JJZCIsInNlc3Npb25Db250YWN0cyIsInJlY2lwaWVudHNBc3NpZ25lZCIsImxldmVscyIsInRoaXMiLCJsb2FkU2Vzc2lvbiIsInNlc3Npb24iLCJwcm9maWxlIiwicHVzaCIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJsZXZlbCIsInNlcXVlbmNlIiwibGVuZ3RoIiwiT2JqZWN0Iiwia2V5cyIsImxldmVsU3RyIiwic29ydCIsImEiLCJiIiwiZ2V0TGV2ZWxJY29uIiwiaCIsImNsYXNzIiwiaW5uZXJIVE1MIiwiaGFuZGxlU2VsZWN0Q29udGFjdCIsInByZXZlbnREZWZhdWx0IiwiZGV0YWlsIiwiaGFuZGxlQ2xpY2tSb2xlIiwic3RvcFByb3BhZ2F0aW9uIiwiaGFuZGxlU2VuZCIsInNlbmQiLCJlbWl0IiwidmFsdWVzIiwiaGFuZGxlQ2FuY2VsIiwiY2FuY2VsIiwicmVuZGVyIiwicm9sZU5hbWVzIiwiYWxsUmVjaXBpZW50c0Fzc2lnbmVkIiwiZmlsdGVyIiwicmVjaXBpZW50IiwiSG9zdCIsIm9uQ2xpY2siLCJmdWxsX25hbWUiLCJvbkNhbmNlbCIsImNvbnRhY3RTdWdnZXN0aW9ucyIsInRlbXBsYXRlUm9sZSIsIm9uU2VhcmNoQ29udGFjdHMiLCJvbkNvbnRhY3RTZWxlY3RlZCIsImxhYmVsIiwic2l6ZSIsInZhcmlhbnQiLCJvblByZXNzIl0sIm1hcHBpbmdzIjoiO21LQUFBLGlLQXNEVSxJQUFDQSxhQUFlLFNBQWZBLGFBQXlCQyxTQUFVQyxRQUMxQyxPQUFPRCxTQUFTRSxJQUNYQyxJQUFJLGFBQWMsQ0FBRUYsT0FBUUEsU0FDNUJHLE1BQUssU0FBVUMsR0FBSyxPQUFPQSxFQUFFQyxJQUFPLEdBQzdDLEVBVVdDLFlBQWMsU0FBZEEsWUFBd0JQLFNBQVVRLFlBQ3pDLE9BQU9SLFNBQVNFLElBQ1hDLElBQUksY0FBY00sT0FBT0QsYUFDekJKLE1BQUssU0FBVUMsR0FBSyxPQUFPQSxFQUFFQyxJQUFPLEdBQzdDLEMsNEdDeEVBLGtLQW1CQSxJQUFJSSxZQUFjLHlKQUNQQyxhQUFlLFNBQWZBLGFBQXlCQyxPQUFTLFFBQVNBLE9BQVNGLFlBQVlHLEtBQUtELE1BQU8sRUFFbkZFLFlBQWMsNE1BQ1BDLGFBQWUsU0FBZkEsYUFBeUJDLE9BQVMsUUFBU0EsT0FBU0YsWUFBWUQsS0FBS0csTUFBTyxDLHUrQ0NPaEYsU0FBU0MsUUFBUUMsV0FDcEIsT0FBUUEsVUFBWSxJQUNoQixLQUFLLEVBQ0QsT0FBcUIsSUFBZEEsVUFBa0IseUJBQTJCLDJCQUN4RCxLQUFL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LGUsa0JEakNELHM2RCIsImZpbGUiOiIxNy5hNTBjNTU2YS5pZnJhbWUuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIFRlbXBsYXRlIGRlZmluZXMgaG93IGEgVmVyZG9jcyBzaWduaW5nIGZsb3cgd2lsbCBiZSBwZXJmb3JtZWQsIGluY2x1ZGluZyBhdHRhY2htZW50cywgc2lnbmluZyBmaWVsZHMsIGFuZFxuICogcmVjaXBpZW50cy5cbiAqXG4gKiBAbW9kdWxlXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG4vKipcbiAqIEdldCBhbGwgdGVtcGxhdGVzIGFjY2Vzc2libGUgYnkgdGhlIGNhbGxlciwgd2l0aCBvcHRpb25hbCBmaWx0ZXJzLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7VGVtcGxhdGVzfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvVGVtcGxhdGVzJztcbiAqXG4gKiBhd2FpdCBUZW1wbGF0ZXMuZ2V0VGVtcGxhdGVzKCk7XG4gKiBhd2FpdCBUZW1wbGF0ZXMuZ2V0VGVtcGxhdGVzKHsgaXNfc3RhcnJlZDogdHJ1ZSB9KTtcbiAqIGF3YWl0IFRlbXBsYXRlcy5nZXRUZW1wbGF0ZXMoeyBpc19jcmVhdG9yOiB0cnVlIH0pO1xuICogYXdhaXQgVGVtcGxhdGVzLmdldFRlbXBsYXRlcyh7IGlzX29yZ2FuaXphdGlvbjogdHJ1ZSB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgdmFyIGdldFRlbXBsYXRlcyA9IGZ1bmN0aW9uIChlbmRwb2ludCwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGVuZHBvaW50LmFwaSAvL1xuICAgICAgICAuZ2V0KCcvdGVtcGxhdGVzJywgeyBwYXJhbXM6IHBhcmFtcyB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KTtcbn07XG4vKipcbiAqIEdldCBvbmUgdGVtcGxhdGUgYnkgaXRzIElELlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7VGVtcGxhdGVzfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvVGVtcGxhdGVzJztcbiAqXG4gKiBjb25zdCB0ZW1wbGF0ZSA9IGF3YWl0IFRlbXBsYXRlcy5nZXRUZW1wbGF0ZSgnODNkYTNkNzAtNzg1Ny00MzkyLWI4NzYtYzQ1OTJhMzA0YmM5Jyk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBnZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uIChlbmRwb2ludCwgdGVtcGxhdGVJZCkge1xuICAgIHJldHVybiBlbmRwb2ludC5hcGkgLy9cbiAgICAgICAgLmdldChcIi90ZW1wbGF0ZXMvXCIuY29uY2F0KHRlbXBsYXRlSWQpKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KTtcbn07XG4vKipcbiAqIEdldCBvd25lciBpbmZvcm1hdGlvbiBmb3IgYSB0ZW1wbGF0ZS5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQge1RlbXBsYXRlc30gZnJvbSAnQHZlcmRvY3MvanMtc2RrL1RlbXBsYXRlcyc7XG4gKlxuICogY29uc3QgdGVtcGxhdGUgPSBhd2FpdCBUZW1wbGF0ZXMuZ2V0VGVtcGxhdGVPd25lckluZm8oJzgzZGEzZDcwLTc4NTctNDM5Mi1iODc2LWM0NTkyYTMwNGJjOScpO1xuICogYGBgXG4gKi9cbmV4cG9ydCB2YXIgZ2V0VGVtcGxhdGVPd25lckluZm8gPSBmdW5jdGlvbiAoZW5kcG9pbnQsIHRlbXBsYXRlSWQpIHtcbiAgICByZXR1cm4gZW5kcG9pbnQuYXBpIC8vXG4gICAgICAgIC5nZXQoXCIvdGVtcGxhdGVzL1wiLmNvbmNhdCh0ZW1wbGF0ZUlkKSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZGF0YTsgfSk7XG59O1xuLyoqXG4gKiBDcmVhdGUgYSB0ZW1wbGF0ZS5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQge1RlbXBsYXRlc30gZnJvbSAnQHZlcmRvY3MvanMtc2RrL1RlbXBsYXRlcyc7XG4gKlxuICogY29uc3QgbmV3VGVtcGxhdGUgPSBhd2FpdCBUZW1wbGF0ZXMuY3JlYXRlVGVtcGxhdGUoey4uLn0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCB2YXIgY3JlYXRlVGVtcGxhdGUgPSBmdW5jdGlvbiAoZW5kcG9pbnQsIHBhcmFtcykge1xuICAgIHJldHVybiBlbmRwb2ludC5hcGkgLy9cbiAgICAgICAgLnBvc3QoJy90ZW1wbGF0ZXMvJywgcGFyYW1zKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KTtcbn07XG4vKipcbiAqIFVwZGF0ZSBhIHRlbXBsYXRlLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7VGVtcGxhdGVzfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvVGVtcGxhdGVzJztcbiAqXG4gKiBjb25zdCB1cGRhdGVkVGVtcGxhdGUgPSBhd2FpdCBUZW1wbGF0ZXMudXBkYXRlVGVtcGxhdGUoJzgzZGEzZDcwLTc4NTctNDM5Mi1iODc2LWM0NTkyYTMwNGJjOScsIHsgbmFtZTogJ05ldyBOYW1lJyB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgdmFyIHVwZGF0ZVRlbXBsYXRlID0gZnVuY3Rpb24gKGVuZHBvaW50LCB0ZW1wbGF0ZUlkLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gZW5kcG9pbnQuYXBpIC8vXG4gICAgICAgIC5wdXQoXCIvdGVtcGxhdGVzL1wiLmNvbmNhdCh0ZW1wbGF0ZUlkKSwgcGFyYW1zKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KTtcbn07XG4vKipcbiAqIFNlYXJjaCBmb3IgdGVtcGxhdGVzIG1hdGNoaW5nIHZhcmlvdXMgY3JpdGVyaWEuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHtUZW1wbGF0ZXN9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9UZW1wbGF0ZXMnO1xuICpcbiAqIGNvbnN0IHtyZXN1bHQsIHBhZ2UsIHRvdGFsfSA9IGF3YWl0IFRlbXBsYXRlcy5zZWFyY2goeyAuLi4gfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBzZWFyY2hUZW1wbGF0ZXMgPSBmdW5jdGlvbiAoZW5kcG9pbnQsIHBhcmFtcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBlbmRwb2ludC5hcGkgLy9cbiAgICAgICAgICAgICAgICAucG9zdCgnL3RlbXBsYXRlcy9zZWFyY2gnLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZGF0YTsgfSldO1xuICAgIH0pO1xufSk7IH07XG4vKipcbiAqIEdldCBhIHN1bW1hcnkgb2YgdGVtcGxhdGUgZGF0YSwgdHlwaWNhbGx5IHVzZWQgdG8gcG9wdWxhdGUgYWRtaW4gcGFuZWwgZGFzaGJvYXJkIHBhZ2VzLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7VGVtcGxhdGVzfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvVGVtcGxhdGVzJztcbiAqXG4gKiBjb25zdCBzdW1tYXJ5ID0gYXdhaXQgVGVtcGxhdGVzLmdldFN1bW1hcnkoMCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBnZXRTdW1tYXJ5ID0gZnVuY3Rpb24gKGVuZHBvaW50LCBwYWdlKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVuZHBvaW50LmFwaSAvL1xuICAgICAgICAgICAgICAgIC5wb3N0KCcvdGVtcGxhdGVzL3N1bW1hcnknLCB7IHBhZ2U6IHBhZ2UgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocikgeyByZXR1cm4gci5kYXRhOyB9KV07XG4gICAgfSk7XG59KTsgfTtcbiIsIi8qKlxuICogR2V0IGFsbCBkZWZpbmVkIHZhbGlkYXRvcnNcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQge0RvY3VtZW50c30gZnJvbSAnQHZlcmRvY3MvanMtc2RrL1RlbXBsYXRlcyc7XG4gKlxuICogYXdhaXQgRG9jdW1lbnRzLmdldERvY3VtZW50cyh0ZW1wbGF0ZUlEKTtcbiAqIGBgYFxuICovXG5leHBvcnQgdmFyIGdldFZhbGlkYXRvcnMgPSBmdW5jdGlvbiAoZW5kcG9pbnQpIHtcbiAgICByZXR1cm4gZW5kcG9pbnQuYXBpIC8vXG4gICAgICAgIC5nZXQoJy92YWxpZGF0b3JzJylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZGF0YTsgfSk7XG59O1xuZXhwb3J0IHZhciBnZXRWYWxpZGF0b3IgPSBmdW5jdGlvbiAoZW5kcG9pbnQsIHZhbGlkYXRvck5hbWUpIHtcbiAgICByZXR1cm4gZW5kcG9pbnQuYXBpIC8vXG4gICAgICAgIC5nZXQoXCIvdmFsaWRhdG9ycy9cIi5jb25jYXQodmFsaWRhdG9yTmFtZSkpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmRhdGE7IH0pO1xufTtcbnZhciBFTUFJTF9SRUdFWCA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuZXhwb3J0IHZhciBpc1ZhbGlkRW1haWwgPSBmdW5jdGlvbiAoZW1haWwpIHsgcmV0dXJuICEhZW1haWwgJiYgRU1BSUxfUkVHRVgudGVzdChlbWFpbCk7IH07XG4vLyBAc2VlIGh0dHBzOi8vd3d3LnJlZ2V4dGVzdGVyLmNvbS8xOTc4XG52YXIgUEhPTkVfUkVHRVggPSAvKCg/OlxcK3wwMClbMTddKD86IHxcXC0pP3woPzpcXCt8MDApWzEtOV1cXGR7MCwyfSg/OiB8XFwtKT98KD86XFwrfDAwKTFcXC1cXGR7M30oPzogfFxcLSk/KT8oMFxcZHxcXChbMC05XXszfVxcKXxbMS05XXswLDN9KSg/OigoPzogfFxcLSlbMC05XXsyfSl7NH18KCg/OlswLTldezJ9KXs0fSl8KCg/OiB8XFwtKVswLTldezN9KD86IHxcXC0pWzAtOV17NH0pfChbMC05XXs3fSkpLztcbmV4cG9ydCB2YXIgaXNWYWxpZFBob25lID0gZnVuY3Rpb24gKHBob25lKSB7IHJldHVybiAhIXBob25lICYmIFBIT05FX1JFR0VYLnRlc3QocGhvbmUpOyB9O1xuZXhwb3J0IHZhciBpc1ZhbGlkUm9sZU5hbWUgPSBmdW5jdGlvbiAodmFsdWUsIHJvbGVzKSB7IHJldHVybiByb2xlcy5maW5kSW5kZXgoZnVuY3Rpb24gKHJvbGUpIHsgcmV0dXJuIHJvbGUubmFtZSA9PT0gdmFsdWU7IH0pICE9PSAtMTsgfTtcbnZhciBUYWdSZWdFeCA9IC9eW2EtekEtWjAtOS1dezAsMzJ9JC87XG5leHBvcnQgdmFyIGlzVmFsaWRUYWcgPSBmdW5jdGlvbiAodmFsdWUsIHRhZ3MpIHsgcmV0dXJuIFRhZ1JlZ0V4LnRlc3QodmFsdWUpIHx8IHRhZ3MuZmluZEluZGV4KGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHRhZy5uYW1lID09PSB2YWx1ZTsgfSkgIT09IC0xOyB9O1xuIiwiLyoqXG4gKiBHaXZlbiBhIGByZ2JhKHIsZyxiLGEpYCBzdHJpbmcgdmFsdWUsIHJldHVybnMgdGhlIGhleCBlcXVpdmFsZW50LCBkcm9wcGluZyB0aGUgYWxwaGEgY2hhbm5lbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJHQihyZ2JhKSB7XG4gICAgdmFyIHJnYk51bWJlcnMgPSByZ2JhLnJlcGxhY2UoJ3JnYmEoJywgJycpLnJlcGxhY2UoJyknLCAnJykuc3BsaXQoJywnKTtcbiAgICB2YXIgcmdiT2JqZWN0ID0ge1xuICAgICAgICByZWQ6ICtyZ2JOdW1iZXJzWzBdLFxuICAgICAgICBncmVlbjogK3JnYk51bWJlcnNbMV0sXG4gICAgICAgIGJsdWU6ICtyZ2JOdW1iZXJzWzJdLFxuICAgICAgICBhbHBoYTogK3JnYk51bWJlcnNbM10sXG4gICAgfTtcbiAgICB2YXIgYWxwaGEgPSAxIC0gcmdiT2JqZWN0LmFscGhhO1xuICAgIHZhciByZWQgPSBNYXRoLnJvdW5kKChyZ2JPYmplY3QuYWxwaGEgKiAocmdiT2JqZWN0LnJlZCAvIDI1NSkgKyBhbHBoYSkgKiAyNTUpO1xuICAgIHZhciBncmVlbiA9IE1hdGgucm91bmQoKHJnYk9iamVjdC5hbHBoYSAqIChyZ2JPYmplY3QuZ3JlZW4gLyAyNTUpICsgYWxwaGEpICogMjU1KTtcbiAgICB2YXIgYmx1ZSA9IE1hdGgucm91bmQoKHJnYk9iamVjdC5hbHBoYSAqIChyZ2JPYmplY3QuYmx1ZSAvIDI1NSkgKyBhbHBoYSkgKiAyNTUpO1xuICAgIHJldHVybiAnIycgKyByZ2JUb0hleChyZWQpICsgcmdiVG9IZXgoZ3JlZW4pICsgcmdiVG9IZXgoYmx1ZSk7XG59XG4vKipcbiAqIEdpdmVuIGFuIFJHQiBzdHJpbmcgdmFsdWUsIHJldHVybnMgdGhlIGhleCBlcXVpdmFsZW50LlxuICovXG5mdW5jdGlvbiByZ2JUb0hleChyZ2IpIHtcbiAgICB2YXIgaGV4ID0gcmdiLnRvU3RyaW5nKDE2KTtcbiAgICBpZiAoaGV4Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuICcwJyArIGhleDtcbiAgICB9XG4gICAgcmV0dXJuIGhleDtcbn1cbi8qKlxuICogR2l2ZW4gYSBzaWduZXIgcm9sZSBpbmRleCwgcmV0dXJuIHRoZSBjb2xvciBjb2RlIGZvciB0aGF0IHNpZ25lci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJHQkEocm9sZUluZGV4KSB7XG4gICAgc3dpdGNoIChyb2xlSW5kZXggJSAxMCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gcm9sZUluZGV4ID09PSAwID8gJ3JnYmEoMjU1LCAxOTMsIDcsIDAuNCknIDogJ3JnYmEoMTM0LCAxMzQsIDEzNCwgMC4zKSc7IC8vICNGRkU2OUNcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKDE1NiwgMzksIDE3NiwgLjQpJzsgLy8gJyNFM0MzRTknXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiAncmdiYSgzMywgMTUwLCAyNDMsIC40KSc7IC8vICcjQzFFMUZCJ1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gJ3JnYmEoMjIwLCAyMzEsIDExNywgMC4zKSc7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVybiAncmdiYSgxMjEsIDEzNCwgMjAzLCAwLjMpJztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKDc3LCAxODIsIDE3MiwgMC4zKSc7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHJldHVybiAncmdiYSgyNTUsIDIwMiwgMTY1LCAwLjMpJztcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKDIsIDI0NywgMTkwLCAwLjMpJztcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKDI1NSwgMTM4LCAxMDEsIDAuMyknO1xuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICByZXR1cm4gJ3JnYmEoODIsIDI1NSwgNzksIDAuMyknO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKDIyOSwgMTE1LCAxNTUsIDAuMyknO1xuICAgIH1cbn1cbi8qKlxuICogR2l2ZW4gYSByb2xlIG5hbWUsIHJldHVybiBhIGNvbG9yIGNvZGUgZm9yIGl0LiBUaGlzIHdvcmtzIGJ5IGNvbXB1dGluZyBhIGhhc2ggY29kZSBzbyB0aGUgc3BlY2lmaWMgY29sb3IgcmV0dXJuZWRcbiAqIGlzIG5vdCBzcGVjaWZpZWQgZXhwbGljaXRseSwgYnV0IHdpbGwgYmUgdGhlIHNhbWUgZm9yIGV2ZXJ5IGNhbGwgd2l0aCB0aGUgc2FtZSBpbnB1dCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVUb1JHQkEoc3RyKSB7XG4gICAgaWYgKCEhc3RyKSB7XG4gICAgICAgIHZhciB2YWxpZE51bSA9IHBhcnNlSW50KHN0ci5zbGljZSgtMSksIDEwKTtcbiAgICAgICAgaWYgKCFpc05hTih2YWxpZE51bSkpIHtcbiAgICAgICAgICAgIHN0ciArPSAodmFsaWROdW0gKiA5OSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFzaCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBoYXNoID0gc3RyLmNoYXJDb2RlQXQoaSkgKyAoKGhhc2ggPDwgNSkgLSBoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBoYXNoID0gTWF0aC5yb3VuZChoYXNoIC8gMS4zKTtcbiAgICAgICAgdmFyIGMgPSAoaGFzaCAmIDB4MDBmZmZmMDgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB2YXIgaGV4ID0gJyMnICsgJzAwMDAwJy5zdWJzdHJpbmcoMCwgNiAtIGMubGVuZ3RoKSArIGM7XG4gICAgICAgIHZhciByZXN1bHQgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KTtcbiAgICAgICAgdmFyIGNvbG9yID0ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksXG4gICAgICAgICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50KHJlc3VsdFszXSwgMTYpLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gXCJyZ2JhKFwiLmNvbmNhdChjb2xvci5yLCBcIiwgXCIpLmNvbmNhdChjb2xvci5nLCBcIiwgXCIpLmNvbmNhdChjb2xvci5iLCBcIiwgMC4yKVwiKTtcbiAgICB9XG59XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBvYnRhaW4gYSBjb2xvciBjb2RlIGdpdmVuIGEgcm9sZSBuYW1lIGdpdmVuIHZhcmlvdXMgcG9zc2libGUgaW5wdXRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um9sZUNvbG9yKG5hbWUsIHJvbGVzLCBpbmRleCkge1xuICAgIGlmIChpbmRleCkge1xuICAgICAgICByZXR1cm4gZ2V0UkdCQShpbmRleCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJvbGVzICYmIHJvbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHJvbGVJbmRleCA9IHJvbGVzLmZpbmRJbmRleChmdW5jdGlvbiAocm9sZSkgeyByZXR1cm4gcm9sZS5uYW1lID09PSBuYW1lOyB9KTtcbiAgICAgICAgaWYgKHJvbGVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gcm9sZXNbcm9sZUluZGV4XS5yZ2JhIHx8IGdldFJHQkEocm9sZUluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lVG9SR0JBKG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmFtZVRvUkdCQShuYW1lKTtcbiAgICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0UlRvcCh5LCBmaWVsZEhlaWdodCwgaVRleHRIZWlnaHQsIHlSYXRpbykge1xuICAgIHJldHVybiBpVGV4dEhlaWdodCAtICh5ICsgZmllbGRIZWlnaHQpICogeVJhdGlvO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFJMZWZ0KHgsIHJhdGlvKSB7XG4gICAgcmV0dXJuIHggKiByYXRpbztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRSVmFsdWUoeSwgcmF0aW8pIHtcbiAgICByZXR1cm4geSAqIHJhdGlvO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJsb2JUb0Jhc2U2NChpbWFnZSkge1xuICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmaWxlUmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbignUHJvYmxlbSByZWFkaW5nIGJsb2IuJykpO1xuICAgICAgICB9O1xuICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlc29sdmUoZmlsZVJlYWRlci5yZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoaW1hZ2UpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc2NhbGUociwgbikge1xuICAgIHJldHVybiByICogbjtcbn1cbiIsIi8vIFRoZXNlIHNob3VsZCBwcm9iYWJseSBhbGwgbW92ZSB0byBKUy1TREtcbmltcG9ydCB7cmVzY2FsZX0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL1V0aWxzL0ZpZWxkcyc7XG5pbXBvcnQge2dldFJHQkF9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9VdGlscy9Db2xvcnMnO1xuaW1wb3J0IHtJVGVtcGxhdGVGaWVsZH0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL1RlbXBsYXRlcy9UeXBlcyc7XG5pbXBvcnQge0lEb2N1bWVudEZpZWxkfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvRG9jdW1lbnRzL1R5cGVzJztcbmltcG9ydCB7SURvY3VtZW50UGFnZUluZm99IGZyb20gJy4vVHlwZXMnO1xuXG5leHBvcnQgY29uc3QgaW50ZWdlclNlcXVlbmNlID0gKHN0YXJ0OiBudW1iZXIsIGNvdW50OiBudW1iZXIpOiBudW1iZXJbXSA9PlxuICBBcnJheShjb3VudClcbiAgICAuZmlsbCgxKVxuICAgIC5tYXAoKF8sIGluZGV4KSA9PiBpbmRleCArIHN0YXJ0KTtcblxuZXhwb3J0IGNvbnN0IGZ1bGxOYW1lVG9Jbml0aWFscyA9IChuYW1lOiBzdHJpbmcpID0+XG4gIG5hbWVcbiAgICAuc3BsaXQoJyAnKVxuICAgIC5tYXAod29yZCA9PiB3b3JkWzBdKVxuICAgIC5qb2luKCcnKTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRXaWR0aCA9IChmaWVsZDogSVRlbXBsYXRlRmllbGQgfCBJRG9jdW1lbnRGaWVsZCkgPT4ge1xuICBzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcbiAgICBjYXNlICdhdHRhY2htZW50JzpcbiAgICBjYXNlICdwYXltZW50JzpcbiAgICAgIHJldHVybiAyNDtcbiAgICBjYXNlICdjaGVja2JveCc6XG4gICAgY2FzZSAnY2hlY2tib3hfZ3JvdXAnOlxuICAgIGNhc2UgJ3JhZGlvX2J1dHRvbl9ncm91cCc6XG4gICAgICByZXR1cm4gMTQ7XG4gICAgY2FzZSAnc2lnbmF0dXJlJzpcbiAgICBjYXNlICdpbml0aWFsJzpcbiAgICAgIHJldHVybiA4MjtcbiAgfVxuXG4gIHJldHVybiAxNTA7XG59O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEhlaWdodCA9IChmaWVsZDogSVRlbXBsYXRlRmllbGQgfCBJRG9jdW1lbnRGaWVsZCkgPT4ge1xuICBzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcbiAgICBjYXNlICdhdHRhY2htZW50JzpcbiAgICBjYXNlICdwYXltZW50JzpcbiAgICAgIHJldHVybiAyNDtcbiAgICBjYXNlICdjaGVja2JveCc6XG4gICAgY2FzZSAnY2hlY2tib3hfZ3JvdXAnOlxuICAgIGNhc2UgJ3JhZGlvX2J1dHRvbl9ncm91cCc6XG4gICAgICByZXR1cm4gMTQ7XG4gICAgY2FzZSAnc2lnbmF0dXJlJzpcbiAgICBjYXNlICdpbml0aWFsJzpcbiAgICAgIHJldHVybiA0MTtcbiAgfVxuXG4gIHJldHVybiA1MDtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRDb250cm9sU3R5bGVzID0gKGVsOiBIVE1MRWxlbWVudCwgZmllbGQ6IElUZW1wbGF0ZUZpZWxkIHwgSURvY3VtZW50RmllbGQsIHhTY2FsZTogbnVtYmVyLCB5U2NhbGU6IG51bWJlciwgcm9sZUluZGV4OiBudW1iZXIsIG9wdGlvbj86IG51bWJlcikgPT4ge1xuICBjb25zdCBzZXR0aW5ncyA9IChmaWVsZCBhcyBJVGVtcGxhdGVGaWVsZCkuc2V0dGluZyB8fCAoZmllbGQgYXMgSURvY3VtZW50RmllbGQpLnNldHRpbmdzO1xuICBsZXQge3ggPSAwLCB5ID0gMCwgd2lkdGggPSBkZWZhdWx0V2lkdGgoZmllbGQpLCBoZWlnaHQgPSBkZWZhdWx0SGVpZ2h0KGZpZWxkKX0gPSBzZXR0aW5ncztcblxuICBjb25zdCBvcHRpb25TZXR0aW5ncyA9IG9wdGlvbiAhPT0gdW5kZWZpbmVkICYmIHNldHRpbmdzLm9wdGlvbnNbb3B0aW9uXSA/IHNldHRpbmdzLm9wdGlvbnNbb3B0aW9uXSA6IG51bGw7XG4gIGlmIChvcHRpb25TZXR0aW5ncykge1xuICAgIHggPSBvcHRpb25TZXR0aW5ncy54ID8/IHg7XG4gICAgeSA9IG9wdGlvblNldHRpbmdzLnkgPz8geTtcbiAgICB3aWR0aCA9IG9wdGlvblNldHRpbmdzLndpZHRoID8/IHdpZHRoO1xuICAgIGhlaWdodCA9IG9wdGlvblNldHRpbmdzLmhlaWdodCA/PyBoZWlnaHQ7XG4gIH1cblxuICBlbC5zdHlsZS53aWR0aCA9IGAke3dpZHRofXB4YDtcbiAgZWwuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDtcbiAgZWwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICBlbC5zdHlsZS5sZWZ0ID0gYCR7cmVzY2FsZSh4U2NhbGUsIHgpfXB4YDtcbiAgZWwuc3R5bGUuYm90dG9tID0gYCR7cmVzY2FsZSh5U2NhbGUsIHkpfXB4YDtcbiAgZWwuc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlKCR7eFNjYWxlfSwgJHt5U2NhbGV9KWA7XG4gIGVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGZpZWxkWydyZ2JhJ10gfHwgZ2V0UkdCQShyb2xlSW5kZXgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEZpZWxkSWQgPSAoZmllbGQ6IElUZW1wbGF0ZUZpZWxkIHwgSURvY3VtZW50RmllbGQpID0+IHtcbiAgcmV0dXJuIGB2ZXJkb2NzLWRvYy1mbGQtJHtmaWVsZC5uYW1lfWA7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RmllbGRPcHRpb25JZCA9IChmaWVsZDogSVRlbXBsYXRlRmllbGQsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIGB2ZXJkb2NzLWRvYy1mbGQtJHtmaWVsZC5uYW1lfS0ke2luZGV4fWA7XG59O1xuXG5leHBvcnQgY29uc3QgcmVuZGVyRG9jdW1lbnRGaWVsZCA9IChcbiAgZmllbGQ6IElUZW1wbGF0ZUZpZWxkLFxuICBkb2NQYWdlOiBJRG9jdW1lbnRQYWdlSW5mbyxcbiAgcm9sZUluZGV4OiBudW1iZXIsXG4gIGhhbmRsZUZpZWxkQ2hhbmdlOiAoZmllbGQ6IElUZW1wbGF0ZUZpZWxkLCBlOiBhbnksIG9wdGlvbklkPzogc3RyaW5nKSA9PiB2b2lkLFxuICBkaXNhYmxlZDogYm9vbGVhbixcbiAgZWRpdGFibGU6IGJvb2xlYW4gPSBmYWxzZSxcbiAgZHJhZ2dhYmxlOiBib29sZWFuID0gZmFsc2UsXG4pID0+IHtcbiAgY29uc3QgY29udHJvbHNEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkb2NQYWdlLmNvbnRhaW5lcklkICsgJy1jb250cm9scycpO1xuICBpZiAoIWNvbnRyb2xzRGl2KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgY2FzZSAnYXR0YWNobWVudCc6XG4gICAgY2FzZSAnZGF0ZSc6XG4gICAgY2FzZSAnZHJvcGRvd24nOlxuICAgIGNhc2UgJ2luaXRpYWwnOlxuICAgIGNhc2UgJ3BheW1lbnQnOlxuICAgIGNhc2UgJ3NpZ25hdHVyZSc6XG4gICAgY2FzZSAndGltZXN0YW1wJzpcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgY2FzZSAndGV4dGJveCc6XG4gICAgICB7XG4gICAgICAgIGNvbnN0IGlkID0gZ2V0RmllbGRJZChmaWVsZCk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgIGlmIChleGlzdGluZ0ZpZWxkKSB7XG4gICAgICAgICAgc2V0Q29udHJvbFN0eWxlcyhleGlzdGluZ0ZpZWxkLCBmaWVsZCwgZG9jUGFnZS54U2NhbGUsIGRvY1BhZ2UueVNjYWxlLCByb2xlSW5kZXgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVsOiBhbnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGB2ZXJkb2NzLWZpZWxkLSR7ZmllbGQudHlwZX1gKTtcbiAgICAgICAgZWwuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlZGl0YWJsZSkge1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZWRpdGFibGUnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZHJhZ2dhYmxlKSB7XG4gICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdmaWVsZENoYW5nZScsIGUgPT4gaGFuZGxlRmllbGRDaGFuZ2UoZmllbGQsIGUpKTtcbiAgICAgICAgc2V0Q29udHJvbFN0eWxlcyhlbCwgZmllbGQsIGRvY1BhZ2UueFNjYWxlLCBkb2NQYWdlLnlTY2FsZSwgcm9sZUluZGV4KTtcbiAgICAgICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQoZWwpO1xuXG4gICAgICAgIHJldHVybiBlbDtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2NoZWNrYm94X2dyb3VwJzpcbiAgICAgIGZpZWxkLnNldHRpbmcub3B0aW9ucy5mb3JFYWNoKChfLCBjaGVja2JveEluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gZ2V0RmllbGRPcHRpb25JZChmaWVsZCwgY2hlY2tib3hJbmRleCk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgIGlmIChleGlzdGluZ0ZpZWxkKSB7XG4gICAgICAgICAgc2V0Q29udHJvbFN0eWxlcyhleGlzdGluZ0ZpZWxkLCBmaWVsZCwgZG9jUGFnZS54U2NhbGUsIGRvY1BhZ2UueVNjYWxlLCByb2xlSW5kZXgsIGNoZWNrYm94SW5kZXgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNiRWw6IGFueSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYHZlcmRvY3MtZmllbGQtY2hlY2tib3hgKTtcbiAgICAgICAgY2JFbC5maWVsZCA9IGZpZWxkO1xuICAgICAgICBjYkVsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICAgIGNiRWwuc2V0QXR0cmlidXRlKCdvcHRpb24nLCBjaGVja2JveEluZGV4KTtcbiAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgY2JFbC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2JFbC5hZGRFdmVudExpc3RlbmVyKCdmaWVsZENoYW5nZScsIGUgPT4gaGFuZGxlRmllbGRDaGFuZ2UoZmllbGQsIGUpKTtcbiAgICAgICAgc2V0Q29udHJvbFN0eWxlcyhjYkVsLCBmaWVsZCwgZG9jUGFnZS54U2NhbGUsIGRvY1BhZ2UueVNjYWxlLCByb2xlSW5kZXgsIGNoZWNrYm94SW5kZXgpO1xuICAgICAgICBjb250cm9sc0Rpdi5hcHBlbmRDaGlsZChjYkVsKTtcblxuICAgICAgICByZXR1cm4gY2JFbDtcbiAgICAgIH0pO1xuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3JhZGlvX2J1dHRvbl9ncm91cCc6XG4gICAgICBmaWVsZC5zZXR0aW5nLm9wdGlvbnMuZm9yRWFjaCgoXywgYnV0dG9uSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBnZXRGaWVsZE9wdGlvbklkKGZpZWxkLCBidXR0b25JbmRleCk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgIGlmIChleGlzdGluZ0ZpZWxkKSB7XG4gICAgICAgICAgc2V0Q29udHJvbFN0eWxlcyhleGlzdGluZ0ZpZWxkLCBmaWVsZCwgZG9jUGFnZS54U2NhbGUsIGRvY1BhZ2UueVNjYWxlLCByb2xlSW5kZXgsIGJ1dHRvbkluZGV4KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYkVsOiBhbnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGB2ZXJkb2NzLWZpZWxkLXJhZGlvLWJ1dHRvbmApO1xuICAgICAgICBjYkVsLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIGNiRWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgY2JFbC5zZXRBdHRyaWJ1dGUoJ29wdGlvbicsIGJ1dHRvbkluZGV4KTtcbiAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgY2JFbC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2JFbC5hZGRFdmVudExpc3RlbmVyKCdmaWVsZENoYW5nZScsIGUgPT4gaGFuZGxlRmllbGRDaGFuZ2UoZmllbGQsIGUpKTtcbiAgICAgICAgc2V0Q29udHJvbFN0eWxlcyhjYkVsLCBmaWVsZCwgZG9jUGFnZS54U2NhbGUsIGRvY1BhZ2UueVNjYWxlLCByb2xlSW5kZXgsIGJ1dHRvbkluZGV4KTtcbiAgICAgICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQoY2JFbCk7XG5cbiAgICAgICAgcmV0dXJuIGNiRWw7XG4gICAgICB9KTtcblxuICAgICAgYnJlYWs7XG5cbiAgICAvLyBjYXNlICdhdHRhY2htZW50JzpcbiAgICAvLyAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmVyZG9jcy1maWVsZC1hdHRhY2htZW50Jyk7XG4gICAgLy8gICBlbC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgcmVzdWx0IHx8ICcnKTtcbiAgICAvLyAgIGJyZWFrO1xuICAgIC8vIGNhc2UgJ3BheW1lbnQnOlxuICAgIC8vICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2ZXJkb2NzLWZpZWxkLXBheW1lbnQnKTtcbiAgICAvLyAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zb2xlLmxvZygnW1BSRVZJRVddIFNraXBwaW5nIHVuc3VwcG9ydGVkIGZpZWxkIHR5cGUnLCBmaWVsZCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldFJvbGVJbmRleCA9IChyb2xlczogc3RyaW5nW10sIHJvbGU6IHN0cmluZykgPT4gcm9sZXMuaW5kZXhPZihyb2xlKSB8fCAwO1xuXG4vLyBUT0RPOiBXZSBjYW4gY2xlYW4gdGhpcyB1cCBhIGxvdCBpZiB3ZSBhbHRlciB0aGUgQVBJIHRvIGVtaXQgYm90aCBzZXR0aW5nIGFuZCBzZXR0aW5ncyByZWdhcmRsZXNzIG9mIHRoZSBzb3VyY2UgdHlwZSxcbi8vICAgYnV0IHRoZW4gbWVyZ2UgdGhlIFNESyB0eXBlcyB0byBlbmNvdXJhZ2UgZGV2ZWxvcGVycyB0byB1c2UganVzdCBgc2V0dGluZ3NgLlxuZXhwb3J0IGNvbnN0IGdldEZpZWxkU2V0dGluZ3MgPSAoZmllbGQ6IElUZW1wbGF0ZUZpZWxkIHwgSURvY3VtZW50RmllbGQpID0+IHtcbiAgaWYgKChmaWVsZCBhcyBJVGVtcGxhdGVGaWVsZCkuc2V0dGluZykge1xuICAgIHJldHVybiAoZmllbGQgYXMgSVRlbXBsYXRlRmllbGQpLnNldHRpbmc7XG4gIH1cblxuICBpZiAoKGZpZWxkIGFzIElEb2N1bWVudEZpZWxkKS5zZXR0aW5ncykge1xuICAgIHJldHVybiAoZmllbGQgYXMgSURvY3VtZW50RmllbGQpLnNldHRpbmdzO1xuICB9XG5cbiAgcmV0dXJuIHt4OiAwLCB5OiAwLCByZXF1aXJlZDogZmFsc2UsIGRpc2FibGVkOiBmYWxzZSwgcmVzdWx0OiAnJywgdmFsdWU6ICcnfTtcbn07XG4iLCJAaW1wb3J0ICcuLi8uLi8uLi90aGVtZS5zY3NzJztcblxudmVyZG9jcy1zZW5kIHtcbiAgZGlzcGxheTogZmxleDtcbiAgcGFkZGluZzogMTBweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBmb250LWZhbWlseTogJHZlcmRvY3MtcHJpbWFyeS1mb250O1xuXG4gIC5yZWNpcGllbnRzIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cblxuICAvLyBUbyBhdm9pZCB0aGUgbmVlZCB0byBjb21wdXRlIHRoaW5ncyBsaWtlIGhlaWdodHMsIHRoaXMgbGF5ZXIgaXMgc2ltcGx5IGRpc3BsYXllZCBcIm9uIHRvcFwiIG9mIGFsbCB0aGUgbGV2ZWwgcm93cy4gSXRzXG4gIC8vIGJhY2tncm91bmQgb2JzY3VyZXMgdGhlIGhvcml6b250YWwgbGluZXMuXG4gIC5sZWZ0LWxpbmUge1xuICAgIHRvcDogMzJweDtcbiAgICBsZWZ0OiAyMHB4O1xuICAgIHotaW5kZXg6IDE7XG4gICAgd2lkdGg6IDEycHg7XG4gICAgYm90dG9tOiAzMHB4O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xuICAgIGJvcmRlci1sZWZ0OiAzcHggZG90dGVkICM5YjliOWI7XG4gIH1cblxuICAubGV2ZWwge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgY29sdW1uLWdhcDogMTBweDtcbiAgICBtYXJnaW4tbGVmdDogNTBweDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBwYWRkaW5nOiA4cHggMCA0cHggMDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzk3OTc5NzQ0O1xuXG4gICAgLmxldmVsLWljb24ge1xuICAgICAgdG9wOiAxNHB4O1xuICAgICAgei1pbmRleDogMjtcbiAgICAgIGxlZnQ6IC00MHB4O1xuICAgICAgd2lkdGg6IDI0cHg7XG4gICAgICBoZWlnaHQ6IDI0cHg7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xuXG4gICAgICBzdmcge1xuICAgICAgICBmaWxsOiAjMDAwMDAwODk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLnJlY2lwaWVudCB7XG4gICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleDogMCAwIDMwcHg7XG4gICAgICBjb2xvcjogIzAwMDAwMDtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBib3JkZXItcmFkaXVzOiAzMHB4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICAgIGJhY2tncm91bmQ6ICNkZGRkZGQ7XG4gICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgcGFkZGluZzogMnB4IDEwcHggMnB4IDE0cHg7XG5cbiAgICAgIC5pY29uIHtcbiAgICAgICAgd2lkdGg6IDIycHg7XG4gICAgICAgIGhlaWdodDogMjJweDtcbiAgICAgICAgZmxleDogMCAwIDIycHg7XG4gICAgICAgIG1hcmdpbjogMCAwIDAgMTBweDtcblxuICAgICAgICBzdmcge1xuICAgICAgICAgIHdpZHRoOiAyMnB4O1xuICAgICAgICAgIGhlaWdodDogMjJweDtcbiAgICAgICAgICBmaWxsOiAjMzMzMzMzO1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAuY29tcGxldGUge1xuICAgICAgZmxleDogMTtcbiAgICAgIGhlaWdodDogMzBweDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBjb2xvcjogIzAwMDAwMDtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgcGFkZGluZzogM3B4IDEwcHggM3B4IDJweDtcbiAgICB9XG4gIH1cblxuICAuYnV0dG9ucyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIGNvbHVtbi1nYXA6IDE1cHg7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgfVxuXG4gIHZlcmRvY3MtY29udGFjdC1waWNrZXIge1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiA0MXB4O1xuICAgIHotaW5kZXg6IDEwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkZGRkO1xuICAgIGJveC1zaGFkb3c6IDAgMCA2cHggM3B4IHJnYigwIDAgMCAvIDEwJSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VmVyZG9jc0VuZHBvaW50fSBmcm9tICdAdmVyZG9jcy9qcy1zZGsnO1xuaW1wb3J0IHtnZXRSR0JBfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvVXRpbHMvQ29sb3JzJztcbmltcG9ydCB7Z2V0VGVtcGxhdGV9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9UZW1wbGF0ZXMvVGVtcGxhdGVzJztcbmltcG9ydCB7SVJvbGUsIElUZW1wbGF0ZX0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL1RlbXBsYXRlcy9UeXBlcyc7XG5pbXBvcnQge2lzVmFsaWRFbWFpbCwgaXNWYWxpZFBob25lfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvVGVtcGxhdGVzL1ZhbGlkYXRvcnMnO1xuaW1wb3J0IHtDb21wb25lbnQsIFByb3AsIFN0YXRlLCBoLCBFdmVudCwgRXZlbnRFbWl0dGVyLCBIb3N0fSBmcm9tICdAc3RlbmNpbC9jb3JlJztcbmltcG9ydCB7Z2V0Um9sZUluZGV4fSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQge1NES0Vycm9yfSBmcm9tICcuLi8uLi8uLi91dGlscy9lcnJvcnMnO1xuXG4vLyBUT0RPOiBFdmFsdWF0aW5nIHRoaXMgcGF0dGVybiBmb3Igc2ltcGxlIGljb25zIHZzLiBpbXBvcnRpbmcgZXh0ZXJuYWwgU1ZHIGZpbGVzLiBUcnkgdG8gc3RhbmRhcmRpemUgb24gYW4gYXBwcm9hY2ggc29vbi5cbmNvbnN0IGVkaXRJY29uID1cbiAgJzxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBhcmlhLWhpZGRlbj1cInRydWVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgdGFiaW5kZXg9XCItMVwiPjxwYXRoIGQ9XCJNMyAxNy4yNVYyMWgzLjc1TDE3LjgxIDkuOTRsLTMuNzUtMy43NUwzIDE3LjI1ek0yMC43MSA3LjA0Yy4zOS0uMzkuMzktMS4wMiAwLTEuNDFsLTIuMzQtMi4zNGEuOTk1OS45OTU5IDAgMCAwLTEuNDEgMGwtMS44MyAxLjgzIDMuNzUgMy43NSAxLjgzLTEuODN6XCI+PC9wYXRoPjwvc3ZnPic7XG5cbmNvbnN0IHN0YXJ0SWNvbiA9XG4gICc8c3ZnIGZvY3VzYWJsZT1cImZhbHNlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHRhYmluZGV4PVwiLTFcIj48cGF0aCBkPVwiTTIgMTJDMiA2LjQ4IDYuNDggMiAxMiAyczEwIDQuNDggMTAgMTAtNC40OCAxMC0xMCAxMFMyIDE3LjUyIDIgMTJ6bTEwIDZjMy4zMSAwIDYtMi42OSA2LTZzLTIuNjktNi02LTYtNiAyLjY5LTYgNiAyLjY5IDYgNiA2elwiPjwvcGF0aD48L3N2Zz4nO1xuXG5jb25zdCBzdGVwSWNvbiA9XG4gICc8c3ZnIGZvY3VzYWJsZT1cImZhbHNlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHRhYmluZGV4PVwiLTFcIj48cGF0aCBkPVwiTTEyIDJDOC4xMyAyIDUgNS4xMyA1IDljMCA1LjI1IDcgMTMgNyAxM3M3LTcuNzUgNy0xM2MwLTMuODctMy4xMy03LTctN3ptMCA5LjVjLTEuMzggMC0yLjUtMS4xMi0yLjUtMi41czEuMTItMi41IDIuNS0yLjUgMi41IDEuMTIgMi41IDIuNS0xLjEyIDIuNS0yLjUgMi41elwiPjwvcGF0aD48L3N2Zz4nO1xuXG5jb25zdCBkb25lSWNvbiA9XG4gICc8c3ZnIGZvY3VzYWJsZT1cImZhbHNlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHRhYmluZGV4PVwiLTFcIj48cGF0aCBkPVwibTE4IDctMS40MS0xLjQxLTYuMzQgNi4zNCAxLjQxIDEuNDFMMTggN3ptNC4yNC0xLjQxTDExLjY2IDE2LjE3IDcuNDggMTJsLTEuNDEgMS40MUwxMS42NiAxOWwxMi0xMi0xLjQyLTEuNDF6TS40MSAxMy40MSA2IDE5bDEuNDEtMS40MUwxLjgzIDEyIC40MSAxMy40MXpcIj48L3BhdGg+PC9zdmc+JztcblxudHlwZSBUQW5ub3RhdGVkUm9sZSA9IElSb2xlICYge2lkOiBzdHJpbmd9O1xuXG4vKipcbiAqIERpc3BsYXkgYSBmb3JtIHRvIGNvbGxlY3QgcmVjaXBpZW50IGluZm9ybWF0aW9uIGZvciBhIG5ldyBEb2N1bWVudC4gSWYgdXNlZCBhbm9ueW1vdXNseSwgdGhlIHNwZWNpZmllZCBgdGVtcGxhdGVJZGAgbXVzdCBiZSBwdWJsaWMuXG4gKiBJZiB0aGUgdXNlciBpcyBhdXRoZW50aWNhdGVkXG4gKi9cbkBDb21wb25lbnQoe1xuICB0YWc6ICd2ZXJkb2NzLXNlbmQnLFxuICBzdHlsZVVybDogJ3ZlcmRvY3Mtc2VuZC5zY3NzJyxcbiAgc2hhZG93OiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgVmVyZG9jc1NlbmQge1xuICAvKipcbiAgICogVGhlIGVuZHBvaW50IHRvIHVzZSB0byBjb21tdW5pY2F0ZSB3aXRoIFZlcmRvY3MuIElmIG5vdCBzZXQsIHRoZSBkZWZhdWx0IGVuZHBvaW50IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIEBQcm9wKCkgZW5kcG9pbnQ6IFZlcmRvY3NFbmRwb2ludCA9IFZlcmRvY3NFbmRwb2ludC5nZXREZWZhdWx0KCk7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdGVtcGxhdGUgdG8gY3JlYXRlIHRoZSBkb2N1bWVudCBmcm9tLlxuICAgKi9cbiAgQFByb3AoKSB0ZW1wbGF0ZUlkOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICogVGhlIHVzZXIgY29tcGxldGVkIHRoZSBmb3JtIGFuZCBjbGlja2VkIHNlbmQuXG4gICAqL1xuICBARXZlbnQoe2NvbXBvc2VkOiB0cnVlfSkgc2VuZDogRXZlbnRFbWl0dGVyPHtyZWNpcGllbnRzQXNzaWduZWQ6IElSb2xlW119PjtcblxuICAvKipcbiAgICogVGhlIHVzZXIgY2FuY2VsZWQgdGhlIHByb2Nlc3MuXG4gICAqL1xuICBARXZlbnQoe2NvbXBvc2VkOiB0cnVlfSkgY2FuY2VsOiBFdmVudEVtaXR0ZXI7XG5cbiAgLyoqXG4gICAqIEV2ZW50IGZpcmVkIGlmIGFuIGVycm9yIG9jY3Vycy4gVGhlIGV2ZW50IGRldGFpbHMgd2lsbCBjb250YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlcnJvci4gTW9zdCBlcnJvcnMgd2lsbFxuICAgKiB0ZXJtaW5hdGUgdGhlIHByb2Nlc3MsIGFuZCB0aGUgY2FsbGluZyBhcHBsaWNhdGlvbiBzaG91bGQgY29ycmVjdCB0aGUgY29uZGl0aW9uIGFuZCByZS1yZW5kZXIgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIEBFdmVudCh7Y29tcG9zZWQ6IHRydWV9KSBzZGtFcnJvcjogRXZlbnRFbWl0dGVyPFNES0Vycm9yPjtcblxuICBAU3RhdGUoKSB0ZW1wbGF0ZTogSVRlbXBsYXRlIHwgbnVsbCA9IG51bGw7XG5cbiAgQFN0YXRlKCkgcGRmVXJsID0gbnVsbDtcblxuICBAU3RhdGUoKSBjb250YWluZXJJZCA9IGB2ZXJkb2NzLXNlbmQtJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTEpfWA7XG5cbiAgQFN0YXRlKCkgcm9sZXNBdExldmVsOiBSZWNvcmQ8bnVtYmVyLCBUQW5ub3RhdGVkUm9sZVtdPiA9IHt9O1xuXG4gIEBTdGF0ZSgpIHNob3dQaWNrZXJGb3JJZCA9ICcnO1xuXG4gIEBTdGF0ZSgpIHNlc3Npb25Db250YWN0cyA9IFtdO1xuXG4gIEBTdGF0ZSgpIHJlY2lwaWVudHNBc3NpZ25lZDogUmVjb3JkPHN0cmluZywgVEFubm90YXRlZFJvbGU+ID0ge307XG5cbiAgbGV2ZWxzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHRoaXMuc2Vzc2lvbkNvbnRhY3RzID0gW107XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZW5kcG9pbnQubG9hZFNlc3Npb24oKTtcblxuICAgICAgaWYgKHJlc3VsdC5zZXNzaW9uPy5wcm9maWxlKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbkNvbnRhY3RzLnB1c2goe1xuICAgICAgICAgIGlkOiByZXN1bHQuc2Vzc2lvbi5wcm9maWxlLmlkLFxuICAgICAgICAgIG5hbWU6IGAke3Jlc3VsdC5zZXNzaW9uLnByb2ZpbGUuZmlyc3RfbmFtZX0gJHtyZXN1bHQuc2Vzc2lvbi5wcm9maWxlLmxhc3RfbmFtZX1gLFxuICAgICAgICAgIGVtYWlsOiByZXN1bHQuc2Vzc2lvbi5wcm9maWxlLmVtYWlsLFxuICAgICAgICAgIHBob25lOiByZXN1bHQuc2Vzc2lvbi5wcm9maWxlLnBob25lLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZygnRXJyb3IgbG9hZGluZyBzZXNzaW9uJywgZSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZygnW1NFTkRdIFNob3dpbmcgdGVtcGxhdGUnLCB0aGlzLnRlbXBsYXRlSWQpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKGBbU0VORF0gTG9hZGluZyB0ZW1wbGF0ZSAke3RoaXMudGVtcGxhdGVJZH1gKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gYXdhaXQgZ2V0VGVtcGxhdGUodGhpcy5lbmRwb2ludCwgdGhpcy50ZW1wbGF0ZUlkKTtcblxuICAgICAgY29uc29sZS5sb2coJ1tTRU5EXSBHb3QgdGVtcGxhdGUnLCB0ZW1wbGF0ZSk7XG4gICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG5cbiAgICAgIGlmICh0ZW1wbGF0ZT8ucm9sZXMpIHtcbiAgICAgICAgY29uc3Qgcm9sZXNBdExldmVsOiBSZWNvcmQ8bnVtYmVyLCBUQW5ub3RhdGVkUm9sZVtdPiA9IHt9O1xuXG4gICAgICAgIHRlbXBsYXRlLnJvbGVzLmZvckVhY2gocm9sZSA9PiB7XG4gICAgICAgICAgY29uc3QgbGV2ZWwgPSByb2xlLnNlcXVlbmNlIC0gMTtcbiAgICAgICAgICByb2xlc0F0TGV2ZWxbbGV2ZWxdIHx8PSBbXTtcbiAgICAgICAgICBjb25zdCBpZCA9IGByLSR7bGV2ZWx9LSR7cm9sZXNBdExldmVsW2xldmVsXS5sZW5ndGh9YDtcbiAgICAgICAgICByb2xlc0F0TGV2ZWxbbGV2ZWxdLnB1c2goey4uLnJvbGUsIGlkfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucm9sZXNBdExldmVsID0gcm9sZXNBdExldmVsO1xuICAgICAgICB0aGlzLmxldmVscyA9IE9iamVjdC5rZXlzKHJvbGVzQXRMZXZlbCkubWFwKGxldmVsU3RyID0+ICtsZXZlbFN0cik7XG4gICAgICAgIHRoaXMubGV2ZWxzLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZygnW1NFTkRdIEVycm9yIGdldHRpbmcgdGVtcGxhdGUnLCBlKTtcbiAgICB9XG4gIH1cblxuICBnZXRMZXZlbEljb24obGV2ZWw6IG51bWJlcikge1xuICAgIGlmIChsZXZlbCA8IDApIHtcbiAgICAgIHJldHVybiA8ZGl2IGNsYXNzPVwibGV2ZWwtaWNvblwiIGlubmVySFRNTD17c3RhcnRJY29ufSAvPjtcbiAgICB9IGVsc2UgaWYgKGxldmVsID49IHRoaXMubGV2ZWxzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDxkaXYgY2xhc3M9XCJsZXZlbC1pY29uXCIgaW5uZXJIVE1MPXtkb25lSWNvbn0gLz47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiA8ZGl2IGNsYXNzPVwibGV2ZWwtaWNvblwiIGlubmVySFRNTD17c3RlcEljb259IC8+O1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZVNlbGVjdENvbnRhY3QoZTogYW55LCByb2xlOiBUQW5ub3RhdGVkUm9sZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLmRldGFpbDsgLy8gSUNvbnRhY3RTZWxlY3RFdmVudFxuICAgIHRoaXMucmVjaXBpZW50c0Fzc2lnbmVkW3JvbGUuaWRdID0gey4uLnJvbGUsIC4uLmUuZGV0YWlsfTtcbiAgICB0aGlzLnNob3dQaWNrZXJGb3JJZCA9ICcnO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2tSb2xlKGU6IGFueSwgcm9sZTogVEFubm90YXRlZFJvbGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuc2hvd1BpY2tlckZvcklkID0gcm9sZS5pZDtcbiAgfVxuXG4gIGhhbmRsZVNlbmQoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5zZW5kPy5lbWl0KHtyZWNpcGllbnRzQXNzaWduZWQ6IE9iamVjdC52YWx1ZXModGhpcy5yZWNpcGllbnRzQXNzaWduZWQpfSk7XG4gIH1cblxuICBoYW5kbGVDYW5jZWwoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5jYW5jZWw/LmVtaXQoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCByb2xlTmFtZXMgPSB0aGlzLnRlbXBsYXRlPy5yb2xlcz8ubWFwKHJvbGUgPT4gcm9sZS5uYW1lKSB8fCBbXTtcbiAgICBjb25zdCBhbGxSZWNpcGllbnRzQXNzaWduZWQgPVxuICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLnJlY2lwaWVudHNBc3NpZ25lZCkuZmlsdGVyKHJlY2lwaWVudCA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCd2YWxpZCBlbWFpbCcsIGlzVmFsaWRFbWFpbChyZWNpcGllbnQuZW1haWwpLCByZWNpcGllbnQuZW1haWwpO1xuICAgICAgICBjb25zb2xlLmxvZygndmFsaWQgcGhvbmUnLCBpc1ZhbGlkUGhvbmUocmVjaXBpZW50LnBob25lKSwgcmVjaXBpZW50LnBob25lKTtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWRFbWFpbChyZWNpcGllbnQuZW1haWwpIHx8IGlzVmFsaWRQaG9uZShyZWNpcGllbnQucGhvbmUpO1xuICAgICAgfSkubGVuZ3RoID49IHRoaXMudGVtcGxhdGU/LnJvbGVzLmxlbmd0aDtcbiAgICBjb25zb2xlLmxvZygnYXNzaWduZWQnLCBhbGxSZWNpcGllbnRzQXNzaWduZWQpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxIb3N0IGNsYXNzPXt7fX0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZWNpcGllbnRzXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxlZnQtbGluZVwiIC8+XG4gICAgICAgICAgPGRpdiBjbGFzcz17YGxldmVsIGxldmVsLXN0YXJ0YH0+XG4gICAgICAgICAgICB7dGhpcy5nZXRMZXZlbEljb24oLTEpfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbXBsZXRlXCI+U2VuZCBEb2N1bWVudDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAge3RoaXMubGV2ZWxzLm1hcChsZXZlbCA9PiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPXtgbGV2ZWwgbGV2ZWwtJHtsZXZlbH1gfT5cbiAgICAgICAgICAgICAge3RoaXMuZ2V0TGV2ZWxJY29uKGxldmVsKX1cblxuICAgICAgICAgICAgICB7dGhpcy5yb2xlc0F0TGV2ZWxbbGV2ZWxdLm1hcChyb2xlID0+IChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVjaXBpZW50XCIgc3R5bGU9e3tiYWNrZ3JvdW5kQ29sb3I6IGdldFJHQkEoZ2V0Um9sZUluZGV4KHJvbGVOYW1lcywgcm9sZS5uYW1lKSl9fSBvbkNsaWNrPXtlID0+IHRoaXMuaGFuZGxlQ2xpY2tSb2xlKGUsIHJvbGUpfT5cbiAgICAgICAgICAgICAgICAgIHt0aGlzLnJlY2lwaWVudHNBc3NpZ25lZFtyb2xlLmlkXT8uZnVsbF9uYW1lID8/IHJvbGUubmFtZX1cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uXCIgaW5uZXJIVE1MPXtlZGl0SWNvbn0gLz5cbiAgICAgICAgICAgICAgICAgIHt0aGlzLnNob3dQaWNrZXJGb3JJZCA9PT0gcm9sZS5pZCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDx2ZXJkb2NzLWNvbnRhY3QtcGlja2VyXG4gICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9eygpID0+ICh0aGlzLnNob3dQaWNrZXJGb3JJZCA9ICcnKX1cbiAgICAgICAgICAgICAgICAgICAgICBjb250YWN0U3VnZ2VzdGlvbnM9e3RoaXMuc2Vzc2lvbkNvbnRhY3RzfVxuICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUm9sZT17dGhpcy5yZWNpcGllbnRzQXNzaWduZWRbcm9sZS5pZF0gPz8gcm9sZX1cbiAgICAgICAgICAgICAgICAgICAgICBvblNlYXJjaENvbnRhY3RzPXtlID0+IGNvbnNvbGUubG9nKCdTZWFyY2gnLCBlLmRldGFpbCl9XG4gICAgICAgICAgICAgICAgICAgICAgb25Db250YWN0U2VsZWN0ZWQ9e2UgPT4gdGhpcy5oYW5kbGVTZWxlY3RDb250YWN0KGUsIHJvbGUpfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApKX1cblxuICAgICAgICAgIDxkaXYgY2xhc3M9e2BsZXZlbCBsZXZlbC1kb25lYH0+XG4gICAgICAgICAgICB7dGhpcy5nZXRMZXZlbEljb24odGhpcy5sZXZlbHMubGVuZ3RoKX1cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb21wbGV0ZVwiPkRvY3VtZW50IENvbXBsZXRlPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b25zXCI+XG4gICAgICAgICAgPHZlcmRvY3MtYnV0dG9uIGxhYmVsPVwiQ2FuY2VsXCIgc2l6ZT1cInNtYWxsXCIgdmFyaWFudD1cIm91dGxpbmVcIiBvblByZXNzPXtlID0+IHRoaXMuaGFuZGxlQ2FuY2VsKGUpfSAvPlxuICAgICAgICAgIDx2ZXJkb2NzLWJ1dHRvbiBsYWJlbD1cIlNlbmRcIiBzaXplPVwic21hbGxcIiBkaXNhYmxlZD17IWFsbFJlY2lwaWVudHNBc3NpZ25lZH0gb25QcmVzcz17ZSA9PiB0aGlzLmhhbmRsZVNlbmQoZSl9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9Ib3N0PlxuICAgICk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=