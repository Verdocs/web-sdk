(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"./dist/esm/verdocs-status-indicator.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_status_indicator",(function(){return VerdocsStatusIndicator}));__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-names.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.set.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.replace.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.string.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.string.trim.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.parse-int.js"),__webpack_require__("./node_modules/core-js/modules/es.parse-float.js"),__webpack_require__("./node_modules/core-js/modules/es.number.max-safe-integer.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.array.splice.js"),__webpack_require__("./node_modules/core-js/modules/es.array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.array.fill.js"),__webpack_require__("./node_modules/core-js/modules/es.object.values.js"),__webpack_require__("./node_modules/core-js/modules/es.object.entries.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.reflect.construct.js"),__webpack_require__("./node_modules/core-js/modules/es.map.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.reflect.get.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");var _index_43893f54_js__WEBPACK_IMPORTED_MODULE_51__=__webpack_require__("./dist/esm/index-43893f54.js"),_popper_f860750c_js__WEBPACK_IMPORTED_MODULE_52__=__webpack_require__("./dist/esm/popper-f860750c.js");function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function _get(target,property,receiver){var base=_superPropBase(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(arguments.length<3?target:receiver):desc.value}},_get.apply(this,arguments)}function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"==typeof call||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(self)}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _wrapNativeSuper(Class){var _cache="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function _wrapNativeSuper(Class){if(null===Class||!function _isNativeFunction(fn){return-1!==Function.toString.call(fn).indexOf("[native code]")}(Class))return Class;if("function"!=typeof Class)throw new TypeError("Super expression must either be null or a function");if(void 0!==_cache){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper)}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper,Class)},_wrapNativeSuper(Class)}function _construct(Parent,args,Class){return _construct=_isNativeReflectConstruct()?Reflect.construct.bind():function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var instance=new(Function.bind.apply(Parent,a));return Class&&_setPrototypeOf(instance,Class.prototype),instance},_construct.apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)},_getPrototypeOf(o)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var methods$1={},names=[];function registerMethods(name,m){if(Array.isArray(name)){var _step,_iterator=_createForOfIteratorHelper(name);try{for(_iterator.s();!(_step=_iterator.n()).done;){registerMethods(_step.value,m)}}catch(err){_iterator.e(err)}finally{_iterator.f()}}else if("object"!=typeof name)addMethodNames(Object.getOwnPropertyNames(m)),methods$1[name]=Object.assign(methods$1[name]||{},m);else for(var _name2 in name)registerMethods(_name2,name[_name2])}function getMethodsFor(name){return methods$1[name]||{}}function addMethodNames(_names){names.push.apply(names,_toConsumableArray(_names))}function map(array,block){var i,il=array.length,result=[];for(i=0;i<il;i++)result.push(block(array[i]));return result}function filter(array,block){var i,il=array.length,result=[];for(i=0;i<il;i++)block(array[i])&&result.push(array[i]);return result}function radians(d){return d%360*Math.PI/180}function camelCase(s){return s.toLowerCase().replace(/-(.)/g,(function(m,g){return g.toUpperCase()}))}function capitalize(s){return s.charAt(0).toUpperCase()+s.slice(1)}function proportionalSize(element,width,height,box){return null!=width&&null!=height||(box=box||element.bbox(),null==width?width=box.width/box.height*height:null==height&&(height=box.height/box.width*width)),{width:width,height:height}}function getOrigin(o,element){var origin=o.origin,ox=null!=o.ox?o.ox:null!=o.originX?o.originX:"center",oy=null!=o.oy?o.oy:null!=o.originY?o.originY:"center";if(null!=origin){var _ref2=_slicedToArray(Array.isArray(origin)?origin:"object"==typeof origin?[origin.x,origin.y]:[origin,origin],2);ox=_ref2[0],oy=_ref2[1]}var condX="string"==typeof ox,condY="string"==typeof oy;if(condX||condY){var _element$bbox=element.bbox(),_height=_element$bbox.height,_width=_element$bbox.width,_x=_element$bbox.x,_y=_element$bbox.y;condX&&(ox=ox.includes("left")?_x:ox.includes("right")?_x+_width:_x+_width/2),condY&&(oy=oy.includes("top")?_y:oy.includes("bottom")?_y+_height:_y+_height/2)}return[ox,oy]}var _svg2="http://www.w3.org/2000/svg",xmlns="http://www.w3.org/2000/xmlns/",xlink="http://www.w3.org/1999/xlink",globals={window:"undefined"==typeof window?null:window,document:"undefined"==typeof document?null:document},Base=_createClass((function Base(){_classCallCheck(this,Base)})),elements={},_root="___SYMBOL___ROOT___";function create(name){var ns=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_svg2;return globals.document.createElementNS(ns,name)}function makeInstance(element){var isHTML=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(element instanceof Base)return element;if("object"==typeof element)return adopter(element);if(null==element)return new elements[_root];if("string"==typeof element&&"<"!==element.charAt(0))return adopter(globals.document.querySelector(element));var wrapper=isHTML?globals.document.createElement("div"):create("svg");return wrapper.innerHTML=element,element=adopter(wrapper.firstChild),wrapper.removeChild(wrapper.firstChild),element}function nodeOrNew(name,node){return node&&node.ownerDocument&&node instanceof node.ownerDocument.defaultView.Node?node:create(name)}function adopt(node){if(!node)return null;if(node.instance instanceof Base)return node.instance;if("#document-fragment"===node.nodeName)return new elements.Fragment(node);var className=capitalize(node.nodeName||"Dom");return"LinearGradient"===className||"RadialGradient"===className?className="Gradient":elements[className]||(className="Dom"),new elements[className](node)}var adopter=adopt;function register(element){var name=arguments.length>1&&void 0!==arguments[1]?arguments[1]:element.name,asRoot=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return elements[name]=element,asRoot&&(elements[_root]=element),addMethodNames(Object.getOwnPropertyNames(element.prototype)),element}var did=1e3;function eid(name){return"Svgjs"+capitalize(name)+did++}function assignNewId(node){for(var i=node.children.length-1;i>=0;i--)assignNewId(node.children[i]);return node.id?(node.id=eid(node.nodeName),node):node}function extend(modules,methods){var key,i;for(i=(modules=Array.isArray(modules)?modules:[modules]).length-1;i>=0;i--)for(key in methods)modules[i].prototype[key]=methods[key]}function wrapWithAttrCheck(fn){return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];var o=args[args.length-1];return!o||o.constructor!==Object||o instanceof Array?fn.apply(this,args):fn.apply(this,args.slice(0,-1)).attr(o)}}registerMethods("Dom",{siblings:function siblings(){return this.parent().children()},position:function position(){return this.parent().index(this)},next:function next(){return this.siblings()[this.position()+1]},prev:function prev(){return this.siblings()[this.position()-1]},forward:function forward(){var i=this.position();return this.parent().add(this.remove(),i+1),this},backward:function backward(){var i=this.position();return this.parent().add(this.remove(),i?i-1:0),this},front:function front(){return this.parent().add(this.remove()),this},back:function back(){return this.parent().add(this.remove(),0),this},before:function before(element){(element=makeInstance(element)).remove();var i=this.position();return this.parent().add(element,i),this},after:function after(element){(element=makeInstance(element)).remove();var i=this.position();return this.parent().add(element,i+1),this},insertBefore:function insertBefore(element){return(element=makeInstance(element)).before(this),this},insertAfter:function insertAfter(element){return(element=makeInstance(element)).after(this),this}});var numberAndUnit=/^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,hex=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,rgb=/rgb\((\d+),(\d+),(\d+)\)/,_reference=/(#[a-z_][a-z0-9\-_]*)/i,transforms=/\)\s*,?\s*/,whitespace=/\s/g,isHex=/^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i,isRgb=/^rgb\(/,isBlank=/^(\s+)?$/,isNumber=/^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,isImage=/\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,delimiter=/[\s,]+/,isPathLetter=/[MLHVCSQTAZ]/i;function sixDigitHex(hex){return 4===hex.length?["#",hex.substring(1,2),hex.substring(1,2),hex.substring(2,3),hex.substring(2,3),hex.substring(3,4),hex.substring(3,4)].join(""):hex}function componentHex(component){var integer=Math.round(component),hex=Math.max(0,Math.min(255,integer)).toString(16);return 1===hex.length?"0"+hex:hex}function is(object,space){for(var i=space.length;i--;)if(null==object[space[i]])return!1;return!0}function getParameters(a,b){var params=is(a,"rgb")?{_a:a.r,_b:a.g,_c:a.b,_d:0,space:"rgb"}:is(a,"xyz")?{_a:a.x,_b:a.y,_c:a.z,_d:0,space:"xyz"}:is(a,"hsl")?{_a:a.h,_b:a.s,_c:a.l,_d:0,space:"hsl"}:is(a,"lab")?{_a:a.l,_b:a.a,_c:a.b,_d:0,space:"lab"}:is(a,"lch")?{_a:a.l,_b:a.c,_c:a.h,_d:0,space:"lch"}:is(a,"cmyk")?{_a:a.c,_b:a.m,_c:a.y,_d:a.k,space:"cmyk"}:{_a:0,_b:0,_c:0,space:"rgb"};return params.space=b||params.space,params}function hueToRgb(p,q,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?p+6*(q-p)*t:t<.5?q:t<2/3?p+(q-p)*(2/3-t)*6:p}registerMethods("Dom",{classes:function classes(){var attr=this.attr("class");return null==attr?[]:attr.trim().split(delimiter)},hasClass:function hasClass(name){return-1!==this.classes().indexOf(name)},addClass:function addClass(name){if(!this.hasClass(name)){var _array=this.classes();_array.push(name),this.attr("class",_array.join(" "))}return this},removeClass:function removeClass(name){return this.hasClass(name)&&this.attr("class",this.classes().filter((function(c){return c!==name})).join(" ")),this},toggleClass:function toggleClass(name){return this.hasClass(name)?this.removeClass(name):this.addClass(name)}}),registerMethods("Dom",{css:function css(style,val){var ret={};if(0===arguments.length)return this.node.style.cssText.split(/\s*;\s*/).filter((function(el){return!!el.length})).forEach((function(el){var t=el.split(/\s*:\s*/);ret[t[0]]=t[1]})),ret;if(arguments.length<2){if(Array.isArray(style)){var _step2,_iterator2=_createForOfIteratorHelper(style);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var name=_step2.value,cased=camelCase(name);ret[name]=this.node.style[cased]}}catch(err){_iterator2.e(err)}finally{_iterator2.f()}return ret}if("string"==typeof style)return this.node.style[camelCase(style)];if("object"==typeof style)for(var _name3 in style)this.node.style[camelCase(_name3)]=null==style[_name3]||isBlank.test(style[_name3])?"":style[_name3]}return 2===arguments.length&&(this.node.style[camelCase(style)]=null==val||isBlank.test(val)?"":val),this},show:function show(){return this.css("display","")},hide:function hide(){return this.css("display","none")},visible:function visible(){return"none"!==this.css("display")}}),registerMethods("Dom",{data:function data(a,v,r){if(null==a)return this.data(map(filter(this.node.attributes,(function(el){return 0===el.nodeName.indexOf("data-")})),(function(el){return el.nodeName.slice(5)})));if(a instanceof Array){var _step3,_data={},_iterator3=_createForOfIteratorHelper(a);try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var key=_step3.value;_data[key]=this.data(key)}}catch(err){_iterator3.e(err)}finally{_iterator3.f()}return _data}if("object"==typeof a)for(v in a)this.data(v,a[v]);else if(arguments.length<2)try{return JSON.parse(this.attr("data-"+a))}catch(e){return this.attr("data-"+a)}else this.attr("data-"+a,null===v?null:!0===r||"string"==typeof v||"number"==typeof v?v:JSON.stringify(v));return this}}),registerMethods("Dom",{remember:function remember(k,v){if("object"==typeof arguments[0])for(var key in k)this.remember(key,k[key]);else{if(1===arguments.length)return this.memory()[k];this.memory()[k]=v}return this},forget:function forget(){if(0===arguments.length)this._memory={};else for(var i=arguments.length-1;i>=0;i--)delete this.memory()[arguments[i]];return this},memory:function memory(){return this._memory=this._memory||{}}});var Color=function(){function Color(){_classCallCheck(this,Color),this.init.apply(this,arguments)}return _createClass(Color,[{key:"cmyk",value:function cmyk(){var _this$rgb=this.rgb(),_map2=_slicedToArray([_this$rgb._a,_this$rgb._b,_this$rgb._c].map((function(v){return v/255})),3),r=_map2[0],g=_map2[1],b=_map2[2],k=Math.min(1-r,1-g,1-b);return 1===k?new Color(0,0,0,1,"cmyk"):new Color((1-r-k)/(1-k),(1-g-k)/(1-k),(1-b-k)/(1-k),k,"cmyk")}},{key:"hsl",value:function hsl(){var _this$rgb2=this.rgb(),_map4=_slicedToArray([_this$rgb2._a,_this$rgb2._b,_this$rgb2._c].map((function(v){return v/255})),3),r=_map4[0],g=_map4[1],b=_map4[2],max=Math.max(r,g,b),min=Math.min(r,g,b),l=(max+min)/2,isGrey=max===min,delta=max-min;return new Color(360*(isGrey?0:max===r?((g-b)/delta+(g<b?6:0))/6:max===g?((b-r)/delta+2)/6:max===b?((r-g)/delta+4)/6:0),100*(isGrey?0:l>.5?delta/(2-max-min):delta/(max+min)),100*l,"hsl")}},{key:"init",value:function init(){var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,b=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,d=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,space=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"rgb";if(a=a||0,this.space)for(var component in this.space)delete this[this.space[component]];if("number"==typeof a)space="string"==typeof d?d:space,d="string"==typeof d?0:d,Object.assign(this,{_a:a,_b:b,_c:c,_d:d,space:space});else if(a instanceof Array)this.space=b||("string"==typeof a[3]?a[3]:a[4])||"rgb",Object.assign(this,{_a:a[0],_b:a[1],_c:a[2],_d:a[3]||0});else if(a instanceof Object){var values=getParameters(a,b);Object.assign(this,values)}else if("string"==typeof a)if(isRgb.test(a)){var noWhitespace=a.replace(whitespace,""),_rgb$exec$slice$map=rgb.exec(noWhitespace).slice(1,4).map((function(v){return parseInt(v)})),_rgb$exec$slice$map2=_slicedToArray(_rgb$exec$slice$map,3),_a2=_rgb$exec$slice$map2[0],_b2=_rgb$exec$slice$map2[1],_c2=_rgb$exec$slice$map2[2];Object.assign(this,{_a:_a2,_b:_b2,_c:_c2,_d:0,space:"rgb"})}else{if(!isHex.test(a))throw Error("Unsupported string format, can't construct Color");var hexParse=function hexParse(v){return parseInt(v,16)},_hex$exec$map=hex.exec(sixDigitHex(a)).map(hexParse),_hex$exec$map2=_slicedToArray(_hex$exec$map,4),_a3=_hex$exec$map2[1],_b3=_hex$exec$map2[2],_c3=_hex$exec$map2[3];Object.assign(this,{_a:_a3,_b:_b3,_c:_c3,_d:0,space:"rgb"})}var _a=this._a,_b=this._b,_c=this._c,_d=this._d,components="rgb"===this.space?{r:_a,g:_b,b:_c}:"xyz"===this.space?{x:_a,y:_b,z:_c}:"hsl"===this.space?{h:_a,s:_b,l:_c}:"lab"===this.space?{l:_a,a:_b,b:_c}:"lch"===this.space?{l:_a,c:_b,h:_c}:"cmyk"===this.space?{c:_a,m:_b,y:_c,k:_d}:{};Object.assign(this,components)}},{key:"lab",value:function lab(){var _this$xyz=this.xyz(),x=_this$xyz.x,y=_this$xyz.y;return new Color(116*y-16,500*(x-y),200*(y-_this$xyz.z),"lab")}},{key:"lch",value:function lch(){var _this$lab=this.lab(),l=_this$lab.l,a=_this$lab.a,b=_this$lab.b,c=Math.sqrt(Math.pow(a,2)+Math.pow(b,2)),h=180*Math.atan2(b,a)/Math.PI;return h<0&&(h=360-(h*=-1)),new Color(l,c,h,"lch")}},{key:"rgb",value:function rgb(){if("rgb"===this.space)return this;if(function cieSpace(space){return"lab"===space||"xyz"===space||"lch"===space}(this.space)){var _x2=this.x,_y2=this.y,z=this.z;if("lab"===this.space||"lch"===this.space){var l=this.l,a=this.a,_b4=this.b;if("lch"===this.space){var c=this.c,_h=this.h,dToR=Math.PI/180;a=c*Math.cos(dToR*_h),_b4=c*Math.sin(dToR*_h)}var yL=(l+16)/116,xL=a/500+yL,zL=yL-_b4/200,ct=16/116,mx=.008856;_x2=.95047*(Math.pow(xL,3)>mx?Math.pow(xL,3):(xL-ct)/7.787),_y2=1*(Math.pow(yL,3)>mx?Math.pow(yL,3):(yL-ct)/7.787),z=1.08883*(Math.pow(zL,3)>mx?Math.pow(zL,3):(zL-ct)/7.787)}var rU=3.2406*_x2+-1.5372*_y2+-.4986*z,gU=-.9689*_x2+1.8758*_y2+.0415*z,bU=.0557*_x2+-.204*_y2+1.057*z,pow=Math.pow,bd=.0031308;return new Color(255*(rU>bd?1.055*pow(rU,1/2.4)-.055:12.92*rU),255*(gU>bd?1.055*pow(gU,1/2.4)-.055:12.92*gU),255*(bU>bd?1.055*pow(bU,1/2.4)-.055:12.92*bU))}if("hsl"===this.space){var _h2=this.h,s=this.s,_l=this.l;if(_h2/=360,_l/=100,0===(s/=100))return new Color(_l*=255,_l,_l);var q=_l<.5?_l*(1+s):_l+s-_l*s,p=2*_l-q;return new Color(255*hueToRgb(p,q,_h2+1/3),255*hueToRgb(p,q,_h2),255*hueToRgb(p,q,_h2-1/3))}if("cmyk"===this.space){var _c4=this.c,m=this.m,_y3=this.y,k=this.k;return new Color(255*(1-Math.min(1,_c4*(1-k)+k)),255*(1-Math.min(1,m*(1-k)+k)),255*(1-Math.min(1,_y3*(1-k)+k)))}return this}},{key:"toArray",value:function toArray(){return[this._a,this._b,this._c,this._d,this.space]}},{key:"toHex",value:function toHex(){var _this$_clamped$map2=_slicedToArray(this._clamped().map(componentHex),3);return"#"+_this$_clamped$map2[0]+_this$_clamped$map2[1]+_this$_clamped$map2[2]}},{key:"toRgb",value:function toRgb(){var _this$_clamped2=_slicedToArray(this._clamped(),3);return"rgb("+_this$_clamped2[0]+","+_this$_clamped2[1]+","+_this$_clamped2[2]+")"}},{key:"toString",value:function toString(){return this.toHex()}},{key:"xyz",value:function xyz(){var _this$rgb3=this.rgb(),_map6=_slicedToArray([_this$rgb3._a,_this$rgb3._b,_this$rgb3._c].map((function(v){return v/255})),3),r=_map6[0],g=_map6[1],b=_map6[2],rL=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92,gL=g>.04045?Math.pow((g+.055)/1.055,2.4):g/12.92,bL=b>.04045?Math.pow((b+.055)/1.055,2.4):b/12.92,xU=(.4124*rL+.3576*gL+.1805*bL)/.95047,yU=(.2126*rL+.7152*gL+.0722*bL)/1,zU=(.0193*rL+.1192*gL+.9505*bL)/1.08883;return new Color(xU>.008856?Math.pow(xU,1/3):7.787*xU+16/116,yU>.008856?Math.pow(yU,1/3):7.787*yU+16/116,zU>.008856?Math.pow(zU,1/3):7.787*zU+16/116,"xyz")}},{key:"_clamped",value:function _clamped(){var _this$rgb4=this.rgb(),_a=_this$rgb4._a,_b=_this$rgb4._b,_c=_this$rgb4._c,max=Math.max,min=Math.min,round=Math.round;return[_a,_b,_c].map((function format(v){return max(0,min(round(v),255))}))}}],[{key:"isColor",value:function isColor(color){return color&&(color instanceof Color||this.isRgb(color)||this.test(color))}},{key:"isRgb",value:function isRgb(color){return color&&"number"==typeof color.r&&"number"==typeof color.g&&"number"==typeof color.b}},{key:"random",value:function random(){var mode=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"vibrant",t=arguments.length>1?arguments[1]:void 0,random=Math.random,round=Math.round,sin=Math.sin,pi=Math.PI;if("vibrant"===mode){var l=24*random()+57,c=38*random()+45,_h3=360*random(),color=new Color(l,c,_h3,"lch");return color}if("sine"===mode){var r=round(80*sin(2*pi*(t=null==t?random():t)/.5+.01)+150),g=round(50*sin(2*pi*t/.5+4.6)+200),b=round(100*sin(2*pi*t/.5+2.3)+150),_color4=new Color(r,g,b);return _color4}if("pastel"===mode){var _l2=8*random()+86,_c5=17*random()+9,_h4=360*random(),_color5=new Color(_l2,_c5,_h4,"lch");return _color5}if("dark"===mode){var _l3=10+10*random(),_c6=50*random()+86,_h5=360*random(),_color6=new Color(_l3,_c6,_h5,"lch");return _color6}if("rgb"===mode){var _r3=255*random(),_g3=255*random(),_b7=255*random(),_color7=new Color(_r3,_g3,_b7);return _color7}if("lab"===mode){var _l4=100*random(),a=256*random()-128,_b8=256*random()-128,_color8=new Color(_l4,a,_b8,"lab");return _color8}if("grey"===mode){var grey=255*random(),_color9=new Color(grey,grey,grey);return _color9}throw new Error("Unsupported random color mode")}},{key:"test",value:function test(color){return"string"==typeof color&&(isHex.test(color)||isRgb.test(color))}}]),Color}(),Point=function(){function Point(){_classCallCheck(this,Point),this.init.apply(this,arguments)}return _createClass(Point,[{key:"clone",value:function clone(){return new Point(this)}},{key:"init",value:function init(x,y){var base_x=0,base_y=0,source=Array.isArray(x)?{x:x[0],y:x[1]}:"object"==typeof x?{x:x.x,y:x.y}:{x:x,y:y};return this.x=null==source.x?base_x:source.x,this.y=null==source.y?base_y:source.y,this}},{key:"toArray",value:function toArray(){return[this.x,this.y]}},{key:"transform",value:function transform(m){return this.clone().transformO(m)}},{key:"transformO",value:function transformO(m){Matrix.isMatrixLike(m)||(m=new Matrix(m));var x=this.x,y=this.y;return this.x=m.a*x+m.c*y+m.e,this.y=m.b*x+m.d*y+m.f,this}}]),Point}();function closeEnough(a,b,threshold){return Math.abs(b-a)<(threshold||1e-6)}var Matrix=function(){function Matrix(){_classCallCheck(this,Matrix),this.init.apply(this,arguments)}return _createClass(Matrix,[{key:"around",value:function around(cx,cy,matrix){return this.clone().aroundO(cx,cy,matrix)}},{key:"aroundO",value:function aroundO(cx,cy,matrix){var dx=cx||0,dy=cy||0;return this.translateO(-dx,-dy).lmultiplyO(matrix).translateO(dx,dy)}},{key:"clone",value:function clone(){return new Matrix(this)}},{key:"decompose",value:function decompose(){var cx=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,cy=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,a=this.a,b=this.b,c=this.c,d=this.d,e=this.e,f=this.f,determinant=a*d-b*c,ccw=determinant>0?1:-1,sx=ccw*Math.sqrt(a*a+b*b),thetaRad=Math.atan2(ccw*b,ccw*a),theta=180/Math.PI*thetaRad,ct=Math.cos(thetaRad),st=Math.sin(thetaRad),lam=(a*c+b*d)/determinant,sy=c*sx/(lam*a-b)||d*sx/(lam*b+a),tx=e-cx+cx*ct*sx+cy*(lam*ct*sx-st*sy),ty=f-cy+cx*st*sx+cy*(lam*st*sx+ct*sy);return{scaleX:sx,scaleY:sy,shear:lam,rotate:theta,translateX:tx,translateY:ty,originX:cx,originY:cy,a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f}}},{key:"equals",value:function equals(other){if(other===this)return!0;var comp=new Matrix(other);return closeEnough(this.a,comp.a)&&closeEnough(this.b,comp.b)&&closeEnough(this.c,comp.c)&&closeEnough(this.d,comp.d)&&closeEnough(this.e,comp.e)&&closeEnough(this.f,comp.f)}},{key:"flip",value:function flip(axis,around){return this.clone().flipO(axis,around)}},{key:"flipO",value:function flipO(axis,around){return"x"===axis?this.scaleO(-1,1,around,0):"y"===axis?this.scaleO(1,-1,0,around):this.scaleO(-1,-1,axis,around||axis)}},{key:"init",value:function init(source){var base=Matrix.fromArray([1,0,0,1,0,0]);return source=source instanceof Element?source.matrixify():"string"==typeof source?Matrix.fromArray(source.split(delimiter).map(parseFloat)):Array.isArray(source)?Matrix.fromArray(source):"object"==typeof source&&Matrix.isMatrixLike(source)?source:"object"==typeof source?(new Matrix).transform(source):6===arguments.length?Matrix.fromArray([].slice.call(arguments)):base,this.a=null!=source.a?source.a:base.a,this.b=null!=source.b?source.b:base.b,this.c=null!=source.c?source.c:base.c,this.d=null!=source.d?source.d:base.d,this.e=null!=source.e?source.e:base.e,this.f=null!=source.f?source.f:base.f,this}},{key:"inverse",value:function inverse(){return this.clone().inverseO()}},{key:"inverseO",value:function inverseO(){var a=this.a,b=this.b,c=this.c,d=this.d,e=this.e,f=this.f,det=a*d-b*c;if(!det)throw new Error("Cannot invert "+this);var na=d/det,nb=-b/det,nc=-c/det,nd=a/det,ne=-(na*e+nc*f),nf=-(nb*e+nd*f);return this.a=na,this.b=nb,this.c=nc,this.d=nd,this.e=ne,this.f=nf,this}},{key:"lmultiply",value:function lmultiply(matrix){return this.clone().lmultiplyO(matrix)}},{key:"lmultiplyO",value:function lmultiplyO(matrix){var l=matrix instanceof Matrix?matrix:new Matrix(matrix);return Matrix.matrixMultiply(l,this,this)}},{key:"multiply",value:function multiply(matrix){return this.clone().multiplyO(matrix)}},{key:"multiplyO",value:function multiplyO(matrix){var r=matrix instanceof Matrix?matrix:new Matrix(matrix);return Matrix.matrixMultiply(this,r,this)}},{key:"rotate",value:function rotate(r,cx,cy){return this.clone().rotateO(r,cx,cy)}},{key:"rotateO",value:function rotateO(r){var cx=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,cy=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;r=radians(r);var cos=Math.cos(r),sin=Math.sin(r),a=this.a,b=this.b,c=this.c,d=this.d,e=this.e,f=this.f;return this.a=a*cos-b*sin,this.b=b*cos+a*sin,this.c=c*cos-d*sin,this.d=d*cos+c*sin,this.e=e*cos-f*sin+cy*sin-cx*cos+cx,this.f=f*cos+e*sin-cx*sin-cy*cos+cy,this}},{key:"scale",value:function scale(x,y,cx,cy){var _this$clone;return(_this$clone=this.clone()).scaleO.apply(_this$clone,arguments)}},{key:"scaleO",value:function scaleO(x){var y=arguments.length>1&&void 0!==arguments[1]?arguments[1]:x,cx=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,cy=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;3===arguments.length&&(cy=cx,cx=y,y=x);var a=this.a,b=this.b,c=this.c,d=this.d,e=this.e,f=this.f;return this.a=a*x,this.b=b*y,this.c=c*x,this.d=d*y,this.e=e*x-cx*x+cx,this.f=f*y-cy*y+cy,this}},{key:"shear",value:function shear(a,cx,cy){return this.clone().shearO(a,cx,cy)}},{key:"shearO",value:function shearO(lx){var cy=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=this.a,b=this.b,c=this.c,d=this.d,e=this.e,f=this.f;return this.a=a+b*lx,this.c=c+d*lx,this.e=e+f*lx-cy*lx,this}},{key:"skew",value:function skew(x,y,cx,cy){var _this$clone2;return(_this$clone2=this.clone()).skewO.apply(_this$clone2,arguments)}},{key:"skewO",value:function skewO(x){var y=arguments.length>1&&void 0!==arguments[1]?arguments[1]:x,cx=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,cy=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;3===arguments.length&&(cy=cx,cx=y,y=x),x=radians(x),y=radians(y);var lx=Math.tan(x),ly=Math.tan(y),a=this.a,b=this.b,c=this.c,d=this.d,e=this.e,f=this.f;return this.a=a+b*lx,this.b=b+a*ly,this.c=c+d*lx,this.d=d+c*ly,this.e=e+f*lx-cy*lx,this.f=f+e*ly-cx*ly,this}},{key:"skewX",value:function skewX(x,cx,cy){return this.skew(x,0,cx,cy)}},{key:"skewY",value:function skewY(y,cx,cy){return this.skew(0,y,cx,cy)}},{key:"toArray",value:function toArray(){return[this.a,this.b,this.c,this.d,this.e,this.f]}},{key:"toString",value:function toString(){return"matrix("+this.a+","+this.b+","+this.c+","+this.d+","+this.e+","+this.f+")"}},{key:"transform",value:function transform(o){if(Matrix.isMatrixLike(o))return new Matrix(o).multiplyO(this);var t=Matrix.formatTransforms(o),_Point$transform=new Point(t.ox,t.oy).transform(this),ox=_Point$transform.x,oy=_Point$transform.y,transformer=(new Matrix).translateO(t.rx,t.ry).lmultiplyO(this).translateO(-ox,-oy).scaleO(t.scaleX,t.scaleY).skewO(t.skewX,t.skewY).shearO(t.shear).rotateO(t.theta).translateO(ox,oy);if(isFinite(t.px)||isFinite(t.py)){var origin=new Point(ox,oy).transform(transformer),_dx=isFinite(t.px)?t.px-origin.x:0,_dy=isFinite(t.py)?t.py-origin.y:0;transformer.translateO(_dx,_dy)}return transformer.translateO(t.tx,t.ty),transformer}},{key:"translate",value:function translate(x,y){return this.clone().translateO(x,y)}},{key:"translateO",value:function translateO(x,y){return this.e+=x||0,this.f+=y||0,this}},{key:"valueOf",value:function valueOf(){return{a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f}}}],[{key:"formatTransforms",value:function formatTransforms(o){var flipBoth="both"===o.flip||!0===o.flip,flipX=o.flip&&(flipBoth||"x"===o.flip)?-1:1,flipY=o.flip&&(flipBoth||"y"===o.flip)?-1:1,skewX=o.skew&&o.skew.length?o.skew[0]:isFinite(o.skew)?o.skew:isFinite(o.skewX)?o.skewX:0,skewY=o.skew&&o.skew.length?o.skew[1]:isFinite(o.skew)?o.skew:isFinite(o.skewY)?o.skewY:0,scaleX=o.scale&&o.scale.length?o.scale[0]*flipX:isFinite(o.scale)?o.scale*flipX:isFinite(o.scaleX)?o.scaleX*flipX:flipX,scaleY=o.scale&&o.scale.length?o.scale[1]*flipY:isFinite(o.scale)?o.scale*flipY:isFinite(o.scaleY)?o.scaleY*flipY:flipY,shear=o.shear||0,theta=o.rotate||o.theta||0,origin=new Point(o.origin||o.around||o.ox||o.originX,o.oy||o.originY),ox=origin.x,oy=origin.y,position=new Point(o.position||o.px||o.positionX||NaN,o.py||o.positionY||NaN),px=position.x,py=position.y,translate=new Point(o.translate||o.tx||o.translateX,o.ty||o.translateY),tx=translate.x,ty=translate.y,relative=new Point(o.relative||o.rx||o.relativeX,o.ry||o.relativeY);return{scaleX:scaleX,scaleY:scaleY,skewX:skewX,skewY:skewY,shear:shear,theta:theta,rx:relative.x,ry:relative.y,tx:tx,ty:ty,ox:ox,oy:oy,px:px,py:py}}},{key:"fromArray",value:function fromArray(a){return{a:a[0],b:a[1],c:a[2],d:a[3],e:a[4],f:a[5]}}},{key:"isMatrixLike",value:function isMatrixLike(o){return null!=o.a||null!=o.b||null!=o.c||null!=o.d||null!=o.e||null!=o.f}},{key:"matrixMultiply",value:function matrixMultiply(l,r,o){var a=l.a*r.a+l.c*r.b,b=l.b*r.a+l.d*r.b,c=l.a*r.c+l.c*r.d,d=l.b*r.c+l.d*r.d,e=l.e+l.a*r.e+l.c*r.f,f=l.f+l.b*r.e+l.d*r.f;return o.a=a,o.b=b,o.c=c,o.d=d,o.e=e,o.f=f,o}}]),Matrix}();function parser(){if(!parser.nodes){var _svg=makeInstance().size(2,0);_svg.node.style.cssText=["opacity: 0","position: absolute","left: -100%","top: -100%","overflow: hidden"].join(";"),_svg.attr("focusable","false"),_svg.attr("aria-hidden","true");var path=_svg.path().node;parser.nodes={svg:_svg,path:path}}if(!parser.nodes.svg.node.parentNode){var b=globals.document.body||globals.document.documentElement;parser.nodes.svg.addTo(b)}return parser.nodes}function isNulledBox(box){return!(box.width||box.height||box.x||box.y)}register(Matrix,"Matrix");var Box=function(){function Box(){_classCallCheck(this,Box),this.init.apply(this,arguments)}return _createClass(Box,[{key:"addOffset",value:function addOffset(){return this.x+=globals.window.pageXOffset,this.y+=globals.window.pageYOffset,new Box(this)}},{key:"init",value:function init(source){var base=[0,0,0,0];return source="string"==typeof source?source.split(delimiter).map(parseFloat):Array.isArray(source)?source:"object"==typeof source?[null!=source.left?source.left:source.x,null!=source.top?source.top:source.y,source.width,source.height]:4===arguments.length?[].slice.call(arguments):base,this.x=source[0]||0,this.y=source[1]||0,this.width=this.w=source[2]||0,this.height=this.h=source[3]||0,this.x2=this.x+this.w,this.y2=this.y+this.h,this.cx=this.x+this.w/2,this.cy=this.y+this.h/2,this}},{key:"isNulled",value:function isNulled(){return isNulledBox(this)}},{key:"merge",value:function merge(box){var x=Math.min(this.x,box.x),y=Math.min(this.y,box.y);return new Box(x,y,Math.max(this.x+this.width,box.x+box.width)-x,Math.max(this.y+this.height,box.y+box.height)-y)}},{key:"toArray",value:function toArray(){return[this.x,this.y,this.width,this.height]}},{key:"toString",value:function toString(){return this.x+" "+this.y+" "+this.width+" "+this.height}},{key:"transform",value:function transform(m){m instanceof Matrix||(m=new Matrix(m));var xMin=1/0,xMax=-1/0,yMin=1/0,yMax=-1/0;return[new Point(this.x,this.y),new Point(this.x2,this.y),new Point(this.x,this.y2),new Point(this.x2,this.y2)].forEach((function(p){p=p.transform(m),xMin=Math.min(xMin,p.x),xMax=Math.max(xMax,p.x),yMin=Math.min(yMin,p.y),yMax=Math.max(yMax,p.y)})),new Box(xMin,yMin,xMax-xMin,yMax-yMin)}}]),Box}();function getBox(el,getBBoxFn,retry){var box;try{if(isNulledBox(box=getBBoxFn(el.node))&&!function domContains(node){return node===globals.document||(globals.document.documentElement.contains||function(node){for(;node.parentNode;)node=node.parentNode;return node===globals.document}).call(globals.document.documentElement,node)}(el.node))throw new Error("Element not in the dom")}catch(e){box=retry(el)}return box}registerMethods({viewbox:{viewbox:function viewbox(x,y,width,height){return null==x?new Box(this.attr("viewBox")):this.attr("viewBox",new Box(x,y,width,height))},zoom:function zoom(level,point){var _this$attr=this.attr(["width","height"]),width=_this$attr.width,height=_this$attr.height;if((width||height)&&"string"!=typeof width&&"string"!=typeof height||(width=this.node.clientWidth,height=this.node.clientHeight),!width||!height)throw new Error("Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element");var v=this.viewbox(),zoomX=width/v.width,zoomY=height/v.height,zoom=Math.min(zoomX,zoomY);if(null==level)return zoom;var zoomAmount=zoom/level;zoomAmount===1/0&&(zoomAmount=Number.MAX_SAFE_INTEGER/100),point=point||new Point(width/2/zoomX+v.x,height/2/zoomY+v.y);var box=new Box(v).transform(new Matrix({scale:zoomAmount,origin:point}));return this.viewbox(box)}}}),register(Box,"Box");var List=function(_Array){_inherits(List,_Array);var _super=_createSuper(List);function List(){var _this3,_this2,arr=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];_classCallCheck(this,List);for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++)args[_key2-1]=arguments[_key2];return _this2=_super.call.apply(_super,[this,arr].concat(args)),"number"==typeof arr?_possibleConstructorReturn(_this2,_assertThisInitialized(_this2)):(_this2.length=0,(_this3=_this2).push.apply(_this3,_toConsumableArray(arr)),_this2)}return _createClass(List)}(_wrapNativeSuper(Array));extend([List],{each:function each(fnOrMethodName){for(var _len3=arguments.length,args=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++)args[_key3-1]=arguments[_key3];return"function"==typeof fnOrMethodName?this.map((function(el,i,arr){return fnOrMethodName.call(el,el,i,arr)})):this.map((function(el){return el[fnOrMethodName].apply(el,args)}))},toArray:function toArray(){return Array.prototype.concat.apply([],this)}});var reserved=["toArray","constructor","each"];function baseFind(query,parent){return new List(map((parent||globals.document).querySelectorAll(query),(function(node){return adopt(node)})))}List.extend=function(methods){methods=methods.reduce((function(obj,name){return reserved.includes(name)||"_"===name[0]||(obj[name]=function(){for(var _len4=arguments.length,attrs=new Array(_len4),_key4=0;_key4<_len4;_key4++)attrs[_key4]=arguments[_key4];return this.each.apply(this,[name].concat(attrs))}),obj}),{}),extend([List],methods)};var listenerId=0,windowEvents={};function getEvents(instance){var n=instance.getEventHolder();return n===globals.window&&(n=windowEvents),n.events||(n.events={}),n.events}function getEventTarget(instance){return instance.getEventTarget()}function _on(node,events,listener,binding,options){var l=listener.bind(binding||node),instance=makeInstance(node),bag=getEvents(instance),n=getEventTarget(instance);events=Array.isArray(events)?events:events.split(delimiter),listener._svgjsListenerId||(listener._svgjsListenerId=++listenerId),events.forEach((function(event){var ev=event.split(".")[0],ns=event.split(".")[1]||"*";bag[ev]=bag[ev]||{},bag[ev][ns]=bag[ev][ns]||{},bag[ev][ns][listener._svgjsListenerId]=l,n.addEventListener(ev,l,options||!1)}))}function _off(node,events,listener,options){var instance=makeInstance(node),bag=getEvents(instance),n=getEventTarget(instance);("function"!=typeof listener||(listener=listener._svgjsListenerId))&&(events=Array.isArray(events)?events:(events||"").split(delimiter)).forEach((function(event){var namespace,l,ev=event&&event.split(".")[0],ns=event&&event.split(".")[1];if(listener)bag[ev]&&bag[ev][ns||"*"]&&(n.removeEventListener(ev,bag[ev][ns||"*"][listener],options||!1),delete bag[ev][ns||"*"][listener]);else if(ev&&ns){if(bag[ev]&&bag[ev][ns]){for(l in bag[ev][ns])_off(n,[ev,ns].join("."),l);delete bag[ev][ns]}}else if(ns)for(event in bag)for(namespace in bag[event])ns===namespace&&_off(n,[event,ns].join("."));else if(ev){if(bag[ev]){for(namespace in bag[ev])_off(n,[ev,namespace].join("."));delete bag[ev]}}else{for(event in bag)_off(n,event);!function clearEvents(instance){var n=instance.getEventHolder();n===globals.window&&(n=windowEvents),n.events&&(n.events={})}(instance)}}))}var EventTarget=function(_Base){_inherits(EventTarget,_Base);var _super2=_createSuper(EventTarget);function EventTarget(){return _classCallCheck(this,EventTarget),_super2.apply(this,arguments)}return _createClass(EventTarget,[{key:"addEventListener",value:function addEventListener(){}},{key:"dispatch",value:function dispatch(event,data,options){return function _dispatch(node,event,data,options){var n=getEventTarget(node);return event instanceof globals.window.Event||(event=new globals.window.CustomEvent(event,Object.assign({detail:data,cancelable:!0},options))),n.dispatchEvent(event),event}(this,event,data,options)}},{key:"dispatchEvent",value:function dispatchEvent(event){var bag=this.getEventHolder().events;if(!bag)return!0;var events=bag[event.type];for(var i in events)for(var j in events[i])events[i][j](event);return!event.defaultPrevented}},{key:"fire",value:function fire(event,data,options){return this.dispatch(event,data,options),this}},{key:"getEventHolder",value:function getEventHolder(){return this}},{key:"getEventTarget",value:function getEventTarget(){return this}},{key:"off",value:function off(event,listener,options){return _off(this,event,listener,options),this}},{key:"on",value:function on(event,listener,binding,options){return _on(this,event,listener,binding,options),this}},{key:"removeEventListener",value:function removeEventListener(){}}]),EventTarget}(Base);function noop(){}register(EventTarget,"EventTarget");var timeline_duration=400,timeline_ease=">",timeline_delay=0,attrs={"fill-opacity":1,"stroke-opacity":1,"stroke-width":0,"stroke-linejoin":"miter","stroke-linecap":"butt",fill:"#000000",stroke:"#000000",opacity:1,x:0,y:0,cx:0,cy:0,width:0,height:0,r:0,rx:0,ry:0,offset:0,"stop-opacity":1,"stop-color":"#000000","text-anchor":"start"},SVGArray=function(_Array2){_inherits(SVGArray,_Array2);var _super3=_createSuper(SVGArray);function SVGArray(){var _this5,_this4;_classCallCheck(this,SVGArray);for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++)args[_key5]=arguments[_key5];return(_this5=_this4=_super3.call.apply(_super3,[this].concat(args))).init.apply(_this5,args),_this4}return _createClass(SVGArray,[{key:"clone",value:function clone(){return new this.constructor(this)}},{key:"init",value:function init(arr){return"number"==typeof arr||(this.length=0,this.push.apply(this,_toConsumableArray(this.parse(arr)))),this}},{key:"parse",value:function parse(){var array=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return array instanceof Array?array:array.trim().split(delimiter).map(parseFloat)}},{key:"toArray",value:function toArray(){return Array.prototype.concat.apply([],this)}},{key:"toSet",value:function toSet(){return new Set(this)}},{key:"toString",value:function toString(){return this.join(" ")}},{key:"valueOf",value:function valueOf(){var ret=[];return ret.push.apply(ret,_toConsumableArray(this)),ret}}]),SVGArray}(_wrapNativeSuper(Array)),SVGNumber=function(){function SVGNumber(){_classCallCheck(this,SVGNumber),this.init.apply(this,arguments)}return _createClass(SVGNumber,[{key:"convert",value:function convert(unit){return new SVGNumber(this.value,unit)}},{key:"divide",value:function divide(number){return number=new SVGNumber(number),new SVGNumber(this/number,this.unit||number.unit)}},{key:"init",value:function init(value,unit){return unit=Array.isArray(value)?value[1]:unit,value=Array.isArray(value)?value[0]:value,this.value=0,this.unit=unit||"","number"==typeof value?this.value=isNaN(value)?0:isFinite(value)?value:value<0?-34e37:34e37:"string"==typeof value?(unit=value.match(numberAndUnit))&&(this.value=parseFloat(unit[1]),"%"===unit[5]?this.value/=100:"s"===unit[5]&&(this.value*=1e3),this.unit=unit[5]):value instanceof SVGNumber&&(this.value=value.valueOf(),this.unit=value.unit),this}},{key:"minus",value:function minus(number){return number=new SVGNumber(number),new SVGNumber(this-number,this.unit||number.unit)}},{key:"plus",value:function plus(number){return number=new SVGNumber(number),new SVGNumber(this+number,this.unit||number.unit)}},{key:"times",value:function times(number){return number=new SVGNumber(number),new SVGNumber(this*number,this.unit||number.unit)}},{key:"toArray",value:function toArray(){return[this.value,this.unit]}},{key:"toJSON",value:function toJSON(){return this.toString()}},{key:"toString",value:function toString(){return("%"===this.unit?~~(1e8*this.value)/1e6:"s"===this.unit?this.value/1e3:this.value)+this.unit}},{key:"valueOf",value:function valueOf(){return this.value}}]),SVGNumber}(),hooks=[];var Dom=function(_EventTarget){_inherits(Dom,_EventTarget);var _super4=_createSuper(Dom);function Dom(node,attrs){var _this7;return _classCallCheck(this,Dom),(_this7=_super4.call(this)).node=node,_this7.type=node.nodeName,attrs&&node!==attrs&&_this7.attr(attrs),_this7}return _createClass(Dom,[{key:"add",value:function add(element,i){return(element=makeInstance(element)).removeNamespace&&this.node instanceof globals.window.SVGElement&&element.removeNamespace(),null==i?this.node.appendChild(element.node):element.node!==this.node.childNodes[i]&&this.node.insertBefore(element.node,this.node.childNodes[i]),this}},{key:"addTo",value:function addTo(parent,i){return makeInstance(parent).put(this,i)}},{key:"children",value:function children(){return new List(map(this.node.children,(function(node){return adopt(node)})))}},{key:"clear",value:function clear(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return this}},{key:"clone",value:function clone(){var deep=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.writeDataToDom(),new this.constructor(assignNewId(this.node.cloneNode(deep)))}},{key:"each",value:function each(block,deep){var i,il,children=this.children();for(i=0,il=children.length;i<il;i++)block.apply(children[i],[i,children]),deep&&children[i].each(block,deep);return this}},{key:"element",value:function element(nodeName,attrs){return this.put(new Dom(create(nodeName),attrs))}},{key:"first",value:function first(){return adopt(this.node.firstChild)}},{key:"get",value:function get(i){return adopt(this.node.childNodes[i])}},{key:"getEventHolder",value:function getEventHolder(){return this.node}},{key:"getEventTarget",value:function getEventTarget(){return this.node}},{key:"has",value:function has(element){return this.index(element)>=0}},{key:"html",value:function html(htmlOrFn,outerHTML){return this.xml(htmlOrFn,outerHTML,"http://www.w3.org/1999/xhtml")}},{key:"id",value:function id(_id){return void 0!==_id||this.node.id||(this.node.id=eid(this.type)),this.attr("id",_id)}},{key:"index",value:function index(element){return[].slice.call(this.node.childNodes).indexOf(element.node)}},{key:"last",value:function last(){return adopt(this.node.lastChild)}},{key:"matches",value:function matches(selector){var el=this.node,matcher=el.matches||el.matchesSelector||el.msMatchesSelector||el.mozMatchesSelector||el.webkitMatchesSelector||el.oMatchesSelector||null;return matcher&&matcher.call(el,selector)}},{key:"parent",value:function parent(type){var parent=this;if(!parent.node.parentNode)return null;if(parent=adopt(parent.node.parentNode),!type)return parent;do{if("string"==typeof type?parent.matches(type):parent instanceof type)return parent}while(parent=adopt(parent.node.parentNode));return parent}},{key:"put",value:function put(element,i){return element=makeInstance(element),this.add(element,i),element}},{key:"putIn",value:function putIn(parent,i){return makeInstance(parent).add(this,i)}},{key:"remove",value:function remove(){return this.parent()&&this.parent().removeElement(this),this}},{key:"removeElement",value:function removeElement(element){return this.node.removeChild(element.node),this}},{key:"replace",value:function replace(element){return element=makeInstance(element),this.node.parentNode&&this.node.parentNode.replaceChild(element.node,this.node),element}},{key:"round",value:function round(){var precision=arguments.length>0&&void 0!==arguments[0]?arguments[0]:2,map=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,factor=Math.pow(10,precision),attrs=this.attr(map);for(var i in attrs)"number"==typeof attrs[i]&&(attrs[i]=Math.round(attrs[i]*factor)/factor);return this.attr(attrs),this}},{key:"svg",value:function svg(svgOrFn,outerSVG){return this.xml(svgOrFn,outerSVG,_svg2)}},{key:"toString",value:function toString(){return this.id()}},{key:"words",value:function words(text){return this.node.textContent=text,this}},{key:"wrap",value:function wrap(node){var parent=this.parent();if(!parent)return this.addTo(node);var position=parent.index(this);return parent.put(node,position).put(this)}},{key:"writeDataToDom",value:function writeDataToDom(){return this.each((function(){this.writeDataToDom()})),this}},{key:"xml",value:function xml(xmlOrFn,outerXML,ns){if("boolean"==typeof xmlOrFn&&(ns=outerXML,outerXML=xmlOrFn,xmlOrFn=null),null==xmlOrFn||"function"==typeof xmlOrFn){outerXML=null==outerXML||outerXML,this.writeDataToDom();var current=this;if(null!=xmlOrFn){if(current=adopt(current.node.cloneNode(!0)),outerXML){var result=xmlOrFn(current);if(current=result||current,!1===result)return""}current.each((function(){var result=xmlOrFn(this),_this=result||this;!1===result?this.remove():result&&this!==_this&&this.replace(_this)}),!0)}return outerXML?current.node.outerHTML:current.node.innerHTML}outerXML=null!=outerXML&&outerXML;var well=create("wrapper",ns),fragment=globals.document.createDocumentFragment();well.innerHTML=xmlOrFn;for(var len=well.children.length;len--;)fragment.appendChild(well.firstElementChild);var parent=this.parent();return outerXML?this.replace(fragment)&&parent:this.add(fragment)}}]),Dom}(EventTarget);extend(Dom,{attr:function attr(attr,val,ns){var _this6=this;if(null==attr){attr={};var _step4,_iterator4=_createForOfIteratorHelper(val=this.node.attributes);try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var node=_step4.value;attr[node.nodeName]=isNumber.test(node.nodeValue)?parseFloat(node.nodeValue):node.nodeValue}}catch(err){_iterator4.e(err)}finally{_iterator4.f()}return attr}if(attr instanceof Array)return attr.reduce((function(last,curr){return last[curr]=_this6.attr(curr),last}),{});if("object"==typeof attr&&attr.constructor===Object)for(val in attr)this.attr(val,attr[val]);else if(null===val)this.node.removeAttribute(attr);else{if(null==val)return null==(val=this.node.getAttribute(attr))?attrs[attr]:isNumber.test(val)?parseFloat(val):val;"number"==typeof(val=hooks.reduce((function(_val,hook){return hook(attr,_val,_this6)}),val))?val=new SVGNumber(val):Color.isColor(val)?val=new Color(val):val.constructor===Array&&(val=new SVGArray(val)),"leading"===attr?this.leading&&this.leading(val):"string"==typeof ns?this.node.setAttributeNS(ns,attr,val.toString()):this.node.setAttribute(attr,val.toString()),!this.rebuild||"font-size"!==attr&&"x"!==attr||this.rebuild()}return this},find:function find(query){return baseFind(query,this.node)},findOne:function findOne(query){return adopt(this.node.querySelector(query))}}),register(Dom,"Dom");var Element=function(_Dom){_inherits(Element,_Dom);var _super5=_createSuper(Element);function Element(node,attrs){var _this8;return _classCallCheck(this,Element),(_this8=_super5.call(this,node,attrs)).dom={},_this8.node.instance=_assertThisInitialized(_this8),node.hasAttribute("svgjs:data")&&_this8.setData(JSON.parse(node.getAttribute("svgjs:data"))||{}),_this8}return _createClass(Element,[{key:"center",value:function center(x,y){return this.cx(x).cy(y)}},{key:"cx",value:function cx(x){return null==x?this.x()+this.width()/2:this.x(x-this.width()/2)}},{key:"cy",value:function cy(y){return null==y?this.y()+this.height()/2:this.y(y-this.height()/2)}},{key:"defs",value:function defs(){var root=this.root();return root&&root.defs()}},{key:"dmove",value:function dmove(x,y){return this.dx(x).dy(y)}},{key:"dx",value:function dx(){var x=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.x(new SVGNumber(x).plus(this.x()))}},{key:"dy",value:function dy(){var y=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.y(new SVGNumber(y).plus(this.y()))}},{key:"getEventHolder",value:function getEventHolder(){return this}},{key:"height",value:function height(_height2){return this.attr("height",_height2)}},{key:"move",value:function move(x,y){return this.x(x).y(y)}},{key:"parents",value:function parents(){var until=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root(),isSelector="string"==typeof until;isSelector||(until=makeInstance(until));for(var parents=new List,parent=this;(parent=parent.parent())&&parent.node!==globals.document&&"#document-fragment"!==parent.nodeName&&(parents.push(parent),isSelector||parent.node!==until.node)&&(!isSelector||!parent.matches(until));)if(parent.node===this.root().node)return null;return parents}},{key:"reference",value:function reference(attr){if(!(attr=this.attr(attr)))return null;var m=(attr+"").match(_reference);return m?makeInstance(m[1]):null}},{key:"root",value:function root(){var p=this.parent(function getClass(name){return elements[name]}(_root));return p&&p.root()}},{key:"setData",value:function setData(o){return this.dom=o,this}},{key:"size",value:function size(width,height){var p=proportionalSize(this,width,height);return this.width(new SVGNumber(p.width)).height(new SVGNumber(p.height))}},{key:"width",value:function width(_width2){return this.attr("width",_width2)}},{key:"writeDataToDom",value:function writeDataToDom(){return this.node.removeAttribute("svgjs:data"),Object.keys(this.dom).length&&this.node.setAttribute("svgjs:data",JSON.stringify(this.dom)),_get(_getPrototypeOf(Element.prototype),"writeDataToDom",this).call(this)}},{key:"x",value:function x(_x3){return this.attr("x",_x3)}},{key:"y",value:function y(_y4){return this.attr("y",_y4)}}]),Element}(Dom);extend(Element,{bbox:function bbox(){var box=getBox(this,(function getBBox(node){return node.getBBox()}),(function retry(el){try{var clone=el.clone().addTo(parser().svg).show(),_box=clone.node.getBBox();return clone.remove(),_box}catch(e){throw new Error('Getting bbox of element "'+el.node.nodeName+'" is not possible: '+e.toString())}}));return new Box(box)},rbox:function rbox(el){var box=getBox(this,(function getRBox(node){return node.getBoundingClientRect()}),(function retry(el){throw new Error('Getting rbox of element "'+el.node.nodeName+'" is not possible')})),rbox=new Box(box);return el?rbox.transform(el.screenCTM().inverseO()):rbox.addOffset()},inside:function inside(x,y){var box=this.bbox();return x>box.x&&y>box.y&&x<box.x+box.width&&y<box.y+box.height},point:function point(x,y){return new Point(x,y).transform(this.screenCTM().inverse())},ctm:function ctm(){return new Matrix(this.node.getCTM())},screenCTM:function screenCTM(){if("function"==typeof this.isRoot&&!this.isRoot()){var rect=this.rect(1,1),m=rect.node.getScreenCTM();return rect.remove(),new Matrix(m)}return new Matrix(this.node.getScreenCTM())}}),register(Element,"Element");var sugar={stroke:["color","width","opacity","linecap","linejoin","miterlimit","dasharray","dashoffset"],fill:["color","opacity","rule"],prefix:function prefix(t,a){return"color"===a?t:t+"-"+a}};["fill","stroke"].forEach((function(m){var i,extension={};extension[m]=function(o){if(void 0===o)return this.attr(m);if("string"==typeof o||o instanceof Color||Color.isRgb(o)||o instanceof Element)this.attr(m,o);else for(i=sugar[m].length-1;i>=0;i--)null!=o[sugar[m][i]]&&this.attr(sugar.prefix(m,sugar[m][i]),o[sugar[m][i]]);return this},registerMethods(["Element","Runner"],extension)})),registerMethods(["Element","Runner"],{matrix:function matrix(mat,b,c,d,e,f){return null==mat?new Matrix(this):this.attr("transform",new Matrix(mat,b,c,d,e,f))},rotate:function rotate(angle,cx,cy){return this.transform({rotate:angle,ox:cx,oy:cy},!0)},skew:function skew(x,y,cx,cy){return 1===arguments.length||3===arguments.length?this.transform({skew:x,ox:y,oy:cx},!0):this.transform({skew:[x,y],ox:cx,oy:cy},!0)},shear:function shear(lam,cx,cy){return this.transform({shear:lam,ox:cx,oy:cy},!0)},scale:function scale(x,y,cx,cy){return 1===arguments.length||3===arguments.length?this.transform({scale:x,ox:y,oy:cx},!0):this.transform({scale:[x,y],ox:cx,oy:cy},!0)},translate:function translate(x,y){return this.transform({translate:[x,y]},!0)},relative:function relative(x,y){return this.transform({relative:[x,y]},!0)},flip:function flip(){var direction=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"both",origin=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"center";return-1==="xybothtrue".indexOf(direction)&&(origin=direction,direction="both"),this.transform({flip:direction,origin:origin},!0)},opacity:function opacity(value){return this.attr("opacity",value)}}),registerMethods("radius",{radius:function radius(x){var y=arguments.length>1&&void 0!==arguments[1]?arguments[1]:x,type=(this._element||this).type;return"radialGradient"===type?this.attr("r",new SVGNumber(x)):this.rx(x).ry(y)}}),registerMethods("Path",{length:function length(){return this.node.getTotalLength()},pointAt:function pointAt(length){return new Point(this.node.getPointAtLength(length))}}),registerMethods(["Element","Runner"],{font:function font(a,v){if("object"==typeof a){for(v in a)this.font(v,a[v]);return this}return"leading"===a?this.leading(v):"anchor"===a?this.attr("text-anchor",v):"size"===a||"family"===a||"weight"===a||"stretch"===a||"variant"===a||"style"===a?this.attr("font-"+a,v):this.attr(a,v)}}),registerMethods("Element",["click","dblclick","mousedown","mouseup","mouseover","mouseout","mousemove","mouseenter","mouseleave","touchstart","touchmove","touchleave","touchend","touchcancel"].reduce((function(last,event){return last[event]=function fn(f){return null===f?this.off(event):this.on(event,f),this},last}),{})),registerMethods("Element",{untransform:function untransform(){return this.attr("transform",null)},matrixify:function matrixify(){var matrix=(this.attr("transform")||"").split(transforms).slice(0,-1).map((function(str){var kv=str.trim().split("(");return[kv[0],kv[1].split(delimiter).map((function(str){return parseFloat(str)}))]})).reverse().reduce((function(matrix,transform){return"matrix"===transform[0]?matrix.lmultiply(Matrix.fromArray(transform[1])):matrix[transform[0]].apply(matrix,transform[1])}),new Matrix);return matrix},toParent:function toParent(parent,i){if(this===parent)return this;var ctm=this.screenCTM(),pCtm=parent.screenCTM().inverse();return this.addTo(parent,i).untransform().transform(pCtm.multiply(ctm)),this},toRoot:function toRoot(i){return this.toParent(this.root(),i)},transform:function transform(o,relative){if(null==o||"string"==typeof o){var decomposed=new Matrix(this).decompose();return null==o?decomposed:decomposed[o]}Matrix.isMatrixLike(o)||(o=Object.assign({},o,{origin:getOrigin(o,this)}));var result=new Matrix(!0===relative?this:relative||!1).transform(o);return this.attr("transform",result)}});var Container=function(_Element){_inherits(Container,_Element);var _super6=_createSuper(Container);function Container(){return _classCallCheck(this,Container),_super6.apply(this,arguments)}return _createClass(Container,[{key:"flatten",value:function flatten(){return this.each((function(){if(this instanceof Container)return this.flatten().ungroup()})),this}},{key:"ungroup",value:function ungroup(){var parent=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.parent(),index=arguments.length>1&&void 0!==arguments[1]?arguments[1]:parent.index(this);return index=-1===index?parent.children().length:index,this.each((function(i,children){return children[children.length-i-1].toParent(parent,index)})),this.remove()}}]),Container}(Element);register(Container,"Container");var Defs=function(_Container){_inherits(Defs,_Container);var _super7=_createSuper(Defs);function Defs(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Defs),_super7.call(this,nodeOrNew("defs",node),attrs)}return _createClass(Defs,[{key:"flatten",value:function flatten(){return this}},{key:"ungroup",value:function ungroup(){return this}}]),Defs}(Container);register(Defs,"Defs");var Shape=function(_Element2){_inherits(Shape,_Element2);var _super8=_createSuper(Shape);function Shape(){return _classCallCheck(this,Shape),_super8.apply(this,arguments)}return _createClass(Shape)}(Element);function rx(rx){return this.attr("rx",rx)}function ry(ry){return this.attr("ry",ry)}function x$3(x){return null==x?this.cx()-this.rx():this.cx(x+this.rx())}function y$3(y){return null==y?this.cy()-this.ry():this.cy(y+this.ry())}function cx$1(x){return this.attr("cx",x)}function cy$1(y){return this.attr("cy",y)}function width$2(width){return null==width?2*this.rx():this.rx(new SVGNumber(width).divide(2))}function height$2(height){return null==height?2*this.ry():this.ry(new SVGNumber(height).divide(2))}register(Shape,"Shape");var circled={__proto__:null,rx:rx,ry:ry,x:x$3,y:y$3,cx:cx$1,cy:cy$1,width:width$2,height:height$2},Ellipse=function(_Shape){_inherits(Ellipse,_Shape);var _super9=_createSuper(Ellipse);function Ellipse(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Ellipse),_super9.call(this,nodeOrNew("ellipse",node),attrs)}return _createClass(Ellipse,[{key:"size",value:function size(width,height){var p=proportionalSize(this,width,height);return this.rx(new SVGNumber(p.width).divide(2)).ry(new SVGNumber(p.height).divide(2))}}]),Ellipse}(Shape);extend(Ellipse,circled),registerMethods("Container",{ellipse:wrapWithAttrCheck((function(){var width=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,height=arguments.length>1&&void 0!==arguments[1]?arguments[1]:width;return this.put(new Ellipse).size(width,height).move(0,0)}))}),register(Ellipse,"Ellipse");var Fragment=function(_Dom2){_inherits(Fragment,_Dom2);var _super10=_createSuper(Fragment);function Fragment(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:globals.document.createDocumentFragment();return _classCallCheck(this,Fragment),_super10.call(this,node)}return _createClass(Fragment,[{key:"xml",value:function xml(xmlOrFn,outerXML,ns){if("boolean"==typeof xmlOrFn&&(ns=outerXML,outerXML=xmlOrFn,xmlOrFn=null),null==xmlOrFn||"function"==typeof xmlOrFn){var wrapper=new Dom(create("wrapper",ns));return wrapper.add(this.node.cloneNode(!0)),wrapper.xml(!1,ns)}return _get(_getPrototypeOf(Fragment.prototype),"xml",this).call(this,xmlOrFn,!1,ns)}}]),Fragment}(Dom);function from(x,y){return"radialGradient"===(this._element||this).type?this.attr({fx:new SVGNumber(x),fy:new SVGNumber(y)}):this.attr({x1:new SVGNumber(x),y1:new SVGNumber(y)})}function to(x,y){return"radialGradient"===(this._element||this).type?this.attr({cx:new SVGNumber(x),cy:new SVGNumber(y)}):this.attr({x2:new SVGNumber(x),y2:new SVGNumber(y)})}register(Fragment,"Fragment");var gradiented={__proto__:null,from:from,to:to},Gradient=function(_Container2){_inherits(Gradient,_Container2);var _super11=_createSuper(Gradient);function Gradient(type,attrs){return _classCallCheck(this,Gradient),_super11.call(this,nodeOrNew(type+"Gradient","string"==typeof type?null:type),attrs)}return _createClass(Gradient,[{key:"attr",value:function attr(a,b,c){return"transform"===a&&(a="gradientTransform"),_get(_getPrototypeOf(Gradient.prototype),"attr",this).call(this,a,b,c)}},{key:"bbox",value:function bbox(){return new Box}},{key:"targets",value:function targets(){return baseFind('svg [fill*="'+this.id()+'"]')}},{key:"toString",value:function toString(){return this.url()}},{key:"update",value:function update(block){return this.clear(),"function"==typeof block&&block.call(this,this),this}},{key:"url",value:function url(){return'url("#'+this.id()+'")'}}]),Gradient}(Container);extend(Gradient,gradiented),registerMethods({Container:{gradient:function gradient(){var _this$defs;return(_this$defs=this.defs()).gradient.apply(_this$defs,arguments)}},Defs:{gradient:wrapWithAttrCheck((function(type,block){return this.put(new Gradient(type)).update(block)}))}}),register(Gradient,"Gradient");var Pattern=function(_Container3){_inherits(Pattern,_Container3);var _super12=_createSuper(Pattern);function Pattern(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Pattern),_super12.call(this,nodeOrNew("pattern",node),attrs)}return _createClass(Pattern,[{key:"attr",value:function attr(a,b,c){return"transform"===a&&(a="patternTransform"),_get(_getPrototypeOf(Pattern.prototype),"attr",this).call(this,a,b,c)}},{key:"bbox",value:function bbox(){return new Box}},{key:"targets",value:function targets(){return baseFind('svg [fill*="'+this.id()+'"]')}},{key:"toString",value:function toString(){return this.url()}},{key:"update",value:function update(block){return this.clear(),"function"==typeof block&&block.call(this,this),this}},{key:"url",value:function url(){return'url("#'+this.id()+'")'}}]),Pattern}(Container);registerMethods({Container:{pattern:function pattern(){var _this$defs2;return(_this$defs2=this.defs()).pattern.apply(_this$defs2,arguments)}},Defs:{pattern:wrapWithAttrCheck((function(width,height,block){return this.put(new Pattern).update(block).attr({x:0,y:0,width:width,height:height,patternUnits:"userSpaceOnUse"})}))}}),register(Pattern,"Pattern");var Image=function(_Shape2){_inherits(Image,_Shape2);var _super13=_createSuper(Image);function Image(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Image),_super13.call(this,nodeOrNew("image",node),attrs)}return _createClass(Image,[{key:"load",value:function load(url,callback){if(!url)return this;var img=new globals.window.Image;return _on(img,"load",(function(e){var p=this.parent(Pattern);0===this.width()&&0===this.height()&&this.size(img.width,img.height),p instanceof Pattern&&0===p.width()&&0===p.height()&&p.size(this.width(),this.height()),"function"==typeof callback&&callback.call(this,e)}),this),_on(img,"load error",(function(){_off(img)})),this.attr("href",img.src=url,xlink)}}]),Image}(Shape);!function registerAttrHook(fn){hooks.push(fn)}((function(attr,val,_this){return"fill"!==attr&&"stroke"!==attr||isImage.test(val)&&(val=_this.root().defs().image(val)),val instanceof Image&&(val=_this.root().defs().pattern(0,0,(function(pattern){pattern.add(val)}))),val})),registerMethods({Container:{image:wrapWithAttrCheck((function(source,callback){return this.put(new Image).size(0,0).load(source,callback)}))}}),register(Image,"Image");var PointArray=function(_SVGArray){_inherits(PointArray,_SVGArray);var _super14=_createSuper(PointArray);function PointArray(){return _classCallCheck(this,PointArray),_super14.apply(this,arguments)}return _createClass(PointArray,[{key:"bbox",value:function bbox(){var maxX=-1/0,maxY=-1/0,minX=1/0,minY=1/0;return this.forEach((function(el){maxX=Math.max(el[0],maxX),maxY=Math.max(el[1],maxY),minX=Math.min(el[0],minX),minY=Math.min(el[1],minY)})),new Box(minX,minY,maxX-minX,maxY-minY)}},{key:"move",value:function move(x,y){var box=this.bbox();if(x-=box.x,y-=box.y,!isNaN(x)&&!isNaN(y))for(var i=this.length-1;i>=0;i--)this[i]=[this[i][0]+x,this[i][1]+y];return this}},{key:"parse",value:function parse(){var array=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[0,0],points=[];(array=array instanceof Array?Array.prototype.concat.apply([],array):array.trim().split(delimiter).map(parseFloat)).length%2!=0&&array.pop();for(var i=0,len=array.length;i<len;i+=2)points.push([array[i],array[i+1]]);return points}},{key:"size",value:function size(width,height){var i,box=this.bbox();for(i=this.length-1;i>=0;i--)box.width&&(this[i][0]=(this[i][0]-box.x)*width/box.width+box.x),box.height&&(this[i][1]=(this[i][1]-box.y)*height/box.height+box.y);return this}},{key:"toLine",value:function toLine(){return{x1:this[0][0],y1:this[0][1],x2:this[1][0],y2:this[1][1]}}},{key:"toString",value:function toString(){for(var array=[],i=0,il=this.length;i<il;i++)array.push(this[i].join(","));return array.join(" ")}},{key:"transform",value:function transform(m){return this.clone().transformO(m)}},{key:"transformO",value:function transformO(m){Matrix.isMatrixLike(m)||(m=new Matrix(m));for(var i=this.length;i--;){var _this$i=_slicedToArray(this[i],2),_x4=_this$i[0],_y5=_this$i[1];this[i][0]=m.a*_x4+m.c*_y5+m.e,this[i][1]=m.b*_x4+m.d*_y5+m.f}return this}}]),PointArray}(SVGArray);var pointed={__proto__:null,MorphArray:PointArray,x:function x$2(x){return null==x?this.bbox().x:this.move(x,this.bbox().y)},y:function y$2(y){return null==y?this.bbox().y:this.move(this.bbox().x,y)},width:function width$1(width){var b=this.bbox();return null==width?b.width:this.size(width,b.height)},height:function height$1(height){var b=this.bbox();return null==height?b.height:this.size(b.width,height)}},Line=function(_Shape3){_inherits(Line,_Shape3);var _super15=_createSuper(Line);function Line(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Line),_super15.call(this,nodeOrNew("line",node),attrs)}return _createClass(Line,[{key:"array",value:function array(){return new PointArray([[this.attr("x1"),this.attr("y1")],[this.attr("x2"),this.attr("y2")]])}},{key:"move",value:function move(x,y){return this.attr(this.array().move(x,y).toLine())}},{key:"plot",value:function plot(x1,y1,x2,y2){return null==x1?this.array():(x1=void 0!==y1?{x1:x1,y1:y1,x2:x2,y2:y2}:new PointArray(x1).toLine(),this.attr(x1))}},{key:"size",value:function size(width,height){var p=proportionalSize(this,width,height);return this.attr(this.array().size(p.width,p.height).toLine())}}]),Line}(Shape);extend(Line,pointed),registerMethods({Container:{line:wrapWithAttrCheck((function(){for(var _len6=arguments.length,args=new Array(_len6),_key6=0;_key6<_len6;_key6++)args[_key6]=arguments[_key6];return Line.prototype.plot.apply(this.put(new Line),null!=args[0]?args:[0,0,0,0])}))}}),register(Line,"Line");var Marker=function(_Container4){_inherits(Marker,_Container4);var _super16=_createSuper(Marker);function Marker(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Marker),_super16.call(this,nodeOrNew("marker",node),attrs)}return _createClass(Marker,[{key:"height",value:function height(_height3){return this.attr("markerHeight",_height3)}},{key:"orient",value:function orient(_orient){return this.attr("orient",_orient)}},{key:"ref",value:function ref(x,y){return this.attr("refX",x).attr("refY",y)}},{key:"toString",value:function toString(){return"url(#"+this.id()+")"}},{key:"update",value:function update(block){return this.clear(),"function"==typeof block&&block.call(this,this),this}},{key:"width",value:function width(_width3){return this.attr("markerWidth",_width3)}}]),Marker}(Container);function makeSetterGetter(k,f){return function(v){return null==v?this[k]:(this[k]=v,f&&f.call(this),this)}}registerMethods({Container:{marker:function marker(){var _this$defs3;return(_this$defs3=this.defs()).marker.apply(_this$defs3,arguments)}},Defs:{marker:wrapWithAttrCheck((function(width,height,block){return this.put(new Marker).size(width,height).ref(width/2,height/2).viewbox(0,0,width,height).attr("orient","auto").update(block)}))},marker:{marker:function marker(_marker,width,height,block){var attr=["marker"];return"all"!==_marker&&attr.push(_marker),attr=attr.join("-"),_marker=arguments[1]instanceof Marker?arguments[1]:this.defs().marker(width,height,block),this.attr(attr,_marker)}}}),register(Marker,"Marker");var easing={"-":function _(pos){return pos},"<>":function _(pos){return-Math.cos(pos*Math.PI)/2+.5},">":function _(pos){return Math.sin(pos*Math.PI/2)},"<":function _(pos){return 1-Math.cos(pos*Math.PI/2)},bezier:function bezier(x1,y1,x2,y2){return function(t){return t<0?x1>0?y1/x1*t:x2>0?y2/x2*t:0:t>1?x2<1?(1-y2)/(1-x2)*t+(y2-x2)/(1-x2):x1<1?(1-y1)/(1-x1)*t+(y1-x1)/(1-x1):1:3*t*Math.pow(1-t,2)*y1+3*Math.pow(t,2)*(1-t)*y2+Math.pow(t,3)}},steps:function steps(_steps){var stepPosition=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"end";stepPosition=stepPosition.split("-").reverse()[0];var jumps=_steps;return"none"===stepPosition?--jumps:"both"===stepPosition&&++jumps,function(t){var beforeFlag=arguments.length>1&&void 0!==arguments[1]&&arguments[1],step=Math.floor(t*_steps),jumping=t*step%1==0;return"start"!==stepPosition&&"both"!==stepPosition||++step,beforeFlag&&jumping&&--step,t>=0&&step<0&&(step=0),t<=1&&step>jumps&&(step=jumps),step/jumps}}},Stepper=function(){function Stepper(){_classCallCheck(this,Stepper)}return _createClass(Stepper,[{key:"done",value:function done(){return!1}}]),Stepper}(),Ease=function(_Stepper){_inherits(Ease,_Stepper);var _super17=_createSuper(Ease);function Ease(){var _this9,fn=arguments.length>0&&void 0!==arguments[0]?arguments[0]:timeline_ease;return _classCallCheck(this,Ease),(_this9=_super17.call(this)).ease=easing[fn]||fn,_this9}return _createClass(Ease,[{key:"step",value:function step(from,to,pos){return"number"!=typeof from?pos<1?from:to:from+(to-from)*this.ease(pos)}}]),Ease}(Stepper),Controller=function(_Stepper2){_inherits(Controller,_Stepper2);var _super18=_createSuper(Controller);function Controller(fn){var _this10;return _classCallCheck(this,Controller),(_this10=_super18.call(this)).stepper=fn,_this10}return _createClass(Controller,[{key:"done",value:function done(c){return c.done}},{key:"step",value:function step(current,target,dt,c){return this.stepper(current,target,dt,c)}}]),Controller}(Stepper);function recalculate(){var duration=(this._duration||500)/1e3,overshoot=this._overshoot||0,pi=Math.PI,os=Math.log(overshoot/100+1e-10),zeta=-os/Math.sqrt(pi*pi+os*os),wn=3.9/(zeta*duration);this.d=2*zeta*wn,this.k=wn*wn}var Spring=function(_Controller){_inherits(Spring,_Controller);var _super19=_createSuper(Spring);function Spring(){var _this11,duration=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500,overshoot=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return _classCallCheck(this,Spring),(_this11=_super19.call(this)).duration(duration).overshoot(overshoot),_this11}return _createClass(Spring,[{key:"step",value:function step(current,target,dt,c){if("string"==typeof current)return current;if(c.done=dt===1/0,dt===1/0)return target;if(0===dt)return current;dt>100&&(dt=16),dt/=1e3;var velocity=c.velocity||0,acceleration=-this.d*velocity-this.k*(current-target),newPosition=current+velocity*dt+acceleration*dt*dt/2;return c.velocity=velocity+acceleration*dt,c.done=Math.abs(target-newPosition)+Math.abs(velocity)<.002,c.done?target:newPosition}}]),Spring}(Controller);extend(Spring,{duration:makeSetterGetter("_duration",recalculate),overshoot:makeSetterGetter("_overshoot",recalculate)});var PID=function(_Controller2){_inherits(PID,_Controller2);var _super20=_createSuper(PID);function PID(){var _this12,p=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.1,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.01,d=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,windup=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e3;return _classCallCheck(this,PID),(_this12=_super20.call(this)).p(p).i(i).d(d).windup(windup),_this12}return _createClass(PID,[{key:"step",value:function step(current,target,dt,c){if("string"==typeof current)return current;if(c.done=dt===1/0,dt===1/0)return target;if(0===dt)return current;var p=target-current,i=(c.integral||0)+p*dt,d=(p-(c.error||0))/dt,windup=this._windup;return!1!==windup&&(i=Math.max(-windup,Math.min(i,windup))),c.error=p,c.integral=i,c.done=Math.abs(p)<.001,c.done?target:current+(this.P*p+this.I*i+this.D*d)}}]),PID}(Controller);extend(PID,{windup:makeSetterGetter("_windup"),p:makeSetterGetter("P"),i:makeSetterGetter("I"),d:makeSetterGetter("D")});for(var segmentParameters={M:2,L:2,H:1,V:1,C:6,S:4,Q:4,T:2,A:7,Z:0},pathHandlers={M:function M(c,p,p0){return p.x=p0.x=c[0],p.y=p0.y=c[1],["M",p.x,p.y]},L:function L(c,p){return p.x=c[0],p.y=c[1],["L",c[0],c[1]]},H:function H(c,p){return p.x=c[0],["H",c[0]]},V:function V(c,p){return p.y=c[0],["V",c[0]]},C:function C(c,p){return p.x=c[4],p.y=c[5],["C",c[0],c[1],c[2],c[3],c[4],c[5]]},S:function S(c,p){return p.x=c[2],p.y=c[3],["S",c[0],c[1],c[2],c[3]]},Q:function Q(c,p){return p.x=c[2],p.y=c[3],["Q",c[0],c[1],c[2],c[3]]},T:function T(c,p){return p.x=c[0],p.y=c[1],["T",c[0],c[1]]},Z:function Z(c,p,p0){return p.x=p0.x,p.y=p0.y,["Z"]},A:function A(c,p){return p.x=c[5],p.y=c[6],["A",c[0],c[1],c[2],c[3],c[4],c[5],c[6]]}},mlhvqtcsaz="mlhvqtcsaz".split(""),i=0,il=mlhvqtcsaz.length;i<il;++i)pathHandlers[mlhvqtcsaz[i]]=function(i){return function(c,p,p0){if("H"===i)c[0]=c[0]+p.x;else if("V"===i)c[0]=c[0]+p.y;else if("A"===i)c[5]=c[5]+p.x,c[6]=c[6]+p.y;else for(var j=0,jl=c.length;j<jl;++j)c[j]=c[j]+(j%2?p.y:p.x);return pathHandlers[i](c,p,p0)}}(mlhvqtcsaz[i].toUpperCase());function segmentComplete(parser){return parser.segment.length&&parser.segment.length-1===segmentParameters[parser.segment[0].toUpperCase()]}function startNewSegment(parser,token){parser.inNumber&&finalizeNumber(parser,!1);var pathLetter=isPathLetter.test(token);if(pathLetter)parser.segment=[token];else{var lastCommand=parser.lastCommand,small=lastCommand.toLowerCase(),isSmall=lastCommand===small;parser.segment=["m"===small?isSmall?"l":"L":lastCommand]}return parser.inSegment=!0,parser.lastCommand=parser.segment[0],pathLetter}function finalizeNumber(parser,inNumber){if(!parser.inNumber)throw new Error("Parser Error");parser.number&&parser.segment.push(parseFloat(parser.number)),parser.inNumber=inNumber,parser.number="",parser.pointSeen=!1,parser.hasExponent=!1,segmentComplete(parser)&&finalizeSegment(parser)}function finalizeSegment(parser){parser.inSegment=!1,parser.absolute&&(parser.segment=function makeAbsolut(parser){var command=parser.segment[0];return pathHandlers[command](parser.segment.slice(1),parser.p,parser.p0)}(parser)),parser.segments.push(parser.segment)}function isArcFlag(parser){if(!parser.segment.length)return!1;var isArc="A"===parser.segment[0].toUpperCase(),length=parser.segment.length;return isArc&&(4===length||5===length)}function isExponential(parser){return"E"===parser.lastToken.toUpperCase()}function pathParser(d){for(var toAbsolute=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],index=0,token="",parser={segment:[],inNumber:!1,number:"",lastToken:"",inSegment:!1,segments:[],pointSeen:!1,hasExponent:!1,absolute:toAbsolute,p0:new Point,p:new Point};parser.lastToken=token,token=d.charAt(index++);)if(parser.inSegment||!startNewSegment(parser,token))if("."!==token)if(isNaN(parseInt(token)))if(" "!==token&&","!==token)if("-"!==token)if("E"!==token.toUpperCase()){if(isPathLetter.test(token)){if(parser.inNumber)finalizeNumber(parser,!1);else{if(!segmentComplete(parser))throw new Error("parser Error");finalizeSegment(parser)}--index}}else parser.number+=token,parser.hasExponent=!0;else{if(parser.inNumber&&!isExponential(parser)){finalizeNumber(parser,!1),--index;continue}parser.number+=token,parser.inNumber=!0}else parser.inNumber&&finalizeNumber(parser,!1);else{if("0"===parser.number||isArcFlag(parser)){parser.inNumber=!0,parser.number=token,finalizeNumber(parser,!0);continue}parser.inNumber=!0,parser.number+=token}else{if(parser.pointSeen||parser.hasExponent){finalizeNumber(parser,!1),--index;continue}parser.inNumber=!0,parser.pointSeen=!0,parser.number+=token}return parser.inNumber&&finalizeNumber(parser,!1),parser.inSegment&&segmentComplete(parser)&&finalizeSegment(parser),parser.segments}var PathArray=function(_SVGArray2){_inherits(PathArray,_SVGArray2);var _super21=_createSuper(PathArray);function PathArray(){return _classCallCheck(this,PathArray),_super21.apply(this,arguments)}return _createClass(PathArray,[{key:"bbox",value:function bbox(){return parser().path.setAttribute("d",this.toString()),new Box(parser.nodes.path.getBBox())}},{key:"move",value:function move(x,y){var box=this.bbox();if(x-=box.x,y-=box.y,!isNaN(x)&&!isNaN(y))for(var l,_i3=this.length-1;_i3>=0;_i3--)"M"===(l=this[_i3][0])||"L"===l||"T"===l?(this[_i3][1]+=x,this[_i3][2]+=y):"H"===l?this[_i3][1]+=x:"V"===l?this[_i3][1]+=y:"C"===l||"S"===l||"Q"===l?(this[_i3][1]+=x,this[_i3][2]+=y,this[_i3][3]+=x,this[_i3][4]+=y,"C"===l&&(this[_i3][5]+=x,this[_i3][6]+=y)):"A"===l&&(this[_i3][6]+=x,this[_i3][7]+=y);return this}},{key:"parse",value:function parse(){var d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"M0 0";return Array.isArray(d)&&(d=Array.prototype.concat.apply([],d).toString()),pathParser(d)}},{key:"size",value:function size(width,height){var i,l,box=this.bbox();for(box.width=0===box.width?1:box.width,box.height=0===box.height?1:box.height,i=this.length-1;i>=0;i--)"M"===(l=this[i][0])||"L"===l||"T"===l?(this[i][1]=(this[i][1]-box.x)*width/box.width+box.x,this[i][2]=(this[i][2]-box.y)*height/box.height+box.y):"H"===l?this[i][1]=(this[i][1]-box.x)*width/box.width+box.x:"V"===l?this[i][1]=(this[i][1]-box.y)*height/box.height+box.y:"C"===l||"S"===l||"Q"===l?(this[i][1]=(this[i][1]-box.x)*width/box.width+box.x,this[i][2]=(this[i][2]-box.y)*height/box.height+box.y,this[i][3]=(this[i][3]-box.x)*width/box.width+box.x,this[i][4]=(this[i][4]-box.y)*height/box.height+box.y,"C"===l&&(this[i][5]=(this[i][5]-box.x)*width/box.width+box.x,this[i][6]=(this[i][6]-box.y)*height/box.height+box.y)):"A"===l&&(this[i][1]=this[i][1]*width/box.width,this[i][2]=this[i][2]*height/box.height,this[i][6]=(this[i][6]-box.x)*width/box.width+box.x,this[i][7]=(this[i][7]-box.y)*height/box.height+box.y);return this}},{key:"toString",value:function toString(){return function arrayToString(a){for(var s="",_i2=0,_il=a.length;_i2<_il;_i2++)s+=a[_i2][0],null!=a[_i2][1]&&(s+=a[_i2][1],null!=a[_i2][2]&&(s+=" ",s+=a[_i2][2],null!=a[_i2][3]&&(s+=" ",s+=a[_i2][3],s+=" ",s+=a[_i2][4],null!=a[_i2][5]&&(s+=" ",s+=a[_i2][5],s+=" ",s+=a[_i2][6],null!=a[_i2][7]&&(s+=" ",s+=a[_i2][7])))));return s+" "}(this)}}]),PathArray}(SVGArray),getClassForType=function getClassForType(value){var type=typeof value;return"number"===type?SVGNumber:"string"===type?Color.isColor(value)?Color:delimiter.test(value)?isPathLetter.test(value)?PathArray:SVGArray:numberAndUnit.test(value)?SVGNumber:NonMorphable:morphableTypes.indexOf(value.constructor)>-1?value.constructor:Array.isArray(value)?SVGArray:"object"===type?ObjectBag:NonMorphable},Morphable=function(){function Morphable(stepper){_classCallCheck(this,Morphable),this._stepper=stepper||new Ease("-"),this._from=null,this._to=null,this._type=null,this._context=null,this._morphObj=null}return _createClass(Morphable,[{key:"at",value:function at(pos){return this._morphObj.morph(this._from,this._to,pos,this._stepper,this._context)}},{key:"done",value:function done(){return this._context.map(this._stepper.done).reduce((function(last,curr){return last&&curr}),!0)}},{key:"from",value:function from(val){return null==val?this._from:(this._from=this._set(val),this)}},{key:"stepper",value:function stepper(_stepper){return null==_stepper?this._stepper:(this._stepper=_stepper,this)}},{key:"to",value:function to(val){return null==val?this._to:(this._to=this._set(val),this)}},{key:"type",value:function type(_type){return null==_type?this._type:(this._type=_type,this)}},{key:"_set",value:function _set(value){this._type||this.type(getClassForType(value));var result=new this._type(value);return this._type===Color&&(result=this._to?result[this._to[4]]():this._from?result[this._from[4]]():result),this._type===ObjectBag&&(result=this._to?result.align(this._to):this._from?result.align(this._from):result),result=result.toConsumable(),this._morphObj=this._morphObj||new this._type,this._context=this._context||Array.apply(null,Array(result.length)).map(Object).map((function(o){return o.done=!0,o})),result}}]),Morphable}(),NonMorphable=function(){function NonMorphable(){_classCallCheck(this,NonMorphable),this.init.apply(this,arguments)}return _createClass(NonMorphable,[{key:"init",value:function init(val){return val=Array.isArray(val)?val[0]:val,this.value=val,this}},{key:"toArray",value:function toArray(){return[this.value]}},{key:"valueOf",value:function valueOf(){return this.value}}]),NonMorphable}(),TransformBag=function(){function TransformBag(){_classCallCheck(this,TransformBag),this.init.apply(this,arguments)}return _createClass(TransformBag,[{key:"init",value:function init(obj){return Array.isArray(obj)&&(obj={scaleX:obj[0],scaleY:obj[1],shear:obj[2],rotate:obj[3],translateX:obj[4],translateY:obj[5],originX:obj[6],originY:obj[7]}),Object.assign(this,TransformBag.defaults,obj),this}},{key:"toArray",value:function toArray(){var v=this;return[v.scaleX,v.scaleY,v.shear,v.rotate,v.translateX,v.translateY,v.originX,v.originY]}}]),TransformBag}();TransformBag.defaults={scaleX:1,scaleY:1,shear:0,rotate:0,translateX:0,translateY:0,originX:0,originY:0};var sortByKey=function sortByKey(a,b){return a[0]<b[0]?-1:a[0]>b[0]?1:0},ObjectBag=function(){function ObjectBag(){_classCallCheck(this,ObjectBag),this.init.apply(this,arguments)}return _createClass(ObjectBag,[{key:"align",value:function align(other){for(var values=this.values,_i4=0,_il2=values.length;_i4<_il2;++_i4)if(values[_i4+1]!==other[_i4+1]){if(!other[_i4+1])return this;var defaultObject=(new other[_i4+1]).toArray(),toDelete=values[_i4+2]+3;values.splice.apply(values,[_i4,toDelete,other[_i4],other[_i4+1],other[_i4+2]].concat(_toConsumableArray(defaultObject))),_i4+=values[_i4+2]+2}else{if(values[_i4+1]===Color&&other[_i4+7]!==values[_i4+7]){var _this$values,space=other[_i4+7],color=new Color(this.values.splice(_i4+3,5))[space]().toArray();(_this$values=this.values).splice.apply(_this$values,[_i4+3,0].concat(_toConsumableArray(color)))}_i4+=values[_i4+2]+2}return this}},{key:"init",value:function init(objOrArr){if(this.values=[],!Array.isArray(objOrArr)){objOrArr=objOrArr||{};var entries=[];for(var _i5 in objOrArr){var Type=getClassForType(objOrArr[_i5]),val=new Type(objOrArr[_i5]).toArray();entries.push([_i5,Type,val.length].concat(_toConsumableArray(val)))}return entries.sort(sortByKey),this.values=entries.reduce((function(last,curr){return last.concat(curr)}),[]),this}this.values=objOrArr.slice()}},{key:"toArray",value:function toArray(){return this.values}},{key:"valueOf",value:function valueOf(){for(var obj={},arr=this.values;arr.length;){var key=arr.shift(),Type=arr.shift(),num=arr.shift(),values=arr.splice(0,num);obj[key]=new Type(values)}return obj}}]),ObjectBag}(),morphableTypes=[NonMorphable,TransformBag,ObjectBag];var Path=function(_Shape4){_inherits(Path,_Shape4);var _super22=_createSuper(Path);function Path(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Path),_super22.call(this,nodeOrNew("path",node),attrs)}return _createClass(Path,[{key:"array",value:function array(){return this._array||(this._array=new PathArray(this.attr("d")))}},{key:"clear",value:function clear(){return delete this._array,this}},{key:"height",value:function height(_height4){return null==_height4?this.bbox().height:this.size(this.bbox().width,_height4)}},{key:"move",value:function move(x,y){return this.attr("d",this.array().move(x,y))}},{key:"plot",value:function plot(d){return null==d?this.array():this.clear().attr("d","string"==typeof d?d:this._array=new PathArray(d))}},{key:"size",value:function size(width,height){var p=proportionalSize(this,width,height);return this.attr("d",this.array().size(p.width,p.height))}},{key:"width",value:function width(_width4){return null==_width4?this.bbox().width:this.size(_width4,this.bbox().height)}},{key:"x",value:function x(_x5){return null==_x5?this.bbox().x:this.move(_x5,this.bbox().y)}},{key:"y",value:function y(_y6){return null==_y6?this.bbox().y:this.move(this.bbox().x,_y6)}}]),Path}(Shape);Path.prototype.MorphArray=PathArray,registerMethods({Container:{path:wrapWithAttrCheck((function(d){return this.put(new Path).plot(d||new PathArray)}))}}),register(Path,"Path");var poly={__proto__:null,array:function array(){return this._array||(this._array=new PointArray(this.attr("points")))},clear:function clear(){return delete this._array,this},move:function move$2(x,y){return this.attr("points",this.array().move(x,y))},plot:function plot(p){return null==p?this.array():this.clear().attr("points","string"==typeof p?p:this._array=new PointArray(p))},size:function size$1(width,height){var p=proportionalSize(this,width,height);return this.attr("points",this.array().size(p.width,p.height))}},Polygon=function(_Shape5){_inherits(Polygon,_Shape5);var _super23=_createSuper(Polygon);function Polygon(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Polygon),_super23.call(this,nodeOrNew("polygon",node),attrs)}return _createClass(Polygon)}(Shape);registerMethods({Container:{polygon:wrapWithAttrCheck((function(p){return this.put(new Polygon).plot(p||new PointArray)}))}}),extend(Polygon,pointed),extend(Polygon,poly),register(Polygon,"Polygon");var Polyline=function(_Shape6){_inherits(Polyline,_Shape6);var _super24=_createSuper(Polyline);function Polyline(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Polyline),_super24.call(this,nodeOrNew("polyline",node),attrs)}return _createClass(Polyline)}(Shape);registerMethods({Container:{polyline:wrapWithAttrCheck((function(p){return this.put(new Polyline).plot(p||new PointArray)}))}}),extend(Polyline,pointed),extend(Polyline,poly),register(Polyline,"Polyline");var Rect=function(_Shape7){_inherits(Rect,_Shape7);var _super25=_createSuper(Rect);function Rect(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Rect),_super25.call(this,nodeOrNew("rect",node),attrs)}return _createClass(Rect)}(Shape);extend(Rect,{rx:rx,ry:ry}),registerMethods({Container:{rect:wrapWithAttrCheck((function(width,height){return this.put(new Rect).size(width,height)}))}}),register(Rect,"Rect");var Queue=function(){function Queue(){_classCallCheck(this,Queue),this._first=null,this._last=null}return _createClass(Queue,[{key:"first",value:function first(){return this._first&&this._first.value}},{key:"last",value:function last(){return this._last&&this._last.value}},{key:"push",value:function push(value){var item=void 0!==value.next?value:{value:value,next:null,prev:null};return this._last?(item.prev=this._last,this._last.next=item,this._last=item):(this._last=item,this._first=item),item}},{key:"remove",value:function remove(item){item.prev&&(item.prev.next=item.next),item.next&&(item.next.prev=item.prev),item===this._last&&(this._last=item.prev),item===this._first&&(this._first=item.next),item.prev=null,item.next=null}},{key:"shift",value:function shift(){var remove=this._first;return remove?(this._first=remove.next,this._first&&(this._first.prev=null),this._last=this._first?this._last:null,remove.value):null}}]),Queue}(),Animator={nextDraw:null,frames:new Queue,timeouts:new Queue,immediates:new Queue,timer:function timer(){return globals.window.performance||globals.window.Date},transforms:[],frame:function frame(fn){var node=Animator.frames.push({run:fn});return null===Animator.nextDraw&&(Animator.nextDraw=globals.window.requestAnimationFrame(Animator._draw)),node},timeout:function timeout(fn,delay){delay=delay||0;var time=Animator.timer().now()+delay,node=Animator.timeouts.push({run:fn,time:time});return null===Animator.nextDraw&&(Animator.nextDraw=globals.window.requestAnimationFrame(Animator._draw)),node},immediate:function immediate(fn){var node=Animator.immediates.push(fn);return null===Animator.nextDraw&&(Animator.nextDraw=globals.window.requestAnimationFrame(Animator._draw)),node},cancelFrame:function cancelFrame(node){null!=node&&Animator.frames.remove(node)},clearTimeout:function clearTimeout(node){null!=node&&Animator.timeouts.remove(node)},cancelImmediate:function cancelImmediate(node){null!=node&&Animator.immediates.remove(node)},_draw:function _draw(now){for(var nextTimeout=null,lastTimeout=Animator.timeouts.last();(nextTimeout=Animator.timeouts.shift())&&(now>=nextTimeout.time?nextTimeout.run():Animator.timeouts.push(nextTimeout),nextTimeout!==lastTimeout););for(var nextFrame=null,lastFrame=Animator.frames.last();nextFrame!==lastFrame&&(nextFrame=Animator.frames.shift());)nextFrame.run(now);for(var nextImmediate=null;nextImmediate=Animator.immediates.shift();)nextImmediate();Animator.nextDraw=Animator.timeouts.first()||Animator.frames.first()?globals.window.requestAnimationFrame(Animator._draw):null}},makeSchedule=function makeSchedule(runnerInfo){var start=runnerInfo.start,duration=runnerInfo.runner.duration();return{start:start,duration:duration,end:start+duration,runner:runnerInfo.runner}},defaultSource=function defaultSource(){var w=globals.window;return(w.performance||w.Date).now()},Timeline=function(_EventTarget2){_inherits(Timeline,_EventTarget2);var _super26=_createSuper(Timeline);function Timeline(){var _this13,timeSource=arguments.length>0&&void 0!==arguments[0]?arguments[0]:defaultSource;return _classCallCheck(this,Timeline),(_this13=_super26.call(this))._timeSource=timeSource,_this13._startTime=0,_this13._speed=1,_this13._persist=0,_this13._nextFrame=null,_this13._paused=!0,_this13._runners=[],_this13._runnerIds=[],_this13._lastRunnerId=-1,_this13._time=0,_this13._lastSourceTime=0,_this13._lastStepTime=0,_this13._step=_this13._stepFn.bind(_assertThisInitialized(_this13),!1),_this13._stepImmediate=_this13._stepFn.bind(_assertThisInitialized(_this13),!0),_this13}return _createClass(Timeline,[{key:"active",value:function active(){return!!this._nextFrame}},{key:"finish",value:function finish(){return this.time(this.getEndTimeOfTimeline()+1),this.pause()}},{key:"getEndTime",value:function getEndTime(){var lastRunnerInfo=this.getLastRunnerInfo(),lastDuration=lastRunnerInfo?lastRunnerInfo.runner.duration():0;return(lastRunnerInfo?lastRunnerInfo.start:this._time)+lastDuration}},{key:"getEndTimeOfTimeline",value:function getEndTimeOfTimeline(){var endTimes=this._runners.map((function(i){return i.start+i.runner.duration()}));return Math.max.apply(Math,[0].concat(_toConsumableArray(endTimes)))}},{key:"getLastRunnerInfo",value:function getLastRunnerInfo(){return this.getRunnerInfoById(this._lastRunnerId)}},{key:"getRunnerInfoById",value:function getRunnerInfoById(id){return this._runners[this._runnerIds.indexOf(id)]||null}},{key:"pause",value:function pause(){return this._paused=!0,this._continue()}},{key:"persist",value:function persist(dtOrForever){return null==dtOrForever?this._persist:(this._persist=dtOrForever,this)}},{key:"play",value:function play(){return this._paused=!1,this.updateTime()._continue()}},{key:"reverse",value:function reverse(yes){var currentSpeed=this.speed();if(null==yes)return this.speed(-currentSpeed);var positive=Math.abs(currentSpeed);return this.speed(yes?-positive:positive)}},{key:"schedule",value:function schedule(runner,delay,when){if(null==runner)return this._runners.map(makeSchedule);var absoluteStartTime=0,endTime=this.getEndTime();if(delay=delay||0,null==when||"last"===when||"after"===when)absoluteStartTime=endTime;else if("absolute"===when||"start"===when)absoluteStartTime=delay,delay=0;else if("now"===when)absoluteStartTime=this._time;else if("relative"===when){var _runnerInfo=this.getRunnerInfoById(runner.id);_runnerInfo&&(absoluteStartTime=_runnerInfo.start+delay,delay=0)}else{if("with-last"!==when)throw new Error('Invalid value for the "when" parameter');var lastRunnerInfo=this.getLastRunnerInfo();absoluteStartTime=lastRunnerInfo?lastRunnerInfo.start:this._time}runner.unschedule(),runner.timeline(this);var persist=runner.persist(),runnerInfo={persist:null===persist?this._persist:persist,start:absoluteStartTime+delay,runner:runner};return this._lastRunnerId=runner.id,this._runners.push(runnerInfo),this._runners.sort((function(a,b){return a.start-b.start})),this._runnerIds=this._runners.map((function(info){return info.runner.id})),this.updateTime()._continue(),this}},{key:"seek",value:function seek(dt){return this.time(this._time+dt)}},{key:"source",value:function source(fn){return null==fn?this._timeSource:(this._timeSource=fn,this)}},{key:"speed",value:function speed(_speed){return null==_speed?this._speed:(this._speed=_speed,this)}},{key:"stop",value:function stop(){return this.time(0),this.pause()}},{key:"time",value:function time(_time){return null==_time?this._time:(this._time=_time,this._continue(!0))}},{key:"unschedule",value:function unschedule(runner){var index=this._runnerIds.indexOf(runner.id);return index<0||(this._runners.splice(index,1),this._runnerIds.splice(index,1),runner.timeline(null)),this}},{key:"updateTime",value:function updateTime(){return this.active()||(this._lastSourceTime=this._timeSource()),this}},{key:"_continue",value:function _continue(){var immediateStep=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return Animator.cancelFrame(this._nextFrame),this._nextFrame=null,immediateStep?this._stepImmediate():(this._paused||(this._nextFrame=Animator.frame(this._step)),this)}},{key:"_stepFn",value:function _stepFn(){var immediateStep=arguments.length>0&&void 0!==arguments[0]&&arguments[0],time=this._timeSource(),dtSource=time-this._lastSourceTime;immediateStep&&(dtSource=0);var dtTime=this._speed*dtSource+(this._time-this._lastStepTime);this._lastSourceTime=time,immediateStep||(this._time+=dtTime,this._time=this._time<0?0:this._time),this._lastStepTime=this._time,this.fire("time",this._time);for(var k=this._runners.length;k--;){var runnerInfo=this._runners[k],runner=runnerInfo.runner,dtToStart=this._time-runnerInfo.start;dtToStart<=0&&runner.reset()}for(var runnersLeft=!1,_i6=0,len=this._runners.length;_i6<len;_i6++){var _runnerInfo2=this._runners[_i6],_runner=_runnerInfo2.runner,dt=dtTime,_dtToStart=this._time-_runnerInfo2.start;if(_dtToStart<=0)runnersLeft=!0;else if(_dtToStart<dt&&(dt=_dtToStart),_runner.active()){var finished=_runner.step(dt).done;if(finished){if(!0!==_runnerInfo2.persist){var endTime=_runner.duration()-_runner.time()+this._time;endTime+_runnerInfo2.persist<this._time&&(_runner.unschedule(),--_i6,--len)}}else runnersLeft=!0}}return runnersLeft&&!(this._speed<0&&0===this._time)||this._runnerIds.length&&this._speed<0&&this._time>0?this._continue():(this.pause(),this.fire("finished")),this}}]),Timeline}(EventTarget);registerMethods({Element:{timeline:function timeline(_timeline){return null==_timeline?(this._timeline=this._timeline||new Timeline,this._timeline):(this._timeline=_timeline,this)}}});var Runner=function(_EventTarget3){_inherits(Runner,_EventTarget3);var _super27=_createSuper(Runner);function Runner(options){var _this14;return _classCallCheck(this,Runner),(_this14=_super27.call(this)).id=Runner.id++,options="function"==typeof(options=null==options?timeline_duration:options)?new Controller(options):options,_this14._element=null,_this14._timeline=null,_this14.done=!1,_this14._queue=[],_this14._duration="number"==typeof options&&options,_this14._isDeclarative=options instanceof Controller,_this14._stepper=_this14._isDeclarative?options:new Ease,_this14._history={},_this14.enabled=!0,_this14._time=0,_this14._lastTime=0,_this14._reseted=!0,_this14.transforms=new Matrix,_this14.transformId=1,_this14._haveReversed=!1,_this14._reverse=!1,_this14._loopsDone=0,_this14._swing=!1,_this14._wait=0,_this14._times=1,_this14._frameId=null,_this14._persist=!!_this14._isDeclarative||null,_this14}return _createClass(Runner,[{key:"active",value:function active(enabled){return null==enabled?this.enabled:(this.enabled=enabled,this)}},{key:"addTransform",value:function addTransform(transform,index){return this.transforms.lmultiplyO(transform),this}},{key:"after",value:function after(fn){return this.on("finished",fn)}},{key:"animate",value:function animate(duration,delay,when){var o=Runner.sanitise(duration,delay,when),runner=new Runner(o.duration);return this._timeline&&runner.timeline(this._timeline),this._element&&runner.element(this._element),runner.loop(o).schedule(o.delay,o.when)}},{key:"clearTransform",value:function clearTransform(){return this.transforms=new Matrix,this}},{key:"clearTransformsFromQueue",value:function clearTransformsFromQueue(){this.done&&this._timeline&&this._timeline._runnerIds.includes(this.id)||(this._queue=this._queue.filter((function(item){return!item.isTransform})))}},{key:"delay",value:function delay(_delay){return this.animate(0,_delay)}},{key:"duration",value:function duration(){return this._times*(this._wait+this._duration)-this._wait}},{key:"during",value:function during(fn){return this.queue(null,fn)}},{key:"ease",value:function ease(fn){return this._stepper=new Ease(fn),this}},{key:"element",value:function element(_element){return null==_element?this._element:(this._element=_element,_element._prepareRunner(),this)}},{key:"finish",value:function finish(){return this.step(1/0)}},{key:"loop",value:function loop(times,swing,wait){return"object"==typeof times&&(swing=times.swing,wait=times.wait,times=times.times),this._times=times||1/0,this._swing=swing||!1,this._wait=wait||0,!0===this._times&&(this._times=1/0),this}},{key:"loops",value:function loops(p){var loopDuration=this._duration+this._wait;if(null==p){var loopsDone=Math.floor(this._time/loopDuration),_position=(this._time-loopsDone*loopDuration)/this._duration;return Math.min(loopsDone+_position,this._times)}var partial=p%1,time=loopDuration*Math.floor(p)+this._duration*partial;return this.time(time)}},{key:"persist",value:function persist(dtOrForever){return null==dtOrForever?this._persist:(this._persist=dtOrForever,this)}},{key:"position",value:function position(p){var position,x=this._time,d=this._duration,w=this._wait,t=this._times,s=this._swing,r=this._reverse;if(null==p){var f=function f(x){var swinging=s*Math.floor(x%(2*(w+d))/(w+d)),backwards=swinging&&!r||!swinging&&r,uncliped=Math.pow(-1,backwards)*(x%(w+d))/d+backwards;return Math.max(Math.min(uncliped,1),0)},endTime=t*(w+d)-w;return position=x<=0?Math.round(f(1e-5)):x<endTime?f(x):Math.round(f(endTime-1e-5)),position}var loopsDone=Math.floor(this.loops()),swingForward=s&&loopsDone%2==0;return position=loopsDone+(swingForward&&!r||r&&swingForward?p:1-p),this.loops(position)}},{key:"progress",value:function progress(p){return null==p?Math.min(1,this._time/this.duration()):this.time(p*this.duration())}},{key:"queue",value:function queue(initFn,runFn,retargetFn,isTransform){return this._queue.push({initialiser:initFn||noop,runner:runFn||noop,retarget:retargetFn,isTransform:isTransform,initialised:!1,finished:!1}),this.timeline()&&this.timeline()._continue(),this}},{key:"reset",value:function reset(){return this._reseted||(this.time(0),this._reseted=!0),this}},{key:"reverse",value:function reverse(_reverse){return this._reverse=null==_reverse?!this._reverse:_reverse,this}},{key:"schedule",value:function schedule(timeline,delay,when){if(timeline instanceof Timeline||(when=delay,delay=timeline,timeline=this.timeline()),!timeline)throw Error("Runner cannot be scheduled without timeline");return timeline.schedule(this,delay,when),this}},{key:"step",value:function step(dt){if(!this.enabled)return this;dt=null==dt?16:dt,this._time+=dt;var position=this.position(),running=this._lastPosition!==position&&this._time>=0;this._lastPosition=position;var duration=this.duration(),justStarted=this._lastTime<=0&&this._time>0,justFinished=this._lastTime<duration&&this._time>=duration;this._lastTime=this._time,justStarted&&this.fire("start",this);var declarative=this._isDeclarative;this.done=!declarative&&!justFinished&&this._time>=duration,this._reseted=!1;var converged=!1;return(running||declarative)&&(this._initialise(running),this.transforms=new Matrix,converged=this._run(declarative?dt:position),this.fire("step",this)),this.done=this.done||converged&&declarative,justFinished&&this.fire("finished",this),this}},{key:"time",value:function time(_time2){if(null==_time2)return this._time;var dt=_time2-this._time;return this.step(dt),this}},{key:"timeline",value:function timeline(_timeline2){return void 0===_timeline2?this._timeline:(this._timeline=_timeline2,this)}},{key:"unschedule",value:function unschedule(){var timeline=this.timeline();return timeline&&timeline.unschedule(this),this}},{key:"_initialise",value:function _initialise(running){if(running||this._isDeclarative)for(var _i7=0,len=this._queue.length;_i7<len;++_i7){var current=this._queue[_i7],needsIt=this._isDeclarative||!current.initialised&&running;running=!current.finished,needsIt&&running&&(current.initialiser.call(this),current.initialised=!0)}}},{key:"_rememberMorpher",value:function _rememberMorpher(method,morpher){if(this._history[method]={morpher:morpher,caller:this._queue[this._queue.length-1]},this._isDeclarative){var _timeline3=this.timeline();_timeline3&&_timeline3.play()}}},{key:"_run",value:function _run(positionOrDt){for(var allfinished=!0,_i8=0,len=this._queue.length;_i8<len;++_i8){var current=this._queue[_i8],converged=current.runner.call(this,positionOrDt);current.finished=current.finished||!0===converged,allfinished=allfinished&&current.finished}return allfinished}},{key:"_tryRetarget",value:function _tryRetarget(method,target,extra){if(this._history[method]){if(!this._history[method].caller.initialised){var index=this._queue.indexOf(this._history[method].caller);return this._queue.splice(index,1),!1}this._history[method].caller.retarget?this._history[method].caller.retarget.call(this,target,extra):this._history[method].morpher.to(target),this._history[method].caller.finished=!1;var _timeline4=this.timeline();return _timeline4&&_timeline4.play(),!0}return!1}}],[{key:"sanitise",value:function sanitise(duration,delay,when){var times=1,swing=!1,wait=0;return delay=delay||timeline_delay,when=when||"last","object"!=typeof(duration=duration||timeline_duration)||duration instanceof Stepper||(delay=duration.delay||delay,when=duration.when||when,swing=duration.swing||swing,times=duration.times||times,wait=duration.wait||wait,duration=duration.duration||timeline_duration),{duration:duration,delay:delay,swing:swing,times:times,wait:wait,when:when}}}]),Runner}(EventTarget);Runner.id=0;var FakeRunner=function(){function FakeRunner(){var transforms=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Matrix,id=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,done=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];_classCallCheck(this,FakeRunner),this.transforms=transforms,this.id=id,this.done=done}return _createClass(FakeRunner,[{key:"clearTransformsFromQueue",value:function clearTransformsFromQueue(){}}]),FakeRunner}();extend([Runner,FakeRunner],{mergeWith:function mergeWith(runner){return new FakeRunner(runner.transforms.lmultiply(this.transforms),runner.id)}});var lmultiply=function lmultiply(last,curr){return last.lmultiplyO(curr)},getRunnerTransform=function getRunnerTransform(runner){return runner.transforms};function mergeTransforms(){var netTransform=this._transformationRunners.runners.map(getRunnerTransform).reduce(lmultiply,new Matrix);this.transform(netTransform),this._transformationRunners.merge(),1===this._transformationRunners.length()&&(this._frameId=null)}var RunnerArray=function(){function RunnerArray(){_classCallCheck(this,RunnerArray),this.runners=[],this.ids=[]}return _createClass(RunnerArray,[{key:"add",value:function add(runner){if(!this.runners.includes(runner)){var id=runner.id+1;return this.runners.push(runner),this.ids.push(id),this}}},{key:"clearBefore",value:function clearBefore(id){var deleteCnt=this.ids.indexOf(id+1)||1;return this.ids.splice(0,deleteCnt,0),this.runners.splice(0,deleteCnt,new FakeRunner).forEach((function(r){return r.clearTransformsFromQueue()})),this}},{key:"edit",value:function edit(id,newRunner){var index=this.ids.indexOf(id+1);return this.ids.splice(index,1,id+1),this.runners.splice(index,1,newRunner),this}},{key:"getByID",value:function getByID(id){return this.runners[this.ids.indexOf(id+1)]}},{key:"length",value:function length(){return this.ids.length}},{key:"merge",value:function merge(){for(var lastRunner=null,_i9=0;_i9<this.runners.length;++_i9){var runner=this.runners[_i9];if(lastRunner&&runner.done&&lastRunner.done&&(!runner._timeline||!runner._timeline._runnerIds.includes(runner.id))&&(!lastRunner._timeline||!lastRunner._timeline._runnerIds.includes(lastRunner.id))){this.remove(runner.id);var newRunner=runner.mergeWith(lastRunner);this.edit(lastRunner.id,newRunner),lastRunner=newRunner,--_i9}else lastRunner=runner}return this}},{key:"remove",value:function remove(id){var index=this.ids.indexOf(id+1);return this.ids.splice(index,1),this.runners.splice(index,1),this}}]),RunnerArray}();registerMethods({Element:{animate:function animate(duration,delay,when){var o=Runner.sanitise(duration,delay,when),timeline=this.timeline();return new Runner(o.duration).loop(o).element(this).timeline(timeline.play()).schedule(o.delay,o.when)},delay:function delay(by,when){return this.animate(0,by,when)},_clearTransformRunnersBefore:function _clearTransformRunnersBefore(currentRunner){this._transformationRunners.clearBefore(currentRunner.id)},_currentTransform:function _currentTransform(current){return this._transformationRunners.runners.filter((function(runner){return runner.id<=current.id})).map(getRunnerTransform).reduce(lmultiply,new Matrix)},_addRunner:function _addRunner(runner){this._transformationRunners.add(runner),Animator.cancelImmediate(this._frameId),this._frameId=Animator.immediate(mergeTransforms.bind(this))},_prepareRunner:function _prepareRunner(){null==this._frameId&&(this._transformationRunners=(new RunnerArray).add(new FakeRunner(new Matrix(this))))}}});extend(Runner,{attr:function attr(a,v){return this.styleAttr("attr",a,v)},css:function css(s,v){return this.styleAttr("css",s,v)},styleAttr:function styleAttr(type,nameOrAttrs,val){var _this$styleAttr;if("string"==typeof nameOrAttrs)return this.styleAttr(type,((_this$styleAttr={})[nameOrAttrs]=val,_this$styleAttr));var attrs=nameOrAttrs;if(this._tryRetarget(type,attrs))return this;var morpher=new Morphable(this._stepper).to(attrs),keys=Object.keys(attrs);return this.queue((function(){morpher=morpher.from(this.element()[type](keys))}),(function(pos){return this.element()[type](morpher.at(pos).valueOf()),morpher.done()}),(function(newToAttrs){var newKeys=Object.keys(newToAttrs),differences=function difference(a,b){return a.filter((function(x){return!b.includes(x)}))}(newKeys,keys);if(differences.length){var addedFromAttrs=this.element()[type](differences),oldFromAttrs=new ObjectBag(morpher.from()).valueOf();Object.assign(oldFromAttrs,addedFromAttrs),morpher.from(oldFromAttrs)}var oldToAttrs=new ObjectBag(morpher.to()).valueOf();Object.assign(oldToAttrs,newToAttrs),morpher.to(oldToAttrs),keys=newKeys,attrs=newToAttrs})),this._rememberMorpher(type,morpher),this},zoom:function zoom(level,point){if(this._tryRetarget("zoom",level,point))return this;var morpher=new Morphable(this._stepper).to(new SVGNumber(level));return this.queue((function(){morpher=morpher.from(this.element().zoom())}),(function(pos){return this.element().zoom(morpher.at(pos),point),morpher.done()}),(function(newLevel,newPoint){point=newPoint,morpher.to(newLevel)})),this._rememberMorpher("zoom",morpher),this},transform:function transform(transforms,relative,affine){if(relative=transforms.relative||relative,this._isDeclarative&&!relative&&this._tryRetarget("transform",transforms))return this;var isMatrix=Matrix.isMatrixLike(transforms);affine=null!=transforms.affine?transforms.affine:null!=affine?affine:!isMatrix;var origin,element,current,currentAngle,startTransform,morpher=new Morphable(this._stepper).type(affine?TransformBag:Matrix);return this.queue((function setup(){element=element||this.element(),origin=origin||getOrigin(transforms,element),startTransform=new Matrix(relative?void 0:element),element._addRunner(this),relative||element._clearTransformRunnersBefore(this)}),(function run(pos){relative||this.clearTransform();var _Point$transform2=new Point(origin).transform(element._currentTransform(this)),x=_Point$transform2.x,y=_Point$transform2.y,target=new Matrix(Object.assign({},transforms,{origin:[x,y]})),start=this._isDeclarative&&current?current:startTransform;if(affine){target=target.decompose(x,y),start=start.decompose(x,y);var rTarget=target.rotate,rCurrent=start.rotate,possibilities=[rTarget-360,rTarget,rTarget+360],distances=possibilities.map((function(a){return Math.abs(a-rCurrent)})),shortest=Math.min.apply(Math,_toConsumableArray(distances)),index=distances.indexOf(shortest);target.rotate=possibilities[index]}relative&&(isMatrix||(target.rotate=transforms.rotate||0),this._isDeclarative&&currentAngle&&(start.rotate=currentAngle)),morpher.from(start),morpher.to(target);var affineParameters=morpher.at(pos);return currentAngle=affineParameters.rotate,current=new Matrix(affineParameters),this.addTransform(current),element._addRunner(this),morpher.done()}),(function retarget(newTransforms){(newTransforms.origin||"center").toString()!==(transforms.origin||"center").toString()&&(origin=getOrigin(newTransforms,element)),transforms=Object.assign({},newTransforms,{origin:origin})}),!0),this._isDeclarative&&this._rememberMorpher("transform",morpher),this},x:function x(_x6,relative){return this._queueNumber("x",_x6)},y:function y(_y7){return this._queueNumber("y",_y7)},dx:function dx(){var x=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this._queueNumberDelta("x",x)},dy:function dy(){var y=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this._queueNumberDelta("y",y)},dmove:function dmove(x,y){return this.dx(x).dy(y)},_queueNumberDelta:function _queueNumberDelta(method,to){if(to=new SVGNumber(to),this._tryRetarget(method,to))return this;var morpher=new Morphable(this._stepper).to(to),from=null;return this.queue((function(){from=this.element()[method](),morpher.from(from),morpher.to(from+to)}),(function(pos){return this.element()[method](morpher.at(pos)),morpher.done()}),(function(newTo){morpher.to(from+new SVGNumber(newTo))})),this._rememberMorpher(method,morpher),this},_queueObject:function _queueObject(method,to){if(this._tryRetarget(method,to))return this;var morpher=new Morphable(this._stepper).to(to);return this.queue((function(){morpher.from(this.element()[method]())}),(function(pos){return this.element()[method](morpher.at(pos)),morpher.done()})),this._rememberMorpher(method,morpher),this},_queueNumber:function _queueNumber(method,value){return this._queueObject(method,new SVGNumber(value))},cx:function cx(x){return this._queueNumber("cx",x)},cy:function cy(y){return this._queueNumber("cy",y)},move:function move(x,y){return this.x(x).y(y)},center:function center(x,y){return this.cx(x).cy(y)},size:function size(width,height){var box;return width&&height||(box=this._element.bbox()),width||(width=box.width/box.height*height),height||(height=box.height/box.width*width),this.width(width).height(height)},width:function width(_width5){return this._queueNumber("width",_width5)},height:function height(_height5){return this._queueNumber("height",_height5)},plot:function plot(a,b,c,d){if(4===arguments.length)return this.plot([a,b,c,d]);if(this._tryRetarget("plot",a))return this;var morpher=new Morphable(this._stepper).type(this._element.MorphArray).to(a);return this.queue((function(){morpher.from(this._element.array())}),(function(pos){return this._element.plot(morpher.at(pos)),morpher.done()})),this._rememberMorpher("plot",morpher),this},leading:function leading(value){return this._queueNumber("leading",value)},viewbox:function viewbox(x,y,width,height){return this._queueObject("viewbox",new Box(x,y,width,height))},update:function update(o){return"object"!=typeof o?this.update({offset:arguments[0],color:arguments[1],opacity:arguments[2]}):(null!=o.opacity&&this.attr("stop-opacity",o.opacity),null!=o.color&&this.attr("stop-color",o.color),null!=o.offset&&this.attr("offset",o.offset),this)}}),extend(Runner,{rx:rx,ry:ry,from:from,to:to}),register(Runner,"Runner");var Svg=function(_Container5){_inherits(Svg,_Container5);var _super28=_createSuper(Svg);function Svg(node){var _this15,attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Svg),(_this15=_super28.call(this,nodeOrNew("svg",node),attrs)).namespace(),_this15}return _createClass(Svg,[{key:"defs",value:function defs(){return this.isRoot()?adopt(this.node.querySelector("defs"))||this.put(new Defs):this.root().defs()}},{key:"isRoot",value:function isRoot(){return!this.node.parentNode||!(this.node.parentNode instanceof globals.window.SVGElement)&&"#document-fragment"!==this.node.parentNode.nodeName}},{key:"namespace",value:function namespace(){return this.isRoot()?this.attr({xmlns:_svg2,version:"1.1"}).attr("xmlns:xlink",xlink,xmlns).attr("xmlns:svgjs","http://svgjs.dev/svgjs",xmlns):this.root().namespace()}},{key:"removeNamespace",value:function removeNamespace(){return this.attr({xmlns:null,version:null}).attr("xmlns:xlink",null,xmlns).attr("xmlns:svgjs",null,xmlns)}},{key:"root",value:function root(){return this.isRoot()?this:_get(_getPrototypeOf(Svg.prototype),"root",this).call(this)}}]),Svg}(Container);registerMethods({Container:{nested:wrapWithAttrCheck((function(){return this.put(new Svg)}))}}),register(Svg,"Svg",!0);var _Symbol=function(_Container6){_inherits(_Symbol,_Container6);var _super29=_createSuper(_Symbol);function _Symbol(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,_Symbol),_super29.call(this,nodeOrNew("symbol",node),attrs)}return _createClass(_Symbol)}(Container);registerMethods({Container:{symbol:wrapWithAttrCheck((function(){return this.put(new _Symbol)}))}}),register(_Symbol,"Symbol");var textable={__proto__:null,plain:function plain(text){return!1===this._build&&this.clear(),this.node.appendChild(globals.document.createTextNode(text)),this},length:function length(){return this.node.getComputedTextLength()},x:function x$1(x){var box=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.bbox();return null==x?box.x:this.attr("x",this.attr("x")+x-box.x)},y:function y$1(y){var box=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.bbox();return null==y?box.y:this.attr("y",this.attr("y")+y-box.y)},move:function move$1(x,y){var box=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.bbox();return this.x(x,box).y(y,box)},cx:function cx(x){var box=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.bbox();return null==x?box.cx:this.attr("x",this.attr("x")+x-box.cx)},cy:function cy(y){var box=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.bbox();return null==y?box.cy:this.attr("y",this.attr("y")+y-box.cy)},center:function center(x,y){var box=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.bbox();return this.cx(x,box).cy(y,box)},ax:function ax(x){return this.attr("x",x)},ay:function ay(y){return this.attr("y",y)},amove:function amove(x,y){return this.ax(x).ay(y)},build:function build(build){return this._build=!!build,this}},Text=function(_Shape8){_inherits(Text,_Shape8);var _super30=_createSuper(Text);function Text(node){var _this16,attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Text),(_this16=_super30.call(this,nodeOrNew("text",node),attrs)).dom.leading=new SVGNumber(1.3),_this16._rebuild=!0,_this16._build=!1,_this16}return _createClass(Text,[{key:"leading",value:function leading(value){return null==value?this.dom.leading:(this.dom.leading=new SVGNumber(value),this.rebuild())}},{key:"rebuild",value:function rebuild(_rebuild){if("boolean"==typeof _rebuild&&(this._rebuild=_rebuild),this._rebuild){var self=this,blankLineOffset=0,leading=this.dom.leading;this.each((function(i){var fontSize=globals.window.getComputedStyle(this.node).getPropertyValue("font-size"),dy=leading*new SVGNumber(fontSize);this.dom.newLined&&(this.attr("x",self.attr("x")),"\n"===this.text()?blankLineOffset+=dy:(this.attr("dy",i?dy+blankLineOffset:0),blankLineOffset=0))})),this.fire("rebuild")}return this}},{key:"setData",value:function setData(o){return this.dom=o,this.dom.leading=new SVGNumber(o.leading||1.3),this}},{key:"text",value:function text(_text){if(void 0===_text){var children=this.node.childNodes,firstLine=0;_text="";for(var _i10=0,len=children.length;_i10<len;++_i10)"textPath"!==children[_i10].nodeName?(_i10!==firstLine&&3!==children[_i10].nodeType&&!0===adopt(children[_i10]).dom.newLined&&(_text+="\n"),_text+=children[_i10].textContent):0===_i10&&(firstLine=1);return _text}if(this.clear().build(!0),"function"==typeof _text)_text.call(this,this);else for(var j=0,jl=(_text=(_text+"").split("\n")).length;j<jl;j++)this.newLine(_text[j]);return this.build(!1).rebuild()}}]),Text}(Shape);extend(Text,textable),registerMethods({Container:{text:wrapWithAttrCheck((function(){var text=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.put(new Text).text(text)})),plain:wrapWithAttrCheck((function(){var text=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.put(new Text).plain(text)}))}}),register(Text,"Text");var Tspan=function(_Shape9){_inherits(Tspan,_Shape9);var _super31=_createSuper(Tspan);function Tspan(node){var _this17,attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Tspan),(_this17=_super31.call(this,nodeOrNew("tspan",node),attrs))._build=!1,_this17}return _createClass(Tspan,[{key:"dx",value:function dx(_dx2){return this.attr("dx",_dx2)}},{key:"dy",value:function dy(_dy2){return this.attr("dy",_dy2)}},{key:"newLine",value:function newLine(){this.dom.newLined=!0;var text=this.parent();if(!(text instanceof Text))return this;var i=text.index(this),fontSize=globals.window.getComputedStyle(this.node).getPropertyValue("font-size"),dy=text.dom.leading*new SVGNumber(fontSize);return this.dy(i?dy:0).attr("x",text.x())}},{key:"text",value:function text(_text2){return null==_text2?this.node.textContent+(this.dom.newLined?"\n":""):("function"==typeof _text2?(this.clear().build(!0),_text2.call(this,this),this.build(!1)):this.plain(_text2),this)}}]),Tspan}(Shape);extend(Tspan,textable),registerMethods({Tspan:{tspan:wrapWithAttrCheck((function(){var text=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",tspan=new Tspan;return this._build||this.clear(),this.put(tspan).text(text)}))},Text:{newLine:function newLine(){var text=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.tspan(text).newLine()}}}),register(Tspan,"Tspan");var Circle=function(_Shape10){_inherits(Circle,_Shape10);var _super32=_createSuper(Circle);function Circle(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Circle),_super32.call(this,nodeOrNew("circle",node),attrs)}return _createClass(Circle,[{key:"radius",value:function radius(r){return this.attr("r",r)}},{key:"rx",value:function rx(_rx){return this.attr("r",_rx)}},{key:"ry",value:function ry(_ry){return this.rx(_ry)}},{key:"size",value:function size(_size){return this.radius(new SVGNumber(_size).divide(2))}}]),Circle}(Shape);extend(Circle,{x:x$3,y:y$3,cx:cx$1,cy:cy$1,width:width$2,height:height$2}),registerMethods({Container:{circle:wrapWithAttrCheck((function(){var size=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.put(new Circle).size(size).move(0,0)}))}}),register(Circle,"Circle");var ClipPath=function(_Container7){_inherits(ClipPath,_Container7);var _super33=_createSuper(ClipPath);function ClipPath(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,ClipPath),_super33.call(this,nodeOrNew("clipPath",node),attrs)}return _createClass(ClipPath,[{key:"remove",value:function remove(){return this.targets().forEach((function(el){el.unclip()})),_get(_getPrototypeOf(ClipPath.prototype),"remove",this).call(this)}},{key:"targets",value:function targets(){return baseFind('svg [clip-path*="'+this.id()+'"]')}}]),ClipPath}(Container);registerMethods({Container:{clip:wrapWithAttrCheck((function(){return this.defs().put(new ClipPath)}))},Element:{clipper:function clipper(){return this.reference("clip-path")},clipWith:function clipWith(element){var clipper=element instanceof ClipPath?element:this.parent().clip().add(element);return this.attr("clip-path",'url("#'+clipper.id()+'")')},unclip:function unclip(){return this.attr("clip-path",null)}}}),register(ClipPath,"ClipPath");var ForeignObject=function(_Element3){_inherits(ForeignObject,_Element3);var _super34=_createSuper(ForeignObject);function ForeignObject(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,ForeignObject),_super34.call(this,nodeOrNew("foreignObject",node),attrs)}return _createClass(ForeignObject)}(Element);registerMethods({Container:{foreignObject:wrapWithAttrCheck((function(width,height){return this.put(new ForeignObject).size(width,height)}))}}),register(ForeignObject,"ForeignObject");var containerGeometry={__proto__:null,dmove:function dmove(dx,dy){return this.children().forEach((function(child,i){var bbox;try{bbox=child.bbox()}catch(e){return}var m=new Matrix(child),matrix=m.translate(dx,dy).transform(m.inverse()),p=new Point(bbox.x,bbox.y).transform(matrix);child.move(p.x,p.y)})),this},dx:function dx(dx){return this.dmove(dx,0)},dy:function dy(dy){return this.dmove(0,dy)},height:function height(height){var box=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.bbox();return null==height?box.height:this.size(box.width,height,box)},move:function move(){var x=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,y=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,box=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.bbox(),dx=x-box.x,dy=y-box.y;return this.dmove(dx,dy)},size:function size(width,height){var box=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.bbox(),p=proportionalSize(this,width,height,box),scaleX=p.width/box.width,scaleY=p.height/box.height;return this.children().forEach((function(child,i){var o=new Point(box).transform(new Matrix(child).inverse());child.scale(scaleX,scaleY,o.x,o.y)})),this},width:function width(width){var box=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.bbox();return null==width?box.width:this.size(width,box.height,box)},x:function x(x){var box=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.bbox();return null==x?box.x:this.move(x,box.y,box)},y:function y(y){var box=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.bbox();return null==y?box.y:this.move(box.x,y,box)}},G=function(_Container8){_inherits(G,_Container8);var _super35=_createSuper(G);function G(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,G),_super35.call(this,nodeOrNew("g",node),attrs)}return _createClass(G)}(Container);extend(G,containerGeometry),registerMethods({Container:{group:wrapWithAttrCheck((function(){return this.put(new G)}))}}),register(G,"G");var A=function(_Container9){_inherits(A,_Container9);var _super36=_createSuper(A);function A(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,A),_super36.call(this,nodeOrNew("a",node),attrs)}return _createClass(A,[{key:"target",value:function target(_target){return this.attr("target",_target)}},{key:"to",value:function to(url){return this.attr("href",url,xlink)}}]),A}(Container);extend(A,containerGeometry),registerMethods({Container:{link:wrapWithAttrCheck((function(url){return this.put(new A).to(url)}))},Element:{unlink:function unlink(){var link=this.linker();if(!link)return this;var parent=link.parent();if(!parent)return this.remove();var index=parent.index(link);return parent.add(this,index),link.remove(),this},linkTo:function linkTo(url){var link=this.linker();return link||(link=new A,this.wrap(link)),"function"==typeof url?url.call(link,link):link.to(url),this},linker:function linker(){var link=this.parent();return link&&"a"===link.node.nodeName.toLowerCase()?link:null}}}),register(A,"A");var Mask=function(_Container10){_inherits(Mask,_Container10);var _super37=_createSuper(Mask);function Mask(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Mask),_super37.call(this,nodeOrNew("mask",node),attrs)}return _createClass(Mask,[{key:"remove",value:function remove(){return this.targets().forEach((function(el){el.unmask()})),_get(_getPrototypeOf(Mask.prototype),"remove",this).call(this)}},{key:"targets",value:function targets(){return baseFind('svg [mask*="'+this.id()+'"]')}}]),Mask}(Container);registerMethods({Container:{mask:wrapWithAttrCheck((function(){return this.defs().put(new Mask)}))},Element:{masker:function masker(){return this.reference("mask")},maskWith:function maskWith(element){var masker=element instanceof Mask?element:this.parent().mask().add(element);return this.attr("mask",'url("#'+masker.id()+'")')},unmask:function unmask(){return this.attr("mask",null)}}}),register(Mask,"Mask");var Stop=function(_Element4){_inherits(Stop,_Element4);var _super38=_createSuper(Stop);function Stop(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Stop),_super38.call(this,nodeOrNew("stop",node),attrs)}return _createClass(Stop,[{key:"update",value:function update(o){return("number"==typeof o||o instanceof SVGNumber)&&(o={offset:arguments[0],color:arguments[1],opacity:arguments[2]}),null!=o.opacity&&this.attr("stop-opacity",o.opacity),null!=o.color&&this.attr("stop-color",o.color),null!=o.offset&&this.attr("offset",new SVGNumber(o.offset)),this}}]),Stop}(Element);registerMethods({Gradient:{stop:function stop(offset,color,opacity){return this.put(new Stop).update(offset,color,opacity)}}}),register(Stop,"Stop");var Style=function(_Element5){_inherits(Style,_Element5);var _super39=_createSuper(Style);function Style(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Style),_super39.call(this,nodeOrNew("style",node),attrs)}return _createClass(Style,[{key:"addText",value:function addText(){var w=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.node.textContent+=w,this}},{key:"font",value:function font(name,src){var params=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.rule("@font-face",Object.assign({fontFamily:name,src:src},params))}},{key:"rule",value:function rule(selector,obj){return this.addText(function cssRule(selector,rule){if(!selector)return"";if(!rule)return selector;var ret=selector+"{";for(var _i11 in rule)ret+=_i11.replace(/([A-Z])/g,(function(m,g){return"-"+g.toLowerCase()}))+":"+rule[_i11]+";";return ret+"}"}(selector,obj))}}]),Style}(Element);registerMethods("Dom",{style:function style(selector,obj){return this.put(new Style).rule(selector,obj)},fontface:function fontface(name,src,params){return this.put(new Style).font(name,src,params)}}),register(Style,"Style");var TextPath=function(_Text){_inherits(TextPath,_Text);var _super40=_createSuper(TextPath);function TextPath(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,TextPath),_super40.call(this,nodeOrNew("textPath",node),attrs)}return _createClass(TextPath,[{key:"array",value:function array(){var track=this.track();return track?track.array():null}},{key:"plot",value:function plot(d){var track=this.track(),pathArray=null;return track&&(pathArray=track.plot(d)),null==d?pathArray:this}},{key:"track",value:function track(){return this.reference("href")}}]),TextPath}(Text);registerMethods({Container:{textPath:wrapWithAttrCheck((function(text,path){return text instanceof Text||(text=this.text(text)),text.path(path)}))},Text:{path:wrapWithAttrCheck((function(track){var node,importNodes=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],textPath=new TextPath;if(track instanceof Path||(track=this.defs().path(track)),textPath.attr("href","#"+track,xlink),importNodes)for(;node=this.node.firstChild;)textPath.node.appendChild(node);return this.put(textPath)})),textPath:function textPath(){return this.findOne("textPath")}},Path:{text:wrapWithAttrCheck((function(text){return text instanceof Text||(text=(new Text).addTo(this.parent()).text(text)),text.path(this)})),targets:function targets(){var _this18=this;return baseFind("svg textPath").filter((function(node){return(node.attr("href")||"").includes(_this18.id())}))}}}),TextPath.prototype.MorphArray=PathArray,register(TextPath,"TextPath");var Use=function(_Shape11){_inherits(Use,_Shape11);var _super41=_createSuper(Use);function Use(node){var attrs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:node;return _classCallCheck(this,Use),_super41.call(this,nodeOrNew("use",node),attrs)}return _createClass(Use,[{key:"use",value:function use(element,file){return this.attr("href",(file||"")+"#"+element,xlink)}}]),Use}(Shape);registerMethods({Container:{use:wrapWithAttrCheck((function(element,file){return this.put(new Use).use(element,file)}))}}),register(Use,"Use");var SVG=makeInstance;function RecipientFlow(){var _draw,_json={entities:[]},_lines=[];function _renderPolylines(_draw,_lines){_lines.forEach((function(line){return function _renderOnePolyline(_draw,line){var polyline="",line_color=line.color||"#4c56cb",from=_draw.findOne("#"+line.from.element),to=_draw.findOne("#"+line.to.element),pointsInBetween=function _calculatePointsInBetween(line,from,to){var pointsInBetween=[],y1=_calculateY(from,line.from.point),y2=_calculateY(to,line.to.point),x1=_calculateX(from,line.from.point),x2=_calculateX(to,line.to.point),p1=_translatePositionToNumber(line.from.point),p2=_translatePositionToNumber(line.to.point),code=p1-p2;0===code&&("top"===line.from.point?y1<=y2?(pointsInBetween.push({x:x1,y:y1-20}),pointsInBetween.push({x:x2,y:y1-20})):(pointsInBetween.push({x:x1,y:y2-20}),pointsInBetween.push({x:x2,y:y2-20})):"bottom"===line.from.point?y1<=y2?(pointsInBetween.push({x:x1,y:y2+20}),pointsInBetween.push({x:x2,y:y2+20})):(pointsInBetween.push({x:x1,y:y1+20}),pointsInBetween.push({x:x2,y:y1+20})):x1<=x2?(pointsInBetween.push({x:x2+20,y:y1}),pointsInBetween.push({x:x2+20,y:y2})):(pointsInBetween.push({x:x1+20,y:y1}),pointsInBetween.push({x:x1+20,y:y2})));2!==code&&-2!==code||x1!==x2&&(pointsInBetween.push({x:x1,y:y2+(y1-y2)/2}),pointsInBetween.push({x:x2,y:y2+(y1-y2)/2}));1!==code&&-1!==code&&3!==code&&-3!==code||("top"===line.from.point&&(y1<y2+20?(pointsInBetween.push({x:x1,y:y1-20}),pointsInBetween.push({x:x2+20,y:y1-20}),pointsInBetween.push({x:x2+20,y:y2})):pointsInBetween.push({x:x1,y:y2})),"bottom"===line.from.point&&(y1>y2-20?(pointsInBetween.push({x:x1,y:y1+20}),pointsInBetween.push({x:x2+20,y:y1+20}),pointsInBetween.push({x:x2+20,y:y2})):pointsInBetween.push({x:x1,y:y2})));return pointsInBetween}(line,from,to);polyline+=_calculateX(from,line.from.point)+","+_calculateY(from,line.from.point)+" ",pointsInBetween.forEach((function(p){return polyline+=p.x+","+p.y+" "})),"top"===line.to.point||line.to.point,polyline+=_calculateX(to,line.to.point)+","+_calculateY(to,line.to.point)+" ";line.polyline?line.polyline.plot(polyline):line.polyline=_draw.lines.polyline(polyline).fill("none").stroke({color:line_color,width:2,linecap:"round",linejoin:"round"}).attr("id",line.id)}(_draw,line)}))}function _translatePositionToNumber(position){switch(position){case"top":return 0;case"bottom":return 2;default:return 3}}function _calculateX(group,position){var width=group.entity.attr("width"),x=group.entity.attr("x");switch(position){case"top":case"bottom":return x+width/2;default:return x-width/2}}function _calculateY(group,position){var height=group.entity.attr("height"),y=group.entity.attr("y");switch(position){case"top":default:return y;case"bottom":return y+height}}function _update(){_draw.entities.forEach((function(entity){return entity.remove()})),_draw.entities=[],_lines=[],_json.labels||(_json.labels=[]),_json.labels=_json.labels.map((function(l){return{id:l.id,value:l.value?l.value:"",x:l.x?l.x:0,y:l.y?l.y:0,color:l.color?l.color:"black"}})),_json.entities.map((function(entity){entity.type=entity.type?entity.type:"entity","operation"===entity.type&&(entity.height=entity.width)})),function _renderLabels(){_json.labels&&_json.labels.length>0&&_json.labels.forEach((function(l){_draw.labels.text(l.value).x(l.x).y(l.y)}))}(),_json.entities.forEach((function(entity){return function _renderEntities(_draw,entity){var _group$rect$cx$cy$att,group=_draw.group().attr({id:entity.id});_draw.entities.push(group),entity.background_color=entity.background_color?entity.background_color:"#f06",entity.color=entity.color?entity.color:"#ffffff",entity.radius=entity.radius?entity.radius:0,group.entity=group.rect(entity.width,entity.height).cx(entity.width/2).cy(entity.height/2).attr((_group$rect$cx$cy$att={fill:"#ffffff",stroke:entity.color},_group$rect$cx$cy$att["stroke-width"]=2,_group$rect$cx$cy$att)).radius(entity.radius),entity.class&&group.entity.attr("class",entity.class),group.plain(entity.text).cx(14).cy(entity.height/2+6).attr({fill:entity.color}),group.move(entity.x,entity.y)}(_draw,entity)})),_lines=_json.lines,_renderPolylines(_draw,_lines)}return{initalize:function initalize(id,width,height){(_draw=SVG().addTo(id).size(width,height)).entities=[],_draw.lines=_draw.group(),_draw.labels=_draw.group()},update:function update(json){_json=json,_update()}}}extend([Svg,_Symbol,Image,Pattern,Marker],getMethodsFor("viewbox")),extend([Line,Polyline,Polygon,Path],getMethodsFor("marker")),extend(Text,getMethodsFor("Text")),extend(Path,getMethodsFor("Path")),extend(Defs,getMethodsFor("Defs")),extend([Text,Tspan],getMethodsFor("Tspan")),extend([Rect,Ellipse,Gradient,Runner],getMethodsFor("radius")),extend(EventTarget,getMethodsFor("EventTarget")),extend(Dom,getMethodsFor("Dom")),extend(Element,getMethodsFor("Element")),extend(Shape,getMethodsFor("Shape")),extend([Container,Fragment],getMethodsFor("Container")),extend(Gradient,getMethodsFor("Gradient")),extend(Runner,getMethodsFor("Runner")),List.extend(function getMethodNames(){return _toConsumableArray(new Set(names))}()),function registerMorphableType(){var type=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];morphableTypes.push.apply(morphableTypes,_toConsumableArray([].concat(type)))}([SVGNumber,Color,Box,Matrix,SVGArray,PointArray,PathArray,Point]),function makeMorphable(){extend(morphableTypes,{to:function to(val){return(new Morphable).type(this.constructor).from(this.toArray()).to(val)},fromArray:function fromArray(arr){return this.init(arr),this},toConsumable:function toConsumable(){return this.toArray()},morph:function morph(from,to,pos,stepper,context){return this.fromArray(from.map((function mapper(i,index){return stepper.step(i,to[index],pos,context[index],context)})))}})}();var InProgressLight='<svg width="27" height="27" viewBox="0 0 27 27" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M14.7917 9.625L18.6667 13.5M18.6667 13.5L14.7917 17.375M18.6667 13.5H8.33333M25.125 13.5C25.125 15.0266 24.8243 16.5383 24.2401 17.9487C23.6559 19.3591 22.7996 20.6406 21.7201 21.7201C20.6406 22.7996 19.3591 23.6559 17.9487 24.2401C16.5383 24.8243 15.0266 25.125 13.5 25.125C11.9734 25.125 10.4617 24.8243 9.0513 24.2401C7.64089 23.6559 6.35936 22.7996 5.27988 21.7201C4.2004 20.6406 3.34411 19.3591 2.7599 17.9487C2.17569 16.5383 1.875 15.0266 1.875 13.5C1.875 10.4169 3.09977 7.45999 5.27988 5.27988C7.45999 3.09977 10.4169 1.875 13.5 1.875C16.5831 1.875 19.54 3.09977 21.7201 5.27988C23.9002 7.45999 25.125 10.4169 25.125 13.5Z" stroke="#654DCB" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n</svg>\n',InProgressDark='<svg width="27" height="27" viewBox="0 0 27 27" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M14.7917 9.625L18.6667 13.5M18.6667 13.5L14.7917 17.375M18.6667 13.5H8.33333M25.125 13.5C25.125 15.0266 24.8243 16.5383 24.2401 17.9487C23.6559 19.3591 22.7996 20.6406 21.7201 21.7201C20.6406 22.7996 19.3591 23.6559 17.9487 24.2401C16.5383 24.8243 15.0266 25.125 13.5 25.125C11.9734 25.125 10.4617 24.8243 9.0513 24.2401C7.64089 23.6559 6.35936 22.7996 5.27988 21.7201C4.2004 20.6406 3.34411 19.3591 2.7599 17.9487C2.17569 16.5383 1.875 15.0266 1.875 13.5C1.875 10.4169 3.09977 7.45999 5.27988 5.27988C7.45999 3.09977 10.4169 1.875 13.5 1.875C16.5831 1.875 19.54 3.09977 21.7201 5.27988C23.9002 7.45999 25.125 10.4169 25.125 13.5Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n</svg>\n',VerdocsStatusIndicator=function(){function VerdocsStatusIndicator(hostRef){_classCallCheck(this,VerdocsStatusIndicator),Object(_index_43893f54_js__WEBPACK_IMPORTED_MODULE_51__.h)(this,hostRef),this.size="normal",this.theme="light",this.recipientStatusIcons=[],this.containerId="verdocs-status-indicator-"+Math.random().toString(36).substring(2,11)}return _createClass(VerdocsStatusIndicator,[{key:"componentDidLoad",value:function componentDidLoad(){var _a,_this19=this;if(this.popper=Object(_popper_f860750c_js__WEBPACK_IMPORTED_MODULE_52__.a)(this.summaryComponent,this.detailPanel,{placement:"bottom-start",modifiers:[{name:"offset",options:{offset:[0,10]}}]}),null===(_a=this.document)||void 0===_a?void 0:_a.recipients){var recipientsAtLevel=[];this.document.recipients.forEach((function(recipient){var level=recipient.sequence-1;recipientsAtLevel[level]||(recipientsAtLevel[level]=[]);var id="r-"+level+"-"+recipientsAtLevel[level].length;recipientsAtLevel[level].push(Object.assign({},recipient,{id:id}))}));var levelCount=Object.keys(recipientsAtLevel).length,canvasHeight=40*levelCount+40*(levelCount+1),canvasWidth=0;Object.values(recipientsAtLevel).forEach((function(recipients){var minW=140*recipients.length+40*(recipients.length+1);minW>canvasWidth&&(canvasWidth=minW)}));var entities=[],lines=[],statusIcons=[],_y8=40;Object.entries(recipientsAtLevel).forEach((function(_ref3){var _ref4=_slicedToArray(_ref3,2),level=_ref4[0],recipients=_ref4[1],renderedItemsWidth=180*recipients.length,leftOffset=20+(canvasWidth-renderedItemsWidth)/2;recipients.forEach((function(recipient,index){var _a,_toUpperCase$split2=_slicedToArray((recipient.full_name||"Unknown").toUpperCase().split(" "),2),first=_toUpperCase$split2[0],last=_toUpperCase$split2[1],name=first+" "+(null==last?void 0:last.substring(0,1)),entity={id:recipient.id,text:name,icon:_this19.getStatusIcon(recipient.status),x:180*index+leftOffset,y:_y8,width:140,height:40,color:_this19.getStatusColor(recipient.status),radius:8};entities.push(entity),statusIcons.push({icon:_this19.getStatusIcon(recipient.status),x:180*index+leftOffset+108,y:_y8+20-13}),null===(_a=recipientsAtLevel[+level-1])||void 0===_a||_a.forEach((function(prevRecip){var line={id:"line-"+prevRecip.id+"-"+entity.id,from:{element:prevRecip.id,point:"bottom"},to:{element:entity.id,point:"top"},color:_this19.getStatusColor(recipient.status)};lines.push(line)}))})),_y8+=80})),this.recipientStatusIcons=statusIcons;var diagram=RecipientFlow();diagram.initalize("#"+this.containerId,canvasWidth,canvasHeight),diagram.update({entities:entities,lines:lines})}}},{key:"showDropdown",value:function showDropdown(){var _a,_b;this.isOpen=!0,this.detailPanel.setAttribute("data-show",""),this.detailPanel.removeAttribute("aria-hidden"),null===(_a=this.popper)||void 0===_a||_a.setOptions((function(options){return Object.assign({},options,{modifiers:[].concat(_toConsumableArray(options.modifiers),[{name:"eventListeners",enabled:!0}])})})),null===(_b=this.popper)||void 0===_b||_b.update()}},{key:"handleHideDropdown",value:function handleHideDropdown(e){var _a,_b;"button"===(null===(_a=null==e?void 0:e.target)||void 0===_a?void 0:_a.localName)&&"arrow"===(null===(_b=null==e?void 0:e.target)||void 0===_b?void 0:_b.className)||this.hide()}},{key:"toggleDropdown",value:function toggleDropdown(){this.isOpen?this.hide():this.showDropdown()}},{key:"hide",value:function hide(){var _a;this.isOpen=!1,this.detailPanel.removeAttribute("data-show"),this.detailPanel.setAttribute("aria-hidden","true"),null===(_a=this.popper)||void 0===_a||_a.setOptions((function(options){return Object.assign({},options,{modifiers:[].concat(_toConsumableArray(options.modifiers),[{name:"eventListeners",enabled:!1}])})}))}},{key:"getStatusColor",value:function getStatusColor(status){switch(status){case"invited":case"opened":case"accepted":case"signed":return"#654dcb";case"some-signed":case"submitted":case"complete":return"#55bc81";case"declined":return"#ff0000";default:return"#999999"}}},{key:"getStatusIcon",value:function getStatusIcon(status){switch(status){case"accepted":return"light"===this.theme?'<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\n<circle cx="12.5" cy="12.5" r="11.5" stroke="#654DCB" stroke-width="2"/>\n<path d="M11.728 15.968C11.7067 15.9893 11.7013 16.0107 11.712 16.032C11.7227 16.0533 11.744 16.064 11.776 16.064H16.112C16.1653 16.064 16.208 16.0853 16.24 16.128C16.2827 16.16 16.304 16.2027 16.304 16.256V17.808C16.304 17.8613 16.2827 17.9093 16.24 17.952C16.208 17.984 16.1653 18 16.112 18H8.912C8.85867 18 8.81067 17.984 8.768 17.952C8.736 17.9093 8.72 17.8613 8.72 17.808V16.336C8.72 16.24 8.752 16.16 8.816 16.096C9.33867 15.584 9.872 15.0293 10.416 14.432C10.96 13.824 11.3013 13.4453 11.44 13.296C11.7387 12.944 12.0427 12.608 12.352 12.288C13.3227 11.2107 13.808 10.4107 13.808 9.888C13.808 9.51467 13.6747 9.21067 13.408 8.976C13.1413 8.73067 12.7947 8.608 12.368 8.608C11.9413 8.608 11.5947 8.73067 11.328 8.976C11.0613 9.21067 10.928 9.52533 10.928 9.92V10.32C10.928 10.3733 10.9067 10.4213 10.864 10.464C10.832 10.496 10.7893 10.512 10.736 10.512H8.848C8.79467 10.512 8.74667 10.496 8.704 10.464C8.672 10.4213 8.656 10.3733 8.656 10.32V9.568C8.688 8.992 8.86933 8.48533 9.2 8.048C9.53067 7.6 9.968 7.25867 10.512 7.024C11.0667 6.78933 11.6853 6.672 12.368 6.672C13.1253 6.672 13.7813 6.816 14.336 7.104C14.9013 7.38133 15.3333 7.76 15.632 8.24C15.9413 8.72 16.096 9.25333 16.096 9.84C16.096 10.288 15.984 10.7467 15.76 11.216C15.536 11.6853 15.2 12.192 14.752 12.736C14.4213 13.152 14.064 13.5627 13.68 13.968C13.296 14.3733 12.7253 14.96 11.968 15.728L11.728 15.968Z" fill="#654DCB"/>\n</svg>\n':'<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\n<circle cx="12.5" cy="12.5" r="11.5" stroke="white" stroke-width="2"/>\n<path d="M11.728 15.968C11.7067 15.9893 11.7013 16.0107 11.712 16.032C11.7227 16.0533 11.744 16.064 11.776 16.064H16.112C16.1653 16.064 16.208 16.0853 16.24 16.128C16.2827 16.16 16.304 16.2027 16.304 16.256V17.808C16.304 17.8613 16.2827 17.9093 16.24 17.952C16.208 17.984 16.1653 18 16.112 18H8.912C8.85867 18 8.81067 17.984 8.768 17.952C8.736 17.9093 8.72 17.8613 8.72 17.808V16.336C8.72 16.24 8.752 16.16 8.816 16.096C9.33867 15.584 9.872 15.0293 10.416 14.432C10.96 13.824 11.3013 13.4453 11.44 13.296C11.7387 12.944 12.0427 12.608 12.352 12.288C13.3227 11.2107 13.808 10.4107 13.808 9.888C13.808 9.51467 13.6747 9.21067 13.408 8.976C13.1413 8.73067 12.7947 8.608 12.368 8.608C11.9413 8.608 11.5947 8.73067 11.328 8.976C11.0613 9.21067 10.928 9.52533 10.928 9.92V10.32C10.928 10.3733 10.9067 10.4213 10.864 10.464C10.832 10.496 10.7893 10.512 10.736 10.512H8.848C8.79467 10.512 8.74667 10.496 8.704 10.464C8.672 10.4213 8.656 10.3733 8.656 10.32V9.568C8.688 8.992 8.86933 8.48533 9.2 8.048C9.53067 7.6 9.968 7.25867 10.512 7.024C11.0667 6.78933 11.6853 6.672 12.368 6.672C13.1253 6.672 13.7813 6.816 14.336 7.104C14.9013 7.38133 15.3333 7.76 15.632 8.24C15.9413 8.72 16.096 9.25333 16.096 9.84C16.096 10.288 15.984 10.7467 15.76 11.216C15.536 11.6853 15.2 12.192 14.752 12.736C14.4213 13.152 14.064 13.5627 13.68 13.968C13.296 14.3733 12.7253 14.96 11.968 15.728L11.728 15.968Z" fill="white"/>\n</svg>\n';case"complete":case"submitted":return"light"===this.theme?'<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M6.7152 2.35464C7.71225 2.27504 8.65876 1.88287 9.41995 1.23399C10.2797 0.501758 11.3721 0.0996094 12.5013 0.0996094C13.6306 0.0996094 14.723 0.501758 15.5827 1.23399C16.3439 1.88287 17.2904 2.27504 18.2875 2.35464C19.4135 2.44463 20.4706 2.93273 21.2693 3.73145C22.068 4.53017 22.5561 5.58727 22.6461 6.71324C22.7251 7.70989 23.1173 8.65694 23.7667 9.41799C24.499 10.2777 24.9011 11.3701 24.9011 12.4994C24.9011 13.6287 24.499 14.7211 23.7667 15.5808C23.1179 16.342 22.7257 17.2885 22.6461 18.2855C22.5561 19.4115 22.068 20.4686 21.2693 21.2673C20.4706 22.0661 19.4135 22.5542 18.2875 22.6441C17.2904 22.7237 16.3439 23.1159 15.5827 23.7648C14.723 24.497 13.6306 24.8992 12.5013 24.8992C11.3721 24.8992 10.2797 24.497 9.41995 23.7648C8.65876 23.1159 7.71225 22.7237 6.7152 22.6441C5.58923 22.5542 4.53213 22.0661 3.73341 21.2673C2.93469 20.4686 2.44658 19.4115 2.35659 18.2855C2.27699 17.2885 1.88482 16.342 1.23595 15.5808C0.503711 14.7211 0.101562 13.6287 0.101562 12.4994C0.101562 11.3701 0.503711 10.2777 1.23595 9.41799C1.88482 8.65681 2.27699 7.71029 2.35659 6.71324C2.44658 5.58727 2.93469 4.53017 3.73341 3.73145C4.53213 2.93273 5.58923 2.44463 6.7152 2.35464V2.35464ZM18.2472 10.4952C18.5295 10.2029 18.6858 9.81138 18.6822 9.40497C18.6787 8.99857 18.5157 8.60981 18.2283 8.32242C17.9409 8.03504 17.5522 7.87203 17.1458 7.8685C16.7394 7.86497 16.3478 8.0212 16.0555 8.30354L10.9513 13.4077L8.9472 11.4035C8.65486 11.1212 8.26333 10.965 7.85692 10.9685C7.45052 10.972 7.06176 11.135 6.77438 11.4224C6.48699 11.7098 6.32398 12.0986 6.32045 12.505C6.31692 12.9114 6.47315 13.3029 6.7555 13.5952L9.8555 16.6952C10.1462 16.9858 10.5403 17.1491 10.9513 17.1491C11.3624 17.1491 11.7565 16.9858 12.0472 16.6952L18.2472 10.4952V10.4952Z" fill="#50BE80"/>\n</svg>\n':'<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M6.7152 2.35464C7.71225 2.27504 8.65876 1.88287 9.41995 1.23399C10.2797 0.501758 11.3721 0.0996094 12.5013 0.0996094C13.6306 0.0996094 14.723 0.501758 15.5827 1.23399C16.3439 1.88287 17.2904 2.27504 18.2875 2.35464C19.4135 2.44463 20.4706 2.93273 21.2693 3.73145C22.068 4.53017 22.5561 5.58727 22.6461 6.71324C22.7251 7.70989 23.1173 8.65694 23.7667 9.41799C24.499 10.2777 24.9011 11.3701 24.9011 12.4994C24.9011 13.6287 24.499 14.7211 23.7667 15.5808C23.1179 16.342 22.7257 17.2885 22.6461 18.2855C22.5561 19.4115 22.068 20.4686 21.2693 21.2673C20.4706 22.0661 19.4135 22.5542 18.2875 22.6441C17.2904 22.7237 16.3439 23.1159 15.5827 23.7648C14.723 24.497 13.6306 24.8992 12.5013 24.8992C11.3721 24.8992 10.2797 24.497 9.41995 23.7648C8.65876 23.1159 7.71225 22.7237 6.7152 22.6441C5.58923 22.5542 4.53213 22.0661 3.73341 21.2673C2.93469 20.4686 2.44658 19.4115 2.35659 18.2855C2.27699 17.2885 1.88482 16.342 1.23595 15.5808C0.503711 14.7211 0.101562 13.6287 0.101562 12.4994C0.101562 11.3701 0.503711 10.2777 1.23595 9.41799C1.88482 8.65681 2.27699 7.71029 2.35659 6.71324C2.44658 5.58727 2.93469 4.53017 3.73341 3.73145C4.53213 2.93273 5.58923 2.44463 6.7152 2.35464V2.35464ZM18.2472 10.4952C18.5295 10.2029 18.6858 9.81138 18.6822 9.40497C18.6787 8.99857 18.5157 8.60981 18.2283 8.32242C17.9409 8.03504 17.5522 7.87203 17.1458 7.8685C16.7394 7.86497 16.3478 8.0212 16.0555 8.30354L10.9513 13.4077L8.9472 11.4035C8.65486 11.1212 8.26333 10.965 7.85692 10.9685C7.45052 10.972 7.06176 11.135 6.77438 11.4224C6.48699 11.7098 6.32398 12.0986 6.32045 12.505C6.31692 12.9114 6.47315 13.3029 6.7555 13.5952L9.8555 16.6952C10.1462 16.9858 10.5403 17.1491 10.9513 17.1491C11.3624 17.1491 11.7565 16.9858 12.0472 16.6952L18.2472 10.4952V10.4952Z" fill="#63C58E"/>\n</svg>\n';case"in progress":case"invited":return"light"===this.theme?InProgressLight:InProgressDark;case"canceled":return this.theme,'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M12 24C15.1826 24 18.2348 22.7357 20.4853 20.4853C22.7357 18.2348 24 15.1826 24 12C24 8.8174 22.7357 5.76516 20.4853 3.51472C18.2348 1.26428 15.1826 0 12 0C8.8174 0 5.76516 1.26428 3.51472 3.51472C1.26428 5.76516 0 8.8174 0 12C0 15.1826 1.26428 18.2348 3.51472 20.4853C5.76516 22.7357 8.8174 24 12 24V24ZM9 7.5C8.60218 7.5 8.22064 7.65804 7.93934 7.93934C7.65804 8.22064 7.5 8.60218 7.5 9V15C7.5 15.3978 7.65804 15.7794 7.93934 16.0607C8.22064 16.342 8.60218 16.5 9 16.5H15C15.3978 16.5 15.7794 16.342 16.0607 16.0607C16.342 15.7794 16.5 15.3978 16.5 15V9C16.5 8.60218 16.342 8.22064 16.0607 7.93934C15.7794 7.65804 15.3978 7.5 15 7.5H9Z" fill="#9095B3"/>\n</svg>\n';case"declined":return"light"===this.theme?'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 15.1826 22.7357 18.2348 20.4853 20.4853C18.2348 22.7357 15.1826 24 12 24C8.8174 24 5.76516 22.7357 3.51472 20.4853C1.26428 18.2348 0 15.1826 0 12C0 8.8174 1.26428 5.76516 3.51472 3.51472C5.76516 1.26428 8.8174 0 12 0C15.1826 0 18.2348 1.26428 20.4853 3.51472C22.7357 5.76516 24 8.8174 24 12V12ZM13.5 18C13.5 18.3978 13.342 18.7794 13.0607 19.0607C12.7794 19.342 12.3978 19.5 12 19.5C11.6022 19.5 11.2206 19.342 10.9393 19.0607C10.658 18.7794 10.5 18.3978 10.5 18C10.5 17.6022 10.658 17.2206 10.9393 16.9393C11.2206 16.658 11.6022 16.5 12 16.5C12.3978 16.5 12.7794 16.658 13.0607 16.9393C13.342 17.2206 13.5 17.6022 13.5 18V18ZM12 4.5C11.6022 4.5 11.2206 4.65804 10.9393 4.93934C10.658 5.22064 10.5 5.60218 10.5 6V12C10.5 12.3978 10.658 12.7794 10.9393 13.0607C11.2206 13.342 11.6022 13.5 12 13.5C12.3978 13.5 12.7794 13.342 13.0607 13.0607C13.342 12.7794 13.5 12.3978 13.5 12V6C13.5 5.60218 13.342 5.22064 13.0607 4.93934C12.7794 4.65804 12.3978 4.5 12 4.5Z" fill="#FF0000"/>\n</svg>\n':'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 15.1826 22.7357 18.2348 20.4853 20.4853C18.2348 22.7357 15.1826 24 12 24C8.8174 24 5.76516 22.7357 3.51472 20.4853C1.26428 18.2348 0 15.1826 0 12C0 8.8174 1.26428 5.76516 3.51472 3.51472C5.76516 1.26428 8.8174 0 12 0C15.1826 0 18.2348 1.26428 20.4853 3.51472C22.7357 5.76516 24 8.8174 24 12V12ZM13.5 18C13.5 18.3978 13.342 18.7794 13.0607 19.0607C12.7794 19.342 12.3978 19.5 12 19.5C11.6022 19.5 11.2206 19.342 10.9393 19.0607C10.658 18.7794 10.5 18.3978 10.5 18C10.5 17.6022 10.658 17.2206 10.9393 16.9393C11.2206 16.658 11.6022 16.5 12 16.5C12.3978 16.5 12.7794 16.658 13.0607 16.9393C13.342 17.2206 13.5 17.6022 13.5 18V18ZM12 4.5C11.6022 4.5 11.2206 4.65804 10.9393 4.93934C10.658 5.22064 10.5 5.60218 10.5 6V12C10.5 12.3978 10.658 12.7794 10.9393 13.0607C11.2206 13.342 11.6022 13.5 12 13.5C12.3978 13.5 12.7794 13.342 13.0607 13.0607C13.342 12.7794 13.5 12.3978 13.5 12V6C13.5 5.60218 13.342 5.22064 13.0607 4.93934C12.7794 4.65804 12.3978 4.5 12 4.5Z" fill="#F95353"/>\n</svg>\n';case"opened":return"light"===this.theme?'<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\n<circle cx="12.5" cy="12.5" r="11.5" stroke="#654DCB" stroke-width="2"/>\n<path d="M11.4 6.848C11.4533 6.816 11.5333 6.8 11.64 6.8H13.576C13.6293 6.8 13.672 6.82133 13.704 6.864C13.7467 6.896 13.768 6.93867 13.768 6.992V17.808C13.768 17.8613 13.7467 17.9093 13.704 17.952C13.672 17.984 13.6293 18 13.576 18H11.704C11.6507 18 11.6027 17.984 11.56 17.952C11.528 17.9093 11.512 17.8613 11.512 17.808V9.04C11.512 9.01867 11.5013 8.99733 11.48 8.976C11.4587 8.95467 11.4373 8.94933 11.416 8.96L9.832 9.392L9.768 9.408C9.672 9.408 9.624 9.34933 9.624 9.232L9.576 7.856C9.576 7.74933 9.624 7.67467 9.72 7.632L11.4 6.848Z" fill="#654DCB"/>\n</svg>\n':'<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\n<circle cx="12.5" cy="12.5" r="11.5" stroke="white" stroke-width="2"/>\n<path d="M11.4 6.848C11.4533 6.816 11.5333 6.8 11.64 6.8H13.576C13.6293 6.8 13.672 6.82133 13.704 6.864C13.7467 6.896 13.768 6.93867 13.768 6.992V17.808C13.768 17.8613 13.7467 17.9093 13.704 17.952C13.672 17.984 13.6293 18 13.576 18H11.704C11.6507 18 11.6027 17.984 11.56 17.952C11.528 17.9093 11.512 17.8613 11.512 17.808V9.04C11.512 9.01867 11.5013 8.99733 11.48 8.976C11.4587 8.95467 11.4373 8.94933 11.416 8.96L9.832 9.392L9.768 9.408C9.672 9.408 9.624 9.34933 9.624 9.232L9.576 7.856C9.576 7.74933 9.624 7.67467 9.72 7.632L11.4 6.848Z" fill="white"/>\n</svg>\n';case"signed":return"light"===this.theme?'<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\n<circle cx="12.5" cy="12.5" r="11.5" stroke="#654DCB" stroke-width="2"/>\n<path d="M15.632 12.656C15.8453 13.1467 15.952 13.712 15.952 14.352C15.952 14.928 15.856 15.4613 15.664 15.952C15.408 16.6347 14.976 17.168 14.368 17.552C13.7707 17.936 13.0613 18.128 12.24 18.128C11.4293 18.128 10.7147 17.9253 10.096 17.52C9.488 17.1147 9.05067 16.5653 8.784 15.872C8.63467 15.456 8.54933 15.008 8.528 14.528C8.528 14.4 8.592 14.336 8.72 14.336H10.608C10.736 14.336 10.8 14.4 10.8 14.528C10.8427 14.88 10.9013 15.1413 10.976 15.312C11.072 15.5893 11.2267 15.808 11.44 15.968C11.664 16.1173 11.9253 16.192 12.224 16.192C12.8213 16.192 13.232 15.9307 13.456 15.408C13.6053 15.088 13.68 14.7147 13.68 14.288C13.68 13.7867 13.6 13.376 13.44 13.056C13.1947 12.5547 12.784 12.304 12.208 12.304C12.0907 12.304 11.968 12.3413 11.84 12.416C11.712 12.48 11.5573 12.576 11.376 12.704C11.3333 12.736 11.2907 12.752 11.248 12.752C11.184 12.752 11.136 12.72 11.104 12.656L10.16 11.328C10.1387 11.296 10.128 11.2587 10.128 11.216C10.128 11.152 10.1493 11.0987 10.192 11.056L12.736 8.832C12.7573 8.81067 12.7627 8.78933 12.752 8.768C12.752 8.74667 12.736 8.736 12.704 8.736H8.944C8.89067 8.736 8.84267 8.72 8.8 8.688C8.768 8.64533 8.752 8.59733 8.752 8.544V6.992C8.752 6.93867 8.768 6.896 8.8 6.864C8.84267 6.82133 8.89067 6.8 8.944 6.8H15.616C15.6693 6.8 15.712 6.82133 15.744 6.864C15.7867 6.896 15.808 6.93867 15.808 6.992V8.752C15.808 8.83733 15.7707 8.91733 15.696 8.992L13.6 10.912C13.5787 10.9333 13.568 10.9547 13.568 10.976C13.5787 10.9973 13.6053 11.008 13.648 11.008C14.576 11.1893 15.2373 11.7387 15.632 12.656Z" fill="#654DCB"/>\n</svg>\n':'<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\n<circle cx="12.5" cy="12.5" r="11.5" stroke="white" stroke-width="2"/>\n<path d="M15.632 12.656C15.8453 13.1467 15.952 13.712 15.952 14.352C15.952 14.928 15.856 15.4613 15.664 15.952C15.408 16.6347 14.976 17.168 14.368 17.552C13.7707 17.936 13.0613 18.128 12.24 18.128C11.4293 18.128 10.7147 17.9253 10.096 17.52C9.488 17.1147 9.05067 16.5653 8.784 15.872C8.63467 15.456 8.54933 15.008 8.528 14.528C8.528 14.4 8.592 14.336 8.72 14.336H10.608C10.736 14.336 10.8 14.4 10.8 14.528C10.8427 14.88 10.9013 15.1413 10.976 15.312C11.072 15.5893 11.2267 15.808 11.44 15.968C11.664 16.1173 11.9253 16.192 12.224 16.192C12.8213 16.192 13.232 15.9307 13.456 15.408C13.6053 15.088 13.68 14.7147 13.68 14.288C13.68 13.7867 13.6 13.376 13.44 13.056C13.1947 12.5547 12.784 12.304 12.208 12.304C12.0907 12.304 11.968 12.3413 11.84 12.416C11.712 12.48 11.5573 12.576 11.376 12.704C11.3333 12.736 11.2907 12.752 11.248 12.752C11.184 12.752 11.136 12.72 11.104 12.656L10.16 11.328C10.1387 11.296 10.128 11.2587 10.128 11.216C10.128 11.152 10.1493 11.0987 10.192 11.056L12.736 8.832C12.7573 8.81067 12.7627 8.78933 12.752 8.768C12.752 8.74667 12.736 8.736 12.704 8.736H8.944C8.89067 8.736 8.84267 8.72 8.8 8.688C8.768 8.64533 8.752 8.59733 8.752 8.544V6.992C8.752 6.93867 8.768 6.896 8.8 6.864C8.84267 6.82133 8.89067 6.8 8.944 6.8H15.616C15.6693 6.8 15.712 6.82133 15.744 6.864C15.7867 6.896 15.808 6.93867 15.808 6.992V8.752C15.808 8.83733 15.7707 8.91733 15.696 8.992L13.6 10.912C13.5787 10.9333 13.568 10.9547 13.568 10.976C13.5787 10.9973 13.6053 11.008 13.648 11.008C14.576 11.1893 15.2373 11.7387 15.632 12.656Z" fill="white"/>\n</svg>\n';case"some-signed":return"light"===this.theme?'<svg width="27" height="27" viewBox="0 0 27 27" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M9.62395 13.5009L12.2073 16.0842L17.374 10.9176M8.11916 4.06786C9.04568 3.99392 9.92527 3.6296 10.6327 3.02678C11.4322 2.34513 12.4484 1.9707 13.499 1.9707C14.5495 1.9707 15.5657 2.34513 16.3652 3.02678C17.0726 3.6296 17.9522 3.99392 18.8787 4.06786C19.926 4.15118 20.9092 4.60497 21.6521 5.34781C22.3949 6.09064 22.8487 7.07389 22.932 8.12111C23.0059 9.04764 23.3703 9.92723 23.9731 10.6347C24.6547 11.4341 25.0292 12.4503 25.0292 13.5009C25.0292 14.5515 24.6547 15.5677 23.9731 16.3671C23.3703 17.0746 23.0059 17.9542 22.932 18.8807C22.8487 19.9279 22.3949 20.9112 21.6521 21.654C20.9092 22.3968 19.926 22.8506 18.8787 22.9339C17.9522 23.0079 17.0726 23.3722 16.3652 23.975C15.5657 24.6567 14.5495 25.0311 13.499 25.0311C12.4484 25.0311 11.4322 24.6567 10.6327 23.975C9.92527 23.3722 9.04568 23.0079 8.11916 22.9339C7.07194 22.8506 6.08869 22.3968 5.34585 21.654C4.60302 20.9112 4.14923 19.9279 4.06591 18.8807C3.99196 17.9542 3.62765 17.0746 3.02483 16.3671C2.34318 15.5677 1.96875 14.5515 1.96875 13.5009C1.96875 12.4503 2.34318 11.4341 3.02483 10.6347C3.62765 9.92723 3.99196 9.04764 4.06591 8.12111C4.14923 7.07389 4.60302 6.09064 5.34585 5.34781C6.08869 4.60497 7.07194 4.15118 8.11916 4.06786V4.06786Z" stroke="#654DCB" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n</svg>\n':'<svg width="27" height="27" viewBox="0 0 27 27" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M9.62395 13.5009L12.2073 16.0842L17.374 10.9176M8.11916 4.06786C9.04568 3.99392 9.92527 3.6296 10.6327 3.02678C11.4322 2.34513 12.4484 1.9707 13.499 1.9707C14.5495 1.9707 15.5657 2.34513 16.3652 3.02678C17.0726 3.6296 17.9522 3.99392 18.8787 4.06786C19.926 4.15118 20.9092 4.60497 21.6521 5.34781C22.3949 6.09064 22.8487 7.07389 22.932 8.12111C23.0059 9.04764 23.3703 9.92723 23.9731 10.6347C24.6547 11.4341 25.0292 12.4503 25.0292 13.5009C25.0292 14.5515 24.6547 15.5677 23.9731 16.3671C23.3703 17.0746 23.0059 17.9542 22.932 18.8807C22.8487 19.9279 22.3949 20.9112 21.6521 21.654C20.9092 22.3968 19.926 22.8506 18.8787 22.9339C17.9522 23.0079 17.0726 23.3722 16.3652 23.975C15.5657 24.6567 14.5495 25.0311 13.499 25.0311C12.4484 25.0311 11.4322 24.6567 10.6327 23.975C9.92527 23.3722 9.04568 23.0079 8.11916 22.9339C7.07194 22.8506 6.08869 22.3968 5.34585 21.654C4.60302 20.9112 4.14923 19.9279 4.06591 18.8807C3.99196 17.9542 3.62765 17.0746 3.02483 16.3671C2.34318 15.5677 1.96875 14.5515 1.96875 13.5009C1.96875 12.4503 2.34318 11.4341 3.02483 10.6347C3.62765 9.92723 3.99196 9.04764 4.06591 8.12111C4.14923 7.07389 4.60302 6.09064 5.34585 5.34781C6.08869 4.60497 7.07194 4.15118 8.11916 4.06786V4.06786Z" stroke="#63C58E" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n</svg>\n';default:return"light"===this.theme?'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M7.33333 12H7.345M12 12H12.0117M16.6667 12H16.6783M22.5 12C22.5 13.3789 22.2284 14.7443 21.7007 16.0182C21.1731 17.2921 20.3996 18.4496 19.4246 19.4246C18.4496 20.3996 17.2921 21.1731 16.0182 21.7007C14.7443 22.2284 13.3789 22.5 12 22.5C10.6211 22.5 9.25574 22.2284 7.98182 21.7007C6.70791 21.1731 5.55039 20.3996 4.57538 19.4246C3.60036 18.4496 2.82694 17.2921 2.29926 16.0182C1.77159 14.7443 1.5 13.3789 1.5 12C1.5 9.21523 2.60625 6.54451 4.57538 4.57538C6.54451 2.60625 9.21523 1.5 12 1.5C14.7848 1.5 17.4555 2.60625 19.4246 4.57538C21.3938 6.54451 22.5 9.21523 22.5 12Z" stroke="#999999" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n</svg>\n':'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M7.33333 12H7.345M12 12H12.0117M16.6667 12H16.6783M22.5 12C22.5 13.3789 22.2284 14.7443 21.7007 16.0182C21.1731 17.2921 20.3996 18.4496 19.4246 19.4246C18.4496 20.3996 17.2921 21.1731 16.0182 21.7007C14.7443 22.2284 13.3789 22.5 12 22.5C10.6211 22.5 9.25574 22.2284 7.98182 21.7007C6.70791 21.1731 5.55039 20.3996 4.57538 19.4246C3.60036 18.4496 2.82694 17.2921 2.29926 16.0182C1.77159 14.7443 1.5 13.3789 1.5 12C1.5 9.21523 2.60625 6.54451 4.57538 4.57538C6.54451 2.60625 9.21523 1.5 12 1.5C14.7848 1.5 17.4555 2.60625 19.4246 4.57538C21.3938 6.54451 22.5 9.21523 22.5 12Z" stroke="#cccccc" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n</svg>\n'}}},{key:"getStatusMessage",value:function getStatusMessage(status){switch(status){case"accepted":return"Accepted";case"complete":return"Completed";case"in progress":return"In Progress";case"canceled":return"Cancelled";case"declined":return"Declined";case"invited":return"Invited";case"opened":return"Opened";case"signed":return"Signed";case"submitted":return"Submitted";case"some-signed":return"Partly Signed";default:return"Pending"}}},{key:"render",value:function render(){var _a,_b,_this20=this,status=this.status||(null===(_a=this.document)||void 0===_a?void 0:_a.status)||"pending";if(!this.status&&(null===(_b=this.document)||void 0===_b?void 0:_b.recipients)){var submittedRecipients=this.document.recipients.filter((function(r){return"submitted"===r.status}));submittedRecipients.length>0&&submittedRecipients.length!==this.document.recipients.length&&(status="some-signed")}var icon=this.getStatusIcon(status),statusMessage=this.getStatusMessage(status);return Object(_index_43893f54_js__WEBPACK_IMPORTED_MODULE_51__.f)(_index_43893f54_js__WEBPACK_IMPORTED_MODULE_51__.b,{ref:function ref(el){return _this20.summaryComponent=el},class:this.theme+" "+this.size+" "+(this.document?"has-document":""),"aria-label":"Click to View Details",onClick:function onClick(e){e.stopPropagation(),e.preventDefault(),_this20.document&&_this20.toggleDropdown()},onBlur:function onBlur(e){return _this20.document&&_this20.handleHideDropdown(e)}},Object(_index_43893f54_js__WEBPACK_IMPORTED_MODULE_51__.f)("span",{class:"icon",innerHTML:icon}),Object(_index_43893f54_js__WEBPACK_IMPORTED_MODULE_51__.f)("span",{class:"content"},statusMessage),Object(_index_43893f54_js__WEBPACK_IMPORTED_MODULE_51__.f)("div",{class:"detail-panel",ref:function ref(el){return _this20.detailPanel=el}},Object(_index_43893f54_js__WEBPACK_IMPORTED_MODULE_51__.f)("div",{id:""+this.containerId}),this.recipientStatusIcons.map((function(icon){return Object(_index_43893f54_js__WEBPACK_IMPORTED_MODULE_51__.f)("span",{innerHTML:icon.icon,style:{position:"absolute",top:icon.y+"px",left:icon.x+"px"}})}))))}}]),VerdocsStatusIndicator}();VerdocsStatusIndicator.style='verdocs-status-indicator{display:-ms-flexbox;display:flex;font-size:18px;-ms-flex-wrap:nowrap;flex-wrap:nowrap;padding:4px 12px;border-radius:6px;color:#33364b;-ms-flex-align:center;align-items:center;-ms-flex-direction:row;flex-direction:row;font-family:"Barlow", sans-serif}verdocs-status-indicator.has-document:hover{cursor:pointer;background:rgba(0, 0, 0, 0.1)}verdocs-status-indicator .icon{width:25px;height:25px;margin:0 10px -4px 0}verdocs-status-indicator.dark{color:#ffffff}verdocs-status-indicator.small{font-size:16px}verdocs-status-indicator.small .icon{width:20px;height:20px;margin:0 8px -4px 0}verdocs-status-indicator .detail-panel{display:none;background:#ffffff;border:1px solid #1e2031;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;-ms-flex-direction:column;flex-direction:column;border-radius:10px;font-weight:500}verdocs-status-indicator .detail-panel h1{font-size:44px;color:#092c4c}verdocs-status-indicator .detail-panel[data-show]{display:-ms-flexbox;display:flex}'},"./node_modules/core-js/internals/number-parse-int.js":function(module,exports,__webpack_require__){var global=__webpack_require__("./node_modules/core-js/internals/global.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),toString=__webpack_require__("./node_modules/core-js/internals/to-string.js"),trim=__webpack_require__("./node_modules/core-js/internals/string-trim.js").trim,whitespaces=__webpack_require__("./node_modules/core-js/internals/whitespaces.js"),$parseInt=global.parseInt,Symbol=global.Symbol,ITERATOR=Symbol&&Symbol.iterator,hex=/^[+-]?0x/i,exec=uncurryThis(hex.exec),FORCED=8!==$parseInt(whitespaces+"08")||22!==$parseInt(whitespaces+"0x16")||ITERATOR&&!fails((function(){$parseInt(Object(ITERATOR))}));module.exports=FORCED?function parseInt(string,radix){var S=trim(toString(string));return $parseInt(S,radix>>>0||(exec(hex,S)?16:10))}:$parseInt},"./node_modules/core-js/modules/es.array.splice.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),toObject=__webpack_require__("./node_modules/core-js/internals/to-object.js"),toAbsoluteIndex=__webpack_require__("./node_modules/core-js/internals/to-absolute-index.js"),toIntegerOrInfinity=__webpack_require__("./node_modules/core-js/internals/to-integer-or-infinity.js"),lengthOfArrayLike=__webpack_require__("./node_modules/core-js/internals/length-of-array-like.js"),doesNotExceedSafeInteger=__webpack_require__("./node_modules/core-js/internals/does-not-exceed-safe-integer.js"),arraySpeciesCreate=__webpack_require__("./node_modules/core-js/internals/array-species-create.js"),createProperty=__webpack_require__("./node_modules/core-js/internals/create-property.js"),deletePropertyOrThrow=__webpack_require__("./node_modules/core-js/internals/delete-property-or-throw.js"),HAS_SPECIES_SUPPORT=__webpack_require__("./node_modules/core-js/internals/array-method-has-species-support.js")("splice"),max=Math.max,min=Math.min;$({target:"Array",proto:!0,forced:!HAS_SPECIES_SUPPORT},{splice:function splice(start,deleteCount){var insertCount,actualDeleteCount,A,k,from,to,O=toObject(this),len=lengthOfArrayLike(O),actualStart=toAbsoluteIndex(start,len),argumentsLength=arguments.length;for(0===argumentsLength?insertCount=actualDeleteCount=0:1===argumentsLength?(insertCount=0,actualDeleteCount=len-actualStart):(insertCount=argumentsLength-2,actualDeleteCount=min(max(toIntegerOrInfinity(deleteCount),0),len-actualStart)),doesNotExceedSafeInteger(len+insertCount-actualDeleteCount),A=arraySpeciesCreate(O,actualDeleteCount),k=0;k<actualDeleteCount;k++)(from=actualStart+k)in O&&createProperty(A,k,O[from]);if(A.length=actualDeleteCount,insertCount<actualDeleteCount){for(k=actualStart;k<len-actualDeleteCount;k++)to=k+insertCount,(from=k+actualDeleteCount)in O?O[to]=O[from]:deletePropertyOrThrow(O,to);for(k=len;k>len-actualDeleteCount+insertCount;k--)deletePropertyOrThrow(O,k-1)}else if(insertCount>actualDeleteCount)for(k=len-actualDeleteCount;k>actualStart;k--)to=k+insertCount-1,(from=k+actualDeleteCount-1)in O?O[to]=O[from]:deletePropertyOrThrow(O,to);for(k=0;k<insertCount;k++)O[k+actualStart]=arguments[k+2];return O.length=len-actualDeleteCount+insertCount,A}})},"./node_modules/core-js/modules/es.number.max-safe-integer.js":function(module,exports,__webpack_require__){__webpack_require__("./node_modules/core-js/internals/export.js")({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{MAX_SAFE_INTEGER:9007199254740991})},"./node_modules/core-js/modules/es.object.get-own-property-names.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),getOwnPropertyNames=__webpack_require__("./node_modules/core-js/internals/object-get-own-property-names-external.js").f;$({target:"Object",stat:!0,forced:fails((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:getOwnPropertyNames})},"./node_modules/core-js/modules/es.parse-int.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),$parseInt=__webpack_require__("./node_modules/core-js/internals/number-parse-int.js");$({global:!0,forced:parseInt!=$parseInt},{parseInt:$parseInt})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,