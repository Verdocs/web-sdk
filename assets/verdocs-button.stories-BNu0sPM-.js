import{a as e}from"./icons-DXkw3eWC.js";import{x as u}from"./lit-html-DH549LZe.js";const m={title:"Controls/Button",component:"verdocs-button",parameters:{layout:"centered",docs:{extractComponentDescription:()=>(console.log("a"),"component description"),description:{story:'Display a simple button.\n\nThree variants are supported. `standard` and `outline` buttons look like traditional form buttons and are ideal candidates for \'Ok\' and\n\'Cancel\' options in most cases. `text` buttons are intended to be used inline in content blocks or for more subtle button options.\n(Auth uses text buttons for the Forgot Password and Sign Up options.)\n\nFour sizes are also supported. Most use cases will call for the `normal` size, but a `small` size is ideal for more subtle controls, such\nas pagination or other secondary functions. `medium` buttons are slightly larger to provide balance in forms where other items are also\nbigger, and `large` buttons are for cases where the page has mostly white-space and the buttons need to fill more space.\n\nIcons may be placed either before ("start") or after ("end") the button label. Icons should be SVG objects passed as strings and will\nbe rendered as HTML inside the button label area. It is important that the root &lt;SVG&gt; tag contains a default `fill="#ffffff"` setting\nfor the base color, and that child elements below it do not. This allows the button color to carry into the icon properly.'}}},args:{label:"Click Me",type:"button",size:"normal",variant:"standard",disabled:!1,startIcon:null,endIcon:null},argTypes:{label:{type:"string"},type:{control:"select",options:["button","submit","reset"],description:"The type of the button."},size:{control:"select",options:["small","normal","medium","large"],description:"The size of the button."},variant:{control:"select",options:["standard","text","outline"]},startIcon:{...e,description:"If set to an SVG, will be displayed to the left of the button label"},endIcon:{...e,description:"If set to an SVG, will be displayed to the right of the button label"},click:{action:"click",description:"Fired when the user clicks the button."}}},t=({label:a,size:r,variant:i,disabled:l,startIcon:c,endIcon:d,click:b})=>u`<verdocs-button .label=${a} .size=${r} .variant=${i} .disabled=${l} .startIcon=${c} .endIcon=${d} @click=${b} />`;var o,n,s;t.parameters={...t.parameters,docs:{...(o=t.parameters)==null?void 0:o.docs,source:{originalSource:"({\n  label,\n  size,\n  variant,\n  disabled,\n  startIcon,\n  endIcon,\n  click\n}) => html`<verdocs-button .label=${label} .size=${size} .variant=${variant} .disabled=${disabled} .startIcon=${startIcon} .endIcon=${endIcon} @click=${click} />`",...(s=(n=t.parameters)==null?void 0:n.docs)==null?void 0:s.source}}};const f=["Button"];export{t as Button,f as __namedExportsOrder,m as default};
