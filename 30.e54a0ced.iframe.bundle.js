/*! For license information please see 30.e54a0ced.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{"./dist/esm/Templates-1893bda7.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getSummary})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getTemplates})),__webpack_require__.d(__webpack_exports__,"c",(function(){return createTemplate})),__webpack_require__.d(__webpack_exports__,"d",(function(){return deleteTemplate})),__webpack_require__.d(__webpack_exports__,"e",(function(){return getTemplate})),__webpack_require__.d(__webpack_exports__,"f",(function(){return updateTemplate}));__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js");var __awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=function(thisArg,body){var f,y,t,g,_={label:0,sent:function sent(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;g&&(g=0,op[0]&&(_=0)),_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},getTemplates=function getTemplates(endpoint,params){return endpoint.api.post("/templates",{params:params}).then((function(r){return r.data}))},getTemplate=function getTemplate(endpoint,templateId){return endpoint.api.get("/templates/".concat(templateId)).then((function(r){return r.data}))},ALLOWED_CREATE_FIELDS=["name","is_personal","is_public","sender","description","roles","fields"],createTemplate=function createTemplate(endpoint,params,_onUploadProgress){var options={timeout:12e4,onUploadProgress:function onUploadProgress(event){var total=event.total||1,loaded=event.loaded||0;null==_onUploadProgress||_onUploadProgress(Math.floor(100*loaded/(total||1)),loaded,total||1)}};if(params.documents&&params.documents[0]instanceof File){if(params.documents.length>10)throw new Error("createTemplate() has a maximum of 10 documents that can be attached.");var formData_1=new FormData;return ALLOWED_CREATE_FIELDS.forEach((function(allowedKey){void 0!==params[allowedKey]&&formData_1.append(allowedKey,params[allowedKey])})),params.documents.forEach((function(file){formData_1.append("documents",file,file.name)})),endpoint.api.post("/templates",formData_1,options).then((function(r){return r.data}))}return endpoint.api.post("/templates",params,options).then((function(r){return r.data}))},updateTemplate=function updateTemplate(endpoint,templateId,params){return endpoint.api.put("/templates/".concat(templateId),params).then((function(r){return r.data}))},deleteTemplate=function deleteTemplate(endpoint,templateId){return endpoint.api.delete("/templates/".concat(templateId)).then((function(r){return r.data}))},getSummary=function getSummary(endpoint,params){return void 0===params&&(params={}),__awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.post("/templates/summary",params).then((function(r){return r.data}))]}))}))}},"./dist/esm/Toast-f3b8fd46.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return VerdocsToast}));__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.timers.js");var Icons={error:'<div class="toast-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" style="width: 24px; height: 24px; display: block;">\n  <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z" clip-rule="evenodd" />\n</svg></div>',success:'<div class="toast-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" style="width: 24px; height: 24px; display: block;">\n  <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm13.36-1.814a.75.75 0 10-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 00-1.06 1.06l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z" clip-rule="evenodd" />\n</svg></div>',info:'<div class="toast-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" style="width: 24px; height: 24px; display: block;">\n  <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm8.706-1.442c1.146-.573 2.437.463 2.126 1.706l-.709 2.836.042-.02a.75.75 0 01.67 1.34l-.04.022c-1.147.573-2.438-.463-2.127-1.706l.71-2.836-.042.02a.75.75 0 11-.671-1.34l.041-.022zM12 9a.75.75 0 100-1.5.75.75 0 000 1.5z" clip-rule="evenodd" />\n</svg></div>',default:'<div class="toast-icon"></div>'},Colors={error:"#ed3d3d",success:"#3dc763",info:"#2379c7",default:"#6a56c1"},removeToasts=function removeToasts(){return Array.from(document.getElementsByClassName("verdocs-toast")).forEach((function(oldToast){return oldToast.remove()}))},closeClicked=function closeClicked(e){e.stopPropagation(),removeToasts()},VerdocsToast=function VerdocsToast(text){var config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};removeToasts();var _ref=config||{},_ref$duration=_ref.duration,duration=void 0===_ref$duration?5e3:_ref$duration,_ref$style=_ref.style,style=void 0===_ref$style?"default":_ref$style,color=Colors[style]||Colors.default,toastBody="\n    "+(Icons[style]||Icons.default)+'\n    <div class="verdocs-toast-text" style="padding: 12px 12px 12px 0;">'+text+'</div>\n    <div class="verdocs-toast-close" style="padding: 12px 10px; background: rgba(0, 0, 0, 0.2); cursor: pointer;">âœ•</div>\n  ',toast=document.createElement("div");toast.className="verdocs-toast",toast.innerHTML=toastBody,toast.style.cssText="\ndisplay: flex; flex-direction: row; gap: 10px; align-items: center;\nposition: fixed; top: 20px; right: 20px; z-index: 2147483647; max-width: calc(50% - 20px);\ncolor: #ffffff; background: "+color+"; font-family: 'Barlow', sans-serif;\nborder-radius: 2px; padding-left: 10px;\nbox-shadow: 0 3px 7px 2px rgba(0, 0, 0, 0.12), 0 10px 36px -4px rgba(77, 96, 232, 0.3);",document.body.append(toast),Array.from(document.getElementsByClassName("verdocs-toast-close")).forEach((function(closeEl){return closeEl.addEventListener("click",closeClicked)})),setTimeout(removeToasts,duration)}},"./dist/esm/errors-9b5498c8.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return SDKError}));__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.reflect.construct.js"),__webpack_require__("./node_modules/core-js/modules/es.map.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return function _possibleConstructorReturn(self,call){if(call&&("object"==typeof call||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(self)}(this,result)}}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _wrapNativeSuper(Class){var _cache="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function _wrapNativeSuper(Class){if(null===Class||!function _isNativeFunction(fn){return-1!==Function.toString.call(fn).indexOf("[native code]")}(Class))return Class;if("function"!=typeof Class)throw new TypeError("Super expression must either be null or a function");if(void 0!==_cache){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper)}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper,Class)},_wrapNativeSuper(Class)}function _construct(Parent,args,Class){return _construct=_isNativeReflectConstruct()?Reflect.construct.bind():function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var instance=new(Function.bind.apply(Parent,a));return Class&&_setPrototypeOf(instance,Class.prototype),instance},_construct.apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)},_getPrototypeOf(o)}var SDKError=function(_Error){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}(SDKError,_Error);var _super=_createSuper(SDKError);function SDKError(message,statusCode,response){var _this;return function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,SDKError),(_this=_super.call(this,message||"SDK Error")).response=response,_this.statusCode=statusCode,Object.setPrototypeOf(_assertThisInitialized(_this),(this instanceof SDKError?this.constructor:void 0).prototype),_this}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(SDKError)}(_wrapNativeSuper(Error))},"./dist/esm/index-8dc8fdc4.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return _typeof})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getTimezoneOffsetInMilliseconds})),__webpack_require__.d(__webpack_exports__,"c",(function(){return getDefaultOptions})),__webpack_require__.d(__webpack_exports__,"d",(function(){return locale})),__webpack_require__.d(__webpack_exports__,"e",(function(){return requiredArgs})),__webpack_require__.d(__webpack_exports__,"f",(function(){return toDate}));__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.string.replace.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.parse-int.js");function _typeof(obj){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}function requiredArgs(required,args){if(args.length<required)throw new TypeError(required+" argument"+(required>1?"s":"")+" required, but only "+args.length+" present")}function toDate(argument){requiredArgs(1,arguments);var argStr=Object.prototype.toString.call(argument);return argument instanceof Date||"object"===_typeof(argument)&&"[object Date]"===argStr?new Date(argument.getTime()):"number"==typeof argument||"[object Number]"===argStr?new Date(argument):("string"!=typeof argument&&"[object String]"!==argStr||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}var defaultOptions={};function getDefaultOptions(){return defaultOptions}function getTimezoneOffsetInMilliseconds(date){var utcDate=new Date(Date.UTC(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours(),date.getMinutes(),date.getSeconds(),date.getMilliseconds()));return utcDate.setUTCFullYear(date.getFullYear()),date.getTime()-utcDate.getTime()}var formatDistanceLocale={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function buildFormatLongFn(args){return function(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},width=options.width?String(options.width):args.defaultWidth;return args.formats[width]||args.formats[args.defaultWidth]}}var formatLong={date:buildFormatLongFn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:buildFormatLongFn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:buildFormatLongFn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},formatRelativeLocale={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function buildLocalizeFn(args){return function(dirtyIndex,options){var valuesArray;if("formatting"===(null!=options&&options.context?String(options.context):"standalone")&&args.formattingValues){var defaultWidth=args.defaultFormattingWidth||args.defaultWidth,width=null!=options&&options.width?String(options.width):defaultWidth;valuesArray=args.formattingValues[width]||args.formattingValues[defaultWidth]}else{var _defaultWidth=args.defaultWidth,_width=null!=options&&options.width?String(options.width):args.defaultWidth;valuesArray=args.values[_width]||args.values[_defaultWidth]}return valuesArray[args.argumentCallback?args.argumentCallback(dirtyIndex):dirtyIndex]}}var localize={ordinalNumber:function ordinalNumber(dirtyNumber,_options){var number=Number(dirtyNumber),rem100=number%100;if(rem100>20||rem100<10)switch(rem100%10){case 1:return number+"st";case 2:return number+"nd";case 3:return number+"rd"}return number+"th"},era:buildLocalizeFn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:buildLocalizeFn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function argumentCallback(quarter){return quarter-1}}),month:buildLocalizeFn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:buildLocalizeFn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:buildLocalizeFn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function buildMatchFn(args){return function(string){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},width=options.width,matchPattern=width&&args.matchPatterns[width]||args.matchPatterns[args.defaultMatchWidth],matchResult=string.match(matchPattern);if(!matchResult)return null;var value,matchedString=matchResult[0],parsePatterns=width&&args.parsePatterns[width]||args.parsePatterns[args.defaultParseWidth],key=Array.isArray(parsePatterns)?function findIndex(array,predicate){for(var key=0;key<array.length;key++)if(predicate(array[key]))return key;return}(parsePatterns,(function(pattern){return pattern.test(matchedString)})):function findKey(object,predicate){for(var key in object)if(object.hasOwnProperty(key)&&predicate(object[key]))return key;return}(parsePatterns,(function(pattern){return pattern.test(matchedString)}));return value=args.valueCallback?args.valueCallback(key):key,{value:value=options.valueCallback?options.valueCallback(value):value,rest:string.slice(matchedString.length)}}}var match={ordinalNumber:function buildMatchPatternFn(args){return function(string){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},matchResult=string.match(args.matchPattern);if(!matchResult)return null;var matchedString=matchResult[0],parseResult=string.match(args.parsePattern);if(!parseResult)return null;var value=args.valueCallback?args.valueCallback(parseResult[0]):parseResult[0];return{value:value=options.valueCallback?options.valueCallback(value):value,rest:string.slice(matchedString.length)}}}({matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function valueCallback(value){return parseInt(value,10)}}),era:buildMatchFn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:buildMatchFn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function valueCallback(index){return index+1}}),month:buildMatchFn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:buildMatchFn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:buildMatchFn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},locale={code:"en-US",formatDistance:function formatDistance(token,count,options){var result,tokenValue=formatDistanceLocale[token];return result="string"==typeof tokenValue?tokenValue:1===count?tokenValue.one:tokenValue.other.replace("{{count}}",count.toString()),null!=options&&options.addSuffix?options.comparison&&options.comparison>0?"in "+result:result+" ago":result},formatLong:formatLong,formatRelative:function formatRelative(token,_date,_baseDate,_options){return formatRelativeLocale[token]},localize:localize,match:match,options:{weekStartsOn:0,firstWeekContainsDate:1}}},"./dist/esm/verdocs-templates-list.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_templates_list",(function(){return VerdocsTemplatesList}));__webpack_require__("./node_modules/core-js/modules/es.array.every.js"),__webpack_require__("./node_modules/core-js/modules/es.array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.string.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.string.trim.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.async-iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js");var _index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__=__webpack_require__("./dist/esm/index-b18c0348.js"),_VerdocsEndpoint_45286fc7_js__WEBPACK_IMPORTED_MODULE_33__=(__webpack_require__("./dist/esm/Types-5f31149e.js"),__webpack_require__("./dist/esm/VerdocsEndpoint-45286fc7.js")),_Templates_1893bda7_js__WEBPACK_IMPORTED_MODULE_34__=__webpack_require__("./dist/esm/Templates-1893bda7.js"),_Toast_f3b8fd46_js__WEBPACK_IMPORTED_MODULE_35__=__webpack_require__("./dist/esm/Toast-f3b8fd46.js"),_errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_36__=__webpack_require__("./dist/esm/errors-9b5498c8.js"),_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__=__webpack_require__("./dist/esm/index-8dc8fdc4.js");function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function define(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(void 0===method)return context.delegate=null,"throw"===methodName&&delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}var userHasPermissions=function userHasPermissions(session,permissions){return permissions.every((function(perm){return((null==session?void 0:session.permissions)||[]).includes(perm)}))};function compareAsc(dirtyDateLeft,dirtyDateRight){Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.e)(2,arguments);var dateLeft=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDateLeft),dateRight=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDateRight),diff=dateLeft.getTime()-dateRight.getTime();return diff<0?-1:diff>0?1:diff}var roundingMap={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function trunc(value){return value<0?Math.ceil(value):Math.floor(value)}},defaultRoundingMethod="trunc";function isLastDayOfMonth(dirtyDate){Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.e)(1,arguments);var date=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDate);return function endOfDay(dirtyDate){Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.e)(1,arguments);var date=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDate);return date.setHours(23,59,59,999),date}(date).getTime()===function endOfMonth(dirtyDate){Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.e)(1,arguments);var date=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDate),month=date.getMonth();return date.setFullYear(date.getFullYear(),month+1,0),date.setHours(23,59,59,999),date}(date).getTime()}function differenceInMonths(dirtyDateLeft,dirtyDateRight){Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.e)(2,arguments);var result,dateLeft=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDateLeft),dateRight=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDateRight),sign=compareAsc(dateLeft,dateRight),difference=Math.abs(function differenceInCalendarMonths(dirtyDateLeft,dirtyDateRight){Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.e)(2,arguments);var dateLeft=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDateLeft),dateRight=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDateRight);return 12*(dateLeft.getFullYear()-dateRight.getFullYear())+(dateLeft.getMonth()-dateRight.getMonth())}(dateLeft,dateRight));if(difference<1)result=0;else{1===dateLeft.getMonth()&&dateLeft.getDate()>27&&dateLeft.setDate(30),dateLeft.setMonth(dateLeft.getMonth()-sign*difference);var isLastMonthNotFull=compareAsc(dateLeft,dateRight)===-sign;isLastDayOfMonth(Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDateLeft))&&1===difference&&1===compareAsc(dirtyDateLeft,dateRight)&&(isLastMonthNotFull=!1),result=sign*(difference-Number(isLastMonthNotFull))}return 0===result?0:result}function differenceInSeconds(dateLeft,dateRight,options){Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.e)(2,arguments);var diff=function differenceInMilliseconds(dateLeft,dateRight){return Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.e)(2,arguments),Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dateLeft).getTime()-Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dateRight).getTime()}(dateLeft,dateRight)/1e3;return function getRoundingMethod(method){return method?roundingMap[method]:roundingMap[defaultRoundingMethod]}(null==options?void 0:options.roundingMethod)(diff)}function assign(target,object){if(null==target)throw new TypeError("assign requires that input parameter not be null or undefined");for(var property in object)Object.prototype.hasOwnProperty.call(object,property)&&(target[property]=object[property]);return target}var MINUTES_IN_DAY=1440,MINUTES_IN_ALMOST_TWO_DAYS=2520,MINUTES_IN_MONTH=43200,MINUTES_IN_TWO_MONTHS=86400;function formatDistance(dirtyDate,dirtyBaseDate,options){var _ref,_options$locale;Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.e)(2,arguments);var defaultOptions=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.c)(),locale$1=null!==(_ref=null!==(_options$locale=null==options?void 0:options.locale)&&void 0!==_options$locale?_options$locale:defaultOptions.locale)&&void 0!==_ref?_ref:_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.d;if(!locale$1.formatDistance)throw new RangeError("locale must contain formatDistance property");var comparison=compareAsc(dirtyDate,dirtyBaseDate);if(isNaN(comparison))throw new RangeError("Invalid time value");var dateLeft,dateRight,localizeOptions=assign(function cloneObject(object){return assign({},object)}(options),{addSuffix:Boolean(null==options?void 0:options.addSuffix),comparison:comparison});comparison>0?(dateLeft=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyBaseDate),dateRight=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDate)):(dateLeft=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyDate),dateRight=Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.f)(dirtyBaseDate));var months,seconds=differenceInSeconds(dateRight,dateLeft),offsetInSeconds=(Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.b)(dateRight)-Object(_index_8dc8fdc4_js__WEBPACK_IMPORTED_MODULE_37__.b)(dateLeft))/1e3,minutes=Math.round((seconds-offsetInSeconds)/60);if(minutes<2)return null!=options&&options.includeSeconds?seconds<5?locale$1.formatDistance("lessThanXSeconds",5,localizeOptions):seconds<10?locale$1.formatDistance("lessThanXSeconds",10,localizeOptions):seconds<20?locale$1.formatDistance("lessThanXSeconds",20,localizeOptions):seconds<40?locale$1.formatDistance("halfAMinute",0,localizeOptions):seconds<60?locale$1.formatDistance("lessThanXMinutes",1,localizeOptions):locale$1.formatDistance("xMinutes",1,localizeOptions):0===minutes?locale$1.formatDistance("lessThanXMinutes",1,localizeOptions):locale$1.formatDistance("xMinutes",minutes,localizeOptions);if(minutes<45)return locale$1.formatDistance("xMinutes",minutes,localizeOptions);if(minutes<90)return locale$1.formatDistance("aboutXHours",1,localizeOptions);if(minutes<MINUTES_IN_DAY){var hours=Math.round(minutes/60);return locale$1.formatDistance("aboutXHours",hours,localizeOptions)}if(minutes<MINUTES_IN_ALMOST_TWO_DAYS)return locale$1.formatDistance("xDays",1,localizeOptions);if(minutes<MINUTES_IN_MONTH){var days=Math.round(minutes/MINUTES_IN_DAY);return locale$1.formatDistance("xDays",days,localizeOptions)}if(minutes<MINUTES_IN_TWO_MONTHS)return months=Math.round(minutes/MINUTES_IN_MONTH),locale$1.formatDistance("aboutXMonths",months,localizeOptions);if((months=differenceInMonths(dateRight,dateLeft))<12){var nearestMonth=Math.round(minutes/MINUTES_IN_MONTH);return locale$1.formatDistance("xMonths",nearestMonth,localizeOptions)}var monthsSinceStartOfYear=months%12,years=Math.floor(months/12);return monthsSinceStartOfYear<3?locale$1.formatDistance("aboutXYears",years,localizeOptions):monthsSinceStartOfYear<9?locale$1.formatDistance("overXYears",years,localizeOptions):locale$1.formatDistance("almostXYears",years+1,localizeOptions)}var userCanCreateTemplate=function userCanCreateTemplate(session){return function userCanCreatePersonalTemplate(session){return userHasPermissions(session,[_VerdocsEndpoint_45286fc7_js__WEBPACK_IMPORTED_MODULE_33__.a.TEMPLATE_CREATOR_CREATE_PERSONAL])}(session)||function userCanCreateOrgTemplate(session){return userHasPermissions(session,[_VerdocsEndpoint_45286fc7_js__WEBPACK_IMPORTED_MODULE_33__.a.TEMPLATE_CREATOR_CREATE_ORG])}(session)||function userCanCreatePublicTemplate(session){return userHasPermissions(session,[_VerdocsEndpoint_45286fc7_js__WEBPACK_IMPORTED_MODULE_33__.a.TEMPLATE_CREATOR_CREATE_PUBLIC])}(session)},SharingFilters=[{value:"all",label:"All"},{value:"personal",label:"Personal"},{value:"shared",label:"Shared"},{value:"public",label:"Public"}],StarredFilters=[{value:"all",label:"All"},{value:"starred",label:"Starred"},{value:"unstarred",label:"Not Starred"}],SortOptions=[{value:"name",label:"Name"},{value:"created_at",label:"Created"},{value:"updated_at",label:"Last Updated"},{value:"last_used_at",label:"Last Used"},{value:"counter",label:"Most Used"},{value:"star_counter",label:"Most Starred"}],VerdocsTemplatesList=function(){function VerdocsTemplatesList(hostRef){var _this=this;!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsTemplatesList),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.j)(this,hostRef),this.sdkError=Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.e)(this,"sdkError",7),this.viewTemplate=Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.e)(this,"viewTemplate",7),this.editTemplate=Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.e)(this,"editTemplate",7),this.templateDeleted=Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.e)(this,"templateDeleted",7),this.handleOptionSelected=function(option,template){var _a,_b;"createdoc"===option?null===(_a=_this.viewTemplate)||void 0===_a||_a.emit({endpoint:_this.endpoint,template:template}):"createlink"===option||"signnow"===option||"submitted"===option||"link"===option?Object(_Toast_f3b8fd46_js__WEBPACK_IMPORTED_MODULE_35__.a)("This feature is coming soon!"):"edit"===option?null===(_b=_this.editTemplate)||void 0===_b||_b.emit({endpoint:_this.endpoint,template:template}):"delete"===option&&(_this.confirmDelete=template)},this.endpoint=_VerdocsEndpoint_45286fc7_js__WEBPACK_IMPORTED_MODULE_33__.c.getDefault(),this.sharing="all",this.starred="all",this.sort="updated_at",this.name="",this.selectedPage=0,this.count=0,this.loading=!0,this.confirmDelete=null,this.templates=[]}var _queryTemplates,_componentWillLoad;return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsTemplatesList,[{key:"componentWillLoad",value:(_componentWillLoad=_asyncToGenerator(_regeneratorRuntime().mark((function _callee(){return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:if(this.endpoint.loadSession(),this.endpoint.session){_context.next=4;break}return console.log("[TEMPLATES] Must be authenticated"),_context.abrupt("return");case 4:return _context.abrupt("return",this.queryTemplates());case 5:case"end":return _context.stop()}}),_callee,this)}))),function componentWillLoad(){return _componentWillLoad.apply(this,arguments)})},{key:"queryTemplates",value:(_queryTemplates=_asyncToGenerator(_regeneratorRuntime().mark((function _callee2(){var _a,_b,_c,queryParams,response;return _regeneratorRuntime().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:if(_context2.prev=0,this.endpoint.loadSession(),this.endpoint.session){_context2.next=5;break}return console.log("[TEMPLATES] Must be authenticated"),_context2.abrupt("return");case 5:return queryParams={page:this.selectedPage,ascending:"name"===this.sort||"star_counter"===this.sort,sort_by:this.sort},"all"!==this.sharing&&(queryParams.is_personal="personal"===this.sharing,queryParams.is_public="public"===this.sharing),"all"!==this.starred&&(queryParams.is_starred="starred"===this.starred),""!==this.name.trim()&&(queryParams.name=this.name.trim()),console.log("qp",queryParams,this.name),_context2.next=12,Object(_Templates_1893bda7_js__WEBPACK_IMPORTED_MODULE_34__.a)(this.endpoint,queryParams);case 12:response=_context2.sent,console.log("[TEMPLATES] Got templates",response),this.templates=response.result,this.count=response.total,this.loading=!1,_context2.next=23;break;case 19:_context2.prev=19,_context2.t0=_context2.catch(0),console.log("[TEMPLATES] Error with preview session",_context2.t0),null===(_a=this.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_36__.a(_context2.t0.message,null===(_b=_context2.t0.response)||void 0===_b?void 0:_b.status,null===(_c=_context2.t0.response)||void 0===_c?void 0:_c.data));case 23:case"end":return _context2.stop()}}),_callee2,this,[[0,19]])}))),function queryTemplates(){return _queryTemplates.apply(this,arguments)})},{key:"canCreate",value:function canCreate(){return userCanCreateTemplate(this.endpoint.session)}},{key:"canDelete",value:function canDelete(summary){return Object(_VerdocsEndpoint_45286fc7_js__WEBPACK_IMPORTED_MODULE_33__.d)(this.endpoint.session,"delete",summary)}},{key:"canEdit",value:function canEdit(summary){return Object(_VerdocsEndpoint_45286fc7_js__WEBPACK_IMPORTED_MODULE_33__.d)(this.endpoint.session,"write",summary)}},{key:"canPreview",value:function canPreview(summary){return Object(_VerdocsEndpoint_45286fc7_js__WEBPACK_IMPORTED_MODULE_33__.d)(this.endpoint.session,"read",summary)}},{key:"deleteTemplate",value:function deleteTemplate(template){var _this2=this;this.confirmDelete=null,Object(_Templates_1893bda7_js__WEBPACK_IMPORTED_MODULE_34__.d)(this.endpoint,template.id).then((function(){var _a;return console.log("[TEMPLATES] Deleted template",template),null===(_a=_this2.templateDeleted)||void 0===_a||_a.emit({endpoint:_this2.endpoint,template:template}),_this2.queryTemplates()})).catch((function(e){var _a,_b,_c;console.log("[TEMPLATES] Error deleting template",template),null===(_a=_this2.sdkError)||void 0===_a||_a.emit(new _errors_9b5498c8_js__WEBPACK_IMPORTED_MODULE_36__.a(e.message,null===(_b=e.response)||void 0===_b?void 0:_b.status,null===(_c=e.response)||void 0===_c?void 0:_c.data))}))}},{key:"render",value:function render(){var _this3=this;return Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.b,null,Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"header"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"filter"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("verdocs-text-input",{id:"verdocs-filter-name",value:this.name,autocomplete:"off",placeholder:"Filter by Name...",onFocusout:function onFocusout(e){return _this3.name=e.target.value,_this3.queryTemplates()}})),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("verdocs-quick-filter",{label:"Sharing",value:this.sharing,options:SharingFilters,onOptionSelected:function onOptionSelected(e){return _this3.sharing=e.detail.value,_this3.queryTemplates()}}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("verdocs-quick-filter",{label:"Starred",value:this.starred,options:StarredFilters,onOptionSelected:function onOptionSelected(e){return _this3.starred=e.detail.value,_this3.queryTemplates()}}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("verdocs-quick-filter",{label:"Sort By",value:this.sort,options:SortOptions,onOptionSelected:function onOptionSelected(e){return _this3.sort=e.detail.value,_this3.queryTemplates()}}),this.loading&&Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("verdocs-spinner",{mode:"dark",size:24}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{style:{display:"flex",flex:"1"}})),this.templates.map((function(summary){var MENU_OPTIONS=[{label:"Preview / Send",id:"createdoc",disabled:!_this3.canPreview(summary)},{label:"Create Link",id:"createlink",disabled:!0},{label:"Sign Now",id:"signnow",disabled:!0},{label:""},{label:"Submissions",id:"submitted"},{label:""},{label:"Get Preview Link",id:"link",disabled:!_this3.canPreview(summary)},{label:"Edit",id:"edit",disabled:!_this3.canEdit(summary)},{label:"Delete",id:"delete",disabled:!_this3.canDelete(summary)}];return Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"template",onClick:function onClick(){var _a;null===(_a=_this3.viewTemplate)||void 0===_a||_a.emit({endpoint:_this3.endpoint,template:summary})}},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"inner"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("verdocs-template-star",{template:summary,endpoint:_this3.endpoint}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"spacer icon-spacer"}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("span",{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"<path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" /></svg>'}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"name"},summary.name),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"spacer usage-spacer"}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"usage"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("span",{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" /></svg>'}),summary.counter||"--"),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"spacer last-used-spacer"}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"last-used"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("span",{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5" /></svg>'}),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("span",{style:{marginRight:"5px"}},"Last Used:"),summary.last_used_at?formatDistance(new Date(summary.last_used_at),new Date):"Never"),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"spacer ownership-spacer"}),summary.is_public&&Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"ownership"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("span",{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 017.843 4.582M12 3a8.997 8.997 0 00-7.843 4.582m15.686 0A11.953 11.953 0 0112 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0121 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0112 16.5c-3.162 0-6.133-.815-8.716-2.247m0 0A9.015 9.015 0 013 12c0-1.605.42-3.113 1.157-4.418" /></svg>'})," Public"),!summary.is_public&&!summary.is_personal&&Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"ownership"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("span",{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M16.5 10.5V6.75a4.5 4.5 0 10-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z" /></svg>'})," Private"),!summary.is_public&&summary.is_personal&&Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"ownership"},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("span",{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 21h16.5M4.5 3h15M5.25 3v18m13.5-18v18M9 6.75h1.5m-1.5 3h1.5m-1.5 3h1.5m3-6H15m-1.5 3H15m-1.5 3H15M9 21v-3.375c0-.621.504-1.125 1.125-1.125h3.75c.621 0 1.125.504 1.125 1.125V21" /></svg>'})," Shared"),Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("verdocs-dropdown",{options:MENU_OPTIONS,onOptionSelected:function onOptionSelected(e){return _this3.handleOptionSelected(e.detail.id,summary)}})))})),this.templates.length?Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{style:{marginTop:"10px"}},Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("verdocs-pagination",{selectedPage:this.selectedPage,perPage:10,itemCount:this.count,onSelectPage:function onSelectPage(e){return _this3.selectedPage=e.detail.selectedPage,_this3.queryTemplates()}})):Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("div",{class:"empty-text"},"No matching templates found. Please adjust your filters and try again."),this.confirmDelete&&Object(_index_b18c0348_js__WEBPACK_IMPORTED_MODULE_31__.h)("verdocs-ok-dialog",{heading:"Delete this Template?",message:"This operation cannot be undone.",onNext:function onNext(){return _this3.deleteTemplate(_this3.confirmDelete)},onExit:function onExit(){return _this3.confirmDelete=null},showCancel:!0}))}}]),VerdocsTemplatesList}();VerdocsTemplatesList.style='verdocs-templates-list{display:-ms-flexbox;display:flex;padding:10px;font-size:18px;-ms-flex-wrap:nowrap;flex-wrap:nowrap;border-radius:6px;color:#33364b;-ms-flex-align:center;align-items:center;-ms-flex-direction:column;flex-direction:column;font-family:"Inter", "Barlow", sans-serif}verdocs-templates-list .header{width:100%;row-gap:4px;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-column-gap:12px;-moz-column-gap:12px;column-gap:12px;margin:0 0 10px 0;-ms-flex-align:center;align-items:center;-ms-flex-direction:row;flex-direction:row}verdocs-templates-list .header .filter{width:150px}verdocs-templates-list .header verdocs-text-input{margin:0}verdocs-templates-list .header verdocs-text-input input{height:32px}verdocs-templates-list .filter{-ms-flex-align:center;align-items:center}verdocs-templates-list .template{width:100%;margin:3px 0;background:#ffffff}verdocs-templates-list .template:hover{cursor:pointer;background:#f5f5fa}verdocs-templates-list .template .inner{gap:10px;display:-ms-flexbox;display:flex;padding:8px 14px;border-radius:5px;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center}verdocs-templates-list .template .inner svg{width:24px;height:24px}verdocs-templates-list .name{-ms-flex:1;flex:1;display:-ms-flexbox;display:flex;color:black;font-size:18px;margin-left:10px}@media screen and (max-width: 1300px){verdocs-templates-list .name{font-size:16px}}verdocs-templates-list .spacer{margin:0;height:30px;-ms-flex:0 0 1px;flex:0 0 1px;display:-ms-flexbox;display:flex;border-right:1px solid #dad8dd}@media screen and (max-width: 800px){verdocs-templates-list .spacer{margin:12px 0;border-top:1px solid #dad8dd;border-right:none}}verdocs-templates-list .empty-text{font-size:20px;text-align:center;margin:16px 0 0 0;padding:80px 80px;border:2px solid #ccc}verdocs-templates-list .ownership{color:#444;display:-ms-flexbox;display:flex;-ms-flex:0 0 100px;flex:0 0 100px;font-size:16px;margin:0 0 0 10px;-ms-flex-align:center;align-items:center;-ms-flex-direction:row;flex-direction:row}verdocs-templates-list .ownership svg{width:24px;height:24px;margin-right:8px}verdocs-templates-list .last-used{color:#444;display:-ms-flexbox;display:flex;-ms-flex:0 0 280px;flex:0 0 280px;font-size:16px;margin:0 0 0 10px;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center}verdocs-templates-list .last-used svg{width:24px;height:24px;margin-right:8px}verdocs-templates-list .usage{color:#444;display:-ms-flexbox;display:flex;-ms-flex:0 0 60px;flex:0 0 60px;font-size:16px;margin:0 0 0 10px;-ms-flex-align:center;align-items:center;-ms-flex-direction:row;flex-direction:row}verdocs-templates-list .usage svg{width:24px;height:24px;margin-right:8px}'},"./node_modules/core-js/internals/number-parse-int.js":function(module,exports,__webpack_require__){var global=__webpack_require__("./node_modules/core-js/internals/global.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),toString=__webpack_require__("./node_modules/core-js/internals/to-string.js"),trim=__webpack_require__("./node_modules/core-js/internals/string-trim.js").trim,whitespaces=__webpack_require__("./node_modules/core-js/internals/whitespaces.js"),$parseInt=global.parseInt,Symbol=global.Symbol,ITERATOR=Symbol&&Symbol.iterator,hex=/^[+-]?0x/i,exec=uncurryThis(hex.exec),FORCED=8!==$parseInt(whitespaces+"08")||22!==$parseInt(whitespaces+"0x16")||ITERATOR&&!fails((function(){$parseInt(Object(ITERATOR))}));module.exports=FORCED?function parseInt(string,radix){var S=trim(toString(string));return $parseInt(S,radix>>>0||(exec(hex,S)?16:10))}:$parseInt},"./node_modules/core-js/modules/es.parse-int.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),$parseInt=__webpack_require__("./node_modules/core-js/internals/number-parse-int.js");$({global:!0,forced:parseInt!=$parseInt},{parseInt:$parseInt})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,