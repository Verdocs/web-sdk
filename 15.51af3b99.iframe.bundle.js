/*! For license information please see 15.51af3b99.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"./dist/esm/Colors-1b298092.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function getRGBA(roleIndex){switch(roleIndex%10){case 0:return 0===roleIndex?"rgba(255, 193, 7, 0.4)":"rgba(134, 134, 134, 0.3)";case 1:return"rgba(156, 39, 176, .4)";case 2:return"rgba(33, 150, 243, .4)";case 3:return"rgba(220, 231, 117, 0.3)";case 4:return"rgba(121, 134, 203, 0.3)";case 5:return"rgba(77, 182, 172, 0.3)";case 6:return"rgba(255, 202, 165, 0.3)";case 7:return"rgba(2, 247, 190, 0.3)";case 8:return"rgba(255, 138, 101, 0.3)";case 9:return"rgba(82, 255, 79, 0.3)";default:return"rgba(229, 115, 155, 0.3)"}}__webpack_require__.d(__webpack_exports__,"a",(function(){return getRGBA}))},"./dist/esm/utils-2dbb5f63.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getRoleIndex})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getFieldId})),__webpack_require__.d(__webpack_exports__,"c",(function(){return fullNameToInitials})),__webpack_require__.d(__webpack_exports__,"d",(function(){return getFieldSettings})),__webpack_require__.d(__webpack_exports__,"e",(function(){return integerSequence})),__webpack_require__.d(__webpack_exports__,"f",(function(){return renderDocumentField})),__webpack_require__.d(__webpack_exports__,"g",(function(){return updateCssTransform}));__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.array.fill.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match-all.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js");function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function rescale(r,n){return r*n}var integerSequence=function integerSequence(start,count){return Array(count).fill(1).map((function(_,index){return index+start}))},fullNameToInitials=function fullNameToInitials(name){return name.split(" ").map((function(word){return word[0]})).join("")},setControlStyles=function setControlStyles(el,field,xScale,yScale,option){var _a,_b,_c,_d,settings=field.setting||field.settings,_settings$x=settings.x,x=void 0===_settings$x?0:_settings$x,_settings$y=settings.y,y=void 0===_settings$y?0:_settings$y,_settings$width=settings.width,width=void 0===_settings$width?function defaultWidth(field){switch(field.type){case"attachment":case"payment":return 24;case"checkbox":case"checkbox_group":case"radio_button_group":return 14;case"signature":case"initial":return 82}return 150}(field):_settings$width,_settings$height=settings.height,height=void 0===_settings$height?function defaultHeight(field){switch(field.type){case"attachment":case"payment":return 24;case"checkbox":case"checkbox_group":case"radio_button_group":return 14;case"signature":case"initial":return 41}return 50}(field):_settings$height,optionSettings=void 0!==option&&settings.options[option]?settings.options[option]:null;optionSettings&&(x=null!==(_a=optionSettings.x)&&void 0!==_a?_a:x,y=null!==(_b=optionSettings.y)&&void 0!==_b?_b:y,width=null!==(_c=optionSettings.width)&&void 0!==_c?_c:width,height=null!==(_d=optionSettings.height)&&void 0!==_d?_d:height),el.style.width=width+"px",el.style.height=height+"px",el.style.position="absolute",el.style.left=rescale(xScale,x)+"px",el.style.bottom=rescale(yScale,y)+"px",el.style.transform="scale("+xScale+", "+yScale+")"},getFieldId=function getFieldId(field){return"verdocs-doc-fld-"+field.name},getFieldOptionId=function getFieldOptionId(field,index){return"verdocs-doc-fld-"+field.name+"-"+index},renderDocumentField=function renderDocumentField(field,docPage,roleIndex,fieldOptions){var _fieldOptions$disable=fieldOptions.disabled,disabled=void 0!==_fieldOptions$disable&&_fieldOptions$disable,_fieldOptions$editabl=fieldOptions.editable,editable=void 0!==_fieldOptions$editabl&&_fieldOptions$editabl,_fieldOptions$draggab=fieldOptions.draggable,draggable=void 0!==_fieldOptions$draggab&&_fieldOptions$draggab,_fieldOptions$done=fieldOptions.done,done=void 0!==_fieldOptions$done&&_fieldOptions$done,controlsDiv=document.getElementById(docPage.containerId+"-controls");if(controlsDiv)switch(field.type){case"attachment":case"date":case"dropdown":case"initial":case"payment":case"signature":case"timestamp":case"textarea":case"textbox":var id=getFieldId(field),existingField=document.getElementById(id);if(existingField)return void setControlStyles(existingField,field,docPage.xScale,docPage.yScale);var el=document.createElement("verdocs-field-"+field.type);return el.field=field,el.setAttribute("id",id),el.setAttribute("roleIndex",roleIndex),disabled?(el.setAttribute("tabindex",-1),el.setAttribute("disabled",!0)):el.setAttribute("tabIndex",1),editable&&el.setAttribute("editable",!0),draggable&&el.setAttribute("draggable",!0),done&&el.setAttribute("done",!0),setControlStyles(el,field,docPage.xScale,docPage.yScale),controlsDiv.appendChild(el),el;case"checkbox_group":return(field.settings||field.setting||{}).options.map((function(_,checkboxIndex){var id=getFieldOptionId(field,checkboxIndex),existingField=document.getElementById(id);if(!existingField){var cbEl=document.createElement("verdocs-field-checkbox");return cbEl.field=field,cbEl.setAttribute("id",id),cbEl.setAttribute("roleIndex",roleIndex),cbEl.setAttribute("option",checkboxIndex),disabled&&cbEl.setAttribute("disabled",!0),done&&cbEl.setAttribute("done",!0),setControlStyles(cbEl,field,docPage.xScale,docPage.yScale,checkboxIndex),controlsDiv.appendChild(cbEl),cbEl}setControlStyles(existingField,field,docPage.xScale,docPage.yScale)}));case"radio_button_group":return(field.settings||field.setting||{}).options.map((function(_,buttonIndex){var id=getFieldOptionId(field,buttonIndex),existingField=document.getElementById(id);if(!existingField){var radioEl=document.createElement("verdocs-field-radio-button");return radioEl.field=field,radioEl.setAttribute("id",id),radioEl.setAttribute("roleIndex",roleIndex),radioEl.setAttribute("option",buttonIndex),disabled&&radioEl.setAttribute("disabled",!0),done&&radioEl.setAttribute("done",!0),setControlStyles(radioEl,field,docPage.xScale,docPage.yScale,buttonIndex),controlsDiv.appendChild(radioEl),radioEl}setControlStyles(existingField,field,docPage.xScale,docPage.yScale)}));default:return console.log("[PREVIEW] Skipping unsupported field type",field),null}},getRoleIndex=function getRoleIndex(roles,role){return roles.indexOf(role)||0},getFieldSettings=function getFieldSettings(field){return field.setting?field.setting:field.settings?field.settings:{x:0,y:0,required:!1,disabled:!1,result:"",value:""}},updateCssTransform=function updateCssTransform(el,key,value){var components=_toConsumableArray(el.style.transform.matchAll(/(\w+)\(([^)]*)\)/gi));el.style.transform=[components.filter((function(component){return component[1]!==key})).map((function(component){return component[0]})),key+"("+value+")"].join(" ")}},"./dist/esm/verdocs-field-date.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_field_date",(function(){return VerdocsFieldDate}));__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/web.timers.js"),__webpack_require__("./node_modules/core-js/modules/es.parse-float.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.parse-int.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-iso-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.number.to-fixed.js"),__webpack_require__("./node_modules/core-js/modules/es.string.trim.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.array.splice.js"),__webpack_require__("./node_modules/core-js/modules/es.array.some.js"),__webpack_require__("./node_modules/core-js/modules/es.string.trim-end.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.async-iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.math.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.json.to-string-tag.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.object.set-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.array.reverse.js");var _index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__=__webpack_require__("./dist/esm/index-f78d163d.js"),_utils_2dbb5f63_js__WEBPACK_IMPORTED_MODULE_50__=__webpack_require__("./dist/esm/utils-2dbb5f63.js"),_Colors_1b298092_js__WEBPACK_IMPORTED_MODULE_51__=__webpack_require__("./dist/esm/Colors-1b298092.js"),_index_d264c496_js__WEBPACK_IMPORTED_MODULE_52__=__webpack_require__("./dist/esm/index-d264c496.js");function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function define(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(void 0===method)return context.delegate=null,"throw"===methodName&&delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}var HOOKS=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange","onPreCalendarPosition"],defaults={_disable:[],allowInput:!1,allowInvalidPreload:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",autoFillDefaultTime:!0,clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enableSeconds:!1,enableTime:!1,errorHandler:function errorHandler(err){return"undefined"!=typeof console&&console.warn(err)},getWeek:function getWeek(givenDate){var date=new Date(givenDate.getTime());date.setHours(0,0,0,0),date.setDate(date.getDate()+3-(date.getDay()+6)%7);var week1=new Date(date.getFullYear(),0,4);return 1+Math.round(((date.getTime()-week1.getTime())/864e5-3+(week1.getDay()+6)%7)/7)},hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",monthSelectorType:"dropdown",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,now:new Date,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],onPreCalendarPosition:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,showMonths:1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},english={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function ordinal(nth){var s=nth%100;if(s>3&&s<21)return"th";switch(s%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"],yearAriaLabel:"Year",monthAriaLabel:"Month",hourAriaLabel:"Hour",minuteAriaLabel:"Minute",time_24hr:!1},pad=function pad(number,length){return void 0===length&&(length=2),("000"+number).slice(-1*length)},_int=function _int(bool){return!0===bool?1:0};function debounce(fn,wait){var t;return function(){var _this=this,args=arguments;clearTimeout(t),t=setTimeout((function(){return fn.apply(_this,args)}),wait)}}var arrayify=function arrayify(obj){return obj instanceof Array?obj:[obj]};function toggleClass(elem,className,bool){if(!0===bool)return elem.classList.add(className);elem.classList.remove(className)}function createElement(tag,className,content){var e=window.document.createElement(tag);return className=className||"",content=content||"",e.className=className,void 0!==content&&(e.textContent=content),e}function clearNode(node){for(;node.firstChild;)node.removeChild(node.firstChild)}function findParent(node,condition){return condition(node)?node:node.parentNode?findParent(node.parentNode,condition):void 0}function createNumberInput(inputClassName,opts){var wrapper=createElement("div","numInputWrapper"),numInput=createElement("input","numInput "+inputClassName),arrowUp=createElement("span","arrowUp"),arrowDown=createElement("span","arrowDown");if(-1===navigator.userAgent.indexOf("MSIE 9.0")?numInput.type="number":(numInput.type="text",numInput.pattern="\\d*"),void 0!==opts)for(var key in opts)numInput.setAttribute(key,opts[key]);return wrapper.appendChild(numInput),wrapper.appendChild(arrowUp),wrapper.appendChild(arrowDown),wrapper}function getEventTarget(event){try{return"function"==typeof event.composedPath?event.composedPath()[0]:event.target}catch(error){return event.target}}var doNothing=function doNothing(){},monthToStr=function monthToStr(monthNumber,shorthand,locale){return locale.months[shorthand?"shorthand":"longhand"][monthNumber]},revFormat={D:doNothing,F:function F(dateObj,monthName,locale){dateObj.setMonth(locale.months.longhand.indexOf(monthName))},G:function G(dateObj,hour){dateObj.setHours((dateObj.getHours()>=12?12:0)+parseFloat(hour))},H:function H(dateObj,hour){dateObj.setHours(parseFloat(hour))},J:function J(dateObj,day){dateObj.setDate(parseFloat(day))},K:function K(dateObj,amPM,locale){dateObj.setHours(dateObj.getHours()%12+12*_int(new RegExp(locale.amPM[1],"i").test(amPM)))},M:function M(dateObj,shortMonth,locale){dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth))},S:function S(dateObj,seconds){dateObj.setSeconds(parseFloat(seconds))},U:function U(_,unixSeconds){return new Date(1e3*parseFloat(unixSeconds))},W:function W(dateObj,weekNum,locale){var weekNumber=parseInt(weekNum),date=new Date(dateObj.getFullYear(),0,2+7*(weekNumber-1),0,0,0,0);return date.setDate(date.getDate()-date.getDay()+locale.firstDayOfWeek),date},Y:function Y(dateObj,year){dateObj.setFullYear(parseFloat(year))},Z:function Z(_,ISODate){return new Date(ISODate)},d:function d(dateObj,day){dateObj.setDate(parseFloat(day))},h:function h(dateObj,hour){dateObj.setHours((dateObj.getHours()>=12?12:0)+parseFloat(hour))},i:function i(dateObj,minutes){dateObj.setMinutes(parseFloat(minutes))},j:function j(dateObj,day){dateObj.setDate(parseFloat(day))},l:doNothing,m:function m(dateObj,month){dateObj.setMonth(parseFloat(month)-1)},n:function n(dateObj,month){dateObj.setMonth(parseFloat(month)-1)},s:function s(dateObj,seconds){dateObj.setSeconds(parseFloat(seconds))},u:function u(_,unixMillSeconds){return new Date(parseFloat(unixMillSeconds))},w:doNothing,y:function y(dateObj,year){dateObj.setFullYear(2e3+parseFloat(year))}},tokenRegex={D:"",F:"",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"",M:"",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",u:"(.+)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},formats={Z:function Z(date){return date.toISOString()},D:function D(date,locale,options){return locale.weekdays.shorthand[formats.w(date,locale,options)]},F:function F(date,locale,options){return monthToStr(formats.n(date,locale,options)-1,!1,locale)},G:function G(date,locale,options){return pad(formats.h(date,locale,options))},H:function H(date){return pad(date.getHours())},J:function J(date,locale){return void 0!==locale.ordinal?date.getDate()+locale.ordinal(date.getDate()):date.getDate()},K:function K(date,locale){return locale.amPM[_int(date.getHours()>11)]},M:function M(date,locale){return monthToStr(date.getMonth(),!0,locale)},S:function S(date){return pad(date.getSeconds())},U:function U(date){return date.getTime()/1e3},W:function W(date,_,options){return options.getWeek(date)},Y:function Y(date){return pad(date.getFullYear(),4)},d:function d(date){return pad(date.getDate())},h:function h(date){return date.getHours()%12?date.getHours()%12:12},i:function i(date){return pad(date.getMinutes())},j:function j(date){return date.getDate()},l:function l(date,locale){return locale.weekdays.longhand[date.getDay()]},m:function m(date){return pad(date.getMonth()+1)},n:function n(date){return date.getMonth()+1},s:function s(date){return date.getSeconds()},u:function u(date){return date.getTime()},w:function w(date){return date.getDay()},y:function y(date){return String(date.getFullYear()).substring(2)}},createDateFormatter=function createDateFormatter(_a){var _b=_a.config,config=void 0===_b?defaults:_b,_c=_a.l10n,l10n=void 0===_c?english:_c,_d=_a.isMobile,isMobile=void 0!==_d&&_d;return function(dateObj,frmt,overrideLocale){var locale=overrideLocale||l10n;return void 0===config.formatDate||isMobile?frmt.split("").map((function(c,i,arr){return formats[c]&&"\\"!==arr[i-1]?formats[c](dateObj,locale,config):"\\"!==c?c:""})).join(""):config.formatDate(dateObj,frmt,locale)}},createDateParser=function createDateParser(_a){var _b=_a.config,config=void 0===_b?defaults:_b,_c=_a.l10n,l10n=void 0===_c?english:_c;return function(date,givenFormat,timeless,customLocale){if(0===date||date){var parsedDate,locale=customLocale||l10n,dateOrig=date;if(date instanceof Date)parsedDate=new Date(date.getTime());else if("string"!=typeof date&&void 0!==date.toFixed)parsedDate=new Date(date);else if("string"==typeof date){var format=givenFormat||(config||defaults).dateFormat,datestr=String(date).trim();if("today"===datestr)parsedDate=new Date,timeless=!0;else if(config&&config.parseDate)parsedDate=config.parseDate(date,format);else if(/Z$/.test(datestr)||/GMT$/.test(datestr))parsedDate=new Date(date);else{for(var matched=void 0,ops=[],i=0,matchIndex=0,regexStr="";i<format.length;i++){var token=format[i],isBackSlash="\\"===token,escaped="\\"===format[i-1]||isBackSlash;if(tokenRegex[token]&&!escaped){regexStr+=tokenRegex[token];var match=new RegExp(regexStr).exec(date);match&&(matched=!0)&&ops["Y"!==token?"push":"unshift"]({fn:revFormat[token],val:match[++matchIndex]})}else isBackSlash||(regexStr+=".")}parsedDate=config&&config.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0),ops.forEach((function(_a){var fn=_a.fn,val=_a.val;return parsedDate=fn(parsedDate,val,locale)||parsedDate})),parsedDate=matched?parsedDate:void 0}}if(parsedDate instanceof Date&&!isNaN(parsedDate.getTime()))return!0===timeless&&parsedDate.setHours(0,0,0,0),parsedDate;config.errorHandler(new Error("Invalid date provided: "+dateOrig))}}};function compareDates(date1,date2,timeless){return void 0===timeless&&(timeless=!0),!1!==timeless?new Date(date1.getTime()).setHours(0,0,0,0)-new Date(date2.getTime()).setHours(0,0,0,0):date1.getTime()-date2.getTime()}var calculateSecondsSinceMidnight=function calculateSecondsSinceMidnight(hours,minutes,seconds){return 3600*hours+60*minutes+seconds},duration_DAY=864e5;function getDefaultHours(config){var hours=config.defaultHour,minutes=config.defaultMinute,seconds=config.defaultSeconds;if(void 0!==config.minDate){var minHour=config.minDate.getHours(),minMinutes=config.minDate.getMinutes(),minSeconds=config.minDate.getSeconds();hours<minHour&&(hours=minHour),hours===minHour&&minutes<minMinutes&&(minutes=minMinutes),hours===minHour&&minutes===minMinutes&&seconds<minSeconds&&(seconds=config.minDate.getSeconds())}if(void 0!==config.maxDate){var maxHr=config.maxDate.getHours(),maxMinutes=config.maxDate.getMinutes();(hours=Math.min(hours,maxHr))===maxHr&&(minutes=Math.min(maxMinutes,minutes)),hours===maxHr&&minutes===maxMinutes&&(seconds=config.maxDate.getSeconds())}return{hours:hours,minutes:minutes,seconds:seconds}}"function"!=typeof Object.assign&&(Object.assign=function(target){for(var args=[],_i=1;_i<arguments.length;_i++)args[_i-1]=arguments[_i];if(!target)throw TypeError("Cannot convert undefined or null to object");for(var _loop_1=function _loop_1(source){source&&Object.keys(source).forEach((function(key){return target[key]=source[key]}))},_a=0,args_1=args;_a<args_1.length;_a++){var source=args_1[_a];_loop_1(source)}return target});var __assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__spreadArrays=function(){for(var s=0,i=0,il=arguments.length;i<il;i++)s+=arguments[i].length;var r=Array(s),k=0;for(i=0;i<il;i++)for(var a=arguments[i],j=0,jl=a.length;j<jl;j++,k++)r[k]=a[j];return r};function FlatpickrInstance(element,instanceConfig){var self={config:__assign(__assign({},defaults),flatpickr.defaultConfig),l10n:english};function getClosestActiveElement(){var _a;return(null===(_a=self.calendarContainer)||void 0===_a?void 0:_a.getRootNode()).activeElement||document.activeElement}function bindToInstance(fn){return fn.bind(self)}function setCalendarWidth(){var config=self.config;!1===config.weekNumbers&&1===config.showMonths||!0!==config.noCalendar&&window.requestAnimationFrame((function(){if(void 0!==self.calendarContainer&&(self.calendarContainer.style.visibility="hidden",self.calendarContainer.style.display="block"),void 0!==self.daysContainer){var daysWidth=(self.days.offsetWidth+1)*config.showMonths;self.daysContainer.style.width=daysWidth+"px",self.calendarContainer.style.width=daysWidth+(void 0!==self.weekWrapper?self.weekWrapper.offsetWidth:0)+"px",self.calendarContainer.style.removeProperty("visibility"),self.calendarContainer.style.removeProperty("display")}}))}function updateTime(e){if(0===self.selectedDates.length){var defaultDate=void 0===self.config.minDate||compareDates(new Date,self.config.minDate)>=0?new Date:new Date(self.config.minDate.getTime()),defaults=getDefaultHours(self.config);defaultDate.setHours(defaults.hours,defaults.minutes,defaults.seconds,defaultDate.getMilliseconds()),self.selectedDates=[defaultDate],self.latestSelectedDateObj=defaultDate}void 0!==e&&"blur"!==e.type&&function timeWrapper(e){e.preventDefault();var isKeyDown="keydown"===e.type,eventTarget=getEventTarget(e),input=eventTarget;void 0!==self.amPM&&eventTarget===self.amPM&&(self.amPM.textContent=self.l10n.amPM[_int(self.amPM.textContent===self.l10n.amPM[0])]);var min=parseFloat(input.getAttribute("min")),max=parseFloat(input.getAttribute("max")),step=parseFloat(input.getAttribute("step")),curValue=parseInt(input.value,10),delta=e.delta||(isKeyDown?38===e.which?1:-1:0),newValue=curValue+step*delta;if(void 0!==input.value&&2===input.value.length){var isHourElem=input===self.hourElement,isMinuteElem=input===self.minuteElement;newValue<min?(newValue=max+newValue+_int(!isHourElem)+(_int(isHourElem)&&_int(!self.amPM)),isMinuteElem&&incrementNumInput(void 0,-1,self.hourElement)):newValue>max&&(newValue=input===self.hourElement?newValue-max-_int(!self.amPM):min,isMinuteElem&&incrementNumInput(void 0,1,self.hourElement)),self.amPM&&isHourElem&&(1===step?newValue+curValue===23:Math.abs(newValue-curValue)>step)&&(self.amPM.textContent=self.l10n.amPM[_int(self.amPM.textContent===self.l10n.amPM[0])]),input.value=pad(newValue)}}(e);var prevValue=self._input.value;setHoursFromInputs(),updateValue(),self._input.value!==prevValue&&self._debouncedChange()}function setHoursFromInputs(){if(void 0!==self.hourElement&&void 0!==self.minuteElement){var hours=(parseInt(self.hourElement.value.slice(-2),10)||0)%24,minutes=(parseInt(self.minuteElement.value,10)||0)%60,seconds=void 0!==self.secondElement?(parseInt(self.secondElement.value,10)||0)%60:0;void 0!==self.amPM&&(hours=function ampm2military(hour,amPM){return hour%12+12*_int(amPM===self.l10n.amPM[1])}(hours,self.amPM.textContent));var limitMinHours=void 0!==self.config.minTime||self.config.minDate&&self.minDateHasTime&&self.latestSelectedDateObj&&0===compareDates(self.latestSelectedDateObj,self.config.minDate,!0),limitMaxHours=void 0!==self.config.maxTime||self.config.maxDate&&self.maxDateHasTime&&self.latestSelectedDateObj&&0===compareDates(self.latestSelectedDateObj,self.config.maxDate,!0);if(void 0!==self.config.maxTime&&void 0!==self.config.minTime&&self.config.minTime>self.config.maxTime){var minBound=calculateSecondsSinceMidnight(self.config.minTime.getHours(),self.config.minTime.getMinutes(),self.config.minTime.getSeconds()),maxBound=calculateSecondsSinceMidnight(self.config.maxTime.getHours(),self.config.maxTime.getMinutes(),self.config.maxTime.getSeconds()),currentTime=calculateSecondsSinceMidnight(hours,minutes,seconds);if(currentTime>maxBound&&currentTime<minBound){var result=function parseSeconds(secondsSinceMidnight){var hours=Math.floor(secondsSinceMidnight/3600),minutes=(secondsSinceMidnight-3600*hours)/60;return[hours,minutes,secondsSinceMidnight-3600*hours-60*minutes]}(minBound);hours=result[0],minutes=result[1],seconds=result[2]}}else{if(limitMaxHours){var maxTime=void 0!==self.config.maxTime?self.config.maxTime:self.config.maxDate;(hours=Math.min(hours,maxTime.getHours()))===maxTime.getHours()&&(minutes=Math.min(minutes,maxTime.getMinutes())),minutes===maxTime.getMinutes()&&(seconds=Math.min(seconds,maxTime.getSeconds()))}if(limitMinHours){var minTime=void 0!==self.config.minTime?self.config.minTime:self.config.minDate;(hours=Math.max(hours,minTime.getHours()))===minTime.getHours()&&minutes<minTime.getMinutes()&&(minutes=minTime.getMinutes()),minutes===minTime.getMinutes()&&(seconds=Math.max(seconds,minTime.getSeconds()))}}setHours(hours,minutes,seconds)}}function setHoursFromDate(dateObj){var date=dateObj||self.latestSelectedDateObj;date&&date instanceof Date&&setHours(date.getHours(),date.getMinutes(),date.getSeconds())}function setHours(hours,minutes,seconds){void 0!==self.latestSelectedDateObj&&self.latestSelectedDateObj.setHours(hours%24,minutes,seconds||0,0),self.hourElement&&self.minuteElement&&!self.isMobile&&(self.hourElement.value=pad(self.config.time_24hr?hours:(12+hours)%12+12*_int(hours%12==0)),self.minuteElement.value=pad(minutes),void 0!==self.amPM&&(self.amPM.textContent=self.l10n.amPM[_int(hours>=12)]),void 0!==self.secondElement&&(self.secondElement.value=pad(seconds)))}function onYearInput(event){var eventTarget=getEventTarget(event),year=parseInt(eventTarget.value)+(event.delta||0);(year/1e3>1||"Enter"===event.key&&!/[^\d]/.test(year.toString()))&&changeYear(year)}function bind(element,event,handler,options){return event instanceof Array?event.forEach((function(ev){return bind(element,ev,handler,options)})):element instanceof Array?element.forEach((function(el){return bind(el,event,handler,options)})):(element.addEventListener(event,handler,options),void self._handlers.push({remove:function remove(){return element.removeEventListener(event,handler,options)}}))}function triggerChange(){triggerEvent("onChange")}function jumpToDate(jumpDate,triggerChange){var jumpTo=void 0!==jumpDate?self.parseDate(jumpDate):self.latestSelectedDateObj||(self.config.minDate&&self.config.minDate>self.now?self.config.minDate:self.config.maxDate&&self.config.maxDate<self.now?self.config.maxDate:self.now),oldYear=self.currentYear,oldMonth=self.currentMonth;try{void 0!==jumpTo&&(self.currentYear=jumpTo.getFullYear(),self.currentMonth=jumpTo.getMonth())}catch(e){e.message="Invalid date supplied: "+jumpTo,self.config.errorHandler(e)}triggerChange&&self.currentYear!==oldYear&&(triggerEvent("onYearChange"),buildMonthSwitch()),!triggerChange||self.currentYear===oldYear&&self.currentMonth===oldMonth||triggerEvent("onMonthChange"),self.redraw()}function timeIncrement(e){var eventTarget=getEventTarget(e);~eventTarget.className.indexOf("arrow")&&incrementNumInput(e,eventTarget.classList.contains("arrowUp")?1:-1)}function incrementNumInput(e,delta,inputElem){var target=e&&getEventTarget(e),input=inputElem||target&&target.parentNode&&target.parentNode.firstChild,event=createEvent("increment");event.delta=delta,input&&input.dispatchEvent(event)}function createDay(className,date,_dayNumber,i){var dateIsEnabled=isEnabled(date,!0),dayElement=createElement("span",className,date.getDate().toString());return dayElement.dateObj=date,dayElement.$i=i,dayElement.setAttribute("aria-label",self.formatDate(date,self.config.ariaDateFormat)),-1===className.indexOf("hidden")&&0===compareDates(date,self.now)&&(self.todayDateElem=dayElement,dayElement.classList.add("today"),dayElement.setAttribute("aria-current","date")),dateIsEnabled?(dayElement.tabIndex=-1,isDateSelected(date)&&(dayElement.classList.add("selected"),self.selectedDateElem=dayElement,"range"===self.config.mode&&(toggleClass(dayElement,"startRange",self.selectedDates[0]&&0===compareDates(date,self.selectedDates[0],!0)),toggleClass(dayElement,"endRange",self.selectedDates[1]&&0===compareDates(date,self.selectedDates[1],!0)),"nextMonthDay"===className&&dayElement.classList.add("inRange")))):dayElement.classList.add("flatpickr-disabled"),"range"===self.config.mode&&function isDateInRange(date){return!("range"!==self.config.mode||self.selectedDates.length<2)&&(compareDates(date,self.selectedDates[0])>=0&&compareDates(date,self.selectedDates[1])<=0)}(date)&&!isDateSelected(date)&&dayElement.classList.add("inRange"),self.weekNumbers&&1===self.config.showMonths&&"prevMonthDay"!==className&&i%7==6&&self.weekNumbers.insertAdjacentHTML("beforeend","<span class='flatpickr-day'>"+self.config.getWeek(date)+"</span>"),triggerEvent("onDayCreate",dayElement),dayElement}function focusOnDayElem(targetNode){targetNode.focus(),"range"===self.config.mode&&onMouseOver(targetNode)}function getFirstAvailableDay(delta){for(var startMonth=delta>0?0:self.config.showMonths-1,endMonth=delta>0?self.config.showMonths:-1,m=startMonth;m!=endMonth;m+=delta)for(var month=self.daysContainer.children[m],startIndex=delta>0?0:month.children.length-1,endIndex=delta>0?month.children.length:-1,i=startIndex;i!=endIndex;i+=delta){var c=month.children[i];if(-1===c.className.indexOf("hidden")&&isEnabled(c.dateObj))return c}}function focusOnDay(current,offset){var activeElement=getClosestActiveElement(),dayFocused=isInView(activeElement||document.body),startElem=void 0!==current?current:dayFocused?activeElement:void 0!==self.selectedDateElem&&isInView(self.selectedDateElem)?self.selectedDateElem:void 0!==self.todayDateElem&&isInView(self.todayDateElem)?self.todayDateElem:getFirstAvailableDay(offset>0?1:-1);void 0===startElem?self._input.focus():dayFocused?function getNextAvailableDay(current,delta){for(var givenMonth=-1===current.className.indexOf("Month")?current.dateObj.getMonth():self.currentMonth,endMonth=delta>0?self.config.showMonths:-1,loopDelta=delta>0?1:-1,m=givenMonth-self.currentMonth;m!=endMonth;m+=loopDelta)for(var month=self.daysContainer.children[m],startIndex=givenMonth-self.currentMonth===m?current.$i+delta:delta<0?month.children.length-1:0,numMonthDays=month.children.length,i=startIndex;i>=0&&i<numMonthDays&&i!=(delta>0?numMonthDays:-1);i+=loopDelta){var c=month.children[i];if(-1===c.className.indexOf("hidden")&&isEnabled(c.dateObj)&&Math.abs(current.$i-i)>=Math.abs(delta))return focusOnDayElem(c)}self.changeMonth(loopDelta),focusOnDay(getFirstAvailableDay(loopDelta),0)}(startElem,offset):focusOnDayElem(startElem)}function buildMonthDays(year,month){for(var firstOfMonth=(new Date(year,month,1).getDay()-self.l10n.firstDayOfWeek+7)%7,prevMonthDays=self.utils.getDaysInMonth((month-1+12)%12,year),daysInMonth=self.utils.getDaysInMonth(month,year),days=window.document.createDocumentFragment(),isMultiMonth=self.config.showMonths>1,prevMonthDayClass=isMultiMonth?"prevMonthDay hidden":"prevMonthDay",nextMonthDayClass=isMultiMonth?"nextMonthDay hidden":"nextMonthDay",dayNumber=prevMonthDays+1-firstOfMonth,dayIndex=0;dayNumber<=prevMonthDays;dayNumber++,dayIndex++)days.appendChild(createDay("flatpickr-day "+prevMonthDayClass,new Date(year,month-1,dayNumber),0,dayIndex));for(dayNumber=1;dayNumber<=daysInMonth;dayNumber++,dayIndex++)days.appendChild(createDay("flatpickr-day",new Date(year,month,dayNumber),0,dayIndex));for(var dayNum=daysInMonth+1;dayNum<=42-firstOfMonth&&(1===self.config.showMonths||dayIndex%7!=0);dayNum++,dayIndex++)days.appendChild(createDay("flatpickr-day "+nextMonthDayClass,new Date(year,month+1,dayNum%daysInMonth),0,dayIndex));var dayContainer=createElement("div","dayContainer");return dayContainer.appendChild(days),dayContainer}function buildDays(){if(void 0!==self.daysContainer){clearNode(self.daysContainer),self.weekNumbers&&clearNode(self.weekNumbers);for(var frag=document.createDocumentFragment(),i=0;i<self.config.showMonths;i++){var d=new Date(self.currentYear,self.currentMonth,1);d.setMonth(self.currentMonth+i),frag.appendChild(buildMonthDays(d.getFullYear(),d.getMonth()))}self.daysContainer.appendChild(frag),self.days=self.daysContainer.firstChild,"range"===self.config.mode&&1===self.selectedDates.length&&onMouseOver()}}function buildMonthSwitch(){if(!(self.config.showMonths>1||"dropdown"!==self.config.monthSelectorType)){var shouldBuildMonth=function shouldBuildMonth(month){return!(void 0!==self.config.minDate&&self.currentYear===self.config.minDate.getFullYear()&&month<self.config.minDate.getMonth())&&!(void 0!==self.config.maxDate&&self.currentYear===self.config.maxDate.getFullYear()&&month>self.config.maxDate.getMonth())};self.monthsDropdownContainer.tabIndex=-1,self.monthsDropdownContainer.innerHTML="";for(var i=0;i<12;i++)if(shouldBuildMonth(i)){var month=createElement("option","flatpickr-monthDropdown-month");month.value=new Date(self.currentYear,i).getMonth().toString(),month.textContent=monthToStr(i,self.config.shorthandCurrentMonth,self.l10n),month.tabIndex=-1,self.currentMonth===i&&(month.selected=!0),self.monthsDropdownContainer.appendChild(month)}}}function buildMonth(){var monthElement,container=createElement("div","flatpickr-month"),monthNavFragment=window.document.createDocumentFragment();self.config.showMonths>1||"static"===self.config.monthSelectorType?monthElement=createElement("span","cur-month"):(self.monthsDropdownContainer=createElement("select","flatpickr-monthDropdown-months"),self.monthsDropdownContainer.setAttribute("aria-label",self.l10n.monthAriaLabel),bind(self.monthsDropdownContainer,"change",(function(e){var target=getEventTarget(e),selectedMonth=parseInt(target.value,10);self.changeMonth(selectedMonth-self.currentMonth),triggerEvent("onMonthChange")})),buildMonthSwitch(),monthElement=self.monthsDropdownContainer);var yearInput=createNumberInput("cur-year",{tabindex:"-1"}),yearElement=yearInput.getElementsByTagName("input")[0];yearElement.setAttribute("aria-label",self.l10n.yearAriaLabel),self.config.minDate&&yearElement.setAttribute("min",self.config.minDate.getFullYear().toString()),self.config.maxDate&&(yearElement.setAttribute("max",self.config.maxDate.getFullYear().toString()),yearElement.disabled=!!self.config.minDate&&self.config.minDate.getFullYear()===self.config.maxDate.getFullYear());var currentMonth=createElement("div","flatpickr-current-month");return currentMonth.appendChild(monthElement),currentMonth.appendChild(yearInput),monthNavFragment.appendChild(currentMonth),container.appendChild(monthNavFragment),{container:container,yearElement:yearElement,monthElement:monthElement}}function buildMonths(){clearNode(self.monthNav),self.monthNav.appendChild(self.prevMonthNav),self.config.showMonths&&(self.yearElements=[],self.monthElements=[]);for(var m=self.config.showMonths;m--;){var month=buildMonth();self.yearElements.push(month.yearElement),self.monthElements.push(month.monthElement),self.monthNav.appendChild(month.container)}self.monthNav.appendChild(self.nextMonthNav)}function buildWeekdays(){self.weekdayContainer?clearNode(self.weekdayContainer):self.weekdayContainer=createElement("div","flatpickr-weekdays");for(var i=self.config.showMonths;i--;){var container=createElement("div","flatpickr-weekdaycontainer");self.weekdayContainer.appendChild(container)}return updateWeekdays(),self.weekdayContainer}function updateWeekdays(){if(self.weekdayContainer){var firstDayOfWeek=self.l10n.firstDayOfWeek,weekdays=__spreadArrays(self.l10n.weekdays.shorthand);firstDayOfWeek>0&&firstDayOfWeek<weekdays.length&&(weekdays=__spreadArrays(weekdays.splice(firstDayOfWeek,weekdays.length),weekdays.splice(0,firstDayOfWeek)));for(var i=self.config.showMonths;i--;)self.weekdayContainer.children[i].innerHTML="\n      <span class='flatpickr-weekday'>\n        "+weekdays.join("</span><span class='flatpickr-weekday'>")+"\n      </span>\n      "}}function changeMonth(value,isOffset){void 0===isOffset&&(isOffset=!0);var delta=isOffset?value:value-self.currentMonth;delta<0&&!0===self._hidePrevMonthArrow||delta>0&&!0===self._hideNextMonthArrow||(self.currentMonth+=delta,(self.currentMonth<0||self.currentMonth>11)&&(self.currentYear+=self.currentMonth>11?1:-1,self.currentMonth=(self.currentMonth+12)%12,triggerEvent("onYearChange"),buildMonthSwitch()),buildDays(),triggerEvent("onMonthChange"),updateNavigationCurrentMonth())}function isCalendarElem(elem){return self.calendarContainer.contains(elem)}function documentClick(e){if(self.isOpen&&!self.config.inline){var eventTarget_1=getEventTarget(e),isCalendarElement=isCalendarElem(eventTarget_1),lostFocus=!(eventTarget_1===self.input||eventTarget_1===self.altInput||self.element.contains(eventTarget_1)||e.path&&e.path.indexOf&&(~e.path.indexOf(self.input)||~e.path.indexOf(self.altInput)))&&!isCalendarElement&&!isCalendarElem(e.relatedTarget),isIgnored=!self.config.ignoredFocusElements.some((function(elem){return elem.contains(eventTarget_1)}));lostFocus&&isIgnored&&(self.config.allowInput&&self.setDate(self._input.value,!1,self.config.altInput?self.config.altFormat:self.config.dateFormat),void 0!==self.timeContainer&&void 0!==self.minuteElement&&void 0!==self.hourElement&&""!==self.input.value&&void 0!==self.input.value&&updateTime(),self.close(),self.config&&"range"===self.config.mode&&1===self.selectedDates.length&&self.clear(!1))}}function changeYear(newYear){if(!(!newYear||self.config.minDate&&newYear<self.config.minDate.getFullYear()||self.config.maxDate&&newYear>self.config.maxDate.getFullYear())){var newYearNum=newYear,isNewYear=self.currentYear!==newYearNum;self.currentYear=newYearNum||self.currentYear,self.config.maxDate&&self.currentYear===self.config.maxDate.getFullYear()?self.currentMonth=Math.min(self.config.maxDate.getMonth(),self.currentMonth):self.config.minDate&&self.currentYear===self.config.minDate.getFullYear()&&(self.currentMonth=Math.max(self.config.minDate.getMonth(),self.currentMonth)),isNewYear&&(self.redraw(),triggerEvent("onYearChange"),buildMonthSwitch())}}function isEnabled(date,timeless){var _a;void 0===timeless&&(timeless=!0);var dateToCheck=self.parseDate(date,void 0,timeless);if(self.config.minDate&&dateToCheck&&compareDates(dateToCheck,self.config.minDate,void 0!==timeless?timeless:!self.minDateHasTime)<0||self.config.maxDate&&dateToCheck&&compareDates(dateToCheck,self.config.maxDate,void 0!==timeless?timeless:!self.maxDateHasTime)>0)return!1;if(!self.config.enable&&0===self.config.disable.length)return!0;if(void 0===dateToCheck)return!1;for(var bool=!!self.config.enable,array=null!==(_a=self.config.enable)&&void 0!==_a?_a:self.config.disable,i=0,d=void 0;i<array.length;i++){if("function"==typeof(d=array[i])&&d(dateToCheck))return bool;if(d instanceof Date&&void 0!==dateToCheck&&d.getTime()===dateToCheck.getTime())return bool;if("string"==typeof d){var parsed=self.parseDate(d,void 0,!0);return parsed&&parsed.getTime()===dateToCheck.getTime()?bool:!bool}if("object"==typeof d&&void 0!==dateToCheck&&d.from&&d.to&&dateToCheck.getTime()>=d.from.getTime()&&dateToCheck.getTime()<=d.to.getTime())return bool}return!bool}function isInView(elem){return void 0!==self.daysContainer&&(-1===elem.className.indexOf("hidden")&&-1===elem.className.indexOf("flatpickr-disabled")&&self.daysContainer.contains(elem))}function onBlur(e){var isInput=e.target===self._input,valueChanged=self._input.value.trimEnd()!==getDateStr();!isInput||!valueChanged||e.relatedTarget&&isCalendarElem(e.relatedTarget)||self.setDate(self._input.value,!0,e.target===self.altInput?self.config.altFormat:self.config.dateFormat)}function onKeyDown(e){var eventTarget=getEventTarget(e),isInput=self.config.wrap?element.contains(eventTarget):eventTarget===self._input,allowInput=self.config.allowInput,allowKeydown=self.isOpen&&(!allowInput||!isInput),allowInlineKeydown=self.config.inline&&isInput&&!allowInput;if(13===e.keyCode&&isInput){if(allowInput)return self.setDate(self._input.value,!0,eventTarget===self.altInput?self.config.altFormat:self.config.dateFormat),self.close(),eventTarget.blur();self.open()}else if(isCalendarElem(eventTarget)||allowKeydown||allowInlineKeydown){var isTimeObj=!!self.timeContainer&&self.timeContainer.contains(eventTarget);switch(e.keyCode){case 13:isTimeObj?(e.preventDefault(),updateTime(),focusAndClose()):selectDate(e);break;case 27:e.preventDefault(),focusAndClose();break;case 8:case 46:isInput&&!self.config.allowInput&&(e.preventDefault(),self.clear());break;case 37:case 39:if(isTimeObj||isInput)self.hourElement&&self.hourElement.focus();else{e.preventDefault();var activeElement=getClosestActiveElement();if(void 0!==self.daysContainer&&(!1===allowInput||activeElement&&isInView(activeElement))){var delta_1=39===e.keyCode?1:-1;e.ctrlKey?(e.stopPropagation(),changeMonth(delta_1),focusOnDay(getFirstAvailableDay(1),0)):focusOnDay(void 0,delta_1)}}break;case 38:case 40:e.preventDefault();var delta=40===e.keyCode?1:-1;self.daysContainer&&void 0!==eventTarget.$i||eventTarget===self.input||eventTarget===self.altInput?e.ctrlKey?(e.stopPropagation(),changeYear(self.currentYear-delta),focusOnDay(getFirstAvailableDay(1),0)):isTimeObj||focusOnDay(void 0,7*delta):eventTarget===self.currentYearElement?changeYear(self.currentYear-delta):self.config.enableTime&&(!isTimeObj&&self.hourElement&&self.hourElement.focus(),updateTime(e),self._debouncedChange());break;case 9:if(isTimeObj){var elems=[self.hourElement,self.minuteElement,self.secondElement,self.amPM].concat(self.pluginElements).filter((function(x){return x})),i=elems.indexOf(eventTarget);if(-1!==i){var target=elems[i+(e.shiftKey?-1:1)];e.preventDefault(),(target||self._input).focus()}}else!self.config.noCalendar&&self.daysContainer&&self.daysContainer.contains(eventTarget)&&e.shiftKey&&(e.preventDefault(),self._input.focus())}}if(void 0!==self.amPM&&eventTarget===self.amPM)switch(e.key){case self.l10n.amPM[0].charAt(0):case self.l10n.amPM[0].charAt(0).toLowerCase():self.amPM.textContent=self.l10n.amPM[0],setHoursFromInputs(),updateValue();break;case self.l10n.amPM[1].charAt(0):case self.l10n.amPM[1].charAt(0).toLowerCase():self.amPM.textContent=self.l10n.amPM[1],setHoursFromInputs(),updateValue()}(isInput||isCalendarElem(eventTarget))&&triggerEvent("onKeyDown",e)}function onMouseOver(elem,cellClass){if(void 0===cellClass&&(cellClass="flatpickr-day"),1===self.selectedDates.length&&(!elem||elem.classList.contains(cellClass)&&!elem.classList.contains("flatpickr-disabled"))){for(var hoverDate=elem?elem.dateObj.getTime():self.days.firstElementChild.dateObj.getTime(),initialDate=self.parseDate(self.selectedDates[0],void 0,!0).getTime(),rangeStartDate=Math.min(hoverDate,self.selectedDates[0].getTime()),rangeEndDate=Math.max(hoverDate,self.selectedDates[0].getTime()),containsDisabled=!1,minRange=0,maxRange=0,t=rangeStartDate;t<rangeEndDate;t+=duration_DAY)isEnabled(new Date(t),!0)||(containsDisabled=containsDisabled||t>rangeStartDate&&t<rangeEndDate,t<initialDate&&(!minRange||t>minRange)?minRange=t:t>initialDate&&(!maxRange||t<maxRange)&&(maxRange=t));Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+"+self.config.showMonths+") > ."+cellClass)).forEach((function(dayElem){var timestamp=dayElem.dateObj.getTime(),outOfRange=minRange>0&&timestamp<minRange||maxRange>0&&timestamp>maxRange;if(outOfRange)return dayElem.classList.add("notAllowed"),void["inRange","startRange","endRange"].forEach((function(c){dayElem.classList.remove(c)}));containsDisabled&&!outOfRange||(["startRange","inRange","endRange","notAllowed"].forEach((function(c){dayElem.classList.remove(c)})),void 0!==elem&&(elem.classList.add(hoverDate<=self.selectedDates[0].getTime()?"startRange":"endRange"),initialDate<hoverDate&&timestamp===initialDate?dayElem.classList.add("startRange"):initialDate>hoverDate&&timestamp===initialDate&&dayElem.classList.add("endRange"),timestamp>=minRange&&(0===maxRange||timestamp<=maxRange)&&function isBetween(ts,ts1,ts2){return ts>Math.min(ts1,ts2)&&ts<Math.max(ts1,ts2)}(timestamp,initialDate,hoverDate)&&dayElem.classList.add("inRange")))}))}}function onResize(){!self.isOpen||self.config.static||self.config.inline||positionCalendar()}function minMaxDateSetter(type){return function(date){var dateObj=self.config["_"+type+"Date"]=self.parseDate(date,self.config.dateFormat),inverseDateObj=self.config["_"+("min"===type?"max":"min")+"Date"];void 0!==dateObj&&(self["min"===type?"minDateHasTime":"maxDateHasTime"]=dateObj.getHours()>0||dateObj.getMinutes()>0||dateObj.getSeconds()>0),self.selectedDates&&(self.selectedDates=self.selectedDates.filter((function(d){return isEnabled(d)})),self.selectedDates.length||"min"!==type||setHoursFromDate(dateObj),updateValue()),self.daysContainer&&(redraw(),void 0!==dateObj?self.currentYearElement[type]=dateObj.getFullYear().toString():self.currentYearElement.removeAttribute(type),self.currentYearElement.disabled=!!inverseDateObj&&void 0!==dateObj&&inverseDateObj.getFullYear()===dateObj.getFullYear())}}function getInputElem(){return self.config.wrap?element.querySelector("[data-input]"):element}function setupLocale(){"object"!=typeof self.config.locale&&void 0===flatpickr.l10ns[self.config.locale]&&self.config.errorHandler(new Error("flatpickr: invalid locale "+self.config.locale)),self.l10n=__assign(__assign({},flatpickr.l10ns.default),"object"==typeof self.config.locale?self.config.locale:"default"!==self.config.locale?flatpickr.l10ns[self.config.locale]:void 0),tokenRegex.D="("+self.l10n.weekdays.shorthand.join("|")+")",tokenRegex.l="("+self.l10n.weekdays.longhand.join("|")+")",tokenRegex.M="("+self.l10n.months.shorthand.join("|")+")",tokenRegex.F="("+self.l10n.months.longhand.join("|")+")",tokenRegex.K="("+self.l10n.amPM[0]+"|"+self.l10n.amPM[1]+"|"+self.l10n.amPM[0].toLowerCase()+"|"+self.l10n.amPM[1].toLowerCase()+")",void 0===__assign(__assign({},instanceConfig),JSON.parse(JSON.stringify(element.dataset||{}))).time_24hr&&void 0===flatpickr.defaultConfig.time_24hr&&(self.config.time_24hr=self.l10n.time_24hr),self.formatDate=createDateFormatter(self),self.parseDate=createDateParser({config:self.config,l10n:self.l10n})}function positionCalendar(customPositionElement){if("function"!=typeof self.config.position){if(void 0!==self.calendarContainer){triggerEvent("onPreCalendarPosition");var positionElement=customPositionElement||self._positionElement,calendarHeight=Array.prototype.reduce.call(self.calendarContainer.children,(function(acc,child){return acc+child.offsetHeight}),0),calendarWidth=self.calendarContainer.offsetWidth,configPos=self.config.position.split(" "),configPosVertical=configPos[0],configPosHorizontal=configPos.length>1?configPos[1]:null,inputBounds=positionElement.getBoundingClientRect(),distanceFromBottom=window.innerHeight-inputBounds.bottom,showOnTop="above"===configPosVertical||"below"!==configPosVertical&&distanceFromBottom<calendarHeight&&inputBounds.top>calendarHeight,top=window.pageYOffset+inputBounds.top+(showOnTop?-calendarHeight-2:positionElement.offsetHeight+2);if(toggleClass(self.calendarContainer,"arrowTop",!showOnTop),toggleClass(self.calendarContainer,"arrowBottom",showOnTop),!self.config.inline){var left=window.pageXOffset+inputBounds.left,isCenter=!1,isRight=!1;"center"===configPosHorizontal?(left-=(calendarWidth-inputBounds.width)/2,isCenter=!0):"right"===configPosHorizontal&&(left-=calendarWidth-inputBounds.width,isRight=!0),toggleClass(self.calendarContainer,"arrowLeft",!isCenter&&!isRight),toggleClass(self.calendarContainer,"arrowCenter",isCenter),toggleClass(self.calendarContainer,"arrowRight",isRight);var right=window.document.body.offsetWidth-(window.pageXOffset+inputBounds.right),rightMost=left+calendarWidth>window.document.body.offsetWidth,centerMost=right+calendarWidth>window.document.body.offsetWidth;if(toggleClass(self.calendarContainer,"rightMost",rightMost),!self.config.static)if(self.calendarContainer.style.top=top+"px",rightMost)if(centerMost){var doc=function getDocumentStyleSheet(){for(var editableSheet=null,i=0;i<document.styleSheets.length;i++){var sheet=document.styleSheets[i];if(sheet.cssRules){editableSheet=sheet;break}}return null!=editableSheet?editableSheet:function createStyleSheet(){var style=document.createElement("style");return document.head.appendChild(style),style.sheet}()}();if(void 0===doc)return;var bodyWidth=window.document.body.offsetWidth,centerLeft=Math.max(0,bodyWidth/2-calendarWidth/2),centerIndex=doc.cssRules.length,centerStyle="{left:"+inputBounds.left+"px;right:auto;}";toggleClass(self.calendarContainer,"rightMost",!1),toggleClass(self.calendarContainer,"centerMost",!0),doc.insertRule(".flatpickr-calendar.centerMost:before,.flatpickr-calendar.centerMost:after"+centerStyle,centerIndex),self.calendarContainer.style.left=centerLeft+"px",self.calendarContainer.style.right="auto"}else self.calendarContainer.style.left="auto",self.calendarContainer.style.right=right+"px";else self.calendarContainer.style.left=left+"px",self.calendarContainer.style.right="auto"}}}else self.config.position(self,customPositionElement)}function redraw(){self.config.noCalendar||self.isMobile||(buildMonthSwitch(),updateNavigationCurrentMonth(),buildDays())}function focusAndClose(){self._input.focus(),-1!==window.navigator.userAgent.indexOf("MSIE")||void 0!==navigator.msMaxTouchPoints?setTimeout(self.close,0):self.close()}function selectDate(e){e.preventDefault(),e.stopPropagation();var t=findParent(getEventTarget(e),(function isSelectable(day){return day.classList&&day.classList.contains("flatpickr-day")&&!day.classList.contains("flatpickr-disabled")&&!day.classList.contains("notAllowed")}));if(void 0!==t){var target=t,selectedDate=self.latestSelectedDateObj=new Date(target.dateObj.getTime()),shouldChangeMonth=(selectedDate.getMonth()<self.currentMonth||selectedDate.getMonth()>self.currentMonth+self.config.showMonths-1)&&"range"!==self.config.mode;if(self.selectedDateElem=target,"single"===self.config.mode)self.selectedDates=[selectedDate];else if("multiple"===self.config.mode){var selectedIndex=isDateSelected(selectedDate);selectedIndex?self.selectedDates.splice(parseInt(selectedIndex),1):self.selectedDates.push(selectedDate)}else"range"===self.config.mode&&(2===self.selectedDates.length&&self.clear(!1,!1),self.latestSelectedDateObj=selectedDate,self.selectedDates.push(selectedDate),0!==compareDates(selectedDate,self.selectedDates[0],!0)&&self.selectedDates.sort((function(a,b){return a.getTime()-b.getTime()})));if(setHoursFromInputs(),shouldChangeMonth){var isNewYear=self.currentYear!==selectedDate.getFullYear();self.currentYear=selectedDate.getFullYear(),self.currentMonth=selectedDate.getMonth(),isNewYear&&(triggerEvent("onYearChange"),buildMonthSwitch()),triggerEvent("onMonthChange")}if(updateNavigationCurrentMonth(),buildDays(),updateValue(),shouldChangeMonth||"range"===self.config.mode||1!==self.config.showMonths?void 0!==self.selectedDateElem&&void 0===self.hourElement&&self.selectedDateElem&&self.selectedDateElem.focus():focusOnDayElem(target),void 0!==self.hourElement&&void 0!==self.hourElement&&self.hourElement.focus(),self.config.closeOnSelect){var single="single"===self.config.mode&&!self.config.enableTime,range="range"===self.config.mode&&2===self.selectedDates.length&&!self.config.enableTime;(single||range)&&focusAndClose()}triggerChange()}}self.parseDate=createDateParser({config:self.config,l10n:self.l10n}),self._handlers=[],self.pluginElements=[],self.loadedPlugins=[],self._bind=bind,self._setHoursFromDate=setHoursFromDate,self._positionCalendar=positionCalendar,self.changeMonth=changeMonth,self.changeYear=changeYear,self.clear=function clear(triggerChangeEvent,toInitial){void 0===triggerChangeEvent&&(triggerChangeEvent=!0);void 0===toInitial&&(toInitial=!0);self.input.value="",void 0!==self.altInput&&(self.altInput.value="");void 0!==self.mobileInput&&(self.mobileInput.value="");self.selectedDates=[],self.latestSelectedDateObj=void 0,!0===toInitial&&(self.currentYear=self._initialDate.getFullYear(),self.currentMonth=self._initialDate.getMonth());if(!0===self.config.enableTime){var _a=getDefaultHours(self.config);setHours(_a.hours,_a.minutes,_a.seconds)}self.redraw(),triggerChangeEvent&&triggerEvent("onChange")},self.close=function close(){self.isOpen=!1,self.isMobile||(void 0!==self.calendarContainer&&self.calendarContainer.classList.remove("open"),void 0!==self._input&&self._input.classList.remove("active"));triggerEvent("onClose")},self.onMouseOver=onMouseOver,self._createElement=createElement,self.createDay=createDay,self.destroy=function destroy(){void 0!==self.config&&triggerEvent("onDestroy");for(var i=self._handlers.length;i--;)self._handlers[i].remove();if(self._handlers=[],self.mobileInput)self.mobileInput.parentNode&&self.mobileInput.parentNode.removeChild(self.mobileInput),self.mobileInput=void 0;else if(self.calendarContainer&&self.calendarContainer.parentNode)if(self.config.static&&self.calendarContainer.parentNode){var wrapper=self.calendarContainer.parentNode;if(wrapper.lastChild&&wrapper.removeChild(wrapper.lastChild),wrapper.parentNode){for(;wrapper.firstChild;)wrapper.parentNode.insertBefore(wrapper.firstChild,wrapper);wrapper.parentNode.removeChild(wrapper)}}else self.calendarContainer.parentNode.removeChild(self.calendarContainer);self.altInput&&(self.input.type="text",self.altInput.parentNode&&self.altInput.parentNode.removeChild(self.altInput),delete self.altInput);self.input&&(self.input.type=self.input._type,self.input.classList.remove("flatpickr-input"),self.input.removeAttribute("readonly"));["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","monthsDropdownContainer","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach((function(k){try{delete self[k]}catch(_){}}))},self.isEnabled=isEnabled,self.jumpToDate=jumpToDate,self.updateValue=updateValue,self.open=function open(e,positionElement){void 0===positionElement&&(positionElement=self._positionElement);if(!0===self.isMobile){if(e){e.preventDefault();var eventTarget=getEventTarget(e);eventTarget&&eventTarget.blur()}return void 0!==self.mobileInput&&(self.mobileInput.focus(),self.mobileInput.click()),void triggerEvent("onOpen")}if(self._input.disabled||self.config.inline)return;var wasOpen=self.isOpen;self.isOpen=!0,wasOpen||(self.calendarContainer.classList.add("open"),self._input.classList.add("active"),triggerEvent("onOpen"),positionCalendar(positionElement));!0===self.config.enableTime&&!0===self.config.noCalendar&&(!1!==self.config.allowInput||void 0!==e&&self.timeContainer.contains(e.relatedTarget)||setTimeout((function(){return self.hourElement.select()}),50))},self.redraw=redraw,self.set=function set(option,value){if(null!==option&&"object"==typeof option)for(var key in Object.assign(self.config,option),option)void 0!==CALLBACKS[key]&&CALLBACKS[key].forEach((function(x){return x()}));else self.config[option]=value,void 0!==CALLBACKS[option]?CALLBACKS[option].forEach((function(x){return x()})):HOOKS.indexOf(option)>-1&&(self.config[option]=arrayify(value));self.redraw(),updateValue(!0)},self.setDate=function setDate(date,triggerChange,format){void 0===triggerChange&&(triggerChange=!1);void 0===format&&(format=self.config.dateFormat);if(0!==date&&!date||date instanceof Array&&0===date.length)return self.clear(triggerChange);setSelectedDate(date,format),self.latestSelectedDateObj=self.selectedDates[self.selectedDates.length-1],self.redraw(),jumpToDate(void 0,triggerChange),setHoursFromDate(),0===self.selectedDates.length&&self.clear(!1);updateValue(triggerChange),triggerChange&&triggerEvent("onChange")},self.toggle=function toggle(e){if(!0===self.isOpen)return self.close();self.open(e)};var CALLBACKS={locale:[setupLocale,updateWeekdays],showMonths:[buildMonths,setCalendarWidth,buildWeekdays],minDate:[jumpToDate],maxDate:[jumpToDate],positionElement:[updatePositionElement],clickOpens:[function(){!0===self.config.clickOpens?(bind(self._input,"focus",self.open),bind(self._input,"click",self.open)):(self._input.removeEventListener("focus",self.open),self._input.removeEventListener("click",self.open))}]};function setSelectedDate(inputDate,format){var dates=[];if(inputDate instanceof Array)dates=inputDate.map((function(d){return self.parseDate(d,format)}));else if(inputDate instanceof Date||"number"==typeof inputDate)dates=[self.parseDate(inputDate,format)];else if("string"==typeof inputDate)switch(self.config.mode){case"single":case"time":dates=[self.parseDate(inputDate,format)];break;case"multiple":dates=inputDate.split(self.config.conjunction).map((function(date){return self.parseDate(date,format)}));break;case"range":dates=inputDate.split(self.l10n.rangeSeparator).map((function(date){return self.parseDate(date,format)}))}else self.config.errorHandler(new Error("Invalid date supplied: "+JSON.stringify(inputDate)));self.selectedDates=self.config.allowInvalidPreload?dates:dates.filter((function(d){return d instanceof Date&&isEnabled(d,!1)})),"range"===self.config.mode&&self.selectedDates.sort((function(a,b){return a.getTime()-b.getTime()}))}function parseDateRules(arr){return arr.slice().map((function(rule){return"string"==typeof rule||"number"==typeof rule||rule instanceof Date?self.parseDate(rule,void 0,!0):rule&&"object"==typeof rule&&rule.from&&rule.to?{from:self.parseDate(rule.from,void 0),to:self.parseDate(rule.to,void 0)}:rule})).filter((function(x){return x}))}function updatePositionElement(){self._positionElement=self.config.positionElement||self._input}function triggerEvent(event,data){if(void 0!==self.config){var hooks=self.config[event];if(void 0!==hooks&&hooks.length>0)for(var i=0;hooks[i]&&i<hooks.length;i++)hooks[i](self.selectedDates,self.input.value,self,data);"onChange"===event&&(self.input.dispatchEvent(createEvent("change")),self.input.dispatchEvent(createEvent("input")))}}function createEvent(name){var e=document.createEvent("Event");return e.initEvent(name,!0,!0),e}function isDateSelected(date){for(var i=0;i<self.selectedDates.length;i++){var selectedDate=self.selectedDates[i];if(selectedDate instanceof Date&&0===compareDates(selectedDate,date))return""+i}return!1}function updateNavigationCurrentMonth(){self.config.noCalendar||self.isMobile||!self.monthNav||(self.yearElements.forEach((function(yearElement,i){var d=new Date(self.currentYear,self.currentMonth,1);d.setMonth(self.currentMonth+i),self.config.showMonths>1||"static"===self.config.monthSelectorType?self.monthElements[i].textContent=monthToStr(d.getMonth(),self.config.shorthandCurrentMonth,self.l10n)+" ":self.monthsDropdownContainer.value=d.getMonth().toString(),yearElement.value=d.getFullYear().toString()})),self._hidePrevMonthArrow=void 0!==self.config.minDate&&(self.currentYear===self.config.minDate.getFullYear()?self.currentMonth<=self.config.minDate.getMonth():self.currentYear<self.config.minDate.getFullYear()),self._hideNextMonthArrow=void 0!==self.config.maxDate&&(self.currentYear===self.config.maxDate.getFullYear()?self.currentMonth+1>self.config.maxDate.getMonth():self.currentYear>self.config.maxDate.getFullYear()))}function getDateStr(specificFormat){var format=specificFormat||(self.config.altInput?self.config.altFormat:self.config.dateFormat);return self.selectedDates.map((function(dObj){return self.formatDate(dObj,format)})).filter((function(d,i,arr){return"range"!==self.config.mode||self.config.enableTime||arr.indexOf(d)===i})).join("range"!==self.config.mode?self.config.conjunction:self.l10n.rangeSeparator)}function updateValue(triggerChange){void 0===triggerChange&&(triggerChange=!0),void 0!==self.mobileInput&&self.mobileFormatStr&&(self.mobileInput.value=void 0!==self.latestSelectedDateObj?self.formatDate(self.latestSelectedDateObj,self.mobileFormatStr):""),self.input.value=getDateStr(self.config.dateFormat),void 0!==self.altInput&&(self.altInput.value=getDateStr(self.config.altFormat)),!1!==triggerChange&&triggerEvent("onValueUpdate")}function onMonthNavClick(e){var eventTarget=getEventTarget(e),isPrevMonth=self.prevMonthNav.contains(eventTarget),isNextMonth=self.nextMonthNav.contains(eventTarget);isPrevMonth||isNextMonth?changeMonth(isPrevMonth?-1:1):self.yearElements.indexOf(eventTarget)>=0?eventTarget.select():eventTarget.classList.contains("arrowUp")?self.changeYear(self.currentYear+1):eventTarget.classList.contains("arrowDown")&&self.changeYear(self.currentYear-1)}return function init(){self.element=self.input=element,self.isOpen=!1,function parseConfig(){var boolOpts=["wrap","weekNumbers","allowInput","allowInvalidPreload","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],userConfig=__assign(__assign({},JSON.parse(JSON.stringify(element.dataset||{}))),instanceConfig),formats={};self.config.parseDate=userConfig.parseDate,self.config.formatDate=userConfig.formatDate,Object.defineProperty(self.config,"enable",{get:function get(){return self.config._enable},set:function set(dates){self.config._enable=parseDateRules(dates)}}),Object.defineProperty(self.config,"disable",{get:function get(){return self.config._disable},set:function set(dates){self.config._disable=parseDateRules(dates)}});var timeMode="time"===userConfig.mode;if(!userConfig.dateFormat&&(userConfig.enableTime||timeMode)){var defaultDateFormat=flatpickr.defaultConfig.dateFormat||defaults.dateFormat;formats.dateFormat=userConfig.noCalendar||timeMode?"H:i"+(userConfig.enableSeconds?":S":""):defaultDateFormat+" H:i"+(userConfig.enableSeconds?":S":"")}if(userConfig.altInput&&(userConfig.enableTime||timeMode)&&!userConfig.altFormat){var defaultAltFormat=flatpickr.defaultConfig.altFormat||defaults.altFormat;formats.altFormat=userConfig.noCalendar||timeMode?"h:i"+(userConfig.enableSeconds?":S K":" K"):defaultAltFormat+" h:i"+(userConfig.enableSeconds?":S":"")+" K"}Object.defineProperty(self.config,"minDate",{get:function get(){return self.config._minDate},set:minMaxDateSetter("min")}),Object.defineProperty(self.config,"maxDate",{get:function get(){return self.config._maxDate},set:minMaxDateSetter("max")});var minMaxTimeSetter=function minMaxTimeSetter(type){return function(val){self.config["min"===type?"_minTime":"_maxTime"]=self.parseDate(val,"H:i:S")}};Object.defineProperty(self.config,"minTime",{get:function get(){return self.config._minTime},set:minMaxTimeSetter("min")}),Object.defineProperty(self.config,"maxTime",{get:function get(){return self.config._maxTime},set:minMaxTimeSetter("max")}),"time"===userConfig.mode&&(self.config.noCalendar=!0,self.config.enableTime=!0);Object.assign(self.config,formats,userConfig);for(var i=0;i<boolOpts.length;i++)self.config[boolOpts[i]]=!0===self.config[boolOpts[i]]||"true"===self.config[boolOpts[i]];HOOKS.filter((function(hook){return void 0!==self.config[hook]})).forEach((function(hook){self.config[hook]=arrayify(self.config[hook]||[]).map(bindToInstance)})),self.isMobile=!self.config.disableMobile&&!self.config.inline&&"single"===self.config.mode&&!self.config.disable.length&&!self.config.enable&&!self.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);for(i=0;i<self.config.plugins.length;i++){var pluginConf=self.config.plugins[i](self)||{};for(var key in pluginConf)HOOKS.indexOf(key)>-1?self.config[key]=arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]):void 0===userConfig[key]&&(self.config[key]=pluginConf[key])}userConfig.altInputClass||(self.config.altInputClass=getInputElem().className+" "+self.config.altInputClass);triggerEvent("onParseConfig")}(),setupLocale(),function setupInputs(){if(self.input=getInputElem(),!self.input)return void self.config.errorHandler(new Error("Invalid input element specified"));self.input._type=self.input.type,self.input.type="text",self.input.classList.add("flatpickr-input"),self._input=self.input,self.config.altInput&&(self.altInput=createElement(self.input.nodeName,self.config.altInputClass),self._input=self.altInput,self.altInput.placeholder=self.input.placeholder,self.altInput.disabled=self.input.disabled,self.altInput.required=self.input.required,self.altInput.tabIndex=self.input.tabIndex,self.altInput.type="text",self.input.setAttribute("type","hidden"),!self.config.static&&self.input.parentNode&&self.input.parentNode.insertBefore(self.altInput,self.input.nextSibling));self.config.allowInput||self._input.setAttribute("readonly","readonly");updatePositionElement()}(),function setupDates(){self.selectedDates=[],self.now=self.parseDate(self.config.now)||new Date;var preloadedDate=self.config.defaultDate||("INPUT"!==self.input.nodeName&&"TEXTAREA"!==self.input.nodeName||!self.input.placeholder||self.input.value!==self.input.placeholder?self.input.value:null);preloadedDate&&setSelectedDate(preloadedDate,self.config.dateFormat);self._initialDate=self.selectedDates.length>0?self.selectedDates[0]:self.config.minDate&&self.config.minDate.getTime()>self.now.getTime()?self.config.minDate:self.config.maxDate&&self.config.maxDate.getTime()<self.now.getTime()?self.config.maxDate:self.now,self.currentYear=self._initialDate.getFullYear(),self.currentMonth=self._initialDate.getMonth(),self.selectedDates.length>0&&(self.latestSelectedDateObj=self.selectedDates[0]);void 0!==self.config.minTime&&(self.config.minTime=self.parseDate(self.config.minTime,"H:i"));void 0!==self.config.maxTime&&(self.config.maxTime=self.parseDate(self.config.maxTime,"H:i"));self.minDateHasTime=!!self.config.minDate&&(self.config.minDate.getHours()>0||self.config.minDate.getMinutes()>0||self.config.minDate.getSeconds()>0),self.maxDateHasTime=!!self.config.maxDate&&(self.config.maxDate.getHours()>0||self.config.maxDate.getMinutes()>0||self.config.maxDate.getSeconds()>0)}(),function setupHelperFunctions(){self.utils={getDaysInMonth:function getDaysInMonth(month,yr){return void 0===month&&(month=self.currentMonth),void 0===yr&&(yr=self.currentYear),1===month&&(yr%4==0&&yr%100!=0||yr%400==0)?29:self.l10n.daysInMonth[month]}}}(),self.isMobile||function build(){var fragment=window.document.createDocumentFragment();if(self.calendarContainer=createElement("div","flatpickr-calendar"),self.calendarContainer.tabIndex=-1,!self.config.noCalendar){if(fragment.appendChild(function buildMonthNav(){return self.monthNav=createElement("div","flatpickr-months"),self.yearElements=[],self.monthElements=[],self.prevMonthNav=createElement("span","flatpickr-prev-month"),self.prevMonthNav.innerHTML=self.config.prevArrow,self.nextMonthNav=createElement("span","flatpickr-next-month"),self.nextMonthNav.innerHTML=self.config.nextArrow,buildMonths(),Object.defineProperty(self,"_hidePrevMonthArrow",{get:function get(){return self.__hidePrevMonthArrow},set:function set(bool){self.__hidePrevMonthArrow!==bool&&(toggleClass(self.prevMonthNav,"flatpickr-disabled",bool),self.__hidePrevMonthArrow=bool)}}),Object.defineProperty(self,"_hideNextMonthArrow",{get:function get(){return self.__hideNextMonthArrow},set:function set(bool){self.__hideNextMonthArrow!==bool&&(toggleClass(self.nextMonthNav,"flatpickr-disabled",bool),self.__hideNextMonthArrow=bool)}}),self.currentYearElement=self.yearElements[0],updateNavigationCurrentMonth(),self.monthNav}()),self.innerContainer=createElement("div","flatpickr-innerContainer"),self.config.weekNumbers){var _a=function buildWeeks(){self.calendarContainer.classList.add("hasWeeks");var weekWrapper=createElement("div","flatpickr-weekwrapper");weekWrapper.appendChild(createElement("span","flatpickr-weekday",self.l10n.weekAbbreviation));var weekNumbers=createElement("div","flatpickr-weeks");return weekWrapper.appendChild(weekNumbers),{weekWrapper:weekWrapper,weekNumbers:weekNumbers}}(),weekWrapper=_a.weekWrapper,weekNumbers=_a.weekNumbers;self.innerContainer.appendChild(weekWrapper),self.weekNumbers=weekNumbers,self.weekWrapper=weekWrapper}self.rContainer=createElement("div","flatpickr-rContainer"),self.rContainer.appendChild(buildWeekdays()),self.daysContainer||(self.daysContainer=createElement("div","flatpickr-days"),self.daysContainer.tabIndex=-1),buildDays(),self.rContainer.appendChild(self.daysContainer),self.innerContainer.appendChild(self.rContainer),fragment.appendChild(self.innerContainer)}self.config.enableTime&&fragment.appendChild(function buildTime(){self.calendarContainer.classList.add("hasTime"),self.config.noCalendar&&self.calendarContainer.classList.add("noCalendar");var defaults=getDefaultHours(self.config);self.timeContainer=createElement("div","flatpickr-time"),self.timeContainer.tabIndex=-1;var separator=createElement("span","flatpickr-time-separator",":"),hourInput=createNumberInput("flatpickr-hour",{"aria-label":self.l10n.hourAriaLabel});self.hourElement=hourInput.getElementsByTagName("input")[0];var minuteInput=createNumberInput("flatpickr-minute",{"aria-label":self.l10n.minuteAriaLabel});self.minuteElement=minuteInput.getElementsByTagName("input")[0],self.hourElement.tabIndex=self.minuteElement.tabIndex=-1,self.hourElement.value=pad(self.latestSelectedDateObj?self.latestSelectedDateObj.getHours():self.config.time_24hr?defaults.hours:function military2ampm(hour){switch(hour%24){case 0:case 12:return 12;default:return hour%12}}(defaults.hours)),self.minuteElement.value=pad(self.latestSelectedDateObj?self.latestSelectedDateObj.getMinutes():defaults.minutes),self.hourElement.setAttribute("step",self.config.hourIncrement.toString()),self.minuteElement.setAttribute("step",self.config.minuteIncrement.toString()),self.hourElement.setAttribute("min",self.config.time_24hr?"0":"1"),self.hourElement.setAttribute("max",self.config.time_24hr?"23":"12"),self.hourElement.setAttribute("maxlength","2"),self.minuteElement.setAttribute("min","0"),self.minuteElement.setAttribute("max","59"),self.minuteElement.setAttribute("maxlength","2"),self.timeContainer.appendChild(hourInput),self.timeContainer.appendChild(separator),self.timeContainer.appendChild(minuteInput),self.config.time_24hr&&self.timeContainer.classList.add("time24hr");if(self.config.enableSeconds){self.timeContainer.classList.add("hasSeconds");var secondInput=createNumberInput("flatpickr-second");self.secondElement=secondInput.getElementsByTagName("input")[0],self.secondElement.value=pad(self.latestSelectedDateObj?self.latestSelectedDateObj.getSeconds():defaults.seconds),self.secondElement.setAttribute("step",self.minuteElement.getAttribute("step")),self.secondElement.setAttribute("min","0"),self.secondElement.setAttribute("max","59"),self.secondElement.setAttribute("maxlength","2"),self.timeContainer.appendChild(createElement("span","flatpickr-time-separator",":")),self.timeContainer.appendChild(secondInput)}self.config.time_24hr||(self.amPM=createElement("span","flatpickr-am-pm",self.l10n.amPM[_int((self.latestSelectedDateObj?self.hourElement.value:self.config.defaultHour)>11)]),self.amPM.title=self.l10n.toggleTitle,self.amPM.tabIndex=-1,self.timeContainer.appendChild(self.amPM));return self.timeContainer}());toggleClass(self.calendarContainer,"rangeMode","range"===self.config.mode),toggleClass(self.calendarContainer,"animate",!0===self.config.animate),toggleClass(self.calendarContainer,"multiMonth",self.config.showMonths>1),self.calendarContainer.appendChild(fragment);var customAppend=void 0!==self.config.appendTo&&void 0!==self.config.appendTo.nodeType;if((self.config.inline||self.config.static)&&(self.calendarContainer.classList.add(self.config.inline?"inline":"static"),self.config.inline&&(!customAppend&&self.element.parentNode?self.element.parentNode.insertBefore(self.calendarContainer,self._input.nextSibling):void 0!==self.config.appendTo&&self.config.appendTo.appendChild(self.calendarContainer)),self.config.static)){var wrapper=createElement("div","flatpickr-wrapper");self.element.parentNode&&self.element.parentNode.insertBefore(wrapper,self.element),wrapper.appendChild(self.element),self.altInput&&wrapper.appendChild(self.altInput),wrapper.appendChild(self.calendarContainer)}self.config.static||self.config.inline||(void 0!==self.config.appendTo?self.config.appendTo:window.document.body).appendChild(self.calendarContainer)}(),function bindEvents(){self.config.wrap&&["open","close","toggle","clear"].forEach((function(evt){Array.prototype.forEach.call(self.element.querySelectorAll("[data-"+evt+"]"),(function(el){return bind(el,"click",self[evt])}))}));if(self.isMobile)return void function setupMobile(){var inputType=self.config.enableTime?self.config.noCalendar?"time":"datetime-local":"date";self.mobileInput=createElement("input",self.input.className+" flatpickr-mobile"),self.mobileInput.tabIndex=1,self.mobileInput.type=inputType,self.mobileInput.disabled=self.input.disabled,self.mobileInput.required=self.input.required,self.mobileInput.placeholder=self.input.placeholder,self.mobileFormatStr="datetime-local"===inputType?"Y-m-d\\TH:i:S":"date"===inputType?"Y-m-d":"H:i:S",self.selectedDates.length>0&&(self.mobileInput.defaultValue=self.mobileInput.value=self.formatDate(self.selectedDates[0],self.mobileFormatStr));self.config.minDate&&(self.mobileInput.min=self.formatDate(self.config.minDate,"Y-m-d"));self.config.maxDate&&(self.mobileInput.max=self.formatDate(self.config.maxDate,"Y-m-d"));self.input.getAttribute("step")&&(self.mobileInput.step=String(self.input.getAttribute("step")));self.input.type="hidden",void 0!==self.altInput&&(self.altInput.type="hidden");try{self.input.parentNode&&self.input.parentNode.insertBefore(self.mobileInput,self.input.nextSibling)}catch(_a){}bind(self.mobileInput,"change",(function(e){self.setDate(getEventTarget(e).value,!1,self.mobileFormatStr),triggerEvent("onChange"),triggerEvent("onClose")}))}();var debouncedResize=debounce(onResize,50);self._debouncedChange=debounce(triggerChange,300),self.daysContainer&&!/iPhone|iPad|iPod/i.test(navigator.userAgent)&&bind(self.daysContainer,"mouseover",(function(e){"range"===self.config.mode&&onMouseOver(getEventTarget(e))}));bind(self._input,"keydown",onKeyDown),void 0!==self.calendarContainer&&bind(self.calendarContainer,"keydown",onKeyDown);self.config.inline||self.config.static||bind(window,"resize",debouncedResize);void 0!==window.ontouchstart?bind(window.document,"touchstart",documentClick):bind(window.document,"mousedown",documentClick);bind(window.document,"focus",documentClick,{capture:!0}),!0===self.config.clickOpens&&(bind(self._input,"focus",self.open),bind(self._input,"click",self.open));void 0!==self.daysContainer&&(bind(self.monthNav,"click",onMonthNavClick),bind(self.monthNav,["keyup","increment"],onYearInput),bind(self.daysContainer,"click",selectDate));if(void 0!==self.timeContainer&&void 0!==self.minuteElement&&void 0!==self.hourElement){var selText=function selText(e){return getEventTarget(e).select()};bind(self.timeContainer,["increment"],updateTime),bind(self.timeContainer,"blur",updateTime,{capture:!0}),bind(self.timeContainer,"click",timeIncrement),bind([self.hourElement,self.minuteElement],["focus","click"],selText),void 0!==self.secondElement&&bind(self.secondElement,"focus",(function(){return self.secondElement&&self.secondElement.select()})),void 0!==self.amPM&&bind(self.amPM,"click",(function(e){updateTime(e)}))}self.config.allowInput&&bind(self._input,"blur",onBlur)}(),(self.selectedDates.length||self.config.noCalendar)&&(self.config.enableTime&&setHoursFromDate(self.config.noCalendar?self.latestSelectedDateObj:void 0),updateValue(!1)),setCalendarWidth();var isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);!self.isMobile&&isSafari&&positionCalendar(),triggerEvent("onReady")}(),self}function _flatpickr(nodeList,config){for(var nodes=Array.prototype.slice.call(nodeList).filter((function(x){return x instanceof HTMLElement})),instances=[],i=0;i<nodes.length;i++){var node=nodes[i];try{if(null!==node.getAttribute("data-fp-omit"))continue;void 0!==node._flatpickr&&(node._flatpickr.destroy(),node._flatpickr=void 0),node._flatpickr=FlatpickrInstance(node,config||{}),instances.push(node._flatpickr)}catch(e){console.error(e)}}return 1===instances.length?instances[0]:instances}"undefined"!=typeof HTMLElement&&"undefined"!=typeof HTMLCollection&&"undefined"!=typeof NodeList&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(config){return _flatpickr(this,config)},HTMLElement.prototype.flatpickr=function(config){return _flatpickr([this],config)});var flatpickr=function flatpickr(selector,config){return"string"==typeof selector?_flatpickr(window.document.querySelectorAll(selector),config):selector instanceof Node?_flatpickr([selector],config):_flatpickr(selector,config)};flatpickr.defaultConfig={},flatpickr.l10ns={en:__assign({},english),default:__assign({},english)},flatpickr.localize=function(l10n){flatpickr.l10ns.default=__assign(__assign({},flatpickr.l10ns.default),l10n)},flatpickr.setDefaults=function(config){flatpickr.defaultConfig=__assign(__assign({},flatpickr.defaultConfig),config)},flatpickr.parseDate=createDateParser({}),flatpickr.formatDate=createDateFormatter({}),flatpickr.compareDates=compareDates,"undefined"!=typeof jQuery&&void 0!==jQuery.fn&&(jQuery.fn.flatpickr=function(config){return _flatpickr(this,config)}),Date.prototype.fp_incr=function(days){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof days?parseInt(days,10):days))},"undefined"!=typeof window&&(window.flatpickr=flatpickr);var VerdocsFieldDate=function(){function VerdocsFieldDate(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsFieldDate),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.j)(this,hostRef),this.settingsPress=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.e)(this,"settingsPress",7),this.field=null,this.disabled=!1,this.editable=!1,this.moveable=!1,this.done=!1,this.roleindex=0,this.containerId="verdocs-date-picker-"+Math.random().toString(36).substring(2,11)}var _focusField;return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsFieldDate,[{key:"focusField",value:(_focusField=function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}(_regeneratorRuntime().mark((function _callee(){return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:this.el.focus();case 1:case"end":return _context.stop()}}),_callee,this)}))),function focusField(){return _focusField.apply(this,arguments)})},{key:"componentDidLoad",value:function componentDidLoad(){var _this2=this,result=Object(_utils_2dbb5f63_js__WEBPACK_IMPORTED_MODULE_50__.d)(this.field).result;flatpickr("#"+this.containerId,{positionElement:this.el,dateFormat:"F d, Y",defaultDate:result,onChange:function onChange(selectedDate){_this2.el.setAttribute("iso",selectedDate[0].toISOString());var event=new window.Event("input");_this2.el.dispatchEvent(event)}})}},{key:"render",value:function render(){var _a,_b,_this3=this,settings=Object(_utils_2dbb5f63_js__WEBPACK_IMPORTED_MODULE_50__.d)(this.field),disabled=null!==(_b=null!==(_a=this.disabled)&&void 0!==_a?_a:settings.disabled)&&void 0!==_b&&_b,backgroundColor=this.field.rgba||Object(_Colors_1b298092_js__WEBPACK_IMPORTED_MODULE_51__.a)(this.roleindex);if(this.done){var dt=new Date(null==settings?void 0:settings.result),formatted=Object(_index_d264c496_js__WEBPACK_IMPORTED_MODULE_52__.a)(dt,"MMM d, y");return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.b,{class:{done:this.done}},formatted)}return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.b,{class:{required:settings.required,disabled:disabled},style:{backgroundColor:backgroundColor}},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("input",{type:"text",value:"",id:this.containerId,disabled:disabled,placeholder:settings.placeholder,required:settings.required,ref:function ref(el){return _this3.el=el}}),this.editable&&Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("verdocs-button-panel",{icon:'<svg xmlns="http://www.w3.org/2000/svg" height="20" width="20"><path d="m7.5 18.5-.312-2.667q-.188-.125-.396-.25-.209-.125-.396-.229l-2.479 1.063-2.521-4.334 2.125-1.625q.021-.104.021-.229v-.458q0-.125-.021-.229L1.396 7.917l2.521-4.313 2.5 1.042q.166-.104.375-.229.208-.125.396-.229L7.5 1.5h5l.312 2.688q.188.104.396.229.209.125.396.229l2.479-1.042 2.521 4.313-2.125 1.625v.916l2.125 1.625-2.521 4.334-2.5-1.063q-.166.104-.375.229-.208.125-.396.25L12.5 18.5Zm2.479-5.521q1.229 0 2.104-.875T12.958 10q0-1.229-.875-2.104t-2.104-.875q-1.208 0-2.094.875Q7 8.771 7 10t.885 2.104q.886.875 2.094.875Zm0-1.75q-.5 0-.864-.364Q8.75 10.5 8.75 10t.365-.865q.364-.364.864-.364t.865.364q.364.365.364.865t-.364.865q-.365.364-.865.364ZM10.021 10Zm-.792 6.521h1.542l.25-2.146q.625-.167 1.198-.51.573-.344 1.031-.823l2.021.854.771-1.271-1.771-1.354q.104-.292.156-.615.052-.323.052-.656 0-.292-.052-.604-.052-.313-.135-.646l1.77-1.375-.77-1.271-2.021.875q-.479-.5-1.042-.833-.562-.334-1.187-.5l-.271-2.167H9.208l-.25 2.167q-.625.166-1.187.5-.563.333-1.042.812l-2-.854-.771 1.271 1.73 1.354q-.084.333-.136.656Q5.5 9.708 5.5 10t.052.604q.052.313.136.667l-1.73 1.354.771 1.271 2-.834q.479.459 1.042.792.562.334 1.187.5Z"/></svg>'},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("h6",null,"Field Settings"),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("form",null,Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("verdocs-select-input",{label:"Recipient",options:[{label:"Buyer",value:"Buyer"},{label:"Seller",value:"Seller"}]}),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("verdocs-text-input",{label:"Field Name",value:"",placeholder:"Stored field name...",onInput:function onInput(e){return console.log("ipt",e)}}),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_49__.h)("verdocs-text-input",{label:"Placeholder",value:"",placeholder:"Placeholder text...",onInput:function onInput(e){return console.log("ipt",e)}}))))}}]),VerdocsFieldDate}();VerdocsFieldDate.style='.flatpickr-calendar{background:transparent;opacity:0;display:none;text-align:center;visibility:hidden;padding:0;-webkit-animation:none;animation:none;direction:ltr;border:0;font-size:14px;line-height:24px;border-radius:5px;position:absolute;width:307.875px;-webkit-box-sizing:border-box;box-sizing:border-box;-ms-touch-action:manipulation;touch-action:manipulation;-webkit-box-shadow:0 3px 13px rgba(0,0,0,0.08);box-shadow:0 3px 13px rgba(0,0,0,0.08)}.flatpickr-calendar.open,.flatpickr-calendar.inline{opacity:1;max-height:640px;visibility:visible}.flatpickr-calendar.open{display:inline-block;z-index:99999}.flatpickr-calendar.animate.open{-webkit-animation:fpFadeInDown 300ms cubic-bezier(0.23, 1, 0.32, 1);animation:fpFadeInDown 300ms cubic-bezier(0.23, 1, 0.32, 1)}.flatpickr-calendar.inline{display:block;position:relative;top:2px}.flatpickr-calendar.static{position:absolute;top:calc(100% + 2px)}.flatpickr-calendar.static.open{z-index:999;display:block}.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+1) .flatpickr-day.inRange:nth-child(7n+7){-webkit-box-shadow:none !important;box-shadow:none !important}.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+2) .flatpickr-day.inRange:nth-child(7n+1){-webkit-box-shadow:-2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;box-shadow:-2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6}.flatpickr-calendar .hasWeeks .dayContainer,.flatpickr-calendar .hasTime .dayContainer{border-bottom:0;border-bottom-right-radius:0;border-bottom-left-radius:0}.flatpickr-calendar .hasWeeks .dayContainer{border-left:0}.flatpickr-calendar.hasTime .flatpickr-time{height:40px;border-top:1px solid #eceef1}.flatpickr-calendar.hasTime .flatpickr-innerContainer{border-bottom:0}.flatpickr-calendar.hasTime .flatpickr-time{border:1px solid #eceef1}.flatpickr-calendar.noCalendar.hasTime .flatpickr-time{height:auto}.flatpickr-calendar:before,.flatpickr-calendar:after{position:absolute;display:block;pointer-events:none;border:solid transparent;content:\'\';height:0;width:0;left:22px}.flatpickr-calendar.rightMost:before,.flatpickr-calendar.arrowRight:before,.flatpickr-calendar.rightMost:after,.flatpickr-calendar.arrowRight:after{left:auto;right:22px}.flatpickr-calendar.arrowCenter:before,.flatpickr-calendar.arrowCenter:after{left:50%;right:50%}.flatpickr-calendar:before{border-width:5px;margin:0 -5px}.flatpickr-calendar:after{border-width:4px;margin:0 -4px}.flatpickr-calendar.arrowTop:before,.flatpickr-calendar.arrowTop:after{bottom:100%}.flatpickr-calendar.arrowTop:before{border-bottom-color:#eceef1}.flatpickr-calendar.arrowTop:after{border-bottom-color:#eceef1}.flatpickr-calendar.arrowBottom:before,.flatpickr-calendar.arrowBottom:after{top:100%}.flatpickr-calendar.arrowBottom:before{border-top-color:#eceef1}.flatpickr-calendar.arrowBottom:after{border-top-color:#eceef1}.flatpickr-calendar:focus{outline:0}.flatpickr-wrapper{position:relative;display:inline-block}.flatpickr-months{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex}.flatpickr-months .flatpickr-month{border-radius:5px 5px 0 0;background:#eceef1;color:#5a6171;fill:#5a6171;height:34px;line-height:1;text-align:center;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}.flatpickr-months .flatpickr-prev-month,.flatpickr-months .flatpickr-next-month{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-decoration:none;cursor:pointer;position:absolute;top:0;height:34px;padding:10px;z-index:3;color:#5a6171;fill:#5a6171}.flatpickr-months .flatpickr-prev-month.flatpickr-disabled,.flatpickr-months .flatpickr-next-month.flatpickr-disabled{display:none}.flatpickr-months .flatpickr-prev-month i,.flatpickr-months .flatpickr-next-month i{position:relative}.flatpickr-months .flatpickr-prev-month.flatpickr-prev-month,.flatpickr-months .flatpickr-next-month.flatpickr-prev-month{left:0;}.flatpickr-months .flatpickr-prev-month.flatpickr-next-month,.flatpickr-months .flatpickr-next-month.flatpickr-next-month{right:0;}.flatpickr-months .flatpickr-prev-month:hover,.flatpickr-months .flatpickr-next-month:hover{color:#bbb}.flatpickr-months .flatpickr-prev-month:hover svg,.flatpickr-months .flatpickr-next-month:hover svg{fill:#f64747}.flatpickr-months .flatpickr-prev-month svg,.flatpickr-months .flatpickr-next-month svg{width:14px;height:14px}.flatpickr-months .flatpickr-prev-month svg path,.flatpickr-months .flatpickr-next-month svg path{-webkit-transition:fill 0.1s;transition:fill 0.1s;fill:inherit}.numInputWrapper{position:relative;height:auto}.numInputWrapper input,.numInputWrapper span{display:inline-block}.numInputWrapper input{width:100%}.numInputWrapper input::-ms-clear{display:none}.numInputWrapper input::-webkit-outer-spin-button,.numInputWrapper input::-webkit-inner-spin-button{margin:0;-webkit-appearance:none}.numInputWrapper span{position:absolute;right:0;width:14px;padding:0 4px 0 2px;height:50%;line-height:50%;opacity:0;cursor:pointer;border:1px solid rgba(72,72,72,0.15);-webkit-box-sizing:border-box;box-sizing:border-box}.numInputWrapper span:hover{background:rgba(0,0,0,0.1)}.numInputWrapper span:active{background:rgba(0,0,0,0.2)}.numInputWrapper span:after{display:block;content:"";position:absolute}.numInputWrapper span.arrowUp{top:0;border-bottom:0}.numInputWrapper span.arrowUp:after{border-left:4px solid transparent;border-right:4px solid transparent;border-bottom:4px solid rgba(72,72,72,0.6);top:26%}.numInputWrapper span.arrowDown{top:50%}.numInputWrapper span.arrowDown:after{border-left:4px solid transparent;border-right:4px solid transparent;border-top:4px solid rgba(72,72,72,0.6);top:40%}.numInputWrapper span svg{width:inherit;height:auto}.numInputWrapper span svg path{fill:rgba(90,97,113,0.5)}.numInputWrapper:hover{background:rgba(0,0,0,0.05)}.numInputWrapper:hover span{opacity:1}.flatpickr-current-month{font-size:135%;line-height:inherit;font-weight:300;color:inherit;position:absolute;width:75%;left:12.5%;padding:7.48px 0 0 0;line-height:1;height:34px;display:inline-block;text-align:center;-webkit-transform:translate3d(0px, 0px, 0px);transform:translate3d(0px, 0px, 0px)}.flatpickr-current-month span.cur-month{font-family:inherit;font-weight:700;color:inherit;display:inline-block;margin-left:0.5ch;padding:0}.flatpickr-current-month span.cur-month:hover{background:rgba(0,0,0,0.05)}.flatpickr-current-month .numInputWrapper{width:6ch;width:7ch\\0;display:inline-block}.flatpickr-current-month .numInputWrapper span.arrowUp:after{border-bottom-color:#5a6171}.flatpickr-current-month .numInputWrapper span.arrowDown:after{border-top-color:#5a6171}.flatpickr-current-month input.cur-year{background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;cursor:text;padding:0 0 0 0.5ch;margin:0;display:inline-block;font-size:inherit;font-family:inherit;font-weight:300;line-height:inherit;height:auto;border:0;border-radius:0;vertical-align:initial;-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.flatpickr-current-month input.cur-year:focus{outline:0}.flatpickr-current-month input.cur-year[disabled],.flatpickr-current-month input.cur-year[disabled]:hover{font-size:100%;color:rgba(90,97,113,0.5);background:transparent;pointer-events:none}.flatpickr-current-month .flatpickr-monthDropdown-months{appearance:menulist;background:#eceef1;border:none;border-radius:0;box-sizing:border-box;color:inherit;cursor:pointer;font-size:inherit;font-family:inherit;font-weight:300;height:auto;line-height:inherit;margin:-1px 0 0 0;outline:none;padding:0 0 0 0.5ch;position:relative;vertical-align:initial;-webkit-box-sizing:border-box;-webkit-appearance:menulist;-moz-appearance:menulist;width:auto}.flatpickr-current-month .flatpickr-monthDropdown-months:focus,.flatpickr-current-month .flatpickr-monthDropdown-months:active{outline:none}.flatpickr-current-month .flatpickr-monthDropdown-months:hover{background:rgba(0,0,0,0.05)}.flatpickr-current-month .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month{background-color:#eceef1;outline:none;padding:0}.flatpickr-weekdays{background:#eceef1;text-align:center;overflow:hidden;width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;height:28px}.flatpickr-weekdays .flatpickr-weekdaycontainer{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}span.flatpickr-weekday{cursor:default;font-size:90%;background:#eceef1;color:#5a6171;line-height:1;margin:0;text-align:center;display:block;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;font-weight:bolder}.dayContainer,.flatpickr-weeks{padding:1px 0 0 0}.flatpickr-days{position:relative;overflow:hidden;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:start;-webkit-align-items:flex-start;-ms-flex-align:start;align-items:flex-start;width:307.875px;border-left:1px solid #eceef1;border-right:1px solid #eceef1}.flatpickr-days:focus{outline:0}.dayContainer{padding:0;outline:0;text-align:left;width:307.875px;min-width:307.875px;max-width:307.875px;-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;display:-ms-flexbox;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-wrap:wrap;-ms-flex-pack:justify;-webkit-justify-content:space-around;justify-content:space-around;-webkit-transform:translate3d(0px, 0px, 0px);transform:translate3d(0px, 0px, 0px);opacity:1}.dayContainer+.dayContainer{-webkit-box-shadow:-1px 0 0 #eceef1;box-shadow:-1px 0 0 #eceef1}.flatpickr-day{background:none;border:1px solid transparent;border-radius:150px;-webkit-box-sizing:border-box;box-sizing:border-box;color:#484848;cursor:pointer;font-weight:400;width:14.2857143%;-webkit-flex-basis:14.2857143%;-ms-flex-preferred-size:14.2857143%;flex-basis:14.2857143%;max-width:39px;height:39px;line-height:39px;margin:0;display:inline-block;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:center}.flatpickr-day.inRange,.flatpickr-day.prevMonthDay.inRange,.flatpickr-day.nextMonthDay.inRange,.flatpickr-day.today.inRange,.flatpickr-day.prevMonthDay.today.inRange,.flatpickr-day.nextMonthDay.today.inRange,.flatpickr-day:hover,.flatpickr-day.prevMonthDay:hover,.flatpickr-day.nextMonthDay:hover,.flatpickr-day:focus,.flatpickr-day.prevMonthDay:focus,.flatpickr-day.nextMonthDay:focus{cursor:pointer;outline:0;background:#e2e2e2;border-color:#e2e2e2}.flatpickr-day.today{border-color:#bbb}.flatpickr-day.today:hover,.flatpickr-day.today:focus{border-color:#bbb;background:#bbb;color:#fff}.flatpickr-day.selected,.flatpickr-day.startRange,.flatpickr-day.endRange,.flatpickr-day.selected.inRange,.flatpickr-day.startRange.inRange,.flatpickr-day.endRange.inRange,.flatpickr-day.selected:focus,.flatpickr-day.startRange:focus,.flatpickr-day.endRange:focus,.flatpickr-day.selected:hover,.flatpickr-day.startRange:hover,.flatpickr-day.endRange:hover,.flatpickr-day.selected.prevMonthDay,.flatpickr-day.startRange.prevMonthDay,.flatpickr-day.endRange.prevMonthDay,.flatpickr-day.selected.nextMonthDay,.flatpickr-day.startRange.nextMonthDay,.flatpickr-day.endRange.nextMonthDay{background:#ff5a5f;-webkit-box-shadow:none;box-shadow:none;color:#fff;border-color:#ff5a5f}.flatpickr-day.selected.startRange,.flatpickr-day.startRange.startRange,.flatpickr-day.endRange.startRange{border-radius:50px 0 0 50px}.flatpickr-day.selected.endRange,.flatpickr-day.startRange.endRange,.flatpickr-day.endRange.endRange{border-radius:0 50px 50px 0}.flatpickr-day.selected.startRange+.endRange:not(:nth-child(7n+1)),.flatpickr-day.startRange.startRange+.endRange:not(:nth-child(7n+1)),.flatpickr-day.endRange.startRange+.endRange:not(:nth-child(7n+1)){-webkit-box-shadow:-10px 0 0 #ff5a5f;box-shadow:-10px 0 0 #ff5a5f}.flatpickr-day.selected.startRange.endRange,.flatpickr-day.startRange.startRange.endRange,.flatpickr-day.endRange.startRange.endRange{border-radius:50px}.flatpickr-day.inRange{border-radius:0;-webkit-box-shadow:-5px 0 0 #e2e2e2, 5px 0 0 #e2e2e2;box-shadow:-5px 0 0 #e2e2e2, 5px 0 0 #e2e2e2}.flatpickr-day.flatpickr-disabled,.flatpickr-day.flatpickr-disabled:hover,.flatpickr-day.prevMonthDay,.flatpickr-day.nextMonthDay,.flatpickr-day.notAllowed,.flatpickr-day.notAllowed.prevMonthDay,.flatpickr-day.notAllowed.nextMonthDay{color:rgba(72,72,72,0.3);background:transparent;border-color:transparent;cursor:default}.flatpickr-day.flatpickr-disabled,.flatpickr-day.flatpickr-disabled:hover{cursor:not-allowed;color:rgba(72,72,72,0.1)}.flatpickr-day.week.selected{border-radius:0;-webkit-box-shadow:-5px 0 0 #ff5a5f, 5px 0 0 #ff5a5f;box-shadow:-5px 0 0 #ff5a5f, 5px 0 0 #ff5a5f}.flatpickr-day.hidden{visibility:hidden}.rangeMode .flatpickr-day{margin-top:1px}.flatpickr-weekwrapper{float:left}.flatpickr-weekwrapper .flatpickr-weeks{padding:0 12px;border-left:1px solid #eceef1}.flatpickr-weekwrapper .flatpickr-weekday{float:none;width:100%;line-height:28px}.flatpickr-weekwrapper span.flatpickr-day,.flatpickr-weekwrapper span.flatpickr-day:hover{display:block;width:100%;max-width:none;color:rgba(72,72,72,0.3);background:transparent;cursor:default;border:none}.flatpickr-innerContainer{display:block;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;background:#fff;border-bottom:1px solid #eceef1}.flatpickr-rContainer{display:inline-block;padding:0;-webkit-box-sizing:border-box;box-sizing:border-box}.flatpickr-time{text-align:center;outline:0;display:block;height:0;line-height:40px;max-height:40px;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;background:#fff;border-radius:0 0 5px 5px}.flatpickr-time:after{content:"";display:table;clear:both}.flatpickr-time .numInputWrapper{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;width:40%;height:40px;float:left}.flatpickr-time .numInputWrapper span.arrowUp:after{border-bottom-color:#484848}.flatpickr-time .numInputWrapper span.arrowDown:after{border-top-color:#484848}.flatpickr-time.hasSeconds .numInputWrapper{width:26%}.flatpickr-time.time24hr .numInputWrapper{width:49%}.flatpickr-time input{background:transparent;-webkit-box-shadow:none;box-shadow:none;border:0;border-radius:0;text-align:center;margin:0;padding:0;height:inherit;line-height:inherit;color:#484848;font-size:14px;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.flatpickr-time input.flatpickr-hour{font-weight:bold}.flatpickr-time input.flatpickr-minute,.flatpickr-time input.flatpickr-second{font-weight:400}.flatpickr-time input:focus{outline:0;border:0}.flatpickr-time .flatpickr-time-separator,.flatpickr-time .flatpickr-am-pm{height:inherit;float:left;line-height:inherit;color:#484848;font-weight:bold;width:2%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center}.flatpickr-time .flatpickr-am-pm{outline:0;width:18%;cursor:pointer;text-align:center;font-weight:400}.flatpickr-time input:hover,.flatpickr-time .flatpickr-am-pm:hover,.flatpickr-time input:focus,.flatpickr-time .flatpickr-am-pm:focus{background:#eaeaea}.flatpickr-input[readonly]{cursor:pointer}@-webkit-keyframes fpFadeInDown{from{opacity:0;-webkit-transform:translate3d(0, -20px, 0);transform:translate3d(0, -20px, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes fpFadeInDown{from{opacity:0;-webkit-transform:translate3d(0, -20px, 0);transform:translate3d(0, -20px, 0)}to{opacity:1;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}span.flatpickr-day.selected{font-weight:bold}verdocs-field-date{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;width:64px;height:20px;display:block;font-size:11px;position:relative;letter-spacing:0.3px;background-color:transparent;-webkit-transform-origin:bottom left;transform-origin:bottom left}verdocs-field-date.disabled{opacity:0.5}verdocs-field-date input{-webkit-box-sizing:border-box;box-sizing:border-box;color:rgba(0, 0, 0, 0.87);font-weight:500;-webkit-transform-origin:0 0;transform-origin:0 0;height:100%;width:100%;background:none;font-size:11px;border:1px solid #cccccc;-webkit-appearance:none;-moz-appearance:none;appearance:none}verdocs-field-date input.hide{display:none}verdocs-field-date.required input{border:1px solid #cc0000}verdocs-field-date.focused{-webkit-animation:verdocs-field-pulse 0.75s 2;animation:verdocs-field-pulse 0.75s 2}verdocs-field-date verdocs-button-panel{top:-3px;left:-2px;opacity:0.5;z-index:1000;cursor:pointer;position:absolute;-webkit-transform:scale(0.6);transform:scale(0.6)}verdocs-field-date verdocs-button-panel[data-active],verdocs-field-date verdocs-button-panel:hover{opacity:1}verdocs-field-date verdocs-button-panel .icon svg{fill:#333333}verdocs-field-date verdocs-button-panel .icon:hover svg{fill:#000000}'},"./node_modules/core-js/internals/array-reduce.js":function(module,exports,__webpack_require__){var aCallable=__webpack_require__("./node_modules/core-js/internals/a-callable.js"),toObject=__webpack_require__("./node_modules/core-js/internals/to-object.js"),IndexedObject=__webpack_require__("./node_modules/core-js/internals/indexed-object.js"),lengthOfArrayLike=__webpack_require__("./node_modules/core-js/internals/length-of-array-like.js"),$TypeError=TypeError,createMethod=function(IS_RIGHT){return function(that,callbackfn,argumentsLength,memo){aCallable(callbackfn);var O=toObject(that),self=IndexedObject(O),length=lengthOfArrayLike(O),index=IS_RIGHT?length-1:0,i=IS_RIGHT?-1:1;if(argumentsLength<2)for(;;){if(index in self){memo=self[index],index+=i;break}if(index+=i,IS_RIGHT?index<0:length<=index)throw $TypeError("Reduce of empty array with no initial value")}for(;IS_RIGHT?index>=0:length>index;index+=i)index in self&&(memo=callbackfn(memo,self[index],index,O));return memo}};module.exports={left:createMethod(!1),right:createMethod(!0)}},"./node_modules/core-js/internals/array-set-length.js":function(module,exports,__webpack_require__){"use strict";var DESCRIPTORS=__webpack_require__("./node_modules/core-js/internals/descriptors.js"),isArray=__webpack_require__("./node_modules/core-js/internals/is-array.js"),$TypeError=TypeError,getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor,SILENT_ON_NON_WRITABLE_LENGTH_SET=DESCRIPTORS&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(error){return error instanceof TypeError}}();module.exports=SILENT_ON_NON_WRITABLE_LENGTH_SET?function(O,length){if(isArray(O)&&!getOwnPropertyDescriptor(O,"length").writable)throw $TypeError("Cannot set read only .length");return O.length=length}:function(O,length){return O.length=length}},"./node_modules/core-js/internals/date-to-iso-string.js":function(module,exports,__webpack_require__){"use strict";var uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),padStart=__webpack_require__("./node_modules/core-js/internals/string-pad.js").start,$RangeError=RangeError,$isFinite=isFinite,abs=Math.abs,DatePrototype=Date.prototype,nativeDateToISOString=DatePrototype.toISOString,thisTimeValue=uncurryThis(DatePrototype.getTime),getUTCDate=uncurryThis(DatePrototype.getUTCDate),getUTCFullYear=uncurryThis(DatePrototype.getUTCFullYear),getUTCHours=uncurryThis(DatePrototype.getUTCHours),getUTCMilliseconds=uncurryThis(DatePrototype.getUTCMilliseconds),getUTCMinutes=uncurryThis(DatePrototype.getUTCMinutes),getUTCMonth=uncurryThis(DatePrototype.getUTCMonth),getUTCSeconds=uncurryThis(DatePrototype.getUTCSeconds);module.exports=fails((function(){return"0385-07-25T07:06:39.999Z"!=nativeDateToISOString.call(new Date(-50000000000001))}))||!fails((function(){nativeDateToISOString.call(new Date(NaN))}))?function toISOString(){if(!$isFinite(thisTimeValue(this)))throw $RangeError("Invalid time value");var year=getUTCFullYear(this),milliseconds=getUTCMilliseconds(this),sign=year<0?"-":year>9999?"+":"";return sign+padStart(abs(year),sign?6:4,0)+"-"+padStart(getUTCMonth(this)+1,2,0)+"-"+padStart(getUTCDate(this),2,0)+"T"+padStart(getUTCHours(this),2,0)+":"+padStart(getUTCMinutes(this),2,0)+":"+padStart(getUTCSeconds(this),2,0)+"."+padStart(milliseconds,3,0)+"Z"}:nativeDateToISOString},"./node_modules/core-js/internals/string-pad.js":function(module,exports,__webpack_require__){var uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),toLength=__webpack_require__("./node_modules/core-js/internals/to-length.js"),toString=__webpack_require__("./node_modules/core-js/internals/to-string.js"),$repeat=__webpack_require__("./node_modules/core-js/internals/string-repeat.js"),requireObjectCoercible=__webpack_require__("./node_modules/core-js/internals/require-object-coercible.js"),repeat=uncurryThis($repeat),stringSlice=uncurryThis("".slice),ceil=Math.ceil,createMethod=function(IS_END){return function($this,maxLength,fillString){var fillLen,stringFiller,S=toString(requireObjectCoercible($this)),intMaxLength=toLength(maxLength),stringLength=S.length,fillStr=void 0===fillString?" ":toString(fillString);return intMaxLength<=stringLength||""==fillStr?S:((stringFiller=repeat(fillStr,ceil((fillLen=intMaxLength-stringLength)/fillStr.length))).length>fillLen&&(stringFiller=stringSlice(stringFiller,0,fillLen)),IS_END?S+stringFiller:stringFiller+S)}};module.exports={start:createMethod(!1),end:createMethod(!0)}},"./node_modules/core-js/internals/string-trim-end.js":function(module,exports,__webpack_require__){"use strict";var $trimEnd=__webpack_require__("./node_modules/core-js/internals/string-trim.js").end,forcedStringTrimMethod=__webpack_require__("./node_modules/core-js/internals/string-trim-forced.js");module.exports=forcedStringTrimMethod("trimEnd")?function trimEnd(){return $trimEnd(this)}:"".trimEnd},"./node_modules/core-js/modules/es.array.reduce.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),$reduce=__webpack_require__("./node_modules/core-js/internals/array-reduce.js").left,arrayMethodIsStrict=__webpack_require__("./node_modules/core-js/internals/array-method-is-strict.js"),CHROME_VERSION=__webpack_require__("./node_modules/core-js/internals/engine-v8-version.js"),IS_NODE=__webpack_require__("./node_modules/core-js/internals/engine-is-node.js");$({target:"Array",proto:!0,forced:!arrayMethodIsStrict("reduce")||!IS_NODE&&CHROME_VERSION>79&&CHROME_VERSION<83},{reduce:function reduce(callbackfn){var length=arguments.length;return $reduce(this,callbackfn,length,length>1?arguments[1]:void 0)}})},"./node_modules/core-js/modules/es.array.splice.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),toObject=__webpack_require__("./node_modules/core-js/internals/to-object.js"),toAbsoluteIndex=__webpack_require__("./node_modules/core-js/internals/to-absolute-index.js"),toIntegerOrInfinity=__webpack_require__("./node_modules/core-js/internals/to-integer-or-infinity.js"),lengthOfArrayLike=__webpack_require__("./node_modules/core-js/internals/length-of-array-like.js"),setArrayLength=__webpack_require__("./node_modules/core-js/internals/array-set-length.js"),doesNotExceedSafeInteger=__webpack_require__("./node_modules/core-js/internals/does-not-exceed-safe-integer.js"),arraySpeciesCreate=__webpack_require__("./node_modules/core-js/internals/array-species-create.js"),createProperty=__webpack_require__("./node_modules/core-js/internals/create-property.js"),deletePropertyOrThrow=__webpack_require__("./node_modules/core-js/internals/delete-property-or-throw.js"),HAS_SPECIES_SUPPORT=__webpack_require__("./node_modules/core-js/internals/array-method-has-species-support.js")("splice"),max=Math.max,min=Math.min;$({target:"Array",proto:!0,forced:!HAS_SPECIES_SUPPORT},{splice:function splice(start,deleteCount){var insertCount,actualDeleteCount,A,k,from,to,O=toObject(this),len=lengthOfArrayLike(O),actualStart=toAbsoluteIndex(start,len),argumentsLength=arguments.length;for(0===argumentsLength?insertCount=actualDeleteCount=0:1===argumentsLength?(insertCount=0,actualDeleteCount=len-actualStart):(insertCount=argumentsLength-2,actualDeleteCount=min(max(toIntegerOrInfinity(deleteCount),0),len-actualStart)),doesNotExceedSafeInteger(len+insertCount-actualDeleteCount),A=arraySpeciesCreate(O,actualDeleteCount),k=0;k<actualDeleteCount;k++)(from=actualStart+k)in O&&createProperty(A,k,O[from]);if(A.length=actualDeleteCount,insertCount<actualDeleteCount){for(k=actualStart;k<len-actualDeleteCount;k++)to=k+insertCount,(from=k+actualDeleteCount)in O?O[to]=O[from]:deletePropertyOrThrow(O,to);for(k=len;k>len-actualDeleteCount+insertCount;k--)deletePropertyOrThrow(O,k-1)}else if(insertCount>actualDeleteCount)for(k=len-actualDeleteCount;k>actualStart;k--)to=k+insertCount-1,(from=k+actualDeleteCount-1)in O?O[to]=O[from]:deletePropertyOrThrow(O,to);for(k=0;k<insertCount;k++)O[k+actualStart]=arguments[k+2];return setArrayLength(O,len-actualDeleteCount+insertCount),A}})},"./node_modules/core-js/modules/es.date.to-iso-string.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),toISOString=__webpack_require__("./node_modules/core-js/internals/date-to-iso-string.js");$({target:"Date",proto:!0,forced:Date.prototype.toISOString!==toISOString},{toISOString:toISOString})},"./node_modules/core-js/modules/es.string.match-all.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),call=__webpack_require__("./node_modules/core-js/internals/function-call.js"),uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this-clause.js"),createIteratorConstructor=__webpack_require__("./node_modules/core-js/internals/iterator-create-constructor.js"),createIterResultObject=__webpack_require__("./node_modules/core-js/internals/create-iter-result-object.js"),requireObjectCoercible=__webpack_require__("./node_modules/core-js/internals/require-object-coercible.js"),toLength=__webpack_require__("./node_modules/core-js/internals/to-length.js"),toString=__webpack_require__("./node_modules/core-js/internals/to-string.js"),anObject=__webpack_require__("./node_modules/core-js/internals/an-object.js"),isNullOrUndefined=__webpack_require__("./node_modules/core-js/internals/is-null-or-undefined.js"),classof=__webpack_require__("./node_modules/core-js/internals/classof-raw.js"),isRegExp=__webpack_require__("./node_modules/core-js/internals/is-regexp.js"),getRegExpFlags=__webpack_require__("./node_modules/core-js/internals/regexp-get-flags.js"),getMethod=__webpack_require__("./node_modules/core-js/internals/get-method.js"),defineBuiltIn=__webpack_require__("./node_modules/core-js/internals/define-built-in.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),wellKnownSymbol=__webpack_require__("./node_modules/core-js/internals/well-known-symbol.js"),speciesConstructor=__webpack_require__("./node_modules/core-js/internals/species-constructor.js"),advanceStringIndex=__webpack_require__("./node_modules/core-js/internals/advance-string-index.js"),regExpExec=__webpack_require__("./node_modules/core-js/internals/regexp-exec-abstract.js"),InternalStateModule=__webpack_require__("./node_modules/core-js/internals/internal-state.js"),IS_PURE=__webpack_require__("./node_modules/core-js/internals/is-pure.js"),MATCH_ALL=wellKnownSymbol("matchAll"),setInternalState=InternalStateModule.set,getInternalState=InternalStateModule.getterFor("RegExp String Iterator"),RegExpPrototype=RegExp.prototype,$TypeError=TypeError,stringIndexOf=uncurryThis("".indexOf),nativeMatchAll=uncurryThis("".matchAll),WORKS_WITH_NON_GLOBAL_REGEX=!!nativeMatchAll&&!fails((function(){nativeMatchAll("a",/./)})),$RegExpStringIterator=createIteratorConstructor((function RegExpStringIterator(regexp,string,$global,fullUnicode){setInternalState(this,{type:"RegExp String Iterator",regexp:regexp,string:string,global:$global,unicode:fullUnicode,done:!1})}),"RegExp String",(function next(){var state=getInternalState(this);if(state.done)return createIterResultObject(void 0,!0);var R=state.regexp,S=state.string,match=regExpExec(R,S);return null===match?(state.done=!0,createIterResultObject(void 0,!0)):state.global?(""===toString(match[0])&&(R.lastIndex=advanceStringIndex(S,toLength(R.lastIndex),state.unicode)),createIterResultObject(match,!1)):(state.done=!0,createIterResultObject(match,!1))})),$matchAll=function(string){var matcher,$global,fullUnicode,R=anObject(this),S=toString(string),C=speciesConstructor(R,RegExp),flags=toString(getRegExpFlags(R));return matcher=new C(C===RegExp?R.source:R,flags),$global=!!~stringIndexOf(flags,"g"),fullUnicode=!!~stringIndexOf(flags,"u"),matcher.lastIndex=toLength(R.lastIndex),new $RegExpStringIterator(matcher,S,$global,fullUnicode)};$({target:"String",proto:!0,forced:WORKS_WITH_NON_GLOBAL_REGEX},{matchAll:function matchAll(regexp){var flags,S,matcher,rx,O=requireObjectCoercible(this);if(isNullOrUndefined(regexp)){if(WORKS_WITH_NON_GLOBAL_REGEX)return nativeMatchAll(O,regexp)}else{if(isRegExp(regexp)&&(flags=toString(requireObjectCoercible(getRegExpFlags(regexp))),!~stringIndexOf(flags,"g")))throw $TypeError("`.matchAll` does not allow non-global regexes");if(WORKS_WITH_NON_GLOBAL_REGEX)return nativeMatchAll(O,regexp);if(void 0===(matcher=getMethod(regexp,MATCH_ALL))&&IS_PURE&&"RegExp"==classof(regexp)&&(matcher=$matchAll),matcher)return call(matcher,regexp,O)}return S=toString(O),rx=new RegExp(regexp,"g"),IS_PURE?call($matchAll,rx,S):rx[MATCH_ALL](S)}}),IS_PURE||MATCH_ALL in RegExpPrototype||defineBuiltIn(RegExpPrototype,MATCH_ALL,$matchAll)},"./node_modules/core-js/modules/es.string.trim-end.js":function(module,exports,__webpack_require__){__webpack_require__("./node_modules/core-js/modules/es.string.trim-right.js");var $=__webpack_require__("./node_modules/core-js/internals/export.js"),trimEnd=__webpack_require__("./node_modules/core-js/internals/string-trim-end.js");$({target:"String",proto:!0,name:"trimEnd",forced:"".trimEnd!==trimEnd},{trimEnd:trimEnd})},"./node_modules/core-js/modules/es.string.trim-right.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),trimEnd=__webpack_require__("./node_modules/core-js/internals/string-trim-end.js");$({target:"String",proto:!0,name:"trimEnd",forced:"".trimRight!==trimEnd},{trimRight:trimEnd})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL0B2ZXJkb2NzL2pzLXNkay9VdGlscy9Db2xvcnMuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9AdmVyZG9jcy9qcy1zZGsvVXRpbHMvRmllbGRzLmpzIiwid2VicGFjazovLy9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9lc20vdHlwZXMvb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2ZsYXRwaWNrci9kaXN0L2VzbS9sMTBuL2RlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9lc20vdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9lc20vdXRpbHMvZG9tLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvZmxhdHBpY2tyL2Rpc3QvZXNtL3V0aWxzL2Zvcm1hdHRpbmcuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9lc20vdXRpbHMvZGF0ZXMuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9lc20vdXRpbHMvcG9seWZpbGxzLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvZmxhdHBpY2tyL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9lbGVtZW50cy92ZXJkb2NzLWZpZWxkLWRhdGUvdmVyZG9jcy1maWVsZC1kYXRlLnNjc3MiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL2VsZW1lbnRzL3ZlcmRvY3MtZmllbGQtZGF0ZS92ZXJkb2NzLWZpZWxkLWRhdGUudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNldC1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLXJpZ2h0LmpzIl0sIm5hbWVzIjpbImdldFJHQkEiLCJyb2xlSW5kZXgiLCJyZXNjYWxlIiwiciIsIm4iLCJpbnRlZ2VyU2VxdWVuY2UiLCJzdGFydCIsImNvdW50IiwiQXJyYXkiLCJmaWxsIiwibWFwIiwiXyIsImluZGV4IiwiZnVsbE5hbWVUb0luaXRpYWxzIiwibmFtZSIsInNwbGl0Iiwid29yZCIsImpvaW4iLCJzZXRDb250cm9sU3R5bGVzIiwiZWwiLCJmaWVsZCIsInhTY2FsZSIsInlTY2FsZSIsIm9wdGlvbiIsInNldHRpbmdzIiwic2V0dGluZyIsIngiLCJ5Iiwid2lkdGgiLCJkZWZhdWx0V2lkdGgiLCJ0eXBlIiwiaGVpZ2h0IiwiZGVmYXVsdEhlaWdodCIsIm9wdGlvblNldHRpbmdzIiwidW5kZWZpbmVkIiwib3B0aW9ucyIsInN0eWxlIiwicG9zaXRpb24iLCJsZWZ0IiwiYm90dG9tIiwidHJhbnNmb3JtIiwiZ2V0RmllbGRJZCIsImdldEZpZWxkT3B0aW9uSWQiLCJyZW5kZXJEb2N1bWVudEZpZWxkIiwiZG9jUGFnZSIsImZpZWxkT3B0aW9ucyIsImRpc2FibGVkIiwiZWRpdGFibGUiLCJkcmFnZ2FibGUiLCJkb25lIiwiY29udHJvbHNEaXYiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY29udGFpbmVySWQiLCJpZCIsImV4aXN0aW5nRmllbGQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJjaGVja2JveEluZGV4IiwiY2JFbCIsImJ1dHRvbkluZGV4IiwicmFkaW9FbCIsImNvbnNvbGUiLCJsb2ciLCJnZXRSb2xlSW5kZXgiLCJyb2xlcyIsInJvbGUiLCJpbmRleE9mIiwiZ2V0RmllbGRTZXR0aW5ncyIsInJlcXVpcmVkIiwicmVzdWx0IiwidmFsdWUiLCJ1cGRhdGVDc3NUcmFuc2Zvcm0iLCJrZXkiLCJjb21wb25lbnRzIiwibWF0Y2hBbGwiLCJmaWx0ZXIiLCJjb21wb25lbnQiLCJIT09LUyIsImRlZmF1bHRzIiwiX2Rpc2FibGUiLCJhbGxvd0lucHV0IiwiYWxsb3dJbnZhbGlkUHJlbG9hZCIsImFsdEZvcm1hdCIsImFsdElucHV0IiwiYWx0SW5wdXRDbGFzcyIsImFuaW1hdGUiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJhcmlhRGF0ZUZvcm1hdCIsImF1dG9GaWxsRGVmYXVsdFRpbWUiLCJjbGlja09wZW5zIiwiY2xvc2VPblNlbGVjdCIsImNvbmp1bmN0aW9uIiwiZGF0ZUZvcm1hdCIsImRlZmF1bHRIb3VyIiwiZGVmYXVsdE1pbnV0ZSIsImRlZmF1bHRTZWNvbmRzIiwiZGlzYWJsZSIsImRpc2FibGVNb2JpbGUiLCJlbmFibGVTZWNvbmRzIiwiZW5hYmxlVGltZSIsImVycm9ySGFuZGxlciIsImVyciIsIndhcm4iLCJnZXRXZWVrIiwiZ2l2ZW5EYXRlIiwiZGF0ZSIsIkRhdGUiLCJnZXRUaW1lIiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImdldERheSIsIndlZWsxIiwiZ2V0RnVsbFllYXIiLCJNYXRoIiwicm91bmQiLCJob3VySW5jcmVtZW50IiwiaWdub3JlZEZvY3VzRWxlbWVudHMiLCJpbmxpbmUiLCJsb2NhbGUiLCJtaW51dGVJbmNyZW1lbnQiLCJtb2RlIiwibW9udGhTZWxlY3RvclR5cGUiLCJuZXh0QXJyb3ciLCJub0NhbGVuZGFyIiwibm93Iiwib25DaGFuZ2UiLCJvbkNsb3NlIiwib25EYXlDcmVhdGUiLCJvbkRlc3Ryb3kiLCJvbktleURvd24iLCJvbk1vbnRoQ2hhbmdlIiwib25PcGVuIiwib25QYXJzZUNvbmZpZyIsIm9uUmVhZHkiLCJvblZhbHVlVXBkYXRlIiwib25ZZWFyQ2hhbmdlIiwib25QcmVDYWxlbmRhclBvc2l0aW9uIiwicGx1Z2lucyIsInBvc2l0aW9uRWxlbWVudCIsInByZXZBcnJvdyIsInNob3J0aGFuZEN1cnJlbnRNb250aCIsInNob3dNb250aHMiLCJzdGF0aWMiLCJ0aW1lXzI0aHIiLCJ3ZWVrTnVtYmVycyIsIndyYXAiLCJlbmdsaXNoIiwid2Vla2RheXMiLCJzaG9ydGhhbmQiLCJsb25naGFuZCIsIm1vbnRocyIsImRheXNJbk1vbnRoIiwiZmlyc3REYXlPZldlZWsiLCJvcmRpbmFsIiwibnRoIiwicyIsInJhbmdlU2VwYXJhdG9yIiwid2Vla0FiYnJldmlhdGlvbiIsInNjcm9sbFRpdGxlIiwidG9nZ2xlVGl0bGUiLCJhbVBNIiwieWVhckFyaWFMYWJlbCIsIm1vbnRoQXJpYUxhYmVsIiwiaG91ckFyaWFMYWJlbCIsIm1pbnV0ZUFyaWFMYWJlbCIsInBhZCIsIm51bWJlciIsImxlbmd0aCIsInNsaWNlIiwiaW50IiwiYm9vbCIsImRlYm91bmNlIiwiZm4iLCJ3YWl0IiwidCIsIl90aGlzIiwidGhpcyIsImFyZ3MiLCJhcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJhcnJheWlmeSIsIm9iaiIsInRvZ2dsZUNsYXNzIiwiZWxlbSIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInRhZyIsImNvbnRlbnQiLCJlIiwidGV4dENvbnRlbnQiLCJjbGVhck5vZGUiLCJub2RlIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiZmluZFBhcmVudCIsImNvbmRpdGlvbiIsInBhcmVudE5vZGUiLCJjcmVhdGVOdW1iZXJJbnB1dCIsImlucHV0Q2xhc3NOYW1lIiwib3B0cyIsIndyYXBwZXIiLCJudW1JbnB1dCIsImFycm93VXAiLCJhcnJvd0Rvd24iLCJwYXR0ZXJuIiwiZ2V0RXZlbnRUYXJnZXQiLCJldmVudCIsImNvbXBvc2VkUGF0aCIsInRhcmdldCIsImVycm9yIiwiZG9Ob3RoaW5nIiwibW9udGhUb1N0ciIsIm1vbnRoTnVtYmVyIiwicmV2Rm9ybWF0IiwiRCIsIkYiLCJkYXRlT2JqIiwibW9udGhOYW1lIiwic2V0TW9udGgiLCJHIiwiaG91ciIsImdldEhvdXJzIiwicGFyc2VGbG9hdCIsIkgiLCJKIiwiZGF5IiwiSyIsIlJlZ0V4cCIsInRlc3QiLCJNIiwic2hvcnRNb250aCIsIlMiLCJzZWNvbmRzIiwic2V0U2Vjb25kcyIsIlUiLCJ1bml4U2Vjb25kcyIsIlciLCJ3ZWVrTnVtIiwid2Vla051bWJlciIsInBhcnNlSW50IiwiWSIsInllYXIiLCJzZXRGdWxsWWVhciIsIloiLCJJU09EYXRlIiwiZCIsImgiLCJpIiwibWludXRlcyIsInNldE1pbnV0ZXMiLCJqIiwibCIsIm0iLCJtb250aCIsInUiLCJ1bml4TWlsbFNlY29uZHMiLCJ3IiwidG9rZW5SZWdleCIsImZvcm1hdHMiLCJ0b0lTT1N0cmluZyIsImdldE1vbnRoIiwiZ2V0U2Vjb25kcyIsImdldE1pbnV0ZXMiLCJTdHJpbmciLCJzdWJzdHJpbmciLCJjcmVhdGVEYXRlRm9ybWF0dGVyIiwiX2EiLCJfYiIsImNvbmZpZyIsIl9jIiwibDEwbiIsIl9kIiwiaXNNb2JpbGUiLCJmcm10Iiwib3ZlcnJpZGVMb2NhbGUiLCJmb3JtYXREYXRlIiwiYyIsImFyciIsImNyZWF0ZURhdGVQYXJzZXIiLCJnaXZlbkZvcm1hdCIsInRpbWVsZXNzIiwiY3VzdG9tTG9jYWxlIiwicGFyc2VkRGF0ZSIsImRhdGVPcmlnIiwidG9GaXhlZCIsImZvcm1hdCIsImRhdGVzdHIiLCJ0cmltIiwicGFyc2VEYXRlIiwibWF0Y2hlZCIsIm9wcyIsIm1hdGNoSW5kZXgiLCJyZWdleFN0ciIsInRva2VuIiwiaXNCYWNrU2xhc2giLCJlc2NhcGVkIiwibWF0Y2giLCJleGVjIiwidmFsIiwiZm9yRWFjaCIsImlzTmFOIiwiRXJyb3IiLCJjb21wYXJlRGF0ZXMiLCJkYXRlMSIsImRhdGUyIiwiY2FsY3VsYXRlU2Vjb25kc1NpbmNlTWlkbmlnaHQiLCJob3VycyIsImR1cmF0aW9uIiwiZ2V0RGVmYXVsdEhvdXJzIiwibWluRGF0ZSIsIm1pbkhvdXIiLCJtaW5NaW51dGVzIiwibWluU2Vjb25kcyIsIm1heERhdGUiLCJtYXhIciIsIm1heE1pbnV0ZXMiLCJtaW4iLCJPYmplY3QiLCJhc3NpZ24iLCJfaSIsIlR5cGVFcnJvciIsIl9sb29wXzEiLCJzb3VyY2UiLCJrZXlzIiwiYXJnc18xIiwiX19hc3NpZ24iLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19zcHJlYWRBcnJheXMiLCJpbCIsImsiLCJhIiwiamwiLCJGbGF0cGlja3JJbnN0YW5jZSIsImVsZW1lbnQiLCJpbnN0YW5jZUNvbmZpZyIsInNlbGYiLCJkZWZhdWx0T3B0aW9ucyIsImZsYXRwaWNrciIsImRlZmF1bHRDb25maWciLCJFbmdsaXNoIiwiZ2V0Q2xvc2VzdEFjdGl2ZUVsZW1lbnQiLCJjYWxlbmRhckNvbnRhaW5lciIsImdldFJvb3ROb2RlIiwiYWN0aXZlRWxlbWVudCIsImJpbmRUb0luc3RhbmNlIiwiYmluZCIsInNldENhbGVuZGFyV2lkdGgiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ2aXNpYmlsaXR5IiwiZGlzcGxheSIsImRheXNDb250YWluZXIiLCJkYXlzV2lkdGgiLCJkYXlzIiwib2Zmc2V0V2lkdGgiLCJ3ZWVrV3JhcHBlciIsInJlbW92ZVByb3BlcnR5IiwidXBkYXRlVGltZSIsInNlbGVjdGVkRGF0ZXMiLCJkZWZhdWx0RGF0ZSIsImdldE1pbGxpc2Vjb25kcyIsImxhdGVzdFNlbGVjdGVkRGF0ZU9iaiIsInRpbWVXcmFwcGVyIiwicHJldmVudERlZmF1bHQiLCJpc0tleURvd24iLCJldmVudFRhcmdldCIsImlucHV0IiwiZ2V0QXR0cmlidXRlIiwibWF4Iiwic3RlcCIsImN1clZhbHVlIiwiZGVsdGEiLCJ3aGljaCIsIm5ld1ZhbHVlIiwiaXNIb3VyRWxlbSIsImhvdXJFbGVtZW50IiwiaXNNaW51dGVFbGVtIiwibWludXRlRWxlbWVudCIsImluY3JlbWVudE51bUlucHV0IiwiYWJzIiwicHJldlZhbHVlIiwiX2lucHV0Iiwic2V0SG91cnNGcm9tSW5wdXRzIiwidXBkYXRlVmFsdWUiLCJfZGVib3VuY2VkQ2hhbmdlIiwic2Vjb25kRWxlbWVudCIsImFtcG0ybWlsaXRhcnkiLCJsaW1pdE1pbkhvdXJzIiwibWluVGltZSIsIm1pbkRhdGVIYXNUaW1lIiwibGltaXRNYXhIb3VycyIsIm1heFRpbWUiLCJtYXhEYXRlSGFzVGltZSIsIm1pbkJvdW5kIiwibWF4Qm91bmQiLCJjdXJyZW50VGltZSIsInBhcnNlU2Vjb25kcyIsInNlY29uZHNTaW5jZU1pZG5pZ2h0IiwiZmxvb3IiLCJzZXRIb3Vyc0Zyb21EYXRlIiwib25ZZWFySW5wdXQiLCJ0b1N0cmluZyIsImNoYW5nZVllYXIiLCJoYW5kbGVyIiwiZXYiLCJhZGRFdmVudExpc3RlbmVyIiwiX2hhbmRsZXJzIiwicHVzaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0cmlnZ2VyQ2hhbmdlIiwidHJpZ2dlckV2ZW50IiwianVtcFRvRGF0ZSIsImp1bXBEYXRlIiwianVtcFRvIiwib2xkWWVhciIsImN1cnJlbnRZZWFyIiwib2xkTW9udGgiLCJjdXJyZW50TW9udGgiLCJtZXNzYWdlIiwiYnVpbGRNb250aFN3aXRjaCIsInJlZHJhdyIsInRpbWVJbmNyZW1lbnQiLCJjb250YWlucyIsImlucHV0RWxlbSIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZURheSIsIl9kYXlOdW1iZXIiLCJkYXRlSXNFbmFibGVkIiwiaXNFbmFibGVkIiwiZGF5RWxlbWVudCIsIiRpIiwidG9kYXlEYXRlRWxlbSIsInRhYkluZGV4IiwiaXNEYXRlU2VsZWN0ZWQiLCJzZWxlY3RlZERhdGVFbGVtIiwiaXNEYXRlSW5SYW5nZSIsImluc2VydEFkamFjZW50SFRNTCIsImZvY3VzT25EYXlFbGVtIiwidGFyZ2V0Tm9kZSIsImZvY3VzIiwib25Nb3VzZU92ZXIiLCJnZXRGaXJzdEF2YWlsYWJsZURheSIsInN0YXJ0TW9udGgiLCJlbmRNb250aCIsImNoaWxkcmVuIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiZm9jdXNPbkRheSIsImN1cnJlbnQiLCJvZmZzZXQiLCJkYXlGb2N1c2VkIiwiaXNJblZpZXciLCJib2R5Iiwic3RhcnRFbGVtIiwiZ2V0TmV4dEF2YWlsYWJsZURheSIsImdpdmVuTW9udGgiLCJsb29wRGVsdGEiLCJudW1Nb250aERheXMiLCJjaGFuZ2VNb250aCIsImJ1aWxkTW9udGhEYXlzIiwiZmlyc3RPZk1vbnRoIiwicHJldk1vbnRoRGF5cyIsInV0aWxzIiwiZ2V0RGF5c0luTW9udGgiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiaXNNdWx0aU1vbnRoIiwicHJldk1vbnRoRGF5Q2xhc3MiLCJuZXh0TW9udGhEYXlDbGFzcyIsImRheU51bWJlciIsImRheUluZGV4IiwiZGF5TnVtIiwiZGF5Q29udGFpbmVyIiwiYnVpbGREYXlzIiwiZnJhZyIsInNob3VsZEJ1aWxkTW9udGgiLCJtb250aHNEcm9wZG93bkNvbnRhaW5lciIsImlubmVySFRNTCIsInNlbGVjdGVkIiwiYnVpbGRNb250aCIsIm1vbnRoRWxlbWVudCIsImNvbnRhaW5lciIsIm1vbnRoTmF2RnJhZ21lbnQiLCJzZWxlY3RlZE1vbnRoIiwieWVhcklucHV0IiwidGFiaW5kZXgiLCJ5ZWFyRWxlbWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYnVpbGRNb250aHMiLCJtb250aE5hdiIsInByZXZNb250aE5hdiIsInllYXJFbGVtZW50cyIsIm1vbnRoRWxlbWVudHMiLCJuZXh0TW9udGhOYXYiLCJidWlsZFdlZWtkYXlzIiwid2Vla2RheUNvbnRhaW5lciIsInVwZGF0ZVdlZWtkYXlzIiwic3BsaWNlIiwiaXNPZmZzZXQiLCJfaGlkZVByZXZNb250aEFycm93IiwiX2hpZGVOZXh0TW9udGhBcnJvdyIsInVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgiLCJpc0NhbGVuZGFyRWxlbSIsImRvY3VtZW50Q2xpY2siLCJpc09wZW4iLCJldmVudFRhcmdldF8xIiwiaXNDYWxlbmRhckVsZW1lbnQiLCJsb3N0Rm9jdXMiLCJwYXRoIiwicmVsYXRlZFRhcmdldCIsImlzSWdub3JlZCIsInNvbWUiLCJ0aW1lQ29udGFpbmVyIiwiY2xvc2UiLCJjbGVhciIsIm5ld1llYXIiLCJuZXdZZWFyTnVtIiwiaXNOZXdZZWFyIiwiZGF0ZVRvQ2hlY2siLCJlbmFibGUiLCJhcnJheSIsInBhcnNlZCIsImZyb20iLCJ0byIsIm9uQmx1ciIsImlzSW5wdXQiLCJ2YWx1ZUNoYW5nZWQiLCJ0cmltRW5kIiwiZ2V0RGF0ZVN0ciIsImFsbG93S2V5ZG93biIsImFsbG93SW5saW5lS2V5ZG93biIsImtleUNvZGUiLCJibHVyIiwib3BlbiIsImlzVGltZU9iaiIsImZvY3VzQW5kQ2xvc2UiLCJzZWxlY3REYXRlIiwiZGVsdGFfMSIsImN0cmxLZXkiLCJzdG9wUHJvcGFnYXRpb24iLCJjdXJyZW50WWVhckVsZW1lbnQiLCJlbGVtcyIsImNvbmNhdCIsInBsdWdpbkVsZW1lbnRzIiwic2hpZnRLZXkiLCJjaGFyQXQiLCJ0b0xvd2VyQ2FzZSIsImNlbGxDbGFzcyIsImhvdmVyRGF0ZSIsImZpcnN0RWxlbWVudENoaWxkIiwiaW5pdGlhbERhdGUiLCJyYW5nZVN0YXJ0RGF0ZSIsInJhbmdlRW5kRGF0ZSIsImNvbnRhaW5zRGlzYWJsZWQiLCJtaW5SYW5nZSIsIm1heFJhbmdlIiwickNvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkYXlFbGVtIiwidGltZXN0YW1wIiwib3V0T2ZSYW5nZSIsImlzQmV0d2VlbiIsInRzIiwidHMxIiwidHMyIiwib25SZXNpemUiLCJwb3NpdGlvbkNhbGVuZGFyIiwibWluTWF4RGF0ZVNldHRlciIsImludmVyc2VEYXRlT2JqIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0SW5wdXRFbGVtIiwicXVlcnlTZWxlY3RvciIsInNldHVwTG9jYWxlIiwibDEwbnMiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJkYXRhc2V0IiwiY3VzdG9tUG9zaXRpb25FbGVtZW50IiwiX3Bvc2l0aW9uRWxlbWVudCIsImNhbGVuZGFySGVpZ2h0IiwicmVkdWNlIiwiYWNjIiwiY2hpbGQiLCJvZmZzZXRIZWlnaHQiLCJjYWxlbmRhcldpZHRoIiwiY29uZmlnUG9zIiwiY29uZmlnUG9zVmVydGljYWwiLCJjb25maWdQb3NIb3Jpem9udGFsIiwiaW5wdXRCb3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJkaXN0YW5jZUZyb21Cb3R0b20iLCJpbm5lckhlaWdodCIsInNob3dPblRvcCIsInRvcCIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJpc0NlbnRlciIsImlzUmlnaHQiLCJyaWdodCIsInJpZ2h0TW9zdCIsImNlbnRlck1vc3QiLCJkb2MiLCJnZXREb2N1bWVudFN0eWxlU2hlZXQiLCJlZGl0YWJsZVNoZWV0Iiwic3R5bGVTaGVldHMiLCJzaGVldCIsImNzc1J1bGVzIiwiY3JlYXRlU3R5bGVTaGVldCIsImhlYWQiLCJib2R5V2lkdGgiLCJjZW50ZXJMZWZ0IiwiY2VudGVySW5kZXgiLCJjZW50ZXJTdHlsZSIsImluc2VydFJ1bGUiLCJjZW50ZXJCZWZvcmUiLCJtc01heFRvdWNoUG9pbnRzIiwiaXNTZWxlY3RhYmxlIiwic2VsZWN0ZWREYXRlIiwic2hvdWxkQ2hhbmdlTW9udGgiLCJzZWxlY3RlZEluZGV4Iiwic29ydCIsImIiLCJzaW5nbGUiLCJyYW5nZSIsImxvYWRlZFBsdWdpbnMiLCJfYmluZCIsIl9zZXRIb3Vyc0Zyb21EYXRlIiwiX3Bvc2l0aW9uQ2FsZW5kYXIiLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJ0b0luaXRpYWwiLCJtb2JpbGVJbnB1dCIsIl9pbml0aWFsRGF0ZSIsIl9jcmVhdGVFbGVtZW50IiwiZGVzdHJveSIsImxhc3RDaGlsZCIsImluc2VydEJlZm9yZSIsIl90eXBlIiwiY2xpY2siLCJ3YXNPcGVuIiwic2VsZWN0Iiwic2V0IiwiQ0FMTEJBQ0tTIiwic2V0U2VsZWN0ZWREYXRlIiwidG9nZ2xlIiwidXBkYXRlUG9zaXRpb25FbGVtZW50IiwiaW5wdXREYXRlIiwiZGF0ZXMiLCJwYXJzZURhdGVSdWxlcyIsInJ1bGUiLCJkYXRhIiwiaG9va3MiLCJpbml0RXZlbnQiLCJzcGVjaWZpY0Zvcm1hdCIsImRPYmoiLCJtb2JpbGVGb3JtYXRTdHIiLCJvbk1vbnRoTmF2Q2xpY2siLCJpc1ByZXZNb250aCIsImlzTmV4dE1vbnRoIiwiaW5pdCIsInBhcnNlQ29uZmlnIiwiYm9vbE9wdHMiLCJ1c2VyQ29uZmlnIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJfZW5hYmxlIiwidGltZU1vZGUiLCJkZWZhdWx0RGF0ZUZvcm1hdCIsImRlZmF1bHRBbHRGb3JtYXQiLCJfbWluRGF0ZSIsIl9tYXhEYXRlIiwibWluTWF4VGltZVNldHRlciIsIl9taW5UaW1lIiwiX21heFRpbWUiLCJob29rIiwicGx1Z2luQ29uZiIsInNldHVwSW5wdXRzIiwibm9kZU5hbWUiLCJwbGFjZWhvbGRlciIsIm5leHRTaWJsaW5nIiwic2V0dXBEYXRlcyIsInByZWxvYWRlZERhdGUiLCJzZXR1cEhlbHBlckZ1bmN0aW9ucyIsInlyIiwiYnVpbGQiLCJmcmFnbWVudCIsImJ1aWxkTW9udGhOYXYiLCJfX2hpZGVQcmV2TW9udGhBcnJvdyIsIl9faGlkZU5leHRNb250aEFycm93IiwiaW5uZXJDb250YWluZXIiLCJidWlsZFdlZWtzIiwiYnVpbGRUaW1lIiwic2VwYXJhdG9yIiwiaG91cklucHV0IiwibWludXRlSW5wdXQiLCJtaWxpdGFyeTJhbXBtIiwic2Vjb25kSW5wdXQiLCJ0aXRsZSIsImN1c3RvbUFwcGVuZCIsImFwcGVuZFRvIiwibm9kZVR5cGUiLCJiaW5kRXZlbnRzIiwiZXZ0Iiwic2V0dXBNb2JpbGUiLCJpbnB1dFR5cGUiLCJkZWZhdWx0VmFsdWUiLCJkZWJvdW5jZWRSZXNpemUiLCJvbnRvdWNoc3RhcnQiLCJjYXB0dXJlIiwic2VsVGV4dCIsImlzU2FmYXJpIiwiX2ZsYXRwaWNrciIsIm5vZGVMaXN0Iiwibm9kZXMiLCJIVE1MRWxlbWVudCIsImluc3RhbmNlcyIsIkhUTUxDb2xsZWN0aW9uIiwiTm9kZUxpc3QiLCJzZWxlY3RvciIsIk5vZGUiLCJlbiIsImRlZmF1bHQiLCJsb2NhbGl6ZSIsInNldERlZmF1bHRzIiwialF1ZXJ5IiwiZnBfaW5jciIsIlZlcmRvY3NGaWVsZERhdGUiLCJyYW5kb20iLCJjb21wb25lbnREaWRMb2FkIiwiRXZlbnQiLCJyZW5kZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJyb2xlaW5kZXgiLCJkdCIsImZvcm1hdHRlZCIsIkhvc3QiLCJjbGFzcyIsInJlZiIsImljb24iLCJsYWJlbCIsIm9uSW5wdXQiLCJhQ2FsbGFibGUiLCJ0b09iamVjdCIsIkluZGV4ZWRPYmplY3QiLCJsZW5ndGhPZkFycmF5TGlrZSIsIiRUeXBlRXJyb3IiLCJjcmVhdGVNZXRob2QiLCJJU19SSUdIVCIsInRoYXQiLCJjYWxsYmFja2ZuIiwiYXJndW1lbnRzTGVuZ3RoIiwibWVtbyIsIk8iLCJtb2R1bGUiLCJleHBvcnRzIiwiREVTQ1JJUFRPUlMiLCJpc0FycmF5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiU0lMRU5UX09OX05PTl9XUklUQUJMRV9MRU5HVEhfU0VUIiwid3JpdGFibGUiLCJ1bmN1cnJ5VGhpcyIsImZhaWxzIiwicGFkU3RhcnQiLCIkUmFuZ2VFcnJvciIsIlJhbmdlRXJyb3IiLCIkaXNGaW5pdGUiLCJpc0Zpbml0ZSIsIkRhdGVQcm90b3R5cGUiLCJuYXRpdmVEYXRlVG9JU09TdHJpbmciLCJ0aGlzVGltZVZhbHVlIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENTZWNvbmRzIiwiTmFOIiwibWlsbGlzZWNvbmRzIiwic2lnbiIsInRvTGVuZ3RoIiwiJHJlcGVhdCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJyZXBlYXQiLCJzdHJpbmdTbGljZSIsImNlaWwiLCJJU19FTkQiLCIkdGhpcyIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaW50TWF4TGVuZ3RoIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImVuZCIsIiR0cmltRW5kIiwiZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCIsIiQiLCIkcmVkdWNlIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsIkNIUk9NRV9WRVJTSU9OIiwiSVNfTk9ERSIsInByb3RvIiwiZm9yY2VkIiwidG9BYnNvbHV0ZUluZGV4IiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsInNldEFycmF5TGVuZ3RoIiwiZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiY3JlYXRlUHJvcGVydHkiLCJkZWxldGVQcm9wZXJ0eU9yVGhyb3ciLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsImRlbGV0ZUNvdW50IiwiaW5zZXJ0Q291bnQiLCJhY3R1YWxEZWxldGVDb3VudCIsIkEiLCJsZW4iLCJhY3R1YWxTdGFydCIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJjcmVhdGVJdGVyUmVzdWx0T2JqZWN0IiwiYW5PYmplY3QiLCJpc051bGxPclVuZGVmaW5lZCIsImNsYXNzb2YiLCJpc1JlZ0V4cCIsImdldFJlZ0V4cEZsYWdzIiwiZ2V0TWV0aG9kIiwiZGVmaW5lQnVpbHRJbiIsIndlbGxLbm93blN5bWJvbCIsInNwZWNpZXNDb25zdHJ1Y3RvciIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiSVNfUFVSRSIsIk1BVENIX0FMTCIsInNldEludGVybmFsU3RhdGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZ2V0dGVyRm9yIiwiUkVHRVhQX1NUUklORyIsIlJlZ0V4cFByb3RvdHlwZSIsInN0cmluZ0luZGV4T2YiLCJuYXRpdmVNYXRjaEFsbCIsIldPUktTX1dJVEhfTk9OX0dMT0JBTF9SRUdFWCIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsIlJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwicmVnZXhwIiwic3RyaW5nIiwiJGdsb2JhbCIsImZ1bGxVbmljb2RlIiwiZ2xvYmFsIiwidW5pY29kZSIsIm5leHQiLCJzdGF0ZSIsIlIiLCJsYXN0SW5kZXgiLCIkbWF0Y2hBbGwiLCJtYXRjaGVyIiwiQyIsImZsYWdzIiwicngiLCJ0cmltUmlnaHQiXSwibWFwcGluZ3MiOiI7Z0tBOEJPLFNBQVNBLFFBQVFDLFdBQ3BCLE9BQVFBLFVBQVksSUFDaEIsS0FBSyxFQUNELE9BQXFCLElBQWRBLFVBQWtCLHlCQUEyQiwyQkFDeEQsS0FBSyxFQUNELE1BQU8seUJBQ1gsS0FBSyxFQUNELE1BQU8seUJBQ1gsS0FBSyxFQUNELE1BQU8sMkJBQ1gsS0FBSyxFQUNELE1BQU8sMkJBQ1gsS0FBSyxFQUNELE1BQU8sMEJBQ1gsS0FBSyxFQUNELE1BQU8sMkJBQ1gsS0FBSyxFQUNELE1BQU8seUJBQ1gs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QVdpeUIsT0FBUSxHQUFHeUQsWUFBYzlVLFNBQVcsQ0FDdEY4VSxVQUFXOVUsUyIsImZpbGUiOiIxNS41MWFmM2I5OS5pZnJhbWUuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHaXZlbiBhIGByZ2JhKHIsZyxiLGEpYCBzdHJpbmcgdmFsdWUsIHJldHVybnMgdGhlIGhleCBlcXVpdmFsZW50LCBkcm9wcGluZyB0aGUgYWxwaGEgY2hhbm5lbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJHQihyZ2JhKSB7XG4gICAgdmFyIHJnYk51bWJlcnMgPSByZ2JhLnJlcGxhY2UoJ3JnYmEoJywgJycpLnJlcGxhY2UoJyknLCAnJykuc3BsaXQoJywnKTtcbiAgICB2YXIgcmdiT2JqZWN0ID0ge1xuICAgICAgICByZWQ6ICtyZ2JOdW1iZXJzWzBdLFxuICAgICAgICBncmVlbjogK3JnYk51bWJlcnNbMV0sXG4gICAgICAgIGJsdWU6ICtyZ2JOdW1iZXJzWzJdLFxuICAgICAgICBhbHBoYTogK3JnYk51bWJlcnNbM10sXG4gICAgfTtcbiAgICB2YXIgYWxwaGEgPSAxIC0gcmdiT2JqZWN0LmFscGhhO1xuICAgIHZhciByZWQgPSBNYXRoLnJvdW5kKChyZ2JPYmplY3QuYWxwaGEgKiAocmdiT2JqZWN0LnJlZCAvIDI1NSkgKyBhbHBoYSkgKiAyNTUpO1xuICAgIHZhciBncmVlbiA9IE1hdGgucm91bmQoKHJnYk9iamVjdC5hbHBoYSAqIChyZ2JPYmplY3QuZ3JlZW4gLyAyNTUpICsgYWxwaGEpICogMjU1KTtcbiAgICB2YXIgYmx1ZSA9IE1hdGgucm91bmQoKHJnYk9iamVjdC5hbHBoYSAqIChyZ2JPYmplY3QuYmx1ZSAvIDI1NSkgKyBhbHBoYSkgKiAyNTUpO1xuICAgIHJldHVybiAnIycgKyByZ2JUb0hleChyZWQpICsgcmdiVG9IZXgoZ3JlZW4pICsgcmdiVG9IZXgoYmx1ZSk7XG59XG4vKipcbiAqIEdpdmVuIGFuIFJHQiBzdHJpbmcgdmFsdWUsIHJldHVybnMgdGhlIGhleCBlcXVpdmFsZW50LlxuICovXG5mdW5jdGlvbiByZ2JUb0hleChyZ2IpIHtcbiAgICB2YXIgaGV4ID0gcmdiLnRvU3RyaW5nKDE2KTtcbiAgICBpZiAoaGV4Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuICcwJyArIGhleDtcbiAgICB9XG4gICAgcmV0dXJuIGhleDtcbn1cbi8qKlxuICogR2l2ZW4gYSBzaWduZXIgcm9sZSBpbmRleCwgcmV0dXJuIHRoZSBjb2xvciBjb2RlIGZvciB0aGF0IHNpZ25lci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJHQkEocm9sZUluZGV4KSB7XG4gICAgc3dpdGNoIChyb2xlSW5kZXggJSAxMCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gcm9sZUluZGV4ID09PSAwID8gJ3JnYmEoMjU1LCAxOTMsIDcsIDAuNCknIDogJ3JnYmEoMTM0LCAxMzQsIDEzNCwgMC4zKSc7IC8vICNGRkU2OUNcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKDE1NiwgMzksIDE3NiwgLjQpJzsgLy8gJyNFM0MzRTknXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiAncmdiYSgzMywgMTUwLCAyNDMsIC40KSc7IC8vICcjQzFFMUZCJ1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gJ3JnYmEoMjIwLCAyMzEsIDExNywgMC4zKSc7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVybiAncmdiYSgxMjEsIDEzNCwgMjAzLCAwLjMpJztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKDc3LCAxODIsIDE3MiwgMC4zKSc7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHJldHVybiAncmdiYSgyNTUsIDIwMiwgMTY1LCAwLjMpJztcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKDIsIDI0NywgMTkwLCAwLjMpJztcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKDI1NSwgMTM4LCAxMDEsIDAuMyknO1xuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICByZXR1cm4gJ3JnYmEoODIsIDI1NSwgNzksIDAuMyknO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKDIyOSwgMTE1LCAxNTUsIDAuMyknO1xuICAgIH1cbn1cbi8qKlxuICogR2l2ZW4gYSByb2xlIG5hbWUsIHJldHVybiBhIGNvbG9yIGNvZGUgZm9yIGl0LiBUaGlzIHdvcmtzIGJ5IGNvbXB1dGluZyBhIGhhc2ggY29kZSBzbyB0aGUgc3BlY2lmaWMgY29sb3IgcmV0dXJuZWRcbiAqIGlzIG5vdCBzcGVjaWZpZWQgZXhwbGljaXRseSwgYnV0IHdpbGwgYmUgdGhlIHNhbWUgZm9yIGV2ZXJ5IGNhbGwgd2l0aCB0aGUgc2FtZSBpbnB1dCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVUb1JHQkEoc3RyKSB7XG4gICAgaWYgKCEhc3RyKSB7XG4gICAgICAgIHZhciB2YWxpZE51bSA9IHBhcnNlSW50KHN0ci5zbGljZSgtMSksIDEwKTtcbiAgICAgICAgaWYgKCFpc05hTih2YWxpZE51bSkpIHtcbiAgICAgICAgICAgIHN0ciArPSAodmFsaWROdW0gKiA5OSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFzaCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBoYXNoID0gc3RyLmNoYXJDb2RlQXQoaSkgKyAoKGhhc2ggPDwgNSkgLSBoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBoYXNoID0gTWF0aC5yb3VuZChoYXNoIC8gMS4zKTtcbiAgICAgICAgdmFyIGMgPSAoaGFzaCAmIDB4MDBmZmZmMDgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB2YXIgaGV4ID0gJyMnICsgJzAwMDAwJy5zdWJzdHJpbmcoMCwgNiAtIGMubGVuZ3RoKSArIGM7XG4gICAgICAgIHZhciByZXN1bHQgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KTtcbiAgICAgICAgdmFyIGNvbG9yID0ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksXG4gICAgICAgICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50KHJlc3VsdFszXSwgMTYpLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gXCJyZ2JhKFwiLmNvbmNhdChjb2xvci5yLCBcIiwgXCIpLmNvbmNhdChjb2xvci5nLCBcIiwgXCIpLmNvbmNhdChjb2xvci5iLCBcIiwgMC4yKVwiKTtcbiAgICB9XG59XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBvYnRhaW4gYSBjb2xvciBjb2RlIGdpdmVuIGEgcm9sZSBuYW1lIGdpdmVuIHZhcmlvdXMgcG9zc2libGUgaW5wdXRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um9sZUNvbG9yKG5hbWUsIHJvbGVzLCBpbmRleCkge1xuICAgIGlmIChpbmRleCkge1xuICAgICAgICByZXR1cm4gZ2V0UkdCQShpbmRleCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJvbGVzICYmIHJvbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHJvbGVJbmRleCA9IHJvbGVzLmZpbmRJbmRleChmdW5jdGlvbiAocm9sZSkgeyByZXR1cm4gcm9sZS5uYW1lID09PSBuYW1lOyB9KTtcbiAgICAgICAgaWYgKHJvbGVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gcm9sZXNbcm9sZUluZGV4XS5yZ2JhIHx8IGdldFJHQkEocm9sZUluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lVG9SR0JBKG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmFtZVRvUkdCQShuYW1lKTtcbiAgICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0UlRvcCh5LCBmaWVsZEhlaWdodCwgaVRleHRIZWlnaHQsIHlSYXRpbykge1xuICAgIHJldHVybiBpVGV4dEhlaWdodCAtICh5ICsgZmllbGRIZWlnaHQpICogeVJhdGlvO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFJMZWZ0KHgsIHJhdGlvKSB7XG4gICAgcmV0dXJuIHggKiByYXRpbztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRSVmFsdWUoeSwgcmF0aW8pIHtcbiAgICByZXR1cm4geSAqIHJhdGlvO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJsb2JUb0Jhc2U2NChpbWFnZSkge1xuICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmaWxlUmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbignUHJvYmxlbSByZWFkaW5nIGJsb2IuJykpO1xuICAgICAgICB9O1xuICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlc29sdmUoZmlsZVJlYWRlci5yZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoaW1hZ2UpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc2NhbGUociwgbikge1xuICAgIHJldHVybiByICogbjtcbn1cbiIsIi8vIFRoZXNlIHNob3VsZCBwcm9iYWJseSBhbGwgbW92ZSB0byBKUy1TREtcbmltcG9ydCB7cmVzY2FsZX0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL1V0aWxzL0ZpZWxkcyc7XG4vLyBpbXBvcnQge2dldFJHQkF9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9VdGlscy9Db2xvcnMnO1xuaW1wb3J0IHtJVGVtcGxhdGVGaWVsZH0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL1RlbXBsYXRlcy9UeXBlcyc7XG5pbXBvcnQge0lEb2N1bWVudEZpZWxkfSBmcm9tICdAdmVyZG9jcy9qcy1zZGsvRW52ZWxvcGVzL1R5cGVzJztcbmltcG9ydCB7SURvY3VtZW50UGFnZUluZm99IGZyb20gJy4vVHlwZXMnO1xuXG5leHBvcnQgY29uc3QgaW50ZWdlclNlcXVlbmNlID0gKHN0YXJ0OiBudW1iZXIsIGNvdW50OiBudW1iZXIpOiBudW1iZXJbXSA9PlxuICBBcnJheShjb3VudClcbiAgICAuZmlsbCgxKVxuICAgIC5tYXAoKF8sIGluZGV4KSA9PiBpbmRleCArIHN0YXJ0KTtcblxuZXhwb3J0IGNvbnN0IGZ1bGxOYW1lVG9Jbml0aWFscyA9IChuYW1lOiBzdHJpbmcpID0+XG4gIG5hbWVcbiAgICAuc3BsaXQoJyAnKVxuICAgIC5tYXAod29yZCA9PiB3b3JkWzBdKVxuICAgIC5qb2luKCcnKTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRXaWR0aCA9IChmaWVsZDogSVRlbXBsYXRlRmllbGQgfCBJRG9jdW1lbnRGaWVsZCkgPT4ge1xuICBzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcbiAgICBjYXNlICdhdHRhY2htZW50JzpcbiAgICBjYXNlICdwYXltZW50JzpcbiAgICAgIHJldHVybiAyNDtcbiAgICBjYXNlICdjaGVja2JveCc6XG4gICAgY2FzZSAnY2hlY2tib3hfZ3JvdXAnOlxuICAgIGNhc2UgJ3JhZGlvX2J1dHRvbl9ncm91cCc6XG4gICAgICByZXR1cm4gMTQ7XG4gICAgY2FzZSAnc2lnbmF0dXJlJzpcbiAgICBjYXNlICdpbml0aWFsJzpcbiAgICAgIHJldHVybiA4MjtcbiAgfVxuXG4gIHJldHVybiAxNTA7XG59O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEhlaWdodCA9IChmaWVsZDogSVRlbXBsYXRlRmllbGQgfCBJRG9jdW1lbnRGaWVsZCkgPT4ge1xuICBzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcbiAgICBjYXNlICdhdHRhY2htZW50JzpcbiAgICBjYXNlICdwYXltZW50JzpcbiAgICAgIHJldHVybiAyNDtcbiAgICBjYXNlICdjaGVja2JveCc6XG4gICAgY2FzZSAnY2hlY2tib3hfZ3JvdXAnOlxuICAgIGNhc2UgJ3JhZGlvX2J1dHRvbl9ncm91cCc6XG4gICAgICByZXR1cm4gMTQ7XG4gICAgY2FzZSAnc2lnbmF0dXJlJzpcbiAgICBjYXNlICdpbml0aWFsJzpcbiAgICAgIHJldHVybiA0MTtcbiAgfVxuXG4gIHJldHVybiA1MDtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRDb250cm9sU3R5bGVzID0gKGVsOiBIVE1MRWxlbWVudCwgZmllbGQ6IElUZW1wbGF0ZUZpZWxkIHwgSURvY3VtZW50RmllbGQsIHhTY2FsZTogbnVtYmVyLCB5U2NhbGU6IG51bWJlciwgb3B0aW9uPzogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IHNldHRpbmdzID0gKGZpZWxkIGFzIElUZW1wbGF0ZUZpZWxkKS5zZXR0aW5nIHx8IChmaWVsZCBhcyBJRG9jdW1lbnRGaWVsZCkuc2V0dGluZ3M7XG4gIGxldCB7eCA9IDAsIHkgPSAwLCB3aWR0aCA9IGRlZmF1bHRXaWR0aChmaWVsZCksIGhlaWdodCA9IGRlZmF1bHRIZWlnaHQoZmllbGQpfSA9IHNldHRpbmdzO1xuXG4gIGNvbnN0IG9wdGlvblNldHRpbmdzID0gb3B0aW9uICE9PSB1bmRlZmluZWQgJiYgc2V0dGluZ3Mub3B0aW9uc1tvcHRpb25dID8gc2V0dGluZ3Mub3B0aW9uc1tvcHRpb25dIDogbnVsbDtcbiAgaWYgKG9wdGlvblNldHRpbmdzKSB7XG4gICAgeCA9IG9wdGlvblNldHRpbmdzLnggPz8geDtcbiAgICB5ID0gb3B0aW9uU2V0dGluZ3MueSA/PyB5O1xuICAgIHdpZHRoID0gb3B0aW9uU2V0dGluZ3Mud2lkdGggPz8gd2lkdGg7XG4gICAgaGVpZ2h0ID0gb3B0aW9uU2V0dGluZ3MuaGVpZ2h0ID8/IGhlaWdodDtcbiAgfVxuXG4gIGVsLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xuICBlbC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xuICBlbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIGVsLnN0eWxlLmxlZnQgPSBgJHtyZXNjYWxlKHhTY2FsZSwgeCl9cHhgO1xuICBlbC5zdHlsZS5ib3R0b20gPSBgJHtyZXNjYWxlKHlTY2FsZSwgeSl9cHhgO1xuICBlbC5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoJHt4U2NhbGV9LCAke3lTY2FsZX0pYDtcbiAgLy8gZWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gZmllbGRbJ3JnYmEnXSB8fCBnZXRSR0JBKHJvbGVJbmRleCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RmllbGRJZCA9IChmaWVsZDogSVRlbXBsYXRlRmllbGQgfCBJRG9jdW1lbnRGaWVsZCkgPT4ge1xuICByZXR1cm4gYHZlcmRvY3MtZG9jLWZsZC0ke2ZpZWxkLm5hbWV9YDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRGaWVsZE9wdGlvbklkID0gKGZpZWxkOiBJVGVtcGxhdGVGaWVsZCB8IElEb2N1bWVudEZpZWxkLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gIHJldHVybiBgdmVyZG9jcy1kb2MtZmxkLSR7ZmllbGQubmFtZX0tJHtpbmRleH1gO1xufTtcblxuaW50ZXJmYWNlIElGaWVsZE9wdGlvbnMge1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGVkaXRhYmxlPzogYm9vbGVhbjtcbiAgZHJhZ2dhYmxlPzogYm9vbGVhbjtcbiAgZG9uZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCByZW5kZXJEb2N1bWVudEZpZWxkID0gKGZpZWxkOiBJVGVtcGxhdGVGaWVsZCB8IElEb2N1bWVudEZpZWxkLCBkb2NQYWdlOiBJRG9jdW1lbnRQYWdlSW5mbywgcm9sZUluZGV4OiBudW1iZXIsIGZpZWxkT3B0aW9uczogSUZpZWxkT3B0aW9ucykgPT4ge1xuICBjb25zdCB7ZGlzYWJsZWQgPSBmYWxzZSwgZWRpdGFibGUgPSBmYWxzZSwgZHJhZ2dhYmxlID0gZmFsc2UsIGRvbmUgPSBmYWxzZX0gPSBmaWVsZE9wdGlvbnM7XG4gIGNvbnN0IGNvbnRyb2xzRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZG9jUGFnZS5jb250YWluZXJJZCArICctY29udHJvbHMnKTtcbiAgaWYgKCFjb250cm9sc0Rpdikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgIGNhc2UgJ2F0dGFjaG1lbnQnOlxuICAgIGNhc2UgJ2RhdGUnOlxuICAgIGNhc2UgJ2Ryb3Bkb3duJzpcbiAgICBjYXNlICdpbml0aWFsJzpcbiAgICBjYXNlICdwYXltZW50JzpcbiAgICBjYXNlICdzaWduYXR1cmUnOlxuICAgIGNhc2UgJ3RpbWVzdGFtcCc6XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgIGNhc2UgJ3RleHRib3gnOiB7XG4gICAgICBjb25zdCBpZCA9IGdldEZpZWxkSWQoZmllbGQpO1xuICAgICAgY29uc3QgZXhpc3RpbmdGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICAgIGlmIChleGlzdGluZ0ZpZWxkKSB7XG4gICAgICAgIHNldENvbnRyb2xTdHlsZXMoZXhpc3RpbmdGaWVsZCwgZmllbGQsIGRvY1BhZ2UueFNjYWxlLCBkb2NQYWdlLnlTY2FsZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZWw6IGFueSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYHZlcmRvY3MtZmllbGQtJHtmaWVsZC50eXBlfWApO1xuICAgICAgZWwuZmllbGQgPSBmaWVsZDtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JvbGVJbmRleCcsIHJvbGVJbmRleCk7XG5cbiAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgLTEpO1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgMSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlZGl0YWJsZSkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2VkaXRhYmxlJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkcmFnZ2FibGUpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkb25lJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHNldENvbnRyb2xTdHlsZXMoZWwsIGZpZWxkLCBkb2NQYWdlLnhTY2FsZSwgZG9jUGFnZS55U2NhbGUpO1xuICAgICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQoZWwpO1xuXG4gICAgICByZXR1cm4gZWw7XG4gICAgfVxuXG4gICAgY2FzZSAnY2hlY2tib3hfZ3JvdXAnOlxuICAgICAgcmV0dXJuICgoZmllbGQgYXMgYW55KS5zZXR0aW5ncyB8fCAoZmllbGQgYXMgYW55KS5zZXR0aW5nIHx8IHt9KS5vcHRpb25zLm1hcCgoXywgY2hlY2tib3hJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IGdldEZpZWxkT3B0aW9uSWQoZmllbGQsIGNoZWNrYm94SW5kZXgpO1xuICAgICAgICBjb25zdCBleGlzdGluZ0ZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgICBpZiAoZXhpc3RpbmdGaWVsZCkge1xuICAgICAgICAgIHNldENvbnRyb2xTdHlsZXMoZXhpc3RpbmdGaWVsZCwgZmllbGQsIGRvY1BhZ2UueFNjYWxlLCBkb2NQYWdlLnlTY2FsZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2JFbDogYW55ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgdmVyZG9jcy1maWVsZC1jaGVja2JveGApO1xuICAgICAgICBjYkVsLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIGNiRWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgY2JFbC5zZXRBdHRyaWJ1dGUoJ3JvbGVJbmRleCcsIHJvbGVJbmRleCk7XG4gICAgICAgIGNiRWwuc2V0QXR0cmlidXRlKCdvcHRpb24nLCBjaGVja2JveEluZGV4KTtcbiAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgY2JFbC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICBjYkVsLnNldEF0dHJpYnV0ZSgnZG9uZScsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHNldENvbnRyb2xTdHlsZXMoY2JFbCwgZmllbGQsIGRvY1BhZ2UueFNjYWxlLCBkb2NQYWdlLnlTY2FsZSwgY2hlY2tib3hJbmRleCk7XG4gICAgICAgIGNvbnRyb2xzRGl2LmFwcGVuZENoaWxkKGNiRWwpO1xuXG4gICAgICAgIHJldHVybiBjYkVsO1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdyYWRpb19idXR0b25fZ3JvdXAnOlxuICAgICAgcmV0dXJuICgoZmllbGQgYXMgYW55KS5zZXR0aW5ncyB8fCAoZmllbGQgYXMgYW55KS5zZXR0aW5nIHx8IHt9KS5vcHRpb25zLm1hcCgoXywgYnV0dG9uSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBnZXRGaWVsZE9wdGlvbklkKGZpZWxkLCBidXR0b25JbmRleCk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgIGlmIChleGlzdGluZ0ZpZWxkKSB7XG4gICAgICAgICAgc2V0Q29udHJvbFN0eWxlcyhleGlzdGluZ0ZpZWxkLCBmaWVsZCwgZG9jUGFnZS54U2NhbGUsIGRvY1BhZ2UueVNjYWxlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByYWRpb0VsOiBhbnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGB2ZXJkb2NzLWZpZWxkLXJhZGlvLWJ1dHRvbmApO1xuICAgICAgICByYWRpb0VsLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHJhZGlvRWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgcmFkaW9FbC5zZXRBdHRyaWJ1dGUoJ3JvbGVJbmRleCcsIHJvbGVJbmRleCk7XG4gICAgICAgIHJhZGlvRWwuc2V0QXR0cmlidXRlKCdvcHRpb24nLCBidXR0b25JbmRleCk7XG4gICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgIHJhZGlvRWwuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgcmFkaW9FbC5zZXRBdHRyaWJ1dGUoJ2RvbmUnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRDb250cm9sU3R5bGVzKHJhZGlvRWwsIGZpZWxkLCBkb2NQYWdlLnhTY2FsZSwgZG9jUGFnZS55U2NhbGUsIGJ1dHRvbkluZGV4KTtcbiAgICAgICAgY29udHJvbHNEaXYuYXBwZW5kQ2hpbGQocmFkaW9FbCk7XG5cbiAgICAgICAgcmV0dXJuIHJhZGlvRWw7XG4gICAgICB9KTtcblxuICAgIC8vIGNhc2UgJ2F0dGFjaG1lbnQnOlxuICAgIC8vICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2ZXJkb2NzLWZpZWxkLWF0dGFjaG1lbnQnKTtcbiAgICAvLyAgIGVsLnNldEF0dHJpYnV0ZSgndmFsdWUnLCByZXN1bHQgfHwgJycpO1xuICAgIC8vICAgYnJlYWs7XG4gICAgLy8gY2FzZSAncGF5bWVudCc6XG4gICAgLy8gICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZlcmRvY3MtZmllbGQtcGF5bWVudCcpO1xuICAgIC8vICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnNvbGUubG9nKCdbUFJFVklFV10gU2tpcHBpbmcgdW5zdXBwb3J0ZWQgZmllbGQgdHlwZScsIGZpZWxkKTtcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Um9sZUluZGV4ID0gKHJvbGVzOiBzdHJpbmdbXSwgcm9sZTogc3RyaW5nKSA9PiByb2xlcy5pbmRleE9mKHJvbGUpIHx8IDA7XG5cbi8vIFRPRE86IFdlIGNhbiBjbGVhbiB0aGlzIHVwIGEgbG90IGlmIHdlIGFsdGVyIHRoZSBBUEkgdG8gZW1pdCBib3RoIHNldHRpbmcgYW5kIHNldHRpbmdzIHJlZ2FyZGxlc3Mgb2YgdGhlIHNvdXJjZSB0eXBlLFxuLy8gICBidXQgdGhlbiBtZXJnZSB0aGUgU0RLIHR5cGVzIHRvIGVuY291cmFnZSBkZXZlbG9wZXJzIHRvIHVzZSBqdXN0IGBzZXR0aW5nc2AuXG5leHBvcnQgY29uc3QgZ2V0RmllbGRTZXR0aW5ncyA9IChmaWVsZDogSVRlbXBsYXRlRmllbGQgfCBJRG9jdW1lbnRGaWVsZCkgPT4ge1xuICBpZiAoKGZpZWxkIGFzIElUZW1wbGF0ZUZpZWxkKS5zZXR0aW5nKSB7XG4gICAgcmV0dXJuIChmaWVsZCBhcyBJVGVtcGxhdGVGaWVsZCkuc2V0dGluZztcbiAgfVxuXG4gIGlmICgoZmllbGQgYXMgSURvY3VtZW50RmllbGQpLnNldHRpbmdzKSB7XG4gICAgcmV0dXJuIChmaWVsZCBhcyBJRG9jdW1lbnRGaWVsZCkuc2V0dGluZ3M7XG4gIH1cblxuICByZXR1cm4ge3g6IDAsIHk6IDAsIHJlcXVpcmVkOiBmYWxzZSwgZGlzYWJsZWQ6IGZhbHNlLCByZXN1bHQ6ICcnLCB2YWx1ZTogJyd9O1xufTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gc2FmZWx5IHNldC91cGRhdGUgY29tcG9uZW50cyBpbiBhIENTUyB0cmFuc2Zvcm0gYXR0cmlidXRlLiBUcmFuc2Zvcm0gaXMgbm9ybWFsbHkgc2V0IGFzIGEgc3RyaW5nIG9mXG4gKiBgb3BlcmF0aW9uMShwYXJhbSkgb3BlcmF0aW9uMihwYXJhbSkgLi4uYCBjb21wb25lbnRzLCB3aGljaCBtYWtlcyB1cGRhdGluZyB0aGVtIGEgYml0IG9mIGEgcGFpbi4gVGhpcyB3aWxsIHJlbW92ZSB0aGVcbiAqIHNwZWNpZmllZCBjb21wb25lbnQgaWYgaXQncyBhbHJlYWR5IHNldCBhbmQgcmVwbGFjZSBpdCB3aXRoIHRoZSBuZXcgdmFsdWUsIHdpdGhvdXQgdG91Y2hpbmcgdGhlIG90aGVyIGNvbXBvbmVudHMgdGhhdFxuICogbWF5IGFscmVhZHkgYmUgc2V0LiBOb3RlIHRoYXQgdGhpcyBvcGVyYXRpb24gbW92ZXMgdGhlIGNvbXBvbmVudCB0byB0aGUgZW5kIG9mIHRoZSB0cmFuc2Zvcm0gY2hhaW4gc28gaXQncyBub3QgbWVhbnRcbiAqIHRvIGJlIHVzZWQgZm9yIG9yZGVyLXNlbnNpdGl2ZSBjb21wb25lbnRzIGUuZy4gdHJhbnNsYXRlLXRoZW4tcm90YXRlLlxuICovXG5leHBvcnQgY29uc3QgdXBkYXRlQ3NzVHJhbnNmb3JtID0gKGVsOiBIVE1MRWxlbWVudCwga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgLy8gZS5nLiAnc2NhbGUoMS44NzkwOCwgMS44NzkwOCkgdHJhbnNsYXRlKDBweCwgMHB4KTsnXG4gIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBlbC5zdHlsZS50cmFuc2Zvcm07XG4gIC8vIGUuZy4gWydzY2FsZSgxLjg3OTA4LCAxLjg3OTA4KScsICdzY2FsZScsICcxLjg3OTA4LCAxLjg3OTA4JywgLi4uXSwgWyAndHJhbnNsYXRlKDBweCwgMHB4KScsICd0cmFuc2xhdGUnLCAnMHB4LCAwcHgnXV1cbiAgY29uc3QgY29tcG9uZW50cyA9IFsuLi5jdXJyZW50VHJhbnNmb3JtLm1hdGNoQWxsKC8oXFx3KylcXCgoW14pXSopXFwpL2dpKV07XG4gIGVsLnN0eWxlLnRyYW5zZm9ybSA9IFtcbiAgICBjb21wb25lbnRzIC8vXG4gICAgICAuZmlsdGVyKGNvbXBvbmVudCA9PiBjb21wb25lbnRbMV0gIT09IGtleSkgLy8gUmVtb3ZlIHRoZSBlbnRyeSBpZiBpdCdzIGFscmVhZHkgc2V0XG4gICAgICAubWFwKGNvbXBvbmVudCA9PiBjb21wb25lbnRbMF0pLCAvLyBDb252ZXJ0IGJhY2sgdGhlIHJlbWFpbmluZyBlbnRyaWVzXG4gICAgYCR7a2V5fSgke3ZhbHVlfSlgLFxuICBdLmpvaW4oJyAnKTtcbn07XG4iLCJleHBvcnQgdmFyIEhPT0tTID0gW1xuICAgIFwib25DaGFuZ2VcIixcbiAgICBcIm9uQ2xvc2VcIixcbiAgICBcIm9uRGF5Q3JlYXRlXCIsXG4gICAgXCJvbkRlc3Ryb3lcIixcbiAgICBcIm9uS2V5RG93blwiLFxuICAgIFwib25Nb250aENoYW5nZVwiLFxuICAgIFwib25PcGVuXCIsXG4gICAgXCJvblBhcnNlQ29uZmlnXCIsXG4gICAgXCJvblJlYWR5XCIsXG4gICAgXCJvblZhbHVlVXBkYXRlXCIsXG4gICAgXCJvblllYXJDaGFuZ2VcIixcbiAgICBcIm9uUHJlQ2FsZW5kYXJQb3NpdGlvblwiLFxuXTtcbmV4cG9ydCB2YXIgZGVmYXVsdHMgPSB7XG4gICAgX2Rpc2FibGU6IFtdLFxuICAgIGFsbG93SW5wdXQ6IGZhbHNlLFxuICAgIGFsbG93SW52YWxpZFByZWxvYWQ6IGZhbHNlLFxuICAgIGFsdEZvcm1hdDogXCJGIGosIFlcIixcbiAgICBhbHRJbnB1dDogZmFsc2UsXG4gICAgYWx0SW5wdXRDbGFzczogXCJmb3JtLWNvbnRyb2wgaW5wdXRcIixcbiAgICBhbmltYXRlOiB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJNU0lFXCIpID09PSAtMSxcbiAgICBhcmlhRGF0ZUZvcm1hdDogXCJGIGosIFlcIixcbiAgICBhdXRvRmlsbERlZmF1bHRUaW1lOiB0cnVlLFxuICAgIGNsaWNrT3BlbnM6IHRydWUsXG4gICAgY2xvc2VPblNlbGVjdDogdHJ1ZSxcbiAgICBjb25qdW5jdGlvbjogXCIsIFwiLFxuICAgIGRhdGVGb3JtYXQ6IFwiWS1tLWRcIixcbiAgICBkZWZhdWx0SG91cjogMTIsXG4gICAgZGVmYXVsdE1pbnV0ZTogMCxcbiAgICBkZWZhdWx0U2Vjb25kczogMCxcbiAgICBkaXNhYmxlOiBbXSxcbiAgICBkaXNhYmxlTW9iaWxlOiBmYWxzZSxcbiAgICBlbmFibGVTZWNvbmRzOiBmYWxzZSxcbiAgICBlbmFibGVUaW1lOiBmYWxzZSxcbiAgICBlcnJvckhhbmRsZXI6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2FybihlcnIpO1xuICAgIH0sXG4gICAgZ2V0V2VlazogZnVuY3Rpb24gKGdpdmVuRGF0ZSkge1xuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGdpdmVuRGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAzIC0gKChkYXRlLmdldERheSgpICsgNikgJSA3KSk7XG4gICAgICAgIHZhciB3ZWVrMSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgNCk7XG4gICAgICAgIHJldHVybiAoMSArXG4gICAgICAgICAgICBNYXRoLnJvdW5kKCgoZGF0ZS5nZXRUaW1lKCkgLSB3ZWVrMS5nZXRUaW1lKCkpIC8gODY0MDAwMDAgLVxuICAgICAgICAgICAgICAgIDMgK1xuICAgICAgICAgICAgICAgICgod2VlazEuZ2V0RGF5KCkgKyA2KSAlIDcpKSAvXG4gICAgICAgICAgICAgICAgNykpO1xuICAgIH0sXG4gICAgaG91ckluY3JlbWVudDogMSxcbiAgICBpZ25vcmVkRm9jdXNFbGVtZW50czogW10sXG4gICAgaW5saW5lOiBmYWxzZSxcbiAgICBsb2NhbGU6IFwiZGVmYXVsdFwiLFxuICAgIG1pbnV0ZUluY3JlbWVudDogNSxcbiAgICBtb2RlOiBcInNpbmdsZVwiLFxuICAgIG1vbnRoU2VsZWN0b3JUeXBlOiBcImRyb3Bkb3duXCIsXG4gICAgbmV4dEFycm93OiBcIjxzdmcgdmVyc2lvbj0nMS4xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB2aWV3Qm94PScwIDAgMTcgMTcnPjxnPjwvZz48cGF0aCBkPSdNMTMuMjA3IDguNDcybC03Ljg1NCA3Ljg1NC0wLjcwNy0wLjcwNyA3LjE0Ni03LjE0Ni03LjE0Ni03LjE0OCAwLjcwNy0wLjcwNyA3Ljg1NCA3Ljg1NHonIC8+PC9zdmc+XCIsXG4gICAgbm9DYWxlbmRhcjogZmFsc2UsXG4gICAgbm93OiBuZXcgRGF0ZSgpLFxuICAgIG9uQ2hhbmdlOiBbXSxcbiAgICBvbkNsb3NlOiBbXSxcbiAgICBvbkRheUNyZWF0ZTogW10sXG4gICAgb25EZXN0cm95OiBbXSxcbiAgICBvbktleURvd246IFtdLFxuICAgIG9uTW9udGhDaGFuZ2U6IFtdLFxuICAgIG9uT3BlbjogW10sXG4gICAgb25QYXJzZUNvbmZpZzogW10sXG4gICAgb25SZWFkeTogW10sXG4gICAgb25WYWx1ZVVwZGF0ZTogW10sXG4gICAgb25ZZWFyQ2hhbmdlOiBbXSxcbiAgICBvblByZUNhbGVuZGFyUG9zaXRpb246IFtdLFxuICAgIHBsdWdpbnM6IFtdLFxuICAgIHBvc2l0aW9uOiBcImF1dG9cIixcbiAgICBwb3NpdGlvbkVsZW1lbnQ6IHVuZGVmaW5lZCxcbiAgICBwcmV2QXJyb3c6IFwiPHN2ZyB2ZXJzaW9uPScxLjEnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnIHZpZXdCb3g9JzAgMCAxNyAxNyc+PGc+PC9nPjxwYXRoIGQ9J001LjIwNyA4LjQ3MWw3LjE0NiA3LjE0Ny0wLjcwNyAwLjcwNy03Ljg1My03Ljg1NCA3Ljg1NC03Ljg1MyAwLjcwNyAwLjcwNy03LjE0NyA3LjE0NnonIC8+PC9zdmc+XCIsXG4gICAgc2hvcnRoYW5kQ3VycmVudE1vbnRoOiBmYWxzZSxcbiAgICBzaG93TW9udGhzOiAxLFxuICAgIHN0YXRpYzogZmFsc2UsXG4gICAgdGltZV8yNGhyOiBmYWxzZSxcbiAgICB3ZWVrTnVtYmVyczogZmFsc2UsXG4gICAgd3JhcDogZmFsc2UsXG59O1xuIiwiZXhwb3J0IHZhciBlbmdsaXNoID0ge1xuICAgIHdlZWtkYXlzOiB7XG4gICAgICAgIHNob3J0aGFuZDogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICAgICAgICBsb25naGFuZDogW1xuICAgICAgICAgICAgXCJTdW5kYXlcIixcbiAgICAgICAgICAgIFwiTW9uZGF5XCIsXG4gICAgICAgICAgICBcIlR1ZXNkYXlcIixcbiAgICAgICAgICAgIFwiV2VkbmVzZGF5XCIsXG4gICAgICAgICAgICBcIlRodXJzZGF5XCIsXG4gICAgICAgICAgICBcIkZyaWRheVwiLFxuICAgICAgICAgICAgXCJTYXR1cmRheVwiLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbW9udGhzOiB7XG4gICAgICAgIHNob3J0aGFuZDogW1xuICAgICAgICAgICAgXCJKYW5cIixcbiAgICAgICAgICAgIFwiRmViXCIsXG4gICAgICAgICAgICBcIk1hclwiLFxuICAgICAgICAgICAgXCJBcHJcIixcbiAgICAgICAgICAgIFwiTWF5XCIsXG4gICAgICAgICAgICBcIkp1blwiLFxuICAgICAgICAgICAgXCJKdWxcIixcbiAgICAgICAgICAgIFwiQXVnXCIsXG4gICAgICAgICAgICBcIlNlcFwiLFxuICAgICAgICAgICAgXCJPY3RcIixcbiAgICAgICAgICAgIFwiTm92XCIsXG4gICAgICAgICAgICBcIkRlY1wiLFxuICAgICAgICBdLFxuICAgICAgICBsb25naGFuZDogW1xuICAgICAgICAgICAgXCJKYW51YXJ5XCIsXG4gICAgICAgICAgICBcIkZlYnJ1YXJ5XCIsXG4gICAgICAgICAgICBcIk1hcmNoXCIsXG4gICAgICAgICAgICBcIkFwcmlsXCIsXG4gICAgICAgICAgICBcIk1heVwiLFxuICAgICAgICAgICAgXCJKdW5lXCIsXG4gICAgICAgICAgICBcIkp1bHlcIixcbiAgICAgICAgICAgIFwiQXVndXN0XCIsXG4gICAgICAgICAgICBcIlNlcHRlbWJlclwiLFxuICAgICAgICAgICAgXCJPY3RvYmVyXCIsXG4gICAgICAgICAgICBcIk5vdmVtYmVyXCIsXG4gICAgICAgICAgICBcIkRlY2VtYmVyXCIsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBkYXlzSW5Nb250aDogWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdLFxuICAgIGZpcnN0RGF5T2ZXZWVrOiAwLFxuICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudGgpIHtcbiAgICAgICAgdmFyIHMgPSBudGggJSAxMDA7XG4gICAgICAgIGlmIChzID4gMyAmJiBzIDwgMjEpXG4gICAgICAgICAgICByZXR1cm4gXCJ0aFwiO1xuICAgICAgICBzd2l0Y2ggKHMgJSAxMCkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBcInN0XCI7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibmRcIjtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJyZFwiO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ0aFwiO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByYW5nZVNlcGFyYXRvcjogXCIgdG8gXCIsXG4gICAgd2Vla0FiYnJldmlhdGlvbjogXCJXa1wiLFxuICAgIHNjcm9sbFRpdGxlOiBcIlNjcm9sbCB0byBpbmNyZW1lbnRcIixcbiAgICB0b2dnbGVUaXRsZTogXCJDbGljayB0byB0b2dnbGVcIixcbiAgICBhbVBNOiBbXCJBTVwiLCBcIlBNXCJdLFxuICAgIHllYXJBcmlhTGFiZWw6IFwiWWVhclwiLFxuICAgIG1vbnRoQXJpYUxhYmVsOiBcIk1vbnRoXCIsXG4gICAgaG91ckFyaWFMYWJlbDogXCJIb3VyXCIsXG4gICAgbWludXRlQXJpYUxhYmVsOiBcIk1pbnV0ZVwiLFxuICAgIHRpbWVfMjRocjogZmFsc2UsXG59O1xuZXhwb3J0IGRlZmF1bHQgZW5nbGlzaDtcbiIsImV4cG9ydCB2YXIgcGFkID0gZnVuY3Rpb24gKG51bWJlciwgbGVuZ3RoKSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7IGxlbmd0aCA9IDI7IH1cbiAgICByZXR1cm4gKFwiMDAwXCIgKyBudW1iZXIpLnNsaWNlKGxlbmd0aCAqIC0xKTtcbn07XG5leHBvcnQgdmFyIGludCA9IGZ1bmN0aW9uIChib29sKSB7IHJldHVybiAoYm9vbCA9PT0gdHJ1ZSA/IDEgOiAwKTsgfTtcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmbiwgd2FpdCkge1xuICAgIHZhciB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBjbGVhclRpbWVvdXQodCk7XG4gICAgICAgIHQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZuLmFwcGx5KF90aGlzLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfTtcbn1cbmV4cG9ydCB2YXIgYXJyYXlpZnkgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFycmF5ID8gb2JqIDogW29ial07XG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsZW0sIGNsYXNzTmFtZSwgYm9vbCkge1xuICAgIGlmIChib29sID09PSB0cnVlKVxuICAgICAgICByZXR1cm4gZWxlbS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcsIGNsYXNzTmFtZSwgY29udGVudCkge1xuICAgIHZhciBlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgfHwgXCJcIjtcbiAgICBjb250ZW50ID0gY29udGVudCB8fCBcIlwiO1xuICAgIGUuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgIGlmIChjb250ZW50ICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGUudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICAgIHJldHVybiBlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyTm9kZShub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUuZmlyc3RDaGlsZClcbiAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmZpcnN0Q2hpbGQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRQYXJlbnQobm9kZSwgY29uZGl0aW9uKSB7XG4gICAgaWYgKGNvbmRpdGlvbihub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlKVxuICAgICAgICByZXR1cm4gZmluZFBhcmVudChub2RlLnBhcmVudE5vZGUsIGNvbmRpdGlvbik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOdW1iZXJJbnB1dChpbnB1dENsYXNzTmFtZSwgb3B0cykge1xuICAgIHZhciB3cmFwcGVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcIm51bUlucHV0V3JhcHBlclwiKSwgbnVtSW5wdXQgPSBjcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgXCJudW1JbnB1dCBcIiArIGlucHV0Q2xhc3NOYW1lKSwgYXJyb3dVcCA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiYXJyb3dVcFwiKSwgYXJyb3dEb3duID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJhcnJvd0Rvd25cIik7XG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIk1TSUUgOS4wXCIpID09PSAtMSkge1xuICAgICAgICBudW1JbnB1dC50eXBlID0gXCJudW1iZXJcIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG51bUlucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgbnVtSW5wdXQucGF0dGVybiA9IFwiXFxcXGQqXCI7XG4gICAgfVxuICAgIGlmIChvcHRzICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRzKVxuICAgICAgICAgICAgbnVtSW5wdXQuc2V0QXR0cmlidXRlKGtleSwgb3B0c1trZXldKTtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKG51bUlucHV0KTtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGFycm93VXApO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoYXJyb3dEb3duKTtcbiAgICByZXR1cm4gd3JhcHBlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudFRhcmdldChldmVudCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnQuY29tcG9zZWRQYXRoID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciBwYXRoID0gZXZlbnQuY29tcG9zZWRQYXRoKCk7XG4gICAgICAgICAgICByZXR1cm4gcGF0aFswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnQudGFyZ2V0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBpbnQsIHBhZCB9IGZyb20gXCIuLi91dGlsc1wiO1xudmFyIGRvTm90aGluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfTtcbmV4cG9ydCB2YXIgbW9udGhUb1N0ciA9IGZ1bmN0aW9uIChtb250aE51bWJlciwgc2hvcnRoYW5kLCBsb2NhbGUpIHsgcmV0dXJuIGxvY2FsZS5tb250aHNbc2hvcnRoYW5kID8gXCJzaG9ydGhhbmRcIiA6IFwibG9uZ2hhbmRcIl1bbW9udGhOdW1iZXJdOyB9O1xuZXhwb3J0IHZhciByZXZGb3JtYXQgPSB7XG4gICAgRDogZG9Ob3RoaW5nLFxuICAgIEY6IGZ1bmN0aW9uIChkYXRlT2JqLCBtb250aE5hbWUsIGxvY2FsZSkge1xuICAgICAgICBkYXRlT2JqLnNldE1vbnRoKGxvY2FsZS5tb250aHMubG9uZ2hhbmQuaW5kZXhPZihtb250aE5hbWUpKTtcbiAgICB9LFxuICAgIEc6IGZ1bmN0aW9uIChkYXRlT2JqLCBob3VyKSB7XG4gICAgICAgIGRhdGVPYmouc2V0SG91cnMoKGRhdGVPYmouZ2V0SG91cnMoKSA+PSAxMiA/IDEyIDogMCkgKyBwYXJzZUZsb2F0KGhvdXIpKTtcbiAgICB9LFxuICAgIEg6IGZ1bmN0aW9uIChkYXRlT2JqLCBob3VyKSB7XG4gICAgICAgIGRhdGVPYmouc2V0SG91cnMocGFyc2VGbG9hdChob3VyKSk7XG4gICAgfSxcbiAgICBKOiBmdW5jdGlvbiAoZGF0ZU9iaiwgZGF5KSB7XG4gICAgICAgIGRhdGVPYmouc2V0RGF0ZShwYXJzZUZsb2F0KGRheSkpO1xuICAgIH0sXG4gICAgSzogZnVuY3Rpb24gKGRhdGVPYmosIGFtUE0sIGxvY2FsZSkge1xuICAgICAgICBkYXRlT2JqLnNldEhvdXJzKChkYXRlT2JqLmdldEhvdXJzKCkgJSAxMikgK1xuICAgICAgICAgICAgMTIgKiBpbnQobmV3IFJlZ0V4cChsb2NhbGUuYW1QTVsxXSwgXCJpXCIpLnRlc3QoYW1QTSkpKTtcbiAgICB9LFxuICAgIE06IGZ1bmN0aW9uIChkYXRlT2JqLCBzaG9ydE1vbnRoLCBsb2NhbGUpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRNb250aChsb2NhbGUubW9udGhzLnNob3J0aGFuZC5pbmRleE9mKHNob3J0TW9udGgpKTtcbiAgICB9LFxuICAgIFM6IGZ1bmN0aW9uIChkYXRlT2JqLCBzZWNvbmRzKSB7XG4gICAgICAgIGRhdGVPYmouc2V0U2Vjb25kcyhwYXJzZUZsb2F0KHNlY29uZHMpKTtcbiAgICB9LFxuICAgIFU6IGZ1bmN0aW9uIChfLCB1bml4U2Vjb25kcykgeyByZXR1cm4gbmV3IERhdGUocGFyc2VGbG9hdCh1bml4U2Vjb25kcykgKiAxMDAwKTsgfSxcbiAgICBXOiBmdW5jdGlvbiAoZGF0ZU9iaiwgd2Vla051bSwgbG9jYWxlKSB7XG4gICAgICAgIHZhciB3ZWVrTnVtYmVyID0gcGFyc2VJbnQod2Vla051bSk7XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoZGF0ZU9iai5nZXRGdWxsWWVhcigpLCAwLCAyICsgKHdlZWtOdW1iZXIgLSAxKSAqIDcsIDAsIDAsIDAsIDApO1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSBkYXRlLmdldERheSgpICsgbG9jYWxlLmZpcnN0RGF5T2ZXZWVrKTtcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBZOiBmdW5jdGlvbiAoZGF0ZU9iaiwgeWVhcikge1xuICAgICAgICBkYXRlT2JqLnNldEZ1bGxZZWFyKHBhcnNlRmxvYXQoeWVhcikpO1xuICAgIH0sXG4gICAgWjogZnVuY3Rpb24gKF8sIElTT0RhdGUpIHsgcmV0dXJuIG5ldyBEYXRlKElTT0RhdGUpOyB9LFxuICAgIGQ6IGZ1bmN0aW9uIChkYXRlT2JqLCBkYXkpIHtcbiAgICAgICAgZGF0ZU9iai5zZXREYXRlKHBhcnNlRmxvYXQoZGF5KSk7XG4gICAgfSxcbiAgICBoOiBmdW5jdGlvbiAoZGF0ZU9iaiwgaG91cikge1xuICAgICAgICBkYXRlT2JqLnNldEhvdXJzKChkYXRlT2JqLmdldEhvdXJzKCkgPj0gMTIgPyAxMiA6IDApICsgcGFyc2VGbG9hdChob3VyKSk7XG4gICAgfSxcbiAgICBpOiBmdW5jdGlvbiAoZGF0ZU9iaiwgbWludXRlcykge1xuICAgICAgICBkYXRlT2JqLnNldE1pbnV0ZXMocGFyc2VGbG9hdChtaW51dGVzKSk7XG4gICAgfSxcbiAgICBqOiBmdW5jdGlvbiAoZGF0ZU9iaiwgZGF5KSB7XG4gICAgICAgIGRhdGVPYmouc2V0RGF0ZShwYXJzZUZsb2F0KGRheSkpO1xuICAgIH0sXG4gICAgbDogZG9Ob3RoaW5nLFxuICAgIG06IGZ1bmN0aW9uIChkYXRlT2JqLCBtb250aCkge1xuICAgICAgICBkYXRlT2JqLnNldE1vbnRoKHBhcnNlRmxvYXQobW9udGgpIC0gMSk7XG4gICAgfSxcbiAgICBuOiBmdW5jdGlvbiAoZGF0ZU9iaiwgbW9udGgpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRNb250aChwYXJzZUZsb2F0KG1vbnRoKSAtIDEpO1xuICAgIH0sXG4gICAgczogZnVuY3Rpb24gKGRhdGVPYmosIHNlY29uZHMpIHtcbiAgICAgICAgZGF0ZU9iai5zZXRTZWNvbmRzKHBhcnNlRmxvYXQoc2Vjb25kcykpO1xuICAgIH0sXG4gICAgdTogZnVuY3Rpb24gKF8sIHVuaXhNaWxsU2Vjb25kcykge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUocGFyc2VGbG9hdCh1bml4TWlsbFNlY29uZHMpKTtcbiAgICB9LFxuICAgIHc6IGRvTm90aGluZyxcbiAgICB5OiBmdW5jdGlvbiAoZGF0ZU9iaiwgeWVhcikge1xuICAgICAgICBkYXRlT2JqLnNldEZ1bGxZZWFyKDIwMDAgKyBwYXJzZUZsb2F0KHllYXIpKTtcbiAgICB9LFxufTtcbmV4cG9ydCB2YXIgdG9rZW5SZWdleCA9IHtcbiAgICBEOiBcIlwiLFxuICAgIEY6IFwiXCIsXG4gICAgRzogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICBIOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgIEo6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXFxcXHcrXCIsXG4gICAgSzogXCJcIixcbiAgICBNOiBcIlwiLFxuICAgIFM6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgVTogXCIoLispXCIsXG4gICAgVzogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICBZOiBcIihcXFxcZHs0fSlcIixcbiAgICBaOiBcIiguKylcIixcbiAgICBkOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgIGg6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgaTogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICBqOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgIGw6IFwiXCIsXG4gICAgbTogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICBuOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgIHM6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgdTogXCIoLispXCIsXG4gICAgdzogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICB5OiBcIihcXFxcZHsyfSlcIixcbn07XG5leHBvcnQgdmFyIGZvcm1hdHMgPSB7XG4gICAgWjogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTsgfSxcbiAgICBEOiBmdW5jdGlvbiAoZGF0ZSwgbG9jYWxlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXMuc2hvcnRoYW5kW2Zvcm1hdHMudyhkYXRlLCBsb2NhbGUsIG9wdGlvbnMpXTtcbiAgICB9LFxuICAgIEY6IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG1vbnRoVG9TdHIoZm9ybWF0cy5uKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykgLSAxLCBmYWxzZSwgbG9jYWxlKTtcbiAgICB9LFxuICAgIEc6IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHBhZChmb3JtYXRzLmgoZGF0ZSwgbG9jYWxlLCBvcHRpb25zKSk7XG4gICAgfSxcbiAgICBIOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0SG91cnMoKSk7IH0sXG4gICAgSjogZnVuY3Rpb24gKGRhdGUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm9yZGluYWwgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBkYXRlLmdldERhdGUoKSArIGxvY2FsZS5vcmRpbmFsKGRhdGUuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgOiBkYXRlLmdldERhdGUoKTtcbiAgICB9LFxuICAgIEs6IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUpIHsgcmV0dXJuIGxvY2FsZS5hbVBNW2ludChkYXRlLmdldEhvdXJzKCkgPiAxMSldOyB9LFxuICAgIE06IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIG1vbnRoVG9TdHIoZGF0ZS5nZXRNb250aCgpLCB0cnVlLCBsb2NhbGUpO1xuICAgIH0sXG4gICAgUzogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHBhZChkYXRlLmdldFNlY29uZHMoKSk7IH0sXG4gICAgVTogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC8gMTAwMDsgfSxcbiAgICBXOiBmdW5jdGlvbiAoZGF0ZSwgXywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5nZXRXZWVrKGRhdGUpO1xuICAgIH0sXG4gICAgWTogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHBhZChkYXRlLmdldEZ1bGxZZWFyKCksIDQpOyB9LFxuICAgIGQ6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBwYWQoZGF0ZS5nZXREYXRlKCkpOyB9LFxuICAgIGg6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiAoZGF0ZS5nZXRIb3VycygpICUgMTIgPyBkYXRlLmdldEhvdXJzKCkgJSAxMiA6IDEyKTsgfSxcbiAgICBpOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0TWludXRlcygpKTsgfSxcbiAgICBqOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXREYXRlKCk7IH0sXG4gICAgbDogZnVuY3Rpb24gKGRhdGUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzLmxvbmdoYW5kW2RhdGUuZ2V0RGF5KCldO1xuICAgIH0sXG4gICAgbTogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHBhZChkYXRlLmdldE1vbnRoKCkgKyAxKTsgfSxcbiAgICBuOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXRNb250aCgpICsgMTsgfSxcbiAgICBzOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXRTZWNvbmRzKCk7IH0sXG4gICAgdTogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0VGltZSgpOyB9LFxuICAgIHc6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBkYXRlLmdldERheSgpOyB9LFxuICAgIHk6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBTdHJpbmcoZGF0ZS5nZXRGdWxsWWVhcigpKS5zdWJzdHJpbmcoMik7IH0sXG59O1xuIiwiaW1wb3J0IHsgdG9rZW5SZWdleCwgcmV2Rm9ybWF0LCBmb3JtYXRzLCB9IGZyb20gXCIuL2Zvcm1hdHRpbmdcIjtcbmltcG9ydCB7IGRlZmF1bHRzIH0gZnJvbSBcIi4uL3R5cGVzL29wdGlvbnNcIjtcbmltcG9ydCB7IGVuZ2xpc2ggfSBmcm9tIFwiLi4vbDEwbi9kZWZhdWx0XCI7XG5leHBvcnQgdmFyIGNyZWF0ZURhdGVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5jb25maWcsIGNvbmZpZyA9IF9iID09PSB2b2lkIDAgPyBkZWZhdWx0cyA6IF9iLCBfYyA9IF9hLmwxMG4sIGwxMG4gPSBfYyA9PT0gdm9pZCAwID8gZW5nbGlzaCA6IF9jLCBfZCA9IF9hLmlzTW9iaWxlLCBpc01vYmlsZSA9IF9kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9kO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZU9iaiwgZnJtdCwgb3ZlcnJpZGVMb2NhbGUpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IG92ZXJyaWRlTG9jYWxlIHx8IGwxMG47XG4gICAgICAgIGlmIChjb25maWcuZm9ybWF0RGF0ZSAhPT0gdW5kZWZpbmVkICYmICFpc01vYmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZy5mb3JtYXREYXRlKGRhdGVPYmosIGZybXQsIGxvY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZybXRcbiAgICAgICAgICAgIC5zcGxpdChcIlwiKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYywgaSwgYXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0c1tjXSAmJiBhcnJbaSAtIDFdICE9PSBcIlxcXFxcIlxuICAgICAgICAgICAgICAgID8gZm9ybWF0c1tjXShkYXRlT2JqLCBsb2NhbGUsIGNvbmZpZylcbiAgICAgICAgICAgICAgICA6IGMgIT09IFwiXFxcXFwiXG4gICAgICAgICAgICAgICAgICAgID8gY1xuICAgICAgICAgICAgICAgICAgICA6IFwiXCI7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbihcIlwiKTtcbiAgICB9O1xufTtcbmV4cG9ydCB2YXIgY3JlYXRlRGF0ZVBhcnNlciA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBfYiA9IF9hLmNvbmZpZywgY29uZmlnID0gX2IgPT09IHZvaWQgMCA/IGRlZmF1bHRzIDogX2IsIF9jID0gX2EubDEwbiwgbDEwbiA9IF9jID09PSB2b2lkIDAgPyBlbmdsaXNoIDogX2M7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlLCBnaXZlbkZvcm1hdCwgdGltZWxlc3MsIGN1c3RvbUxvY2FsZSkge1xuICAgICAgICBpZiAoZGF0ZSAhPT0gMCAmJiAhZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBsb2NhbGUgPSBjdXN0b21Mb2NhbGUgfHwgbDEwbjtcbiAgICAgICAgdmFyIHBhcnNlZERhdGU7XG4gICAgICAgIHZhciBkYXRlT3JpZyA9IGRhdGU7XG4gICAgICAgIGlmIChkYXRlIGluc3RhbmNlb2YgRGF0ZSlcbiAgICAgICAgICAgIHBhcnNlZERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRlICE9PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICBkYXRlLnRvRml4ZWQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHBhcnNlZERhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGRhdGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHZhciBmb3JtYXQgPSBnaXZlbkZvcm1hdCB8fCAoY29uZmlnIHx8IGRlZmF1bHRzKS5kYXRlRm9ybWF0O1xuICAgICAgICAgICAgdmFyIGRhdGVzdHIgPSBTdHJpbmcoZGF0ZSkudHJpbSgpO1xuICAgICAgICAgICAgaWYgKGRhdGVzdHIgPT09IFwidG9kYXlcIikge1xuICAgICAgICAgICAgICAgIHBhcnNlZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIHRpbWVsZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZyAmJiBjb25maWcucGFyc2VEYXRlKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9IGNvbmZpZy5wYXJzZURhdGUoZGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKC9aJC8udGVzdChkYXRlc3RyKSB8fFxuICAgICAgICAgICAgICAgIC9HTVQkLy50ZXN0KGRhdGVzdHIpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoZWQgPSB2b2lkIDAsIG9wcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXRjaEluZGV4ID0gMCwgcmVnZXhTdHIgPSBcIlwiOyBpIDwgZm9ybWF0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IGZvcm1hdFtpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQmFja1NsYXNoID0gdG9rZW4gPT09IFwiXFxcXFwiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZCA9IGZvcm1hdFtpIC0gMV0gPT09IFwiXFxcXFwiIHx8IGlzQmFja1NsYXNoO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5SZWdleFt0b2tlbl0gJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4U3RyICs9IHRva2VuUmVnZXhbdG9rZW5dO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbmV3IFJlZ0V4cChyZWdleFN0cikuZXhlYyhkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiAobWF0Y2hlZCA9IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BzW3Rva2VuICE9PSBcIllcIiA/IFwicHVzaFwiIDogXCJ1bnNoaWZ0XCJdKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IHJldkZvcm1hdFt0b2tlbl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbDogbWF0Y2hbKyttYXRjaEluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNCYWNrU2xhc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdleFN0ciArPSBcIi5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICFjb25maWcgfHwgIWNvbmZpZy5ub0NhbGVuZGFyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBEYXRlKG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSwgMCwgMSwgMCwgMCwgMCwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IERhdGUobmV3IERhdGUoKS5zZXRIb3VycygwLCAwLCAwLCAwKSk7XG4gICAgICAgICAgICAgICAgb3BzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IF9hLmZuLCB2YWwgPSBfYS52YWw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocGFyc2VkRGF0ZSA9IGZuKHBhcnNlZERhdGUsIHZhbCwgbG9jYWxlKSB8fCBwYXJzZWREYXRlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwYXJzZWREYXRlID0gbWF0Y2hlZCA/IHBhcnNlZERhdGUgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEocGFyc2VkRGF0ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHBhcnNlZERhdGUuZ2V0VGltZSgpKSkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5lcnJvckhhbmRsZXIobmV3IEVycm9yKFwiSW52YWxpZCBkYXRlIHByb3ZpZGVkOiBcIiArIGRhdGVPcmlnKSk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lbGVzcyA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHBhcnNlZERhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgIH07XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVEYXRlcyhkYXRlMSwgZGF0ZTIsIHRpbWVsZXNzKSB7XG4gICAgaWYgKHRpbWVsZXNzID09PSB2b2lkIDApIHsgdGltZWxlc3MgPSB0cnVlOyB9XG4gICAgaWYgKHRpbWVsZXNzICE9PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gKG5ldyBEYXRlKGRhdGUxLmdldFRpbWUoKSkuc2V0SG91cnMoMCwgMCwgMCwgMCkgLVxuICAgICAgICAgICAgbmV3IERhdGUoZGF0ZTIuZ2V0VGltZSgpKS5zZXRIb3VycygwLCAwLCAwLCAwKSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlMS5nZXRUaW1lKCkgLSBkYXRlMi5nZXRUaW1lKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVRpbWVzKGRhdGUxLCBkYXRlMikge1xuICAgIHJldHVybiAoMzYwMCAqIChkYXRlMS5nZXRIb3VycygpIC0gZGF0ZTIuZ2V0SG91cnMoKSkgK1xuICAgICAgICA2MCAqIChkYXRlMS5nZXRNaW51dGVzKCkgLSBkYXRlMi5nZXRNaW51dGVzKCkpICtcbiAgICAgICAgZGF0ZTEuZ2V0U2Vjb25kcygpIC1cbiAgICAgICAgZGF0ZTIuZ2V0U2Vjb25kcygpKTtcbn1cbmV4cG9ydCB2YXIgaXNCZXR3ZWVuID0gZnVuY3Rpb24gKHRzLCB0czEsIHRzMikge1xuICAgIHJldHVybiB0cyA+IE1hdGgubWluKHRzMSwgdHMyKSAmJiB0cyA8IE1hdGgubWF4KHRzMSwgdHMyKTtcbn07XG5leHBvcnQgdmFyIGNhbGN1bGF0ZVNlY29uZHNTaW5jZU1pZG5pZ2h0ID0gZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7XG4gICAgcmV0dXJuIGhvdXJzICogMzYwMCArIG1pbnV0ZXMgKiA2MCArIHNlY29uZHM7XG59O1xuZXhwb3J0IHZhciBwYXJzZVNlY29uZHMgPSBmdW5jdGlvbiAoc2Vjb25kc1NpbmNlTWlkbmlnaHQpIHtcbiAgICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKHNlY29uZHNTaW5jZU1pZG5pZ2h0IC8gMzYwMCksIG1pbnV0ZXMgPSAoc2Vjb25kc1NpbmNlTWlkbmlnaHQgLSBob3VycyAqIDM2MDApIC8gNjA7XG4gICAgcmV0dXJuIFtob3VycywgbWludXRlcywgc2Vjb25kc1NpbmNlTWlkbmlnaHQgLSBob3VycyAqIDM2MDAgLSBtaW51dGVzICogNjBdO1xufTtcbmV4cG9ydCB2YXIgZHVyYXRpb24gPSB7XG4gICAgREFZOiA4NjQwMDAwMCxcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdEhvdXJzKGNvbmZpZykge1xuICAgIHZhciBob3VycyA9IGNvbmZpZy5kZWZhdWx0SG91cjtcbiAgICB2YXIgbWludXRlcyA9IGNvbmZpZy5kZWZhdWx0TWludXRlO1xuICAgIHZhciBzZWNvbmRzID0gY29uZmlnLmRlZmF1bHRTZWNvbmRzO1xuICAgIGlmIChjb25maWcubWluRGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBtaW5Ib3VyID0gY29uZmlnLm1pbkRhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgdmFyIG1pbk1pbnV0ZXMgPSBjb25maWcubWluRGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgIHZhciBtaW5TZWNvbmRzID0gY29uZmlnLm1pbkRhdGUuZ2V0U2Vjb25kcygpO1xuICAgICAgICBpZiAoaG91cnMgPCBtaW5Ib3VyKSB7XG4gICAgICAgICAgICBob3VycyA9IG1pbkhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhvdXJzID09PSBtaW5Ib3VyICYmIG1pbnV0ZXMgPCBtaW5NaW51dGVzKSB7XG4gICAgICAgICAgICBtaW51dGVzID0gbWluTWludXRlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaG91cnMgPT09IG1pbkhvdXIgJiYgbWludXRlcyA9PT0gbWluTWludXRlcyAmJiBzZWNvbmRzIDwgbWluU2Vjb25kcylcbiAgICAgICAgICAgIHNlY29uZHMgPSBjb25maWcubWluRGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgfVxuICAgIGlmIChjb25maWcubWF4RGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBtYXhIciA9IGNvbmZpZy5tYXhEYXRlLmdldEhvdXJzKCk7XG4gICAgICAgIHZhciBtYXhNaW51dGVzID0gY29uZmlnLm1heERhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICBob3VycyA9IE1hdGgubWluKGhvdXJzLCBtYXhIcik7XG4gICAgICAgIGlmIChob3VycyA9PT0gbWF4SHIpXG4gICAgICAgICAgICBtaW51dGVzID0gTWF0aC5taW4obWF4TWludXRlcywgbWludXRlcyk7XG4gICAgICAgIGlmIChob3VycyA9PT0gbWF4SHIgJiYgbWludXRlcyA9PT0gbWF4TWludXRlcylcbiAgICAgICAgICAgIHNlY29uZHMgPSBjb25maWcubWF4RGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgfVxuICAgIHJldHVybiB7IGhvdXJzOiBob3VycywgbWludXRlczogbWludXRlcywgc2Vjb25kczogc2Vjb25kcyB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pZiAodHlwZW9mIE9iamVjdC5hc3NpZ24gIT09IFwiZnVuY3Rpb25cIikge1xuICAgIE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3RcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIF9hID0gMCwgYXJnc18xID0gYXJnczsgX2EgPCBhcmdzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJnc18xW19hXTtcbiAgICAgICAgICAgIF9sb29wXzEoc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG59XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcbiAgICByZXR1cm4gcjtcbn07XG5pbXBvcnQgeyBkZWZhdWx0cyBhcyBkZWZhdWx0T3B0aW9ucywgSE9PS1MsIH0gZnJvbSBcIi4vdHlwZXMvb3B0aW9uc1wiO1xuaW1wb3J0IEVuZ2xpc2ggZnJvbSBcIi4vbDEwbi9kZWZhdWx0XCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgZGVib3VuY2UsIGludCwgcGFkIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IGNsZWFyTm9kZSwgY3JlYXRlRWxlbWVudCwgY3JlYXRlTnVtYmVySW5wdXQsIGZpbmRQYXJlbnQsIHRvZ2dsZUNsYXNzLCBnZXRFdmVudFRhcmdldCwgfSBmcm9tIFwiLi91dGlscy9kb21cIjtcbmltcG9ydCB7IGNvbXBhcmVEYXRlcywgY3JlYXRlRGF0ZVBhcnNlciwgY3JlYXRlRGF0ZUZvcm1hdHRlciwgZHVyYXRpb24sIGlzQmV0d2VlbiwgZ2V0RGVmYXVsdEhvdXJzLCBjYWxjdWxhdGVTZWNvbmRzU2luY2VNaWRuaWdodCwgcGFyc2VTZWNvbmRzLCB9IGZyb20gXCIuL3V0aWxzL2RhdGVzXCI7XG5pbXBvcnQgeyB0b2tlblJlZ2V4LCBtb250aFRvU3RyIH0gZnJvbSBcIi4vdXRpbHMvZm9ybWF0dGluZ1wiO1xuaW1wb3J0IFwiLi91dGlscy9wb2x5ZmlsbHNcIjtcbnZhciBERUJPVU5DRURfQ0hBTkdFX01TID0gMzAwO1xuZnVuY3Rpb24gRmxhdHBpY2tySW5zdGFuY2UoZWxlbWVudCwgaW5zdGFuY2VDb25maWcpIHtcbiAgICB2YXIgc2VsZiA9IHtcbiAgICAgICAgY29uZmlnOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMpLCBmbGF0cGlja3IuZGVmYXVsdENvbmZpZyksXG4gICAgICAgIGwxMG46IEVuZ2xpc2gsXG4gICAgfTtcbiAgICBzZWxmLnBhcnNlRGF0ZSA9IGNyZWF0ZURhdGVQYXJzZXIoeyBjb25maWc6IHNlbGYuY29uZmlnLCBsMTBuOiBzZWxmLmwxMG4gfSk7XG4gICAgc2VsZi5faGFuZGxlcnMgPSBbXTtcbiAgICBzZWxmLnBsdWdpbkVsZW1lbnRzID0gW107XG4gICAgc2VsZi5sb2FkZWRQbHVnaW5zID0gW107XG4gICAgc2VsZi5fYmluZCA9IGJpbmQ7XG4gICAgc2VsZi5fc2V0SG91cnNGcm9tRGF0ZSA9IHNldEhvdXJzRnJvbURhdGU7XG4gICAgc2VsZi5fcG9zaXRpb25DYWxlbmRhciA9IHBvc2l0aW9uQ2FsZW5kYXI7XG4gICAgc2VsZi5jaGFuZ2VNb250aCA9IGNoYW5nZU1vbnRoO1xuICAgIHNlbGYuY2hhbmdlWWVhciA9IGNoYW5nZVllYXI7XG4gICAgc2VsZi5jbGVhciA9IGNsZWFyO1xuICAgIHNlbGYuY2xvc2UgPSBjbG9zZTtcbiAgICBzZWxmLm9uTW91c2VPdmVyID0gb25Nb3VzZU92ZXI7XG4gICAgc2VsZi5fY3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQ7XG4gICAgc2VsZi5jcmVhdGVEYXkgPSBjcmVhdGVEYXk7XG4gICAgc2VsZi5kZXN0cm95ID0gZGVzdHJveTtcbiAgICBzZWxmLmlzRW5hYmxlZCA9IGlzRW5hYmxlZDtcbiAgICBzZWxmLmp1bXBUb0RhdGUgPSBqdW1wVG9EYXRlO1xuICAgIHNlbGYudXBkYXRlVmFsdWUgPSB1cGRhdGVWYWx1ZTtcbiAgICBzZWxmLm9wZW4gPSBvcGVuO1xuICAgIHNlbGYucmVkcmF3ID0gcmVkcmF3O1xuICAgIHNlbGYuc2V0ID0gc2V0O1xuICAgIHNlbGYuc2V0RGF0ZSA9IHNldERhdGU7XG4gICAgc2VsZi50b2dnbGUgPSB0b2dnbGU7XG4gICAgZnVuY3Rpb24gc2V0dXBIZWxwZXJGdW5jdGlvbnMoKSB7XG4gICAgICAgIHNlbGYudXRpbHMgPSB7XG4gICAgICAgICAgICBnZXREYXlzSW5Nb250aDogZnVuY3Rpb24gKG1vbnRoLCB5cikge1xuICAgICAgICAgICAgICAgIGlmIChtb250aCA9PT0gdm9pZCAwKSB7IG1vbnRoID0gc2VsZi5jdXJyZW50TW9udGg7IH1cbiAgICAgICAgICAgICAgICBpZiAoeXIgPT09IHZvaWQgMCkgeyB5ciA9IHNlbGYuY3VycmVudFllYXI7IH1cbiAgICAgICAgICAgICAgICBpZiAobW9udGggPT09IDEgJiYgKCh5ciAlIDQgPT09IDAgJiYgeXIgJSAxMDAgIT09IDApIHx8IHlyICUgNDAwID09PSAwKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI5O1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmwxMG4uZGF5c0luTW9udGhbbW9udGhdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgc2VsZi5lbGVtZW50ID0gc2VsZi5pbnB1dCA9IGVsZW1lbnQ7XG4gICAgICAgIHNlbGYuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIHBhcnNlQ29uZmlnKCk7XG4gICAgICAgIHNldHVwTG9jYWxlKCk7XG4gICAgICAgIHNldHVwSW5wdXRzKCk7XG4gICAgICAgIHNldHVwRGF0ZXMoKTtcbiAgICAgICAgc2V0dXBIZWxwZXJGdW5jdGlvbnMoKTtcbiAgICAgICAgaWYgKCFzZWxmLmlzTW9iaWxlKVxuICAgICAgICAgICAgYnVpbGQoKTtcbiAgICAgICAgYmluZEV2ZW50cygpO1xuICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCB8fCBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSkge1xuICAgICAgICAgICAgICAgIHNldEhvdXJzRnJvbURhdGUoc2VsZi5jb25maWcubm9DYWxlbmRhciA/IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZVZhbHVlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRDYWxlbmRhcldpZHRoKCk7XG4gICAgICAgIHZhciBpc1NhZmFyaSA9IC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICAgIGlmICghc2VsZi5pc01vYmlsZSAmJiBpc1NhZmFyaSkge1xuICAgICAgICAgICAgcG9zaXRpb25DYWxlbmRhcigpO1xuICAgICAgICB9XG4gICAgICAgIHRyaWdnZXJFdmVudChcIm9uUmVhZHlcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldENsb3Nlc3RBY3RpdmVFbGVtZW50KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKChfYSA9IHNlbGYuY2FsZW5kYXJDb250YWluZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRSb290Tm9kZSgpKVxuICAgICAgICAgICAgLmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJpbmRUb0luc3RhbmNlKGZuKSB7XG4gICAgICAgIHJldHVybiBmbi5iaW5kKHNlbGYpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRDYWxlbmRhcldpZHRoKCkge1xuICAgICAgICB2YXIgY29uZmlnID0gc2VsZi5jb25maWc7XG4gICAgICAgIGlmIChjb25maWcud2Vla051bWJlcnMgPT09IGZhbHNlICYmIGNvbmZpZy5zaG93TW9udGhzID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29uZmlnLm5vQ2FsZW5kYXIgIT09IHRydWUpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmNhbGVuZGFyQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRheXNXaWR0aCA9IChzZWxmLmRheXMub2Zmc2V0V2lkdGggKyAxKSAqIGNvbmZpZy5zaG93TW9udGhzO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmRheXNDb250YWluZXIuc3R5bGUud2lkdGggPSBkYXlzV2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUud2lkdGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5c1dpZHRoICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2VsZi53ZWVrV3JhcHBlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi53ZWVrV3JhcHBlci5vZmZzZXRXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInB4XCI7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ2aXNpYmlsaXR5XCIpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiZGlzcGxheVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVUaW1lKGUpIHtcbiAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0RGF0ZSA9IHNlbGYuY29uZmlnLm1pbkRhdGUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgIGNvbXBhcmVEYXRlcyhuZXcgRGF0ZSgpLCBzZWxmLmNvbmZpZy5taW5EYXRlKSA+PSAwXG4gICAgICAgICAgICAgICAgPyBuZXcgRGF0ZSgpXG4gICAgICAgICAgICAgICAgOiBuZXcgRGF0ZShzZWxmLmNvbmZpZy5taW5EYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdHMgPSBnZXREZWZhdWx0SG91cnMoc2VsZi5jb25maWcpO1xuICAgICAgICAgICAgZGVmYXVsdERhdGUuc2V0SG91cnMoZGVmYXVsdHMuaG91cnMsIGRlZmF1bHRzLm1pbnV0ZXMsIGRlZmF1bHRzLnNlY29uZHMsIGRlZmF1bHREYXRlLmdldE1pbGxpc2Vjb25kcygpKTtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IFtkZWZhdWx0RGF0ZV07XG4gICAgICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiA9IGRlZmF1bHREYXRlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlICE9PSB1bmRlZmluZWQgJiYgZS50eXBlICE9PSBcImJsdXJcIikge1xuICAgICAgICAgICAgdGltZVdyYXBwZXIoZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZWYWx1ZSA9IHNlbGYuX2lucHV0LnZhbHVlO1xuICAgICAgICBzZXRIb3Vyc0Zyb21JbnB1dHMoKTtcbiAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgaWYgKHNlbGYuX2lucHV0LnZhbHVlICE9PSBwcmV2VmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGYuX2RlYm91bmNlZENoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFtcG0ybWlsaXRhcnkoaG91ciwgYW1QTSkge1xuICAgICAgICByZXR1cm4gKGhvdXIgJSAxMikgKyAxMiAqIGludChhbVBNID09PSBzZWxmLmwxMG4uYW1QTVsxXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1pbGl0YXJ5MmFtcG0oaG91cikge1xuICAgICAgICBzd2l0Y2ggKGhvdXIgJSAyNCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMTI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICUgMTI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0SG91cnNGcm9tSW5wdXRzKCkge1xuICAgICAgICBpZiAoc2VsZi5ob3VyRWxlbWVudCA9PT0gdW5kZWZpbmVkIHx8IHNlbGYubWludXRlRWxlbWVudCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgaG91cnMgPSAocGFyc2VJbnQoc2VsZi5ob3VyRWxlbWVudC52YWx1ZS5zbGljZSgtMiksIDEwKSB8fCAwKSAlIDI0LCBtaW51dGVzID0gKHBhcnNlSW50KHNlbGYubWludXRlRWxlbWVudC52YWx1ZSwgMTApIHx8IDApICUgNjAsIHNlY29uZHMgPSBzZWxmLnNlY29uZEVsZW1lbnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyAocGFyc2VJbnQoc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlLCAxMCkgfHwgMCkgJSA2MFxuICAgICAgICAgICAgOiAwO1xuICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhvdXJzID0gYW1wbTJtaWxpdGFyeShob3Vycywgc2VsZi5hbVBNLnRleHRDb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGltaXRNaW5Ib3VycyA9IHNlbGYuY29uZmlnLm1pblRpbWUgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgKHNlbGYuY29uZmlnLm1pbkRhdGUgJiZcbiAgICAgICAgICAgICAgICBzZWxmLm1pbkRhdGVIYXNUaW1lICYmXG4gICAgICAgICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmosIHNlbGYuY29uZmlnLm1pbkRhdGUsIHRydWUpID09PVxuICAgICAgICAgICAgICAgICAgICAwKTtcbiAgICAgICAgdmFyIGxpbWl0TWF4SG91cnMgPSBzZWxmLmNvbmZpZy5tYXhUaW1lICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIChzZWxmLmNvbmZpZy5tYXhEYXRlICYmXG4gICAgICAgICAgICAgICAgc2VsZi5tYXhEYXRlSGFzVGltZSAmJlxuICAgICAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqICYmXG4gICAgICAgICAgICAgICAgY29tcGFyZURhdGVzKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLCBzZWxmLmNvbmZpZy5tYXhEYXRlLCB0cnVlKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgMCk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tYXhUaW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLm1pblRpbWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgc2VsZi5jb25maWcubWluVGltZSA+IHNlbGYuY29uZmlnLm1heFRpbWUpIHtcbiAgICAgICAgICAgIHZhciBtaW5Cb3VuZCA9IGNhbGN1bGF0ZVNlY29uZHNTaW5jZU1pZG5pZ2h0KHNlbGYuY29uZmlnLm1pblRpbWUuZ2V0SG91cnMoKSwgc2VsZi5jb25maWcubWluVGltZS5nZXRNaW51dGVzKCksIHNlbGYuY29uZmlnLm1pblRpbWUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIHZhciBtYXhCb3VuZCA9IGNhbGN1bGF0ZVNlY29uZHNTaW5jZU1pZG5pZ2h0KHNlbGYuY29uZmlnLm1heFRpbWUuZ2V0SG91cnMoKSwgc2VsZi5jb25maWcubWF4VGltZS5nZXRNaW51dGVzKCksIHNlbGYuY29uZmlnLm1heFRpbWUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VGltZSA9IGNhbGN1bGF0ZVNlY29uZHNTaW5jZU1pZG5pZ2h0KGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSA+IG1heEJvdW5kICYmIGN1cnJlbnRUaW1lIDwgbWluQm91bmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VTZWNvbmRzKG1pbkJvdW5kKTtcbiAgICAgICAgICAgICAgICBob3VycyA9IHJlc3VsdFswXTtcbiAgICAgICAgICAgICAgICBtaW51dGVzID0gcmVzdWx0WzFdO1xuICAgICAgICAgICAgICAgIHNlY29uZHMgPSByZXN1bHRbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobGltaXRNYXhIb3Vycykge1xuICAgICAgICAgICAgICAgIHZhciBtYXhUaW1lID0gc2VsZi5jb25maWcubWF4VGltZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gc2VsZi5jb25maWcubWF4VGltZVxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLm1heERhdGU7XG4gICAgICAgICAgICAgICAgaG91cnMgPSBNYXRoLm1pbihob3VycywgbWF4VGltZS5nZXRIb3VycygpKTtcbiAgICAgICAgICAgICAgICBpZiAoaG91cnMgPT09IG1heFRpbWUuZ2V0SG91cnMoKSlcbiAgICAgICAgICAgICAgICAgICAgbWludXRlcyA9IE1hdGgubWluKG1pbnV0ZXMsIG1heFRpbWUuZ2V0TWludXRlcygpKTtcbiAgICAgICAgICAgICAgICBpZiAobWludXRlcyA9PT0gbWF4VGltZS5nZXRNaW51dGVzKCkpXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSBNYXRoLm1pbihzZWNvbmRzLCBtYXhUaW1lLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGltaXRNaW5Ib3Vycykge1xuICAgICAgICAgICAgICAgIHZhciBtaW5UaW1lID0gc2VsZi5jb25maWcubWluVGltZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gc2VsZi5jb25maWcubWluVGltZVxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLm1pbkRhdGU7XG4gICAgICAgICAgICAgICAgaG91cnMgPSBNYXRoLm1heChob3VycywgbWluVGltZS5nZXRIb3VycygpKTtcbiAgICAgICAgICAgICAgICBpZiAoaG91cnMgPT09IG1pblRpbWUuZ2V0SG91cnMoKSAmJiBtaW51dGVzIDwgbWluVGltZS5nZXRNaW51dGVzKCkpXG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBtaW5UaW1lLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgICAgICBpZiAobWludXRlcyA9PT0gbWluVGltZS5nZXRNaW51dGVzKCkpXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSBNYXRoLm1heChzZWNvbmRzLCBtaW5UaW1lLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0SG91cnMoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRIb3Vyc0Zyb21EYXRlKGRhdGVPYmopIHtcbiAgICAgICAgdmFyIGRhdGUgPSBkYXRlT2JqIHx8IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqO1xuICAgICAgICBpZiAoZGF0ZSAmJiBkYXRlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldEhvdXJzKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7XG4gICAgICAgIGlmIChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iai5zZXRIb3Vycyhob3VycyAlIDI0LCBtaW51dGVzLCBzZWNvbmRzIHx8IDAsIDApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VsZi5ob3VyRWxlbWVudCB8fCAhc2VsZi5taW51dGVFbGVtZW50IHx8IHNlbGYuaXNNb2JpbGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQudmFsdWUgPSBwYWQoIXNlbGYuY29uZmlnLnRpbWVfMjRoclxuICAgICAgICAgICAgPyAoKDEyICsgaG91cnMpICUgMTIpICsgMTIgKiBpbnQoaG91cnMgJSAxMiA9PT0gMClcbiAgICAgICAgICAgIDogaG91cnMpO1xuICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQudmFsdWUgPSBwYWQobWludXRlcyk7XG4gICAgICAgIGlmIChzZWxmLmFtUE0gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9IHNlbGYubDEwbi5hbVBNW2ludChob3VycyA+PSAxMildO1xuICAgICAgICBpZiAoc2VsZi5zZWNvbmRFbGVtZW50ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQudmFsdWUgPSBwYWQoc2Vjb25kcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uWWVhcklucHV0KGV2ZW50KSB7XG4gICAgICAgIHZhciBldmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGV2ZW50KTtcbiAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludChldmVudFRhcmdldC52YWx1ZSkgKyAoZXZlbnQuZGVsdGEgfHwgMCk7XG4gICAgICAgIGlmICh5ZWFyIC8gMTAwMCA+IDEgfHxcbiAgICAgICAgICAgIChldmVudC5rZXkgPT09IFwiRW50ZXJcIiAmJiAhL1teXFxkXS8udGVzdCh5ZWFyLnRvU3RyaW5nKCkpKSkge1xuICAgICAgICAgICAgY2hhbmdlWWVhcih5ZWFyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBiaW5kKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEFycmF5KVxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGV2KSB7IHJldHVybiBiaW5kKGVsZW1lbnQsIGV2LCBoYW5kbGVyLCBvcHRpb25zKTsgfSk7XG4gICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgQXJyYXkpXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gYmluZChlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpOyB9KTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgc2VsZi5faGFuZGxlcnMucHVzaCh7XG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7IH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmlnZ2VyQ2hhbmdlKCkge1xuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkNoYW5nZVwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLndyYXApIHtcbiAgICAgICAgICAgIFtcIm9wZW5cIiwgXCJjbG9zZVwiLCBcInRvZ2dsZVwiLCBcImNsZWFyXCJdLmZvckVhY2goZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoc2VsZi5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1cIiArIGV2dCArIFwiXVwiKSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiaW5kKGVsLCBcImNsaWNrXCIsIHNlbGZbZXZ0XSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5pc01vYmlsZSkge1xuICAgICAgICAgICAgc2V0dXBNb2JpbGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVib3VuY2VkUmVzaXplID0gZGVib3VuY2Uob25SZXNpemUsIDUwKTtcbiAgICAgICAgc2VsZi5fZGVib3VuY2VkQ2hhbmdlID0gZGVib3VuY2UodHJpZ2dlckNoYW5nZSwgREVCT1VOQ0VEX0NIQU5HRV9NUyk7XG4gICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIgJiYgIS9pUGhvbmV8aVBhZHxpUG9kL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSlcbiAgICAgICAgICAgIGJpbmQoc2VsZi5kYXlzQ29udGFpbmVyLCBcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpXG4gICAgICAgICAgICAgICAgICAgIG9uTW91c2VPdmVyKGdldEV2ZW50VGFyZ2V0KGUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBiaW5kKHNlbGYuX2lucHV0LCBcImtleWRvd25cIiwgb25LZXlEb3duKTtcbiAgICAgICAgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYmluZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImtleWRvd25cIiwgb25LZXlEb3duKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNlbGYuY29uZmlnLmlubGluZSAmJiAhc2VsZi5jb25maWcuc3RhdGljKVxuICAgICAgICAgICAgYmluZCh3aW5kb3csIFwicmVzaXplXCIsIGRlYm91bmNlZFJlc2l6ZSk7XG4gICAgICAgIGlmICh3aW5kb3cub250b3VjaHN0YXJ0ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBiaW5kKHdpbmRvdy5kb2N1bWVudCwgXCJ0b3VjaHN0YXJ0XCIsIGRvY3VtZW50Q2xpY2spO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBiaW5kKHdpbmRvdy5kb2N1bWVudCwgXCJtb3VzZWRvd25cIiwgZG9jdW1lbnRDbGljayk7XG4gICAgICAgIGJpbmQod2luZG93LmRvY3VtZW50LCBcImZvY3VzXCIsIGRvY3VtZW50Q2xpY2ssIHsgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmNsaWNrT3BlbnMgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGJpbmQoc2VsZi5faW5wdXQsIFwiZm9jdXNcIiwgc2VsZi5vcGVuKTtcbiAgICAgICAgICAgIGJpbmQoc2VsZi5faW5wdXQsIFwiY2xpY2tcIiwgc2VsZi5vcGVuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJpbmQoc2VsZi5tb250aE5hdiwgXCJjbGlja1wiLCBvbk1vbnRoTmF2Q2xpY2spO1xuICAgICAgICAgICAgYmluZChzZWxmLm1vbnRoTmF2LCBbXCJrZXl1cFwiLCBcImluY3JlbWVudFwiXSwgb25ZZWFySW5wdXQpO1xuICAgICAgICAgICAgYmluZChzZWxmLmRheXNDb250YWluZXIsIFwiY2xpY2tcIiwgc2VsZWN0RGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYudGltZUNvbnRhaW5lciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgc2VsZi5ob3VyRWxlbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgc2VsVGV4dCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEV2ZW50VGFyZ2V0KGUpLnNlbGVjdCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJpbmQoc2VsZi50aW1lQ29udGFpbmVyLCBbXCJpbmNyZW1lbnRcIl0sIHVwZGF0ZVRpbWUpO1xuICAgICAgICAgICAgYmluZChzZWxmLnRpbWVDb250YWluZXIsIFwiYmx1clwiLCB1cGRhdGVUaW1lLCB7IGNhcHR1cmU6IHRydWUgfSk7XG4gICAgICAgICAgICBiaW5kKHNlbGYudGltZUNvbnRhaW5lciwgXCJjbGlja1wiLCB0aW1lSW5jcmVtZW50KTtcbiAgICAgICAgICAgIGJpbmQoW3NlbGYuaG91ckVsZW1lbnQsIHNlbGYubWludXRlRWxlbWVudF0sIFtcImZvY3VzXCIsIFwiY2xpY2tcIl0sIHNlbFRleHQpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc2Vjb25kRWxlbWVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGJpbmQoc2VsZi5zZWNvbmRFbGVtZW50LCBcImZvY3VzXCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuc2Vjb25kRWxlbWVudCAmJiBzZWxmLnNlY29uZEVsZW1lbnQuc2VsZWN0KCk7IH0pO1xuICAgICAgICAgICAgaWYgKHNlbGYuYW1QTSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYmluZChzZWxmLmFtUE0sIFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZShlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5jb25maWcuYWxsb3dJbnB1dCkge1xuICAgICAgICAgICAgYmluZChzZWxmLl9pbnB1dCwgXCJibHVyXCIsIG9uQmx1cik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24ganVtcFRvRGF0ZShqdW1wRGF0ZSwgdHJpZ2dlckNoYW5nZSkge1xuICAgICAgICB2YXIganVtcFRvID0ganVtcERhdGUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBzZWxmLnBhcnNlRGF0ZShqdW1wRGF0ZSlcbiAgICAgICAgICAgIDogc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogfHxcbiAgICAgICAgICAgICAgICAoc2VsZi5jb25maWcubWluRGF0ZSAmJiBzZWxmLmNvbmZpZy5taW5EYXRlID4gc2VsZi5ub3dcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5taW5EYXRlXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubWF4RGF0ZSAmJiBzZWxmLmNvbmZpZy5tYXhEYXRlIDwgc2VsZi5ub3dcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi5jb25maWcubWF4RGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzZWxmLm5vdyk7XG4gICAgICAgIHZhciBvbGRZZWFyID0gc2VsZi5jdXJyZW50WWVhcjtcbiAgICAgICAgdmFyIG9sZE1vbnRoID0gc2VsZi5jdXJyZW50TW9udGg7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoanVtcFRvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID0ganVtcFRvLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBqdW1wVG8uZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZS5tZXNzYWdlID0gXCJJbnZhbGlkIGRhdGUgc3VwcGxpZWQ6IFwiICsganVtcFRvO1xuICAgICAgICAgICAgc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlICYmIHNlbGYuY3VycmVudFllYXIgIT09IG9sZFllYXIpIHtcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uWWVhckNoYW5nZVwiKTtcbiAgICAgICAgICAgIGJ1aWxkTW9udGhTd2l0Y2goKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJpZ2dlckNoYW5nZSAmJlxuICAgICAgICAgICAgKHNlbGYuY3VycmVudFllYXIgIT09IG9sZFllYXIgfHwgc2VsZi5jdXJyZW50TW9udGggIT09IG9sZE1vbnRoKSkge1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25Nb250aENoYW5nZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnJlZHJhdygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0aW1lSW5jcmVtZW50KGUpIHtcbiAgICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZSk7XG4gICAgICAgIGlmICh+ZXZlbnRUYXJnZXQuY2xhc3NOYW1lLmluZGV4T2YoXCJhcnJvd1wiKSlcbiAgICAgICAgICAgIGluY3JlbWVudE51bUlucHV0KGUsIGV2ZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImFycm93VXBcIikgPyAxIDogLTEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbmNyZW1lbnROdW1JbnB1dChlLCBkZWx0YSwgaW5wdXRFbGVtKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBlICYmIGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICB2YXIgaW5wdXQgPSBpbnB1dEVsZW0gfHxcbiAgICAgICAgICAgICh0YXJnZXQgJiYgdGFyZ2V0LnBhcmVudE5vZGUgJiYgdGFyZ2V0LnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG4gICAgICAgIHZhciBldmVudCA9IGNyZWF0ZUV2ZW50KFwiaW5jcmVtZW50XCIpO1xuICAgICAgICBldmVudC5kZWx0YSA9IGRlbHRhO1xuICAgICAgICBpbnB1dCAmJiBpbnB1dC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGQoKSB7XG4gICAgICAgIHZhciBmcmFnbWVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWNhbGVuZGFyXCIpO1xuICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnRhYkluZGV4ID0gLTE7XG4gICAgICAgIGlmICghc2VsZi5jb25maWcubm9DYWxlbmRhcikge1xuICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoYnVpbGRNb250aE5hdigpKTtcbiAgICAgICAgICAgIHNlbGYuaW5uZXJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWlubmVyQ29udGFpbmVyXCIpO1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLndlZWtOdW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gYnVpbGRXZWVrcygpLCB3ZWVrV3JhcHBlciA9IF9hLndlZWtXcmFwcGVyLCB3ZWVrTnVtYmVycyA9IF9hLndlZWtOdW1iZXJzO1xuICAgICAgICAgICAgICAgIHNlbGYuaW5uZXJDb250YWluZXIuYXBwZW5kQ2hpbGQod2Vla1dyYXBwZXIpO1xuICAgICAgICAgICAgICAgIHNlbGYud2Vla051bWJlcnMgPSB3ZWVrTnVtYmVycztcbiAgICAgICAgICAgICAgICBzZWxmLndlZWtXcmFwcGVyID0gd2Vla1dyYXBwZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLnJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXJDb250YWluZXJcIik7XG4gICAgICAgICAgICBzZWxmLnJDb250YWluZXIuYXBwZW5kQ2hpbGQoYnVpbGRXZWVrZGF5cygpKTtcbiAgICAgICAgICAgIGlmICghc2VsZi5kYXlzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1kYXlzXCIpO1xuICAgICAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci50YWJJbmRleCA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVpbGREYXlzKCk7XG4gICAgICAgICAgICBzZWxmLnJDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZi5kYXlzQ29udGFpbmVyKTtcbiAgICAgICAgICAgIHNlbGYuaW5uZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZi5yQ29udGFpbmVyKTtcbiAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHNlbGYuaW5uZXJDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lKSB7XG4gICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChidWlsZFRpbWUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJyYW5nZU1vZGVcIiwgc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJhbmltYXRlXCIsIHNlbGYuY29uZmlnLmFuaW1hdGUgPT09IHRydWUpO1xuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcIm11bHRpTW9udGhcIiwgc2VsZi5jb25maWcuc2hvd01vbnRocyA+IDEpO1xuICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcbiAgICAgICAgdmFyIGN1c3RvbUFwcGVuZCA9IHNlbGYuY29uZmlnLmFwcGVuZFRvICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLmFwcGVuZFRvLm5vZGVUeXBlICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5pbmxpbmUgfHwgc2VsZi5jb25maWcuc3RhdGljKSB7XG4gICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoc2VsZi5jb25maWcuaW5saW5lID8gXCJpbmxpbmVcIiA6IFwic3RhdGljXCIpO1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmlubGluZSkge1xuICAgICAgICAgICAgICAgIGlmICghY3VzdG9tQXBwZW5kICYmIHNlbGYuZWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgc2VsZi5faW5wdXQubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYuY29uZmlnLmFwcGVuZFRvICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLmFwcGVuZFRvLmFwcGVuZENoaWxkKHNlbGYuY2FsZW5kYXJDb250YWluZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLnN0YXRpYykge1xuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci13cmFwcGVyXCIpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmVsZW1lbnQucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHNlbGYuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChzZWxmLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmFsdElucHV0KVxuICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNlbGYuYWx0SW5wdXQpO1xuICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZi5jYWxlbmRhckNvbnRhaW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy5zdGF0aWMgJiYgIXNlbGYuY29uZmlnLmlubGluZSlcbiAgICAgICAgICAgIChzZWxmLmNvbmZpZy5hcHBlbmRUbyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5hcHBlbmRUb1xuICAgICAgICAgICAgICAgIDogd2luZG93LmRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKHNlbGYuY2FsZW5kYXJDb250YWluZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVEYXkoY2xhc3NOYW1lLCBkYXRlLCBfZGF5TnVtYmVyLCBpKSB7XG4gICAgICAgIHZhciBkYXRlSXNFbmFibGVkID0gaXNFbmFibGVkKGRhdGUsIHRydWUpLCBkYXlFbGVtZW50ID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgY2xhc3NOYW1lLCBkYXRlLmdldERhdGUoKS50b1N0cmluZygpKTtcbiAgICAgICAgZGF5RWxlbWVudC5kYXRlT2JqID0gZGF0ZTtcbiAgICAgICAgZGF5RWxlbWVudC4kaSA9IGk7XG4gICAgICAgIGRheUVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBzZWxmLmZvcm1hdERhdGUoZGF0ZSwgc2VsZi5jb25maWcuYXJpYURhdGVGb3JtYXQpKTtcbiAgICAgICAgaWYgKGNsYXNzTmFtZS5pbmRleE9mKFwiaGlkZGVuXCIpID09PSAtMSAmJlxuICAgICAgICAgICAgY29tcGFyZURhdGVzKGRhdGUsIHNlbGYubm93KSA9PT0gMCkge1xuICAgICAgICAgICAgc2VsZi50b2RheURhdGVFbGVtID0gZGF5RWxlbWVudDtcbiAgICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvZGF5XCIpO1xuICAgICAgICAgICAgZGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIiwgXCJkYXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRlSXNFbmFibGVkKSB7XG4gICAgICAgICAgICBkYXlFbGVtZW50LnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgICBpZiAoaXNEYXRlU2VsZWN0ZWQoZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICBkYXlFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZUVsZW0gPSBkYXlFbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZGF5RWxlbWVudCwgXCJzdGFydFJhbmdlXCIsIHNlbGYuc2VsZWN0ZWREYXRlc1swXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZURhdGVzKGRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXSwgdHJ1ZSkgPT09IDApO1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhkYXlFbGVtZW50LCBcImVuZFJhbmdlXCIsIHNlbGYuc2VsZWN0ZWREYXRlc1sxXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZURhdGVzKGRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1sxXSwgdHJ1ZSkgPT09IDApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09PSBcIm5leHRNb250aERheVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaW5SYW5nZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXlFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJmbGF0cGlja3ItZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIikge1xuICAgICAgICAgICAgaWYgKGlzRGF0ZUluUmFuZ2UoZGF0ZSkgJiYgIWlzRGF0ZVNlbGVjdGVkKGRhdGUpKVxuICAgICAgICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImluUmFuZ2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYud2Vla051bWJlcnMgJiZcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLnNob3dNb250aHMgPT09IDEgJiZcbiAgICAgICAgICAgIGNsYXNzTmFtZSAhPT0gXCJwcmV2TW9udGhEYXlcIiAmJlxuICAgICAgICAgICAgaSAlIDcgPT09IDYpIHtcbiAgICAgICAgICAgIHNlbGYud2Vla051bWJlcnMuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIFwiPHNwYW4gY2xhc3M9J2ZsYXRwaWNrci1kYXknPlwiICsgc2VsZi5jb25maWcuZ2V0V2VlayhkYXRlKSArIFwiPC9zcGFuPlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkRheUNyZWF0ZVwiLCBkYXlFbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGRheUVsZW1lbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvY3VzT25EYXlFbGVtKHRhcmdldE5vZGUpIHtcbiAgICAgICAgdGFyZ2V0Tm9kZS5mb2N1cygpO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiKVxuICAgICAgICAgICAgb25Nb3VzZU92ZXIodGFyZ2V0Tm9kZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEZpcnN0QXZhaWxhYmxlRGF5KGRlbHRhKSB7XG4gICAgICAgIHZhciBzdGFydE1vbnRoID0gZGVsdGEgPiAwID8gMCA6IHNlbGYuY29uZmlnLnNob3dNb250aHMgLSAxO1xuICAgICAgICB2YXIgZW5kTW9udGggPSBkZWx0YSA+IDAgPyBzZWxmLmNvbmZpZy5zaG93TW9udGhzIDogLTE7XG4gICAgICAgIGZvciAodmFyIG0gPSBzdGFydE1vbnRoOyBtICE9IGVuZE1vbnRoOyBtICs9IGRlbHRhKSB7XG4gICAgICAgICAgICB2YXIgbW9udGggPSBzZWxmLmRheXNDb250YWluZXIuY2hpbGRyZW5bbV07XG4gICAgICAgICAgICB2YXIgc3RhcnRJbmRleCA9IGRlbHRhID4gMCA/IDAgOiBtb250aC5jaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgICAgICAgICAgdmFyIGVuZEluZGV4ID0gZGVsdGEgPiAwID8gbW9udGguY2hpbGRyZW4ubGVuZ3RoIDogLTE7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSAhPSBlbmRJbmRleDsgaSArPSBkZWx0YSkge1xuICAgICAgICAgICAgICAgIHZhciBjID0gbW9udGguY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgaWYgKGMuY2xhc3NOYW1lLmluZGV4T2YoXCJoaWRkZW5cIikgPT09IC0xICYmIGlzRW5hYmxlZChjLmRhdGVPYmopKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXROZXh0QXZhaWxhYmxlRGF5KGN1cnJlbnQsIGRlbHRhKSB7XG4gICAgICAgIHZhciBnaXZlbk1vbnRoID0gY3VycmVudC5jbGFzc05hbWUuaW5kZXhPZihcIk1vbnRoXCIpID09PSAtMVxuICAgICAgICAgICAgPyBjdXJyZW50LmRhdGVPYmouZ2V0TW9udGgoKVxuICAgICAgICAgICAgOiBzZWxmLmN1cnJlbnRNb250aDtcbiAgICAgICAgdmFyIGVuZE1vbnRoID0gZGVsdGEgPiAwID8gc2VsZi5jb25maWcuc2hvd01vbnRocyA6IC0xO1xuICAgICAgICB2YXIgbG9vcERlbHRhID0gZGVsdGEgPiAwID8gMSA6IC0xO1xuICAgICAgICBmb3IgKHZhciBtID0gZ2l2ZW5Nb250aCAtIHNlbGYuY3VycmVudE1vbnRoOyBtICE9IGVuZE1vbnRoOyBtICs9IGxvb3BEZWx0YSkge1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gc2VsZi5kYXlzQ29udGFpbmVyLmNoaWxkcmVuW21dO1xuICAgICAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSBnaXZlbk1vbnRoIC0gc2VsZi5jdXJyZW50TW9udGggPT09IG1cbiAgICAgICAgICAgICAgICA/IGN1cnJlbnQuJGkgKyBkZWx0YVxuICAgICAgICAgICAgICAgIDogZGVsdGEgPCAwXG4gICAgICAgICAgICAgICAgICAgID8gbW9udGguY2hpbGRyZW4ubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICB2YXIgbnVtTW9udGhEYXlzID0gbW9udGguY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPj0gMCAmJiBpIDwgbnVtTW9udGhEYXlzICYmIGkgIT0gKGRlbHRhID4gMCA/IG51bU1vbnRoRGF5cyA6IC0xKTsgaSArPSBsb29wRGVsdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IG1vbnRoLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjLmNsYXNzTmFtZS5pbmRleE9mKFwiaGlkZGVuXCIpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICBpc0VuYWJsZWQoYy5kYXRlT2JqKSAmJlxuICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyhjdXJyZW50LiRpIC0gaSkgPj0gTWF0aC5hYnMoZGVsdGEpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9jdXNPbkRheUVsZW0oYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5jaGFuZ2VNb250aChsb29wRGVsdGEpO1xuICAgICAgICBmb2N1c09uRGF5KGdldEZpcnN0QXZhaWxhYmxlRGF5KGxvb3BEZWx0YSksIDApO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb2N1c09uRGF5KGN1cnJlbnQsIG9mZnNldCkge1xuICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGdldENsb3Nlc3RBY3RpdmVFbGVtZW50KCk7XG4gICAgICAgIHZhciBkYXlGb2N1c2VkID0gaXNJblZpZXcoYWN0aXZlRWxlbWVudCB8fCBkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgdmFyIHN0YXJ0RWxlbSA9IGN1cnJlbnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBjdXJyZW50XG4gICAgICAgICAgICA6IGRheUZvY3VzZWRcbiAgICAgICAgICAgICAgICA/IGFjdGl2ZUVsZW1lbnRcbiAgICAgICAgICAgICAgICA6IHNlbGYuc2VsZWN0ZWREYXRlRWxlbSAhPT0gdW5kZWZpbmVkICYmIGlzSW5WaWV3KHNlbGYuc2VsZWN0ZWREYXRlRWxlbSlcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLnNlbGVjdGVkRGF0ZUVsZW1cbiAgICAgICAgICAgICAgICAgICAgOiBzZWxmLnRvZGF5RGF0ZUVsZW0gIT09IHVuZGVmaW5lZCAmJiBpc0luVmlldyhzZWxmLnRvZGF5RGF0ZUVsZW0pXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGYudG9kYXlEYXRlRWxlbVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBnZXRGaXJzdEF2YWlsYWJsZURheShvZmZzZXQgPiAwID8gMSA6IC0xKTtcbiAgICAgICAgaWYgKHN0YXJ0RWxlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZWxmLl9pbnB1dC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFkYXlGb2N1c2VkKSB7XG4gICAgICAgICAgICBmb2N1c09uRGF5RWxlbShzdGFydEVsZW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2V0TmV4dEF2YWlsYWJsZURheShzdGFydEVsZW0sIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRNb250aERheXMoeWVhciwgbW9udGgpIHtcbiAgICAgICAgdmFyIGZpcnN0T2ZNb250aCA9IChuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSkuZ2V0RGF5KCkgLSBzZWxmLmwxMG4uZmlyc3REYXlPZldlZWsgKyA3KSAlIDc7XG4gICAgICAgIHZhciBwcmV2TW9udGhEYXlzID0gc2VsZi51dGlscy5nZXREYXlzSW5Nb250aCgobW9udGggLSAxICsgMTIpICUgMTIsIHllYXIpO1xuICAgICAgICB2YXIgZGF5c0luTW9udGggPSBzZWxmLnV0aWxzLmdldERheXNJbk1vbnRoKG1vbnRoLCB5ZWFyKSwgZGF5cyA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIGlzTXVsdGlNb250aCA9IHNlbGYuY29uZmlnLnNob3dNb250aHMgPiAxLCBwcmV2TW9udGhEYXlDbGFzcyA9IGlzTXVsdGlNb250aCA/IFwicHJldk1vbnRoRGF5IGhpZGRlblwiIDogXCJwcmV2TW9udGhEYXlcIiwgbmV4dE1vbnRoRGF5Q2xhc3MgPSBpc011bHRpTW9udGggPyBcIm5leHRNb250aERheSBoaWRkZW5cIiA6IFwibmV4dE1vbnRoRGF5XCI7XG4gICAgICAgIHZhciBkYXlOdW1iZXIgPSBwcmV2TW9udGhEYXlzICsgMSAtIGZpcnN0T2ZNb250aCwgZGF5SW5kZXggPSAwO1xuICAgICAgICBmb3IgKDsgZGF5TnVtYmVyIDw9IHByZXZNb250aERheXM7IGRheU51bWJlcisrLCBkYXlJbmRleCsrKSB7XG4gICAgICAgICAgICBkYXlzLmFwcGVuZENoaWxkKGNyZWF0ZURheShcImZsYXRwaWNrci1kYXkgXCIgKyBwcmV2TW9udGhEYXlDbGFzcywgbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXlOdW1iZXIpLCBkYXlOdW1iZXIsIGRheUluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChkYXlOdW1iZXIgPSAxOyBkYXlOdW1iZXIgPD0gZGF5c0luTW9udGg7IGRheU51bWJlcisrLCBkYXlJbmRleCsrKSB7XG4gICAgICAgICAgICBkYXlzLmFwcGVuZENoaWxkKGNyZWF0ZURheShcImZsYXRwaWNrci1kYXlcIiwgbmV3IERhdGUoeWVhciwgbW9udGgsIGRheU51bWJlciksIGRheU51bWJlciwgZGF5SW5kZXgpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBkYXlOdW0gPSBkYXlzSW5Nb250aCArIDE7IGRheU51bSA8PSA0MiAtIGZpcnN0T2ZNb250aCAmJlxuICAgICAgICAgICAgKHNlbGYuY29uZmlnLnNob3dNb250aHMgPT09IDEgfHwgZGF5SW5kZXggJSA3ICE9PSAwKTsgZGF5TnVtKyssIGRheUluZGV4KyspIHtcbiAgICAgICAgICAgIGRheXMuYXBwZW5kQ2hpbGQoY3JlYXRlRGF5KFwiZmxhdHBpY2tyLWRheSBcIiArIG5leHRNb250aERheUNsYXNzLCBuZXcgRGF0ZSh5ZWFyLCBtb250aCArIDEsIGRheU51bSAlIGRheXNJbk1vbnRoKSwgZGF5TnVtLCBkYXlJbmRleCkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXlDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZGF5Q29udGFpbmVyXCIpO1xuICAgICAgICBkYXlDb250YWluZXIuYXBwZW5kQ2hpbGQoZGF5cyk7XG4gICAgICAgIHJldHVybiBkYXlDb250YWluZXI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkRGF5cygpIHtcbiAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJOb2RlKHNlbGYuZGF5c0NvbnRhaW5lcik7XG4gICAgICAgIGlmIChzZWxmLndlZWtOdW1iZXJzKVxuICAgICAgICAgICAgY2xlYXJOb2RlKHNlbGYud2Vla051bWJlcnMpO1xuICAgICAgICB2YXIgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmNvbmZpZy5zaG93TW9udGhzOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgc2VsZi5jdXJyZW50TW9udGgsIDEpO1xuICAgICAgICAgICAgZC5zZXRNb250aChzZWxmLmN1cnJlbnRNb250aCArIGkpO1xuICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChidWlsZE1vbnRoRGF5cyhkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSkpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnKTtcbiAgICAgICAgc2VsZi5kYXlzID0gc2VsZi5kYXlzQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIgJiYgc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgb25Nb3VzZU92ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZE1vbnRoU3dpdGNoKCkge1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuc2hvd01vbnRocyA+IDEgfHxcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLm1vbnRoU2VsZWN0b3JUeXBlICE9PSBcImRyb3Bkb3duXCIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBzaG91bGRCdWlsZE1vbnRoID0gZnVuY3Rpb24gKG1vbnRoKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubWluRGF0ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9PT0gc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpICYmXG4gICAgICAgICAgICAgICAgbW9udGggPCBzZWxmLmNvbmZpZy5taW5EYXRlLmdldE1vbnRoKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gIShzZWxmLmNvbmZpZy5tYXhEYXRlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkgJiZcbiAgICAgICAgICAgICAgICBtb250aCA+IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TW9udGgoKSk7XG4gICAgICAgIH07XG4gICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIudGFiSW5kZXggPSAtMTtcbiAgICAgICAgc2VsZi5tb250aHNEcm9wZG93bkNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghc2hvdWxkQnVpbGRNb250aChpKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IGNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIiwgXCJmbGF0cGlja3ItbW9udGhEcm9wZG93bi1tb250aFwiKTtcbiAgICAgICAgICAgIG1vbnRoLnZhbHVlID0gbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgaSkuZ2V0TW9udGgoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgbW9udGgudGV4dENvbnRlbnQgPSBtb250aFRvU3RyKGksIHNlbGYuY29uZmlnLnNob3J0aGFuZEN1cnJlbnRNb250aCwgc2VsZi5sMTBuKTtcbiAgICAgICAgICAgIG1vbnRoLnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgICBpZiAoc2VsZi5jdXJyZW50TW9udGggPT09IGkpIHtcbiAgICAgICAgICAgICAgICBtb250aC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLm1vbnRoc0Ryb3Bkb3duQ29udGFpbmVyLmFwcGVuZENoaWxkKG1vbnRoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZE1vbnRoKCkge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1tb250aFwiKTtcbiAgICAgICAgdmFyIG1vbnRoTmF2RnJhZ21lbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICB2YXIgbW9udGhFbGVtZW50O1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuc2hvd01vbnRocyA+IDEgfHxcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLm1vbnRoU2VsZWN0b3JUeXBlID09PSBcInN0YXRpY1wiKSB7XG4gICAgICAgICAgICBtb250aEVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImN1ci1tb250aFwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIFwiZmxhdHBpY2tyLW1vbnRoRHJvcGRvd24tbW9udGhzXCIpO1xuICAgICAgICAgICAgc2VsZi5tb250aHNEcm9wZG93bkNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHNlbGYubDEwbi5tb250aEFyaWFMYWJlbCk7XG4gICAgICAgICAgICBiaW5kKHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIsIFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZE1vbnRoID0gcGFyc2VJbnQodGFyZ2V0LnZhbHVlLCAxMCk7XG4gICAgICAgICAgICAgICAgc2VsZi5jaGFuZ2VNb250aChzZWxlY3RlZE1vbnRoIC0gc2VsZi5jdXJyZW50TW9udGgpO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uTW9udGhDaGFuZ2VcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJ1aWxkTW9udGhTd2l0Y2goKTtcbiAgICAgICAgICAgIG1vbnRoRWxlbWVudCA9IHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHllYXJJbnB1dCA9IGNyZWF0ZU51bWJlcklucHV0KFwiY3VyLXllYXJcIiwgeyB0YWJpbmRleDogXCItMVwiIH0pO1xuICAgICAgICB2YXIgeWVhckVsZW1lbnQgPSB5ZWFySW5wdXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKVswXTtcbiAgICAgICAgeWVhckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBzZWxmLmwxMG4ueWVhckFyaWFMYWJlbCk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlKSB7XG4gICAgICAgICAgICB5ZWFyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tYXhEYXRlKSB7XG4gICAgICAgICAgICB5ZWFyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtYXhcIiwgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgeWVhckVsZW1lbnQuZGlzYWJsZWQgPVxuICAgICAgICAgICAgICAgICEhc2VsZi5jb25maWcubWluRGF0ZSAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3VycmVudE1vbnRoID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1jdXJyZW50LW1vbnRoXCIpO1xuICAgICAgICBjdXJyZW50TW9udGguYXBwZW5kQ2hpbGQobW9udGhFbGVtZW50KTtcbiAgICAgICAgY3VycmVudE1vbnRoLmFwcGVuZENoaWxkKHllYXJJbnB1dCk7XG4gICAgICAgIG1vbnRoTmF2RnJhZ21lbnQuYXBwZW5kQ2hpbGQoY3VycmVudE1vbnRoKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG1vbnRoTmF2RnJhZ21lbnQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgICAgICB5ZWFyRWxlbWVudDogeWVhckVsZW1lbnQsXG4gICAgICAgICAgICBtb250aEVsZW1lbnQ6IG1vbnRoRWxlbWVudCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRNb250aHMoKSB7XG4gICAgICAgIGNsZWFyTm9kZShzZWxmLm1vbnRoTmF2KTtcbiAgICAgICAgc2VsZi5tb250aE5hdi5hcHBlbmRDaGlsZChzZWxmLnByZXZNb250aE5hdik7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5zaG93TW9udGhzKSB7XG4gICAgICAgICAgICBzZWxmLnllYXJFbGVtZW50cyA9IFtdO1xuICAgICAgICAgICAgc2VsZi5tb250aEVsZW1lbnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgbSA9IHNlbGYuY29uZmlnLnNob3dNb250aHM7IG0tLTspIHtcbiAgICAgICAgICAgIHZhciBtb250aCA9IGJ1aWxkTW9udGgoKTtcbiAgICAgICAgICAgIHNlbGYueWVhckVsZW1lbnRzLnB1c2gobW9udGgueWVhckVsZW1lbnQpO1xuICAgICAgICAgICAgc2VsZi5tb250aEVsZW1lbnRzLnB1c2gobW9udGgubW9udGhFbGVtZW50KTtcbiAgICAgICAgICAgIHNlbGYubW9udGhOYXYuYXBwZW5kQ2hpbGQobW9udGguY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLm1vbnRoTmF2LmFwcGVuZENoaWxkKHNlbGYubmV4dE1vbnRoTmF2KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRNb250aE5hdigpIHtcbiAgICAgICAgc2VsZi5tb250aE5hdiA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItbW9udGhzXCIpO1xuICAgICAgICBzZWxmLnllYXJFbGVtZW50cyA9IFtdO1xuICAgICAgICBzZWxmLm1vbnRoRWxlbWVudHMgPSBbXTtcbiAgICAgICAgc2VsZi5wcmV2TW9udGhOYXYgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImZsYXRwaWNrci1wcmV2LW1vbnRoXCIpO1xuICAgICAgICBzZWxmLnByZXZNb250aE5hdi5pbm5lckhUTUwgPSBzZWxmLmNvbmZpZy5wcmV2QXJyb3c7XG4gICAgICAgIHNlbGYubmV4dE1vbnRoTmF2ID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItbmV4dC1tb250aFwiKTtcbiAgICAgICAgc2VsZi5uZXh0TW9udGhOYXYuaW5uZXJIVE1MID0gc2VsZi5jb25maWcubmV4dEFycm93O1xuICAgICAgICBidWlsZE1vbnRocygpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgXCJfaGlkZVByZXZNb250aEFycm93XCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZi5fX2hpZGVQcmV2TW9udGhBcnJvdzsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5fX2hpZGVQcmV2TW9udGhBcnJvdyAhPT0gYm9vbCkge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLnByZXZNb250aE5hdiwgXCJmbGF0cGlja3ItZGlzYWJsZWRcIiwgYm9vbCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX19oaWRlUHJldk1vbnRoQXJyb3cgPSBib29sO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgXCJfaGlkZU5leHRNb250aEFycm93XCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZi5fX2hpZGVOZXh0TW9udGhBcnJvdzsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5fX2hpZGVOZXh0TW9udGhBcnJvdyAhPT0gYm9vbCkge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLm5leHRNb250aE5hdiwgXCJmbGF0cGlja3ItZGlzYWJsZWRcIiwgYm9vbCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX19oaWRlTmV4dE1vbnRoQXJyb3cgPSBib29sO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudCA9IHNlbGYueWVhckVsZW1lbnRzWzBdO1xuICAgICAgICB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG4gICAgICAgIHJldHVybiBzZWxmLm1vbnRoTmF2O1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZFRpbWUoKSB7XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhhc1RpbWVcIik7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5ub0NhbGVuZGFyKVxuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibm9DYWxlbmRhclwiKTtcbiAgICAgICAgdmFyIGRlZmF1bHRzID0gZ2V0RGVmYXVsdEhvdXJzKHNlbGYuY29uZmlnKTtcbiAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci10aW1lXCIpO1xuICAgICAgICBzZWxmLnRpbWVDb250YWluZXIudGFiSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLXRpbWUtc2VwYXJhdG9yXCIsIFwiOlwiKTtcbiAgICAgICAgdmFyIGhvdXJJbnB1dCA9IGNyZWF0ZU51bWJlcklucHV0KFwiZmxhdHBpY2tyLWhvdXJcIiwge1xuICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHNlbGYubDEwbi5ob3VyQXJpYUxhYmVsLFxuICAgICAgICB9KTtcbiAgICAgICAgc2VsZi5ob3VyRWxlbWVudCA9IGhvdXJJbnB1dC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWzBdO1xuICAgICAgICB2YXIgbWludXRlSW5wdXQgPSBjcmVhdGVOdW1iZXJJbnB1dChcImZsYXRwaWNrci1taW51dGVcIiwge1xuICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHNlbGYubDEwbi5taW51dGVBcmlhTGFiZWwsXG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQgPSBtaW51dGVJbnB1dC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWzBdO1xuICAgICAgICBzZWxmLmhvdXJFbGVtZW50LnRhYkluZGV4ID0gc2VsZi5taW51dGVFbGVtZW50LnRhYkluZGV4ID0gLTE7XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQudmFsdWUgPSBwYWQoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmpcbiAgICAgICAgICAgID8gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmouZ2V0SG91cnMoKVxuICAgICAgICAgICAgOiBzZWxmLmNvbmZpZy50aW1lXzI0aHJcbiAgICAgICAgICAgICAgICA/IGRlZmF1bHRzLmhvdXJzXG4gICAgICAgICAgICAgICAgOiBtaWxpdGFyeTJhbXBtKGRlZmF1bHRzLmhvdXJzKSk7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudC52YWx1ZSA9IHBhZChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9ialxuICAgICAgICAgICAgPyBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iai5nZXRNaW51dGVzKClcbiAgICAgICAgICAgIDogZGVmYXVsdHMubWludXRlcyk7XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQuc2V0QXR0cmlidXRlKFwic3RlcFwiLCBzZWxmLmNvbmZpZy5ob3VySW5jcmVtZW50LnRvU3RyaW5nKCkpO1xuICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwic3RlcFwiLCBzZWxmLmNvbmZpZy5taW51dGVJbmNyZW1lbnQudG9TdHJpbmcoKSk7XG4gICAgICAgIHNlbGYuaG91ckVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWluXCIsIHNlbGYuY29uZmlnLnRpbWVfMjRociA/IFwiMFwiIDogXCIxXCIpO1xuICAgICAgICBzZWxmLmhvdXJFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1heFwiLCBzZWxmLmNvbmZpZy50aW1lXzI0aHIgPyBcIjIzXCIgOiBcIjEyXCIpO1xuICAgICAgICBzZWxmLmhvdXJFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1heGxlbmd0aFwiLCBcIjJcIik7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgXCIwXCIpO1xuICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWF4XCIsIFwiNTlcIik7XG4gICAgICAgIHNlbGYubWludXRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtYXhsZW5ndGhcIiwgXCIyXCIpO1xuICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoaG91cklucHV0KTtcbiAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlcGFyYXRvcik7XG4gICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChtaW51dGVJbnB1dCk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy50aW1lXzI0aHIpXG4gICAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInRpbWUyNGhyXCIpO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlU2Vjb25kcykge1xuICAgICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJoYXNTZWNvbmRzXCIpO1xuICAgICAgICAgICAgdmFyIHNlY29uZElucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJmbGF0cGlja3Itc2Vjb25kXCIpO1xuICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50ID0gc2Vjb25kSW5wdXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKVswXTtcbiAgICAgICAgICAgIHNlbGYuc2Vjb25kRWxlbWVudC52YWx1ZSA9IHBhZChzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9ialxuICAgICAgICAgICAgICAgID8gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmouZ2V0U2Vjb25kcygpXG4gICAgICAgICAgICAgICAgOiBkZWZhdWx0cy5zZWNvbmRzKTtcbiAgICAgICAgICAgIHNlbGYuc2Vjb25kRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzdGVwXCIsIHNlbGYubWludXRlRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJzdGVwXCIpKTtcbiAgICAgICAgICAgIHNlbGYuc2Vjb25kRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgXCIwXCIpO1xuICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1heFwiLCBcIjU5XCIpO1xuICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1heGxlbmd0aFwiLCBcIjJcIik7XG4gICAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItdGltZS1zZXBhcmF0b3JcIiwgXCI6XCIpKTtcbiAgICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWNvbmRJbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy50aW1lXzI0aHIpIHtcbiAgICAgICAgICAgIHNlbGYuYW1QTSA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLWFtLXBtXCIsIHNlbGYubDEwbi5hbVBNW2ludCgoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmpcbiAgICAgICAgICAgICAgICA/IHNlbGYuaG91ckVsZW1lbnQudmFsdWVcbiAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLmRlZmF1bHRIb3VyKSA+IDExKV0pO1xuICAgICAgICAgICAgc2VsZi5hbVBNLnRpdGxlID0gc2VsZi5sMTBuLnRvZ2dsZVRpdGxlO1xuICAgICAgICAgICAgc2VsZi5hbVBNLnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZi5hbVBNKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZi50aW1lQ29udGFpbmVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZFdlZWtkYXlzKCkge1xuICAgICAgICBpZiAoIXNlbGYud2Vla2RheUNvbnRhaW5lcilcbiAgICAgICAgICAgIHNlbGYud2Vla2RheUNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd2Vla2RheXNcIik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNsZWFyTm9kZShzZWxmLndlZWtkYXlDb250YWluZXIpO1xuICAgICAgICBmb3IgKHZhciBpID0gc2VsZi5jb25maWcuc2hvd01vbnRoczsgaS0tOykge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd2Vla2RheWNvbnRhaW5lclwiKTtcbiAgICAgICAgICAgIHNlbGYud2Vla2RheUNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVdlZWtkYXlzKCk7XG4gICAgICAgIHJldHVybiBzZWxmLndlZWtkYXlDb250YWluZXI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZVdlZWtkYXlzKCkge1xuICAgICAgICBpZiAoIXNlbGYud2Vla2RheUNvbnRhaW5lcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmaXJzdERheU9mV2VlayA9IHNlbGYubDEwbi5maXJzdERheU9mV2VlaztcbiAgICAgICAgdmFyIHdlZWtkYXlzID0gX19zcHJlYWRBcnJheXMoc2VsZi5sMTBuLndlZWtkYXlzLnNob3J0aGFuZCk7XG4gICAgICAgIGlmIChmaXJzdERheU9mV2VlayA+IDAgJiYgZmlyc3REYXlPZldlZWsgPCB3ZWVrZGF5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHdlZWtkYXlzID0gX19zcHJlYWRBcnJheXMod2Vla2RheXMuc3BsaWNlKGZpcnN0RGF5T2ZXZWVrLCB3ZWVrZGF5cy5sZW5ndGgpLCB3ZWVrZGF5cy5zcGxpY2UoMCwgZmlyc3REYXlPZldlZWspKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gc2VsZi5jb25maWcuc2hvd01vbnRoczsgaS0tOykge1xuICAgICAgICAgICAgc2VsZi53ZWVrZGF5Q29udGFpbmVyLmNoaWxkcmVuW2ldLmlubmVySFRNTCA9IFwiXFxuICAgICAgPHNwYW4gY2xhc3M9J2ZsYXRwaWNrci13ZWVrZGF5Jz5cXG4gICAgICAgIFwiICsgd2Vla2RheXMuam9pbihcIjwvc3Bhbj48c3BhbiBjbGFzcz0nZmxhdHBpY2tyLXdlZWtkYXknPlwiKSArIFwiXFxuICAgICAgPC9zcGFuPlxcbiAgICAgIFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkV2Vla3MoKSB7XG4gICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhhc1dlZWtzXCIpO1xuICAgICAgICB2YXIgd2Vla1dyYXBwZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXdlZWt3cmFwcGVyXCIpO1xuICAgICAgICB3ZWVrV3JhcHBlci5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImZsYXRwaWNrci13ZWVrZGF5XCIsIHNlbGYubDEwbi53ZWVrQWJicmV2aWF0aW9uKSk7XG4gICAgICAgIHZhciB3ZWVrTnVtYmVycyA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd2Vla3NcIik7XG4gICAgICAgIHdlZWtXcmFwcGVyLmFwcGVuZENoaWxkKHdlZWtOdW1iZXJzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdlZWtXcmFwcGVyOiB3ZWVrV3JhcHBlcixcbiAgICAgICAgICAgIHdlZWtOdW1iZXJzOiB3ZWVrTnVtYmVycyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hhbmdlTW9udGgodmFsdWUsIGlzT2Zmc2V0KSB7XG4gICAgICAgIGlmIChpc09mZnNldCA9PT0gdm9pZCAwKSB7IGlzT2Zmc2V0ID0gdHJ1ZTsgfVxuICAgICAgICB2YXIgZGVsdGEgPSBpc09mZnNldCA/IHZhbHVlIDogdmFsdWUgLSBzZWxmLmN1cnJlbnRNb250aDtcbiAgICAgICAgaWYgKChkZWx0YSA8IDAgJiYgc2VsZi5faGlkZVByZXZNb250aEFycm93ID09PSB0cnVlKSB8fFxuICAgICAgICAgICAgKGRlbHRhID4gMCAmJiBzZWxmLl9oaWRlTmV4dE1vbnRoQXJyb3cgPT09IHRydWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzZWxmLmN1cnJlbnRNb250aCArPSBkZWx0YTtcbiAgICAgICAgaWYgKHNlbGYuY3VycmVudE1vbnRoIDwgMCB8fCBzZWxmLmN1cnJlbnRNb250aCA+IDExKSB7XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyICs9IHNlbGYuY3VycmVudE1vbnRoID4gMTEgPyAxIDogLTE7XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IChzZWxmLmN1cnJlbnRNb250aCArIDEyKSAlIDEyO1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25ZZWFyQ2hhbmdlXCIpO1xuICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpO1xuICAgICAgICB9XG4gICAgICAgIGJ1aWxkRGF5cygpO1xuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbk1vbnRoQ2hhbmdlXCIpO1xuICAgICAgICB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsZWFyKHRyaWdnZXJDaGFuZ2VFdmVudCwgdG9Jbml0aWFsKSB7XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQgPT09IHZvaWQgMCkgeyB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSB0cnVlOyB9XG4gICAgICAgIGlmICh0b0luaXRpYWwgPT09IHZvaWQgMCkgeyB0b0luaXRpYWwgPSB0cnVlOyB9XG4gICAgICAgIHNlbGYuaW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIGlmIChzZWxmLm1vYmlsZUlucHV0ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gW107XG4gICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodG9Jbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID0gc2VsZi5faW5pdGlhbERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gc2VsZi5faW5pdGlhbERhdGUuZ2V0TW9udGgoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdmFyIF9hID0gZ2V0RGVmYXVsdEhvdXJzKHNlbGYuY29uZmlnKSwgaG91cnMgPSBfYS5ob3VycywgbWludXRlcyA9IF9hLm1pbnV0ZXMsIHNlY29uZHMgPSBfYS5zZWNvbmRzO1xuICAgICAgICAgICAgc2V0SG91cnMoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkNoYW5nZVwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgIHNlbGYuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIGlmICghc2VsZi5pc01vYmlsZSkge1xuICAgICAgICAgICAgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcIm9wZW5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5faW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX2lucHV0LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJpZ2dlckV2ZW50KFwib25DbG9zZVwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkRlc3Ryb3lcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSBzZWxmLl9oYW5kbGVycy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgIHNlbGYuX2hhbmRsZXJzW2ldLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuX2hhbmRsZXJzID0gW107XG4gICAgICAgIGlmIChzZWxmLm1vYmlsZUlucHV0KSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5tb2JpbGVJbnB1dC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzZWxmLm1vYmlsZUlucHV0KTtcbiAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2VsZi5jYWxlbmRhckNvbnRhaW5lciAmJiBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5zdGF0aWMgJiYgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgd3JhcHBlci5sYXN0Q2hpbGQgJiYgd3JhcHBlci5yZW1vdmVDaGlsZCh3cmFwcGVyLmxhc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgaWYgKHdyYXBwZXIucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAod3JhcHBlci5maXJzdENoaWxkKVxuICAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwcGVyLmZpcnN0Q2hpbGQsIHdyYXBwZXIpO1xuICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQod3JhcHBlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dCkge1xuICAgICAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzZWxmLmFsdElucHV0KTtcbiAgICAgICAgICAgIGRlbGV0ZSBzZWxmLmFsdElucHV0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmlucHV0KSB7XG4gICAgICAgICAgICBzZWxmLmlucHV0LnR5cGUgPSBzZWxmLmlucHV0Ll90eXBlO1xuICAgICAgICAgICAgc2VsZi5pbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwiZmxhdHBpY2tyLWlucHV0XCIpO1xuICAgICAgICAgICAgc2VsZi5pbnB1dC5yZW1vdmVBdHRyaWJ1dGUoXCJyZWFkb25seVwiKTtcbiAgICAgICAgfVxuICAgICAgICBbXG4gICAgICAgICAgICBcIl9zaG93VGltZUlucHV0XCIsXG4gICAgICAgICAgICBcImxhdGVzdFNlbGVjdGVkRGF0ZU9ialwiLFxuICAgICAgICAgICAgXCJfaGlkZU5leHRNb250aEFycm93XCIsXG4gICAgICAgICAgICBcIl9oaWRlUHJldk1vbnRoQXJyb3dcIixcbiAgICAgICAgICAgIFwiX19oaWRlTmV4dE1vbnRoQXJyb3dcIixcbiAgICAgICAgICAgIFwiX19oaWRlUHJldk1vbnRoQXJyb3dcIixcbiAgICAgICAgICAgIFwiaXNNb2JpbGVcIixcbiAgICAgICAgICAgIFwiaXNPcGVuXCIsXG4gICAgICAgICAgICBcInNlbGVjdGVkRGF0ZUVsZW1cIixcbiAgICAgICAgICAgIFwibWluRGF0ZUhhc1RpbWVcIixcbiAgICAgICAgICAgIFwibWF4RGF0ZUhhc1RpbWVcIixcbiAgICAgICAgICAgIFwiZGF5c1wiLFxuICAgICAgICAgICAgXCJkYXlzQ29udGFpbmVyXCIsXG4gICAgICAgICAgICBcIl9pbnB1dFwiLFxuICAgICAgICAgICAgXCJfcG9zaXRpb25FbGVtZW50XCIsXG4gICAgICAgICAgICBcImlubmVyQ29udGFpbmVyXCIsXG4gICAgICAgICAgICBcInJDb250YWluZXJcIixcbiAgICAgICAgICAgIFwibW9udGhOYXZcIixcbiAgICAgICAgICAgIFwidG9kYXlEYXRlRWxlbVwiLFxuICAgICAgICAgICAgXCJjYWxlbmRhckNvbnRhaW5lclwiLFxuICAgICAgICAgICAgXCJ3ZWVrZGF5Q29udGFpbmVyXCIsXG4gICAgICAgICAgICBcInByZXZNb250aE5hdlwiLFxuICAgICAgICAgICAgXCJuZXh0TW9udGhOYXZcIixcbiAgICAgICAgICAgIFwibW9udGhzRHJvcGRvd25Db250YWluZXJcIixcbiAgICAgICAgICAgIFwiY3VycmVudE1vbnRoRWxlbWVudFwiLFxuICAgICAgICAgICAgXCJjdXJyZW50WWVhckVsZW1lbnRcIixcbiAgICAgICAgICAgIFwibmF2aWdhdGlvbkN1cnJlbnRNb250aFwiLFxuICAgICAgICAgICAgXCJzZWxlY3RlZERhdGVFbGVtXCIsXG4gICAgICAgICAgICBcImNvbmZpZ1wiLFxuICAgICAgICBdLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNlbGZba107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoXykgeyB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0NhbGVuZGFyRWxlbShlbGVtKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNvbnRhaW5zKGVsZW0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkb2N1bWVudENsaWNrKGUpIHtcbiAgICAgICAgaWYgKHNlbGYuaXNPcGVuICYmICFzZWxmLmNvbmZpZy5pbmxpbmUpIHtcbiAgICAgICAgICAgIHZhciBldmVudFRhcmdldF8xID0gZ2V0RXZlbnRUYXJnZXQoZSk7XG4gICAgICAgICAgICB2YXIgaXNDYWxlbmRhckVsZW1lbnQgPSBpc0NhbGVuZGFyRWxlbShldmVudFRhcmdldF8xKTtcbiAgICAgICAgICAgIHZhciBpc0lucHV0ID0gZXZlbnRUYXJnZXRfMSA9PT0gc2VsZi5pbnB1dCB8fFxuICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0XzEgPT09IHNlbGYuYWx0SW5wdXQgfHxcbiAgICAgICAgICAgICAgICBzZWxmLmVsZW1lbnQuY29udGFpbnMoZXZlbnRUYXJnZXRfMSkgfHxcbiAgICAgICAgICAgICAgICAoZS5wYXRoICYmXG4gICAgICAgICAgICAgICAgICAgIGUucGF0aC5pbmRleE9mICYmXG4gICAgICAgICAgICAgICAgICAgICh+ZS5wYXRoLmluZGV4T2Yoc2VsZi5pbnB1dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIH5lLnBhdGguaW5kZXhPZihzZWxmLmFsdElucHV0KSkpO1xuICAgICAgICAgICAgdmFyIGxvc3RGb2N1cyA9ICFpc0lucHV0ICYmXG4gICAgICAgICAgICAgICAgIWlzQ2FsZW5kYXJFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgIWlzQ2FsZW5kYXJFbGVtKGUucmVsYXRlZFRhcmdldCk7XG4gICAgICAgICAgICB2YXIgaXNJZ25vcmVkID0gIXNlbGYuY29uZmlnLmlnbm9yZWRGb2N1c0VsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS5jb250YWlucyhldmVudFRhcmdldF8xKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGxvc3RGb2N1cyAmJiBpc0lnbm9yZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuYWxsb3dJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldERhdGUoc2VsZi5faW5wdXQudmFsdWUsIGZhbHNlLCBzZWxmLmNvbmZpZy5hbHRJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5hbHRGb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnRpbWVDb250YWluZXIgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pbnB1dC52YWx1ZSAhPT0gXCJcIiAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIiAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjaGFuZ2VZZWFyKG5ld1llYXIpIHtcbiAgICAgICAgaWYgKCFuZXdZZWFyIHx8XG4gICAgICAgICAgICAoc2VsZi5jb25maWcubWluRGF0ZSAmJiBuZXdZZWFyIDwgc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpKSB8fFxuICAgICAgICAgICAgKHNlbGYuY29uZmlnLm1heERhdGUgJiYgbmV3WWVhciA+IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBuZXdZZWFyTnVtID0gbmV3WWVhciwgaXNOZXdZZWFyID0gc2VsZi5jdXJyZW50WWVhciAhPT0gbmV3WWVhck51bTtcbiAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9IG5ld1llYXJOdW0gfHwgc2VsZi5jdXJyZW50WWVhcjtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heERhdGUgJiZcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSkge1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBNYXRoLm1pbihzZWxmLmNvbmZpZy5tYXhEYXRlLmdldE1vbnRoKCksIHNlbGYuY3VycmVudE1vbnRoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlICYmXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkpIHtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gTWF0aC5tYXgoc2VsZi5jb25maWcubWluRGF0ZS5nZXRNb250aCgpLCBzZWxmLmN1cnJlbnRNb250aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3WWVhcikge1xuICAgICAgICAgICAgc2VsZi5yZWRyYXcoKTtcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uWWVhckNoYW5nZVwiKTtcbiAgICAgICAgICAgIGJ1aWxkTW9udGhTd2l0Y2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBpc0VuYWJsZWQoZGF0ZSwgdGltZWxlc3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGltZWxlc3MgPT09IHZvaWQgMCkgeyB0aW1lbGVzcyA9IHRydWU7IH1cbiAgICAgICAgdmFyIGRhdGVUb0NoZWNrID0gc2VsZi5wYXJzZURhdGUoZGF0ZSwgdW5kZWZpbmVkLCB0aW1lbGVzcyk7XG4gICAgICAgIGlmICgoc2VsZi5jb25maWcubWluRGF0ZSAmJlxuICAgICAgICAgICAgZGF0ZVRvQ2hlY2sgJiZcbiAgICAgICAgICAgIGNvbXBhcmVEYXRlcyhkYXRlVG9DaGVjaywgc2VsZi5jb25maWcubWluRGF0ZSwgdGltZWxlc3MgIT09IHVuZGVmaW5lZCA/IHRpbWVsZXNzIDogIXNlbGYubWluRGF0ZUhhc1RpbWUpIDwgMCkgfHxcbiAgICAgICAgICAgIChzZWxmLmNvbmZpZy5tYXhEYXRlICYmXG4gICAgICAgICAgICAgICAgZGF0ZVRvQ2hlY2sgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoZGF0ZVRvQ2hlY2ssIHNlbGYuY29uZmlnLm1heERhdGUsIHRpbWVsZXNzICE9PSB1bmRlZmluZWQgPyB0aW1lbGVzcyA6ICFzZWxmLm1heERhdGVIYXNUaW1lKSA+IDApKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIXNlbGYuY29uZmlnLmVuYWJsZSAmJiBzZWxmLmNvbmZpZy5kaXNhYmxlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoZGF0ZVRvQ2hlY2sgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGJvb2wgPSAhIXNlbGYuY29uZmlnLmVuYWJsZSwgYXJyYXkgPSAoX2EgPSBzZWxmLmNvbmZpZy5lbmFibGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHNlbGYuY29uZmlnLmRpc2FibGU7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBkID0gdm9pZCAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGQgPSBhcnJheVtpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZCA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgICAgICAgZChkYXRlVG9DaGVjaykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvb2w7XG4gICAgICAgICAgICBlbHNlIGlmIChkIGluc3RhbmNlb2YgRGF0ZSAmJlxuICAgICAgICAgICAgICAgIGRhdGVUb0NoZWNrICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICBkLmdldFRpbWUoKSA9PT0gZGF0ZVRvQ2hlY2suZ2V0VGltZSgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBib29sO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gc2VsZi5wYXJzZURhdGUoZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkICYmIHBhcnNlZC5nZXRUaW1lKCkgPT09IGRhdGVUb0NoZWNrLmdldFRpbWUoKVxuICAgICAgICAgICAgICAgICAgICA/IGJvb2xcbiAgICAgICAgICAgICAgICAgICAgOiAhYm9vbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICAgICAgZGF0ZVRvQ2hlY2sgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIGQuZnJvbSAmJlxuICAgICAgICAgICAgICAgIGQudG8gJiZcbiAgICAgICAgICAgICAgICBkYXRlVG9DaGVjay5nZXRUaW1lKCkgPj0gZC5mcm9tLmdldFRpbWUoKSAmJlxuICAgICAgICAgICAgICAgIGRhdGVUb0NoZWNrLmdldFRpbWUoKSA8PSBkLnRvLmdldFRpbWUoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9vbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIWJvb2w7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzSW5WaWV3KGVsZW0pIHtcbiAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIChlbGVtLmNsYXNzTmFtZS5pbmRleE9mKFwiaGlkZGVuXCIpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NOYW1lLmluZGV4T2YoXCJmbGF0cGlja3ItZGlzYWJsZWRcIikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyLmNvbnRhaW5zKGVsZW0pKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkJsdXIoZSkge1xuICAgICAgICB2YXIgaXNJbnB1dCA9IGUudGFyZ2V0ID09PSBzZWxmLl9pbnB1dDtcbiAgICAgICAgdmFyIHZhbHVlQ2hhbmdlZCA9IHNlbGYuX2lucHV0LnZhbHVlLnRyaW1FbmQoKSAhPT0gZ2V0RGF0ZVN0cigpO1xuICAgICAgICBpZiAoaXNJbnB1dCAmJlxuICAgICAgICAgICAgdmFsdWVDaGFuZ2VkICYmXG4gICAgICAgICAgICAhKGUucmVsYXRlZFRhcmdldCAmJiBpc0NhbGVuZGFyRWxlbShlLnJlbGF0ZWRUYXJnZXQpKSkge1xuICAgICAgICAgICAgc2VsZi5zZXREYXRlKHNlbGYuX2lucHV0LnZhbHVlLCB0cnVlLCBlLnRhcmdldCA9PT0gc2VsZi5hbHRJbnB1dFxuICAgICAgICAgICAgICAgID8gc2VsZi5jb25maWcuYWx0Rm9ybWF0XG4gICAgICAgICAgICAgICAgOiBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChlKTtcbiAgICAgICAgdmFyIGlzSW5wdXQgPSBzZWxmLmNvbmZpZy53cmFwXG4gICAgICAgICAgICA/IGVsZW1lbnQuY29udGFpbnMoZXZlbnRUYXJnZXQpXG4gICAgICAgICAgICA6IGV2ZW50VGFyZ2V0ID09PSBzZWxmLl9pbnB1dDtcbiAgICAgICAgdmFyIGFsbG93SW5wdXQgPSBzZWxmLmNvbmZpZy5hbGxvd0lucHV0O1xuICAgICAgICB2YXIgYWxsb3dLZXlkb3duID0gc2VsZi5pc09wZW4gJiYgKCFhbGxvd0lucHV0IHx8ICFpc0lucHV0KTtcbiAgICAgICAgdmFyIGFsbG93SW5saW5lS2V5ZG93biA9IHNlbGYuY29uZmlnLmlubGluZSAmJiBpc0lucHV0ICYmICFhbGxvd0lucHV0O1xuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAxMyAmJiBpc0lucHV0KSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dJbnB1dCkge1xuICAgICAgICAgICAgICAgIHNlbGYuc2V0RGF0ZShzZWxmLl9pbnB1dC52YWx1ZSwgdHJ1ZSwgZXZlbnRUYXJnZXQgPT09IHNlbGYuYWx0SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5hbHRGb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0KTtcbiAgICAgICAgICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50VGFyZ2V0LmJsdXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYub3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQ2FsZW5kYXJFbGVtKGV2ZW50VGFyZ2V0KSB8fFxuICAgICAgICAgICAgYWxsb3dLZXlkb3duIHx8XG4gICAgICAgICAgICBhbGxvd0lubGluZUtleWRvd24pIHtcbiAgICAgICAgICAgIHZhciBpc1RpbWVPYmogPSAhIXNlbGYudGltZUNvbnRhaW5lciAmJlxuICAgICAgICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5jb250YWlucyhldmVudFRhcmdldCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1RpbWVPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzQW5kQ2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3REYXRlKGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGZvY3VzQW5kQ2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIGNhc2UgNDY6XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0lucHV0ICYmICFzZWxmLmNvbmZpZy5hbGxvd0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVGltZU9iaiAmJiAhaXNJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBnZXRDbG9zZXN0QWN0aXZlRWxlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFsbG93SW5wdXQgPT09IGZhbHNlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhY3RpdmVFbGVtZW50ICYmIGlzSW5WaWV3KGFjdGl2ZUVsZW1lbnQpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGFfMSA9IGUua2V5Q29kZSA9PT0gMzkgPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlLmN0cmxLZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzT25EYXkodW5kZWZpbmVkLCBkZWx0YV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlTW9udGgoZGVsdGFfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzT25EYXkoZ2V0Rmlyc3RBdmFpbGFibGVEYXkoMSksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxmLmhvdXJFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ob3VyRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5rZXlDb2RlID09PSA0MCA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChzZWxmLmRheXNDb250YWluZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LiRpICE9PSB1bmRlZmluZWQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldCA9PT0gc2VsZi5pbnB1dCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQgPT09IHNlbGYuYWx0SW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVllYXIoc2VsZi5jdXJyZW50WWVhciAtIGRlbHRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c09uRGF5KGdldEZpcnN0QXZhaWxhYmxlRGF5KDEpLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFpc1RpbWVPYmopXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNPbkRheSh1bmRlZmluZWQsIGRlbHRhICogNyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnRUYXJnZXQgPT09IHNlbGYuY3VycmVudFllYXJFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VZZWFyKHNlbGYuY3VycmVudFllYXIgLSBkZWx0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RpbWVPYmogJiYgc2VsZi5ob3VyRWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVUaW1lKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fZGVib3VuY2VkQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNUaW1lT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ob3VyRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYW1QTSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHNlbGYucGx1Z2luRWxlbWVudHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geDsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGVsZW1zLmluZGV4T2YoZXZlbnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGVsZW1zW2kgKyAoZS5zaGlmdEtleSA/IC0xIDogMSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0IHx8IHNlbGYuX2lucHV0KS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFzZWxmLmNvbmZpZy5ub0NhbGVuZGFyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRheXNDb250YWluZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci5jb250YWlucyhldmVudFRhcmdldCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2lucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuYW1QTSAhPT0gdW5kZWZpbmVkICYmIGV2ZW50VGFyZ2V0ID09PSBzZWxmLmFtUE0pIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIHNlbGYubDEwbi5hbVBNWzBdLmNoYXJBdCgwKTpcbiAgICAgICAgICAgICAgICBjYXNlIHNlbGYubDEwbi5hbVBNWzBdLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpOlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFtUE0udGV4dENvbnRlbnQgPSBzZWxmLmwxMG4uYW1QTVswXTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SG91cnNGcm9tSW5wdXRzKCk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2Ugc2VsZi5sMTBuLmFtUE1bMV0uY2hhckF0KDApOlxuICAgICAgICAgICAgICAgIGNhc2Ugc2VsZi5sMTBuLmFtUE1bMV0uY2hhckF0KDApLnRvTG93ZXJDYXNlKCk6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9IHNlbGYubDEwbi5hbVBNWzFdO1xuICAgICAgICAgICAgICAgICAgICBzZXRIb3Vyc0Zyb21JbnB1dHMoKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSW5wdXQgfHwgaXNDYWxlbmRhckVsZW0oZXZlbnRUYXJnZXQpKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbktleURvd25cIiwgZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25Nb3VzZU92ZXIoZWxlbSwgY2VsbENsYXNzKSB7XG4gICAgICAgIGlmIChjZWxsQ2xhc3MgPT09IHZvaWQgMCkgeyBjZWxsQ2xhc3MgPSBcImZsYXRwaWNrci1kYXlcIjsgfVxuICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCAhPT0gMSB8fFxuICAgICAgICAgICAgKGVsZW0gJiZcbiAgICAgICAgICAgICAgICAoIWVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKGNlbGxDbGFzcykgfHxcbiAgICAgICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoXCJmbGF0cGlja3ItZGlzYWJsZWRcIikpKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGhvdmVyRGF0ZSA9IGVsZW1cbiAgICAgICAgICAgID8gZWxlbS5kYXRlT2JqLmdldFRpbWUoKVxuICAgICAgICAgICAgOiBzZWxmLmRheXMuZmlyc3RFbGVtZW50Q2hpbGQuZGF0ZU9iai5nZXRUaW1lKCksIGluaXRpYWxEYXRlID0gc2VsZi5wYXJzZURhdGUoc2VsZi5zZWxlY3RlZERhdGVzWzBdLCB1bmRlZmluZWQsIHRydWUpLmdldFRpbWUoKSwgcmFuZ2VTdGFydERhdGUgPSBNYXRoLm1pbihob3ZlckRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkpLCByYW5nZUVuZERhdGUgPSBNYXRoLm1heChob3ZlckRhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkpO1xuICAgICAgICB2YXIgY29udGFpbnNEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgbWluUmFuZ2UgPSAwLCBtYXhSYW5nZSA9IDA7XG4gICAgICAgIGZvciAodmFyIHQgPSByYW5nZVN0YXJ0RGF0ZTsgdCA8IHJhbmdlRW5kRGF0ZTsgdCArPSBkdXJhdGlvbi5EQVkpIHtcbiAgICAgICAgICAgIGlmICghaXNFbmFibGVkKG5ldyBEYXRlKHQpLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5zRGlzYWJsZWQgPVxuICAgICAgICAgICAgICAgICAgICBjb250YWluc0Rpc2FibGVkIHx8ICh0ID4gcmFuZ2VTdGFydERhdGUgJiYgdCA8IHJhbmdlRW5kRGF0ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHQgPCBpbml0aWFsRGF0ZSAmJiAoIW1pblJhbmdlIHx8IHQgPiBtaW5SYW5nZSkpXG4gICAgICAgICAgICAgICAgICAgIG1pblJhbmdlID0gdDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0ID4gaW5pdGlhbERhdGUgJiYgKCFtYXhSYW5nZSB8fCB0IDwgbWF4UmFuZ2UpKVxuICAgICAgICAgICAgICAgICAgICBtYXhSYW5nZSA9IHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvdmVyYWJsZUNlbGxzID0gQXJyYXkuZnJvbShzZWxmLnJDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIio6bnRoLWNoaWxkKC1uK1wiICsgc2VsZi5jb25maWcuc2hvd01vbnRocyArIFwiKSA+IC5cIiArIGNlbGxDbGFzcykpO1xuICAgICAgICBob3ZlcmFibGVDZWxscy5mb3JFYWNoKGZ1bmN0aW9uIChkYXlFbGVtKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IGRheUVsZW0uZGF0ZU9iajtcbiAgICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICAgIHZhciBvdXRPZlJhbmdlID0gKG1pblJhbmdlID4gMCAmJiB0aW1lc3RhbXAgPCBtaW5SYW5nZSkgfHxcbiAgICAgICAgICAgICAgICAobWF4UmFuZ2UgPiAwICYmIHRpbWVzdGFtcCA+IG1heFJhbmdlKTtcbiAgICAgICAgICAgIGlmIChvdXRPZlJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZGF5RWxlbS5jbGFzc0xpc3QuYWRkKFwibm90QWxsb3dlZFwiKTtcbiAgICAgICAgICAgICAgICBbXCJpblJhbmdlXCIsIFwic3RhcnRSYW5nZVwiLCBcImVuZFJhbmdlXCJdLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF5RWxlbS5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbnRhaW5zRGlzYWJsZWQgJiYgIW91dE9mUmFuZ2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgW1wic3RhcnRSYW5nZVwiLCBcImluUmFuZ2VcIiwgXCJlbmRSYW5nZVwiLCBcIm5vdEFsbG93ZWRcIl0uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LnJlbW92ZShjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGVsZW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChob3ZlckRhdGUgPD0gc2VsZi5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKVxuICAgICAgICAgICAgICAgICAgICA/IFwic3RhcnRSYW5nZVwiXG4gICAgICAgICAgICAgICAgICAgIDogXCJlbmRSYW5nZVwiKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbERhdGUgPCBob3ZlckRhdGUgJiYgdGltZXN0YW1wID09PSBpbml0aWFsRGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgZGF5RWxlbS5jbGFzc0xpc3QuYWRkKFwic3RhcnRSYW5nZVwiKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpbml0aWFsRGF0ZSA+IGhvdmVyRGF0ZSAmJiB0aW1lc3RhbXAgPT09IGluaXRpYWxEYXRlKVxuICAgICAgICAgICAgICAgICAgICBkYXlFbGVtLmNsYXNzTGlzdC5hZGQoXCJlbmRSYW5nZVwiKTtcbiAgICAgICAgICAgICAgICBpZiAodGltZXN0YW1wID49IG1pblJhbmdlICYmXG4gICAgICAgICAgICAgICAgICAgIChtYXhSYW5nZSA9PT0gMCB8fCB0aW1lc3RhbXAgPD0gbWF4UmFuZ2UpICYmXG4gICAgICAgICAgICAgICAgICAgIGlzQmV0d2Vlbih0aW1lc3RhbXAsIGluaXRpYWxEYXRlLCBob3ZlckRhdGUpKVxuICAgICAgICAgICAgICAgICAgICBkYXlFbGVtLmNsYXNzTGlzdC5hZGQoXCJpblJhbmdlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gICAgICAgIGlmIChzZWxmLmlzT3BlbiAmJiAhc2VsZi5jb25maWcuc3RhdGljICYmICFzZWxmLmNvbmZpZy5pbmxpbmUpXG4gICAgICAgICAgICBwb3NpdGlvbkNhbGVuZGFyKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9wZW4oZSwgcG9zaXRpb25FbGVtZW50KSB7XG4gICAgICAgIGlmIChwb3NpdGlvbkVsZW1lbnQgPT09IHZvaWQgMCkgeyBwb3NpdGlvbkVsZW1lbnQgPSBzZWxmLl9wb3NpdGlvbkVsZW1lbnQ7IH1cbiAgICAgICAgaWYgKHNlbGYuaXNNb2JpbGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHZhciBldmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICAgICAgICAgIGlmIChldmVudFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldC5ibHVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbk9wZW5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2VsZi5faW5wdXQuZGlzYWJsZWQgfHwgc2VsZi5jb25maWcuaW5saW5lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdhc09wZW4gPSBzZWxmLmlzT3BlbjtcbiAgICAgICAgc2VsZi5pc09wZW4gPSB0cnVlO1xuICAgICAgICBpZiAoIXdhc09wZW4pIHtcbiAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm9wZW5cIik7XG4gICAgICAgICAgICBzZWxmLl9pbnB1dC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25PcGVuXCIpO1xuICAgICAgICAgICAgcG9zaXRpb25DYWxlbmRhcihwb3NpdGlvbkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lID09PSB0cnVlICYmIHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5hbGxvd0lucHV0ID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgIChlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgIXNlbGYudGltZUNvbnRhaW5lci5jb250YWlucyhlLnJlbGF0ZWRUYXJnZXQpKSkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZi5ob3VyRWxlbWVudC5zZWxlY3QoKTsgfSwgNTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1pbk1heERhdGVTZXR0ZXIodHlwZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgIHZhciBkYXRlT2JqID0gKHNlbGYuY29uZmlnW1wiX1wiICsgdHlwZSArIFwiRGF0ZVwiXSA9IHNlbGYucGFyc2VEYXRlKGRhdGUsIHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpKTtcbiAgICAgICAgICAgIHZhciBpbnZlcnNlRGF0ZU9iaiA9IHNlbGYuY29uZmlnW1wiX1wiICsgKHR5cGUgPT09IFwibWluXCIgPyBcIm1heFwiIDogXCJtaW5cIikgKyBcIkRhdGVcIl07XG4gICAgICAgICAgICBpZiAoZGF0ZU9iaiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZlt0eXBlID09PSBcIm1pblwiID8gXCJtaW5EYXRlSGFzVGltZVwiIDogXCJtYXhEYXRlSGFzVGltZVwiXSA9XG4gICAgICAgICAgICAgICAgICAgIGRhdGVPYmouZ2V0SG91cnMoKSA+IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVPYmouZ2V0TWludXRlcygpID4gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZU9iai5nZXRTZWNvbmRzKCkgPiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcykge1xuICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IHNlbGYuc2VsZWN0ZWREYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGlzRW5hYmxlZChkKTsgfSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoICYmIHR5cGUgPT09IFwibWluXCIpXG4gICAgICAgICAgICAgICAgICAgIHNldEhvdXJzRnJvbURhdGUoZGF0ZU9iaik7XG4gICAgICAgICAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICByZWRyYXcoKTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZU9iaiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudFt0eXBlXSA9IGRhdGVPYmouZ2V0RnVsbFllYXIoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhckVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHR5cGUpO1xuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXJFbGVtZW50LmRpc2FibGVkID1cbiAgICAgICAgICAgICAgICAgICAgISFpbnZlcnNlRGF0ZU9iaiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZU9iaiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNlRGF0ZU9iai5nZXRGdWxsWWVhcigpID09PSBkYXRlT2JqLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlQ29uZmlnKCkge1xuICAgICAgICB2YXIgYm9vbE9wdHMgPSBbXG4gICAgICAgICAgICBcIndyYXBcIixcbiAgICAgICAgICAgIFwid2Vla051bWJlcnNcIixcbiAgICAgICAgICAgIFwiYWxsb3dJbnB1dFwiLFxuICAgICAgICAgICAgXCJhbGxvd0ludmFsaWRQcmVsb2FkXCIsXG4gICAgICAgICAgICBcImNsaWNrT3BlbnNcIixcbiAgICAgICAgICAgIFwidGltZV8yNGhyXCIsXG4gICAgICAgICAgICBcImVuYWJsZVRpbWVcIixcbiAgICAgICAgICAgIFwibm9DYWxlbmRhclwiLFxuICAgICAgICAgICAgXCJhbHRJbnB1dFwiLFxuICAgICAgICAgICAgXCJzaG9ydGhhbmRDdXJyZW50TW9udGhcIixcbiAgICAgICAgICAgIFwiaW5saW5lXCIsXG4gICAgICAgICAgICBcInN0YXRpY1wiLFxuICAgICAgICAgICAgXCJlbmFibGVTZWNvbmRzXCIsXG4gICAgICAgICAgICBcImRpc2FibGVNb2JpbGVcIixcbiAgICAgICAgXTtcbiAgICAgICAgdmFyIHVzZXJDb25maWcgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlbGVtZW50LmRhdGFzZXQgfHwge30pKSksIGluc3RhbmNlQ29uZmlnKTtcbiAgICAgICAgdmFyIGZvcm1hdHMgPSB7fTtcbiAgICAgICAgc2VsZi5jb25maWcucGFyc2VEYXRlID0gdXNlckNvbmZpZy5wYXJzZURhdGU7XG4gICAgICAgIHNlbGYuY29uZmlnLmZvcm1hdERhdGUgPSB1c2VyQ29uZmlnLmZvcm1hdERhdGU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJlbmFibGVcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLmNvbmZpZy5fZW5hYmxlOyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5fZW5hYmxlID0gcGFyc2VEYXRlUnVsZXMoZGF0ZXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJkaXNhYmxlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZi5jb25maWcuX2Rpc2FibGU7IH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlcykge1xuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLl9kaXNhYmxlID0gcGFyc2VEYXRlUnVsZXMoZGF0ZXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0aW1lTW9kZSA9IHVzZXJDb25maWcubW9kZSA9PT0gXCJ0aW1lXCI7XG4gICAgICAgIGlmICghdXNlckNvbmZpZy5kYXRlRm9ybWF0ICYmICh1c2VyQ29uZmlnLmVuYWJsZVRpbWUgfHwgdGltZU1vZGUpKSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdERhdGVGb3JtYXQgPSBmbGF0cGlja3IuZGVmYXVsdENvbmZpZy5kYXRlRm9ybWF0IHx8IGRlZmF1bHRPcHRpb25zLmRhdGVGb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXRzLmRhdGVGb3JtYXQgPVxuICAgICAgICAgICAgICAgIHVzZXJDb25maWcubm9DYWxlbmRhciB8fCB0aW1lTW9kZVxuICAgICAgICAgICAgICAgICAgICA/IFwiSDppXCIgKyAodXNlckNvbmZpZy5lbmFibGVTZWNvbmRzID8gXCI6U1wiIDogXCJcIilcbiAgICAgICAgICAgICAgICAgICAgOiBkZWZhdWx0RGF0ZUZvcm1hdCArIFwiIEg6aVwiICsgKHVzZXJDb25maWcuZW5hYmxlU2Vjb25kcyA/IFwiOlNcIiA6IFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1c2VyQ29uZmlnLmFsdElucHV0ICYmXG4gICAgICAgICAgICAodXNlckNvbmZpZy5lbmFibGVUaW1lIHx8IHRpbWVNb2RlKSAmJlxuICAgICAgICAgICAgIXVzZXJDb25maWcuYWx0Rm9ybWF0KSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdEFsdEZvcm1hdCA9IGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnLmFsdEZvcm1hdCB8fCBkZWZhdWx0T3B0aW9ucy5hbHRGb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXRzLmFsdEZvcm1hdCA9XG4gICAgICAgICAgICAgICAgdXNlckNvbmZpZy5ub0NhbGVuZGFyIHx8IHRpbWVNb2RlXG4gICAgICAgICAgICAgICAgICAgID8gXCJoOmlcIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyBcIjpTIEtcIiA6IFwiIEtcIilcbiAgICAgICAgICAgICAgICAgICAgOiBkZWZhdWx0QWx0Rm9ybWF0ICsgKFwiIGg6aVwiICsgKHVzZXJDb25maWcuZW5hYmxlU2Vjb25kcyA/IFwiOlNcIiA6IFwiXCIpICsgXCIgS1wiKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwibWluRGF0ZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9taW5EYXRlOyB9LFxuICAgICAgICAgICAgc2V0OiBtaW5NYXhEYXRlU2V0dGVyKFwibWluXCIpLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCBcIm1heERhdGVcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLmNvbmZpZy5fbWF4RGF0ZTsgfSxcbiAgICAgICAgICAgIHNldDogbWluTWF4RGF0ZVNldHRlcihcIm1heFwiKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBtaW5NYXhUaW1lU2V0dGVyID0gZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnW3R5cGUgPT09IFwibWluXCIgPyBcIl9taW5UaW1lXCIgOiBcIl9tYXhUaW1lXCJdID0gc2VsZi5wYXJzZURhdGUodmFsLCBcIkg6aTpTXCIpO1xuICAgICAgICB9OyB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwibWluVGltZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9taW5UaW1lOyB9LFxuICAgICAgICAgICAgc2V0OiBtaW5NYXhUaW1lU2V0dGVyKFwibWluXCIpLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCBcIm1heFRpbWVcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLmNvbmZpZy5fbWF4VGltZTsgfSxcbiAgICAgICAgICAgIHNldDogbWluTWF4VGltZVNldHRlcihcIm1heFwiKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh1c2VyQ29uZmlnLm1vZGUgPT09IFwidGltZVwiKSB7XG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLmVuYWJsZVRpbWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5hc3NpZ24oc2VsZi5jb25maWcsIGZvcm1hdHMsIHVzZXJDb25maWcpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvb2xPcHRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgc2VsZi5jb25maWdbYm9vbE9wdHNbaV1dID1cbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1tib29sT3B0c1tpXV0gPT09IHRydWUgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWdbYm9vbE9wdHNbaV1dID09PSBcInRydWVcIjtcbiAgICAgICAgSE9PS1MuZmlsdGVyKGZ1bmN0aW9uIChob29rKSB7IHJldHVybiBzZWxmLmNvbmZpZ1tob29rXSAhPT0gdW5kZWZpbmVkOyB9KS5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gICAgICAgICAgICBzZWxmLmNvbmZpZ1tob29rXSA9IGFycmF5aWZ5KHNlbGYuY29uZmlnW2hvb2tdIHx8IFtdKS5tYXAoYmluZFRvSW5zdGFuY2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2VsZi5pc01vYmlsZSA9XG4gICAgICAgICAgICAhc2VsZi5jb25maWcuZGlzYWJsZU1vYmlsZSAmJlxuICAgICAgICAgICAgICAgICFzZWxmLmNvbmZpZy5pbmxpbmUgJiZcbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tb2RlID09PSBcInNpbmdsZVwiICYmXG4gICAgICAgICAgICAgICAgIXNlbGYuY29uZmlnLmRpc2FibGUubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgIXNlbGYuY29uZmlnLmVuYWJsZSAmJlxuICAgICAgICAgICAgICAgICFzZWxmLmNvbmZpZy53ZWVrTnVtYmVycyAmJlxuICAgICAgICAgICAgICAgIC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmNvbmZpZy5wbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGx1Z2luQ29uZiA9IHNlbGYuY29uZmlnLnBsdWdpbnNbaV0oc2VsZikgfHwge307XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGx1Z2luQ29uZikge1xuICAgICAgICAgICAgICAgIGlmIChIT09LUy5pbmRleE9mKGtleSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1trZXldID0gYXJyYXlpZnkocGx1Z2luQ29uZltrZXldKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChiaW5kVG9JbnN0YW5jZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoc2VsZi5jb25maWdba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB1c2VyQ29uZmlnW2tleV0gPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnW2tleV0gPSBwbHVnaW5Db25mW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF1c2VyQ29uZmlnLmFsdElucHV0Q2xhc3MpIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLmFsdElucHV0Q2xhc3MgPVxuICAgICAgICAgICAgICAgIGdldElucHV0RWxlbSgpLmNsYXNzTmFtZSArIFwiIFwiICsgc2VsZi5jb25maWcuYWx0SW5wdXRDbGFzcztcbiAgICAgICAgfVxuICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblBhcnNlQ29uZmlnXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRJbnB1dEVsZW0oKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmNvbmZpZy53cmFwXG4gICAgICAgICAgICA/IGVsZW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLWlucHV0XVwiKVxuICAgICAgICAgICAgOiBlbGVtZW50O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXR1cExvY2FsZSgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmLmNvbmZpZy5sb2NhbGUgIT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIHR5cGVvZiBmbGF0cGlja3IubDEwbnNbc2VsZi5jb25maWcubG9jYWxlXSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLmVycm9ySGFuZGxlcihuZXcgRXJyb3IoXCJmbGF0cGlja3I6IGludmFsaWQgbG9jYWxlIFwiICsgc2VsZi5jb25maWcubG9jYWxlKSk7XG4gICAgICAgIHNlbGYubDEwbiA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBmbGF0cGlja3IubDEwbnMuZGVmYXVsdCksICh0eXBlb2Ygc2VsZi5jb25maWcubG9jYWxlID09PSBcIm9iamVjdFwiXG4gICAgICAgICAgICA/IHNlbGYuY29uZmlnLmxvY2FsZVxuICAgICAgICAgICAgOiBzZWxmLmNvbmZpZy5sb2NhbGUgIT09IFwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgICAgPyBmbGF0cGlja3IubDEwbnNbc2VsZi5jb25maWcubG9jYWxlXVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKSk7XG4gICAgICAgIHRva2VuUmVnZXguRCA9IFwiKFwiICsgc2VsZi5sMTBuLndlZWtkYXlzLnNob3J0aGFuZC5qb2luKFwifFwiKSArIFwiKVwiO1xuICAgICAgICB0b2tlblJlZ2V4LmwgPSBcIihcIiArIHNlbGYubDEwbi53ZWVrZGF5cy5sb25naGFuZC5qb2luKFwifFwiKSArIFwiKVwiO1xuICAgICAgICB0b2tlblJlZ2V4Lk0gPSBcIihcIiArIHNlbGYubDEwbi5tb250aHMuc2hvcnRoYW5kLmpvaW4oXCJ8XCIpICsgXCIpXCI7XG4gICAgICAgIHRva2VuUmVnZXguRiA9IFwiKFwiICsgc2VsZi5sMTBuLm1vbnRocy5sb25naGFuZC5qb2luKFwifFwiKSArIFwiKVwiO1xuICAgICAgICB0b2tlblJlZ2V4LksgPSBcIihcIiArIHNlbGYubDEwbi5hbVBNWzBdICsgXCJ8XCIgKyBzZWxmLmwxMG4uYW1QTVsxXSArIFwifFwiICsgc2VsZi5sMTBuLmFtUE1bMF0udG9Mb3dlckNhc2UoKSArIFwifFwiICsgc2VsZi5sMTBuLmFtUE1bMV0udG9Mb3dlckNhc2UoKSArIFwiKVwiO1xuICAgICAgICB2YXIgdXNlckNvbmZpZyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBpbnN0YW5jZUNvbmZpZyksIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZWxlbWVudC5kYXRhc2V0IHx8IHt9KSkpO1xuICAgICAgICBpZiAodXNlckNvbmZpZy50aW1lXzI0aHIgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcudGltZV8yNGhyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLnRpbWVfMjRociA9IHNlbGYubDEwbi50aW1lXzI0aHI7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5mb3JtYXREYXRlID0gY3JlYXRlRGF0ZUZvcm1hdHRlcihzZWxmKTtcbiAgICAgICAgc2VsZi5wYXJzZURhdGUgPSBjcmVhdGVEYXRlUGFyc2VyKHsgY29uZmlnOiBzZWxmLmNvbmZpZywgbDEwbjogc2VsZi5sMTBuIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb3NpdGlvbkNhbGVuZGFyKGN1c3RvbVBvc2l0aW9uRWxlbWVudCkge1xuICAgICAgICBpZiAodHlwZW9mIHNlbGYuY29uZmlnLnBvc2l0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB2b2lkIHNlbGYuY29uZmlnLnBvc2l0aW9uKHNlbGYsIGN1c3RvbVBvc2l0aW9uRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdHJpZ2dlckV2ZW50KFwib25QcmVDYWxlbmRhclBvc2l0aW9uXCIpO1xuICAgICAgICB2YXIgcG9zaXRpb25FbGVtZW50ID0gY3VzdG9tUG9zaXRpb25FbGVtZW50IHx8IHNlbGYuX3Bvc2l0aW9uRWxlbWVudDtcbiAgICAgICAgdmFyIGNhbGVuZGFySGVpZ2h0ID0gQXJyYXkucHJvdG90eXBlLnJlZHVjZS5jYWxsKHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2hpbGRyZW4sIChmdW5jdGlvbiAoYWNjLCBjaGlsZCkgeyByZXR1cm4gYWNjICsgY2hpbGQub2Zmc2V0SGVpZ2h0OyB9KSwgMCksIGNhbGVuZGFyV2lkdGggPSBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLm9mZnNldFdpZHRoLCBjb25maWdQb3MgPSBzZWxmLmNvbmZpZy5wb3NpdGlvbi5zcGxpdChcIiBcIiksIGNvbmZpZ1Bvc1ZlcnRpY2FsID0gY29uZmlnUG9zWzBdLCBjb25maWdQb3NIb3Jpem9udGFsID0gY29uZmlnUG9zLmxlbmd0aCA+IDEgPyBjb25maWdQb3NbMV0gOiBudWxsLCBpbnB1dEJvdW5kcyA9IHBvc2l0aW9uRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgZGlzdGFuY2VGcm9tQm90dG9tID0gd2luZG93LmlubmVySGVpZ2h0IC0gaW5wdXRCb3VuZHMuYm90dG9tLCBzaG93T25Ub3AgPSBjb25maWdQb3NWZXJ0aWNhbCA9PT0gXCJhYm92ZVwiIHx8XG4gICAgICAgICAgICAoY29uZmlnUG9zVmVydGljYWwgIT09IFwiYmVsb3dcIiAmJlxuICAgICAgICAgICAgICAgIGRpc3RhbmNlRnJvbUJvdHRvbSA8IGNhbGVuZGFySGVpZ2h0ICYmXG4gICAgICAgICAgICAgICAgaW5wdXRCb3VuZHMudG9wID4gY2FsZW5kYXJIZWlnaHQpO1xuICAgICAgICB2YXIgdG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICtcbiAgICAgICAgICAgIGlucHV0Qm91bmRzLnRvcCArXG4gICAgICAgICAgICAoIXNob3dPblRvcCA/IHBvc2l0aW9uRWxlbWVudC5vZmZzZXRIZWlnaHQgKyAyIDogLWNhbGVuZGFySGVpZ2h0IC0gMik7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiYXJyb3dUb3BcIiwgIXNob3dPblRvcCk7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiYXJyb3dCb3R0b21cIiwgc2hvd09uVG9wKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmlubGluZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGxlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQgKyBpbnB1dEJvdW5kcy5sZWZ0O1xuICAgICAgICB2YXIgaXNDZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlzUmlnaHQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGNvbmZpZ1Bvc0hvcml6b250YWwgPT09IFwiY2VudGVyXCIpIHtcbiAgICAgICAgICAgIGxlZnQgLT0gKGNhbGVuZGFyV2lkdGggLSBpbnB1dEJvdW5kcy53aWR0aCkgLyAyO1xuICAgICAgICAgICAgaXNDZW50ZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbmZpZ1Bvc0hvcml6b250YWwgPT09IFwicmlnaHRcIikge1xuICAgICAgICAgICAgbGVmdCAtPSBjYWxlbmRhcldpZHRoIC0gaW5wdXRCb3VuZHMud2lkdGg7XG4gICAgICAgICAgICBpc1JpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImFycm93TGVmdFwiLCAhaXNDZW50ZXIgJiYgIWlzUmlnaHQpO1xuICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImFycm93Q2VudGVyXCIsIGlzQ2VudGVyKTtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJhcnJvd1JpZ2h0XCIsIGlzUmlnaHQpO1xuICAgICAgICB2YXIgcmlnaHQgPSB3aW5kb3cuZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAtXG4gICAgICAgICAgICAod2luZG93LnBhZ2VYT2Zmc2V0ICsgaW5wdXRCb3VuZHMucmlnaHQpO1xuICAgICAgICB2YXIgcmlnaHRNb3N0ID0gbGVmdCArIGNhbGVuZGFyV2lkdGggPiB3aW5kb3cuZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aDtcbiAgICAgICAgdmFyIGNlbnRlck1vc3QgPSByaWdodCArIGNhbGVuZGFyV2lkdGggPiB3aW5kb3cuZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aDtcbiAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJyaWdodE1vc3RcIiwgcmlnaHRNb3N0KTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLnN0YXRpYylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS50b3AgPSB0b3AgKyBcInB4XCI7XG4gICAgICAgIGlmICghcmlnaHRNb3N0KSB7XG4gICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBsZWZ0ICsgXCJweFwiO1xuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFjZW50ZXJNb3N0KSB7XG4gICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBcImF1dG9cIjtcbiAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUucmlnaHQgPSByaWdodCArIFwicHhcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBkb2MgPSBnZXREb2N1bWVudFN0eWxlU2hlZXQoKTtcbiAgICAgICAgICAgIGlmIChkb2MgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgYm9keVdpZHRoID0gd2luZG93LmRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICB2YXIgY2VudGVyTGVmdCA9IE1hdGgubWF4KDAsIGJvZHlXaWR0aCAvIDIgLSBjYWxlbmRhcldpZHRoIC8gMik7XG4gICAgICAgICAgICB2YXIgY2VudGVyQmVmb3JlID0gXCIuZmxhdHBpY2tyLWNhbGVuZGFyLmNlbnRlck1vc3Q6YmVmb3JlXCI7XG4gICAgICAgICAgICB2YXIgY2VudGVyQWZ0ZXIgPSBcIi5mbGF0cGlja3ItY2FsZW5kYXIuY2VudGVyTW9zdDphZnRlclwiO1xuICAgICAgICAgICAgdmFyIGNlbnRlckluZGV4ID0gZG9jLmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBjZW50ZXJTdHlsZSA9IFwie2xlZnQ6XCIgKyBpbnB1dEJvdW5kcy5sZWZ0ICsgXCJweDtyaWdodDphdXRvO31cIjtcbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwicmlnaHRNb3N0XCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiY2VudGVyTW9zdFwiLCB0cnVlKTtcbiAgICAgICAgICAgIGRvYy5pbnNlcnRSdWxlKGNlbnRlckJlZm9yZSArIFwiLFwiICsgY2VudGVyQWZ0ZXIgKyBjZW50ZXJTdHlsZSwgY2VudGVySW5kZXgpO1xuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gY2VudGVyTGVmdCArIFwicHhcIjtcbiAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUucmlnaHQgPSBcImF1dG9cIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZXREb2N1bWVudFN0eWxlU2hlZXQoKSB7XG4gICAgICAgIHZhciBlZGl0YWJsZVNoZWV0ID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNoZWV0ID0gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgICAgICAgICBpZiAoIXNoZWV0LmNzc1J1bGVzKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzaGVldC5jc3NSdWxlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkaXRhYmxlU2hlZXQgPSBzaGVldDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlZGl0YWJsZVNoZWV0ICE9IG51bGwgPyBlZGl0YWJsZVNoZWV0IDogY3JlYXRlU3R5bGVTaGVldCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVTdHlsZVNoZWV0KCkge1xuICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICByZXR1cm4gc3R5bGUuc2hlZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHJhdygpIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgfHwgc2VsZi5pc01vYmlsZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpO1xuICAgICAgICB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG4gICAgICAgIGJ1aWxkRGF5cygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb2N1c0FuZENsb3NlKCkge1xuICAgICAgICBzZWxmLl9pbnB1dC5mb2N1cygpO1xuICAgICAgICBpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIk1TSUVcIikgIT09IC0xIHx8XG4gICAgICAgICAgICBuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHNlbGYuY2xvc2UsIDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlbGVjdERhdGUoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHZhciBpc1NlbGVjdGFibGUgPSBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5LmNsYXNzTGlzdCAmJlxuICAgICAgICAgICAgICAgIGRheS5jbGFzc0xpc3QuY29udGFpbnMoXCJmbGF0cGlja3ItZGF5XCIpICYmXG4gICAgICAgICAgICAgICAgIWRheS5jbGFzc0xpc3QuY29udGFpbnMoXCJmbGF0cGlja3ItZGlzYWJsZWRcIikgJiZcbiAgICAgICAgICAgICAgICAhZGF5LmNsYXNzTGlzdC5jb250YWlucyhcIm5vdEFsbG93ZWRcIik7XG4gICAgICAgIH07XG4gICAgICAgIHZhciB0ID0gZmluZFBhcmVudChnZXRFdmVudFRhcmdldChlKSwgaXNTZWxlY3RhYmxlKTtcbiAgICAgICAgaWYgKHQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHRhcmdldCA9IHQ7XG4gICAgICAgIHZhciBzZWxlY3RlZERhdGUgPSAoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSBuZXcgRGF0ZSh0YXJnZXQuZGF0ZU9iai5nZXRUaW1lKCkpKTtcbiAgICAgICAgdmFyIHNob3VsZENoYW5nZU1vbnRoID0gKHNlbGVjdGVkRGF0ZS5nZXRNb250aCgpIDwgc2VsZi5jdXJyZW50TW9udGggfHxcbiAgICAgICAgICAgIHNlbGVjdGVkRGF0ZS5nZXRNb250aCgpID5cbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCArIHNlbGYuY29uZmlnLnNob3dNb250aHMgLSAxKSAmJlxuICAgICAgICAgICAgc2VsZi5jb25maWcubW9kZSAhPT0gXCJyYW5nZVwiO1xuICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZUVsZW0gPSB0YXJnZXQ7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInNpbmdsZVwiKVxuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gW3NlbGVjdGVkRGF0ZV07XG4gICAgICAgIGVsc2UgaWYgKHNlbGYuY29uZmlnLm1vZGUgPT09IFwibXVsdGlwbGVcIikge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSBpc0RhdGVTZWxlY3RlZChzZWxlY3RlZERhdGUpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXgpXG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzLnNwbGljZShwYXJzZUludChzZWxlY3RlZEluZGV4KSwgMSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzLnB1c2goc2VsZWN0ZWREYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jbGVhcihmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSBzZWxlY3RlZERhdGU7XG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMucHVzaChzZWxlY3RlZERhdGUpO1xuICAgICAgICAgICAgaWYgKGNvbXBhcmVEYXRlcyhzZWxlY3RlZERhdGUsIHNlbGYuc2VsZWN0ZWREYXRlc1swXSwgdHJ1ZSkgIT09IDApXG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuZ2V0VGltZSgpIC0gYi5nZXRUaW1lKCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpO1xuICAgICAgICBpZiAoc2hvdWxkQ2hhbmdlTW9udGgpIHtcbiAgICAgICAgICAgIHZhciBpc05ld1llYXIgPSBzZWxmLmN1cnJlbnRZZWFyICE9PSBzZWxlY3RlZERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPSBzZWxlY3RlZERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gc2VsZWN0ZWREYXRlLmdldE1vbnRoKCk7XG4gICAgICAgICAgICBpZiAoaXNOZXdZZWFyKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25ZZWFyQ2hhbmdlXCIpO1xuICAgICAgICAgICAgICAgIGJ1aWxkTW9udGhTd2l0Y2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uTW9udGhDaGFuZ2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlTmF2aWdhdGlvbkN1cnJlbnRNb250aCgpO1xuICAgICAgICBidWlsZERheXMoKTtcbiAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgaWYgKCFzaG91bGRDaGFuZ2VNb250aCAmJlxuICAgICAgICAgICAgc2VsZi5jb25maWcubW9kZSAhPT0gXCJyYW5nZVwiICYmXG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5zaG93TW9udGhzID09PSAxKVxuICAgICAgICAgICAgZm9jdXNPbkRheUVsZW0odGFyZ2V0KTtcbiAgICAgICAgZWxzZSBpZiAoc2VsZi5zZWxlY3RlZERhdGVFbGVtICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVFbGVtICYmIHNlbGYuc2VsZWN0ZWREYXRlRWxlbS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmhvdXJFbGVtZW50ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50ICE9PSB1bmRlZmluZWQgJiYgc2VsZi5ob3VyRWxlbWVudC5mb2N1cygpO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuY2xvc2VPblNlbGVjdCkge1xuICAgICAgICAgICAgdmFyIHNpbmdsZSA9IHNlbGYuY29uZmlnLm1vZGUgPT09IFwic2luZ2xlXCIgJiYgIXNlbGYuY29uZmlnLmVuYWJsZVRpbWU7XG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSBzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIgJiZcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAyICYmXG4gICAgICAgICAgICAgICAgIXNlbGYuY29uZmlnLmVuYWJsZVRpbWU7XG4gICAgICAgICAgICBpZiAoc2luZ2xlIHx8IHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZm9jdXNBbmRDbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyaWdnZXJDaGFuZ2UoKTtcbiAgICB9XG4gICAgdmFyIENBTExCQUNLUyA9IHtcbiAgICAgICAgbG9jYWxlOiBbc2V0dXBMb2NhbGUsIHVwZGF0ZVdlZWtkYXlzXSxcbiAgICAgICAgc2hvd01vbnRoczogW2J1aWxkTW9udGhzLCBzZXRDYWxlbmRhcldpZHRoLCBidWlsZFdlZWtkYXlzXSxcbiAgICAgICAgbWluRGF0ZTogW2p1bXBUb0RhdGVdLFxuICAgICAgICBtYXhEYXRlOiBbanVtcFRvRGF0ZV0sXG4gICAgICAgIHBvc2l0aW9uRWxlbWVudDogW3VwZGF0ZVBvc2l0aW9uRWxlbWVudF0sXG4gICAgICAgIGNsaWNrT3BlbnM6IFtcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuY2xpY2tPcGVucyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBiaW5kKHNlbGYuX2lucHV0LCBcImZvY3VzXCIsIHNlbGYub3Blbik7XG4gICAgICAgICAgICAgICAgICAgIGJpbmQoc2VsZi5faW5wdXQsIFwiY2xpY2tcIiwgc2VsZi5vcGVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2lucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBzZWxmLm9wZW4pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgc2VsZi5vcGVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH07XG4gICAgZnVuY3Rpb24gc2V0KG9wdGlvbiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG9wdGlvbiAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9uID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHNlbGYuY29uZmlnLCBvcHRpb24pO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChDQUxMQkFDS1Nba2V5XSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBDQUxMQkFDS1Nba2V5XS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4KCk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5jb25maWdbb3B0aW9uXSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKENBTExCQUNLU1tvcHRpb25dICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgQ0FMTEJBQ0tTW29wdGlvbl0uZm9yRWFjaChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCgpOyB9KTtcbiAgICAgICAgICAgIGVsc2UgaWYgKEhPT0tTLmluZGV4T2Yob3B0aW9uKSA+IC0xKVxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnW29wdGlvbl0gPSBhcnJheWlmeSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5yZWRyYXcoKTtcbiAgICAgICAgdXBkYXRlVmFsdWUodHJ1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldFNlbGVjdGVkRGF0ZShpbnB1dERhdGUsIGZvcm1hdCkge1xuICAgICAgICB2YXIgZGF0ZXMgPSBbXTtcbiAgICAgICAgaWYgKGlucHV0RGF0ZSBpbnN0YW5jZW9mIEFycmF5KVxuICAgICAgICAgICAgZGF0ZXMgPSBpbnB1dERhdGUubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBzZWxmLnBhcnNlRGF0ZShkLCBmb3JtYXQpOyB9KTtcbiAgICAgICAgZWxzZSBpZiAoaW5wdXREYXRlIGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgaW5wdXREYXRlID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgZGF0ZXMgPSBbc2VsZi5wYXJzZURhdGUoaW5wdXREYXRlLCBmb3JtYXQpXTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGlucHV0RGF0ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgc3dpdGNoIChzZWxmLmNvbmZpZy5tb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNpbmdsZVwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJ0aW1lXCI6XG4gICAgICAgICAgICAgICAgICAgIGRhdGVzID0gW3NlbGYucGFyc2VEYXRlKGlucHV0RGF0ZSwgZm9ybWF0KV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgICAgICAgICAgICAgICBkYXRlcyA9IGlucHV0RGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KHNlbGYuY29uZmlnLmNvbmp1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gc2VsZi5wYXJzZURhdGUoZGF0ZSwgZm9ybWF0KTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyYW5nZVwiOlxuICAgICAgICAgICAgICAgICAgICBkYXRlcyA9IGlucHV0RGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KHNlbGYubDEwbi5yYW5nZVNlcGFyYXRvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHNlbGYucGFyc2VEYXRlKGRhdGUsIGZvcm1hdCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5lcnJvckhhbmRsZXIobmV3IEVycm9yKFwiSW52YWxpZCBkYXRlIHN1cHBsaWVkOiBcIiArIEpTT04uc3RyaW5naWZ5KGlucHV0RGF0ZSkpKTtcbiAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gKHNlbGYuY29uZmlnLmFsbG93SW52YWxpZFByZWxvYWRcbiAgICAgICAgICAgID8gZGF0ZXNcbiAgICAgICAgICAgIDogZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkIGluc3RhbmNlb2YgRGF0ZSAmJiBpc0VuYWJsZWQoZCwgZmFsc2UpOyB9KSk7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpXG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5nZXRUaW1lKCkgLSBiLmdldFRpbWUoKTsgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldERhdGUoZGF0ZSwgdHJpZ2dlckNoYW5nZSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlID09PSB2b2lkIDApIHsgdHJpZ2dlckNoYW5nZSA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IHZvaWQgMCkgeyBmb3JtYXQgPSBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0OyB9XG4gICAgICAgIGlmICgoZGF0ZSAhPT0gMCAmJiAhZGF0ZSkgfHwgKGRhdGUgaW5zdGFuY2VvZiBBcnJheSAmJiBkYXRlLmxlbmd0aCA9PT0gMCkpXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5jbGVhcih0cmlnZ2VyQ2hhbmdlKTtcbiAgICAgICAgc2V0U2VsZWN0ZWREYXRlKGRhdGUsIGZvcm1hdCk7XG4gICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID1cbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlc1tzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgIGp1bXBUb0RhdGUodW5kZWZpbmVkLCB0cmlnZ2VyQ2hhbmdlKTtcbiAgICAgICAgc2V0SG91cnNGcm9tRGF0ZSgpO1xuICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2VsZi5jbGVhcihmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlVmFsdWUodHJpZ2dlckNoYW5nZSk7XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlKVxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25DaGFuZ2VcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlRGF0ZVJ1bGVzKGFycikge1xuICAgICAgICByZXR1cm4gYXJyXG4gICAgICAgICAgICAuc2xpY2UoKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBydWxlID09PSBcInN0cmluZ1wiIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIHJ1bGUgPT09IFwibnVtYmVyXCIgfHxcbiAgICAgICAgICAgICAgICBydWxlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnBhcnNlRGF0ZShydWxlLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocnVsZSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBydWxlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICAgICAgcnVsZS5mcm9tICYmXG4gICAgICAgICAgICAgICAgcnVsZS50bylcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiBzZWxmLnBhcnNlRGF0ZShydWxlLmZyb20sIHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgICAgIHRvOiBzZWxmLnBhcnNlRGF0ZShydWxlLnRvLCB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXR1cERhdGVzKCkge1xuICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBbXTtcbiAgICAgICAgc2VsZi5ub3cgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLmNvbmZpZy5ub3cpIHx8IG5ldyBEYXRlKCk7XG4gICAgICAgIHZhciBwcmVsb2FkZWREYXRlID0gc2VsZi5jb25maWcuZGVmYXVsdERhdGUgfHxcbiAgICAgICAgICAgICgoc2VsZi5pbnB1dC5ub2RlTmFtZSA9PT0gXCJJTlBVVFwiIHx8XG4gICAgICAgICAgICAgICAgc2VsZi5pbnB1dC5ub2RlTmFtZSA9PT0gXCJURVhUQVJFQVwiKSAmJlxuICAgICAgICAgICAgICAgIHNlbGYuaW5wdXQucGxhY2Vob2xkZXIgJiZcbiAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnZhbHVlID09PSBzZWxmLmlucHV0LnBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgOiBzZWxmLmlucHV0LnZhbHVlKTtcbiAgICAgICAgaWYgKHByZWxvYWRlZERhdGUpXG4gICAgICAgICAgICBzZXRTZWxlY3RlZERhdGUocHJlbG9hZGVkRGF0ZSwgc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7XG4gICAgICAgIHNlbGYuX2luaXRpYWxEYXRlID1cbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyBzZWxmLnNlbGVjdGVkRGF0ZXNbMF1cbiAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLm1pbkRhdGUgJiZcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWluRGF0ZS5nZXRUaW1lKCkgPiBzZWxmLm5vdy5nZXRUaW1lKClcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5taW5EYXRlXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubWF4RGF0ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRUaW1lKCkgPCBzZWxmLm5vdy5nZXRUaW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi5jb25maWcubWF4RGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzZWxmLm5vdztcbiAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9IHNlbGYuX2luaXRpYWxEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gc2VsZi5faW5pdGlhbERhdGUuZ2V0TW9udGgoKTtcbiAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSBzZWxmLnNlbGVjdGVkRGF0ZXNbMF07XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5UaW1lICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5taW5UaW1lID0gc2VsZi5wYXJzZURhdGUoc2VsZi5jb25maWcubWluVGltZSwgXCJIOmlcIik7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5tYXhUaW1lICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5tYXhUaW1lID0gc2VsZi5wYXJzZURhdGUoc2VsZi5jb25maWcubWF4VGltZSwgXCJIOmlcIik7XG4gICAgICAgIHNlbGYubWluRGF0ZUhhc1RpbWUgPVxuICAgICAgICAgICAgISFzZWxmLmNvbmZpZy5taW5EYXRlICYmXG4gICAgICAgICAgICAgICAgKHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0SG91cnMoKSA+IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWluRGF0ZS5nZXRNaW51dGVzKCkgPiAwIHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0U2Vjb25kcygpID4gMCk7XG4gICAgICAgIHNlbGYubWF4RGF0ZUhhc1RpbWUgPVxuICAgICAgICAgICAgISFzZWxmLmNvbmZpZy5tYXhEYXRlICYmXG4gICAgICAgICAgICAgICAgKHNlbGYuY29uZmlnLm1heERhdGUuZ2V0SG91cnMoKSA+IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRNaW51dGVzKCkgPiAwIHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1heERhdGUuZ2V0U2Vjb25kcygpID4gMCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldHVwSW5wdXRzKCkge1xuICAgICAgICBzZWxmLmlucHV0ID0gZ2V0SW5wdXRFbGVtKCk7XG4gICAgICAgIGlmICghc2VsZi5pbnB1dCkge1xuICAgICAgICAgICAgc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQgZWxlbWVudCBzcGVjaWZpZWRcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuaW5wdXQuX3R5cGUgPSBzZWxmLmlucHV0LnR5cGU7XG4gICAgICAgIHNlbGYuaW5wdXQudHlwZSA9IFwidGV4dFwiO1xuICAgICAgICBzZWxmLmlucHV0LmNsYXNzTGlzdC5hZGQoXCJmbGF0cGlja3ItaW5wdXRcIik7XG4gICAgICAgIHNlbGYuX2lucHV0ID0gc2VsZi5pbnB1dDtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLmFsdElucHV0KSB7XG4gICAgICAgICAgICBzZWxmLmFsdElucHV0ID0gY3JlYXRlRWxlbWVudChzZWxmLmlucHV0Lm5vZGVOYW1lLCBzZWxmLmNvbmZpZy5hbHRJbnB1dENsYXNzKTtcbiAgICAgICAgICAgIHNlbGYuX2lucHV0ID0gc2VsZi5hbHRJbnB1dDtcbiAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQucGxhY2Vob2xkZXIgPSBzZWxmLmlucHV0LnBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC5kaXNhYmxlZCA9IHNlbGYuaW5wdXQuZGlzYWJsZWQ7XG4gICAgICAgICAgICBzZWxmLmFsdElucHV0LnJlcXVpcmVkID0gc2VsZi5pbnB1dC5yZXF1aXJlZDtcbiAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQudGFiSW5kZXggPSBzZWxmLmlucHV0LnRhYkluZGV4O1xuICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgICAgICBzZWxmLmlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgICAgICBpZiAoIXNlbGYuY29uZmlnLnN0YXRpYyAmJiBzZWxmLmlucHV0LnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgc2VsZi5pbnB1dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLmFsdElucHV0LCBzZWxmLmlucHV0Lm5leHRTaWJsaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNlbGYuY29uZmlnLmFsbG93SW5wdXQpXG4gICAgICAgICAgICBzZWxmLl9pbnB1dC5zZXRBdHRyaWJ1dGUoXCJyZWFkb25seVwiLCBcInJlYWRvbmx5XCIpO1xuICAgICAgICB1cGRhdGVQb3NpdGlvbkVsZW1lbnQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zaXRpb25FbGVtZW50KCkge1xuICAgICAgICBzZWxmLl9wb3NpdGlvbkVsZW1lbnQgPSBzZWxmLmNvbmZpZy5wb3NpdGlvbkVsZW1lbnQgfHwgc2VsZi5faW5wdXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldHVwTW9iaWxlKCkge1xuICAgICAgICB2YXIgaW5wdXRUeXBlID0gc2VsZi5jb25maWcuZW5hYmxlVGltZVxuICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5ub0NhbGVuZGFyXG4gICAgICAgICAgICAgICAgPyBcInRpbWVcIlxuICAgICAgICAgICAgICAgIDogXCJkYXRldGltZS1sb2NhbFwiXG4gICAgICAgICAgICA6IFwiZGF0ZVwiO1xuICAgICAgICBzZWxmLm1vYmlsZUlucHV0ID0gY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHNlbGYuaW5wdXQuY2xhc3NOYW1lICsgXCIgZmxhdHBpY2tyLW1vYmlsZVwiKTtcbiAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC50YWJJbmRleCA9IDE7XG4gICAgICAgIHNlbGYubW9iaWxlSW5wdXQudHlwZSA9IGlucHV0VHlwZTtcbiAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5kaXNhYmxlZCA9IHNlbGYuaW5wdXQuZGlzYWJsZWQ7XG4gICAgICAgIHNlbGYubW9iaWxlSW5wdXQucmVxdWlyZWQgPSBzZWxmLmlucHV0LnJlcXVpcmVkO1xuICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnBsYWNlaG9sZGVyID0gc2VsZi5pbnB1dC5wbGFjZWhvbGRlcjtcbiAgICAgICAgc2VsZi5tb2JpbGVGb3JtYXRTdHIgPVxuICAgICAgICAgICAgaW5wdXRUeXBlID09PSBcImRhdGV0aW1lLWxvY2FsXCJcbiAgICAgICAgICAgICAgICA/IFwiWS1tLWRcXFxcVEg6aTpTXCJcbiAgICAgICAgICAgICAgICA6IGlucHV0VHlwZSA9PT0gXCJkYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgPyBcIlktbS1kXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIkg6aTpTXCI7XG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5kZWZhdWx0VmFsdWUgPSBzZWxmLm1vYmlsZUlucHV0LnZhbHVlID0gc2VsZi5mb3JtYXREYXRlKHNlbGYuc2VsZWN0ZWREYXRlc1swXSwgc2VsZi5tb2JpbGVGb3JtYXRTdHIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlKVxuICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5taW4gPSBzZWxmLmZvcm1hdERhdGUoc2VsZi5jb25maWcubWluRGF0ZSwgXCJZLW0tZFwiKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heERhdGUpXG4gICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0Lm1heCA9IHNlbGYuZm9ybWF0RGF0ZShzZWxmLmNvbmZpZy5tYXhEYXRlLCBcIlktbS1kXCIpO1xuICAgICAgICBpZiAoc2VsZi5pbnB1dC5nZXRBdHRyaWJ1dGUoXCJzdGVwXCIpKVxuICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5zdGVwID0gU3RyaW5nKHNlbGYuaW5wdXQuZ2V0QXR0cmlidXRlKFwic3RlcFwiKSk7XG4gICAgICAgIHNlbGYuaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgICAgIGlmIChzZWxmLmFsdElucHV0ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBzZWxmLmFsdElucHV0LnR5cGUgPSBcImhpZGRlblwiO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHNlbGYuaW5wdXQucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYubW9iaWxlSW5wdXQsIHNlbGYuaW5wdXQubmV4dFNpYmxpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfYSkgeyB9XG4gICAgICAgIGJpbmQoc2VsZi5tb2JpbGVJbnB1dCwgXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHNlbGYuc2V0RGF0ZShnZXRFdmVudFRhcmdldChlKS52YWx1ZSwgZmFsc2UsIHNlbGYubW9iaWxlRm9ybWF0U3RyKTtcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uQ2hhbmdlXCIpO1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25DbG9zZVwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRvZ2dsZShlKSB7XG4gICAgICAgIGlmIChzZWxmLmlzT3BlbiA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmNsb3NlKCk7XG4gICAgICAgIHNlbGYub3BlbihlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJpZ2dlckV2ZW50KGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgaG9va3MgPSBzZWxmLmNvbmZpZ1tldmVudF07XG4gICAgICAgIGlmIChob29rcyAhPT0gdW5kZWZpbmVkICYmIGhvb2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBob29rc1tpXSAmJiBpIDwgaG9va3MubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgaG9va3NbaV0oc2VsZi5zZWxlY3RlZERhdGVzLCBzZWxmLmlucHV0LnZhbHVlLCBzZWxmLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQgPT09IFwib25DaGFuZ2VcIikge1xuICAgICAgICAgICAgc2VsZi5pbnB1dC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KFwiY2hhbmdlXCIpKTtcbiAgICAgICAgICAgIHNlbGYuaW5wdXQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudChcImlucHV0XCIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVFdmVudChuYW1lKSB7XG4gICAgICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICAgICAgZS5pbml0RXZlbnQobmFtZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0RhdGVTZWxlY3RlZChkYXRlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWREYXRlID0gc2VsZi5zZWxlY3RlZERhdGVzW2ldO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkRGF0ZSBpbnN0YW5jZW9mIERhdGUgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoc2VsZWN0ZWREYXRlLCBkYXRlKSA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIiArIGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0RhdGVJblJhbmdlKGRhdGUpIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgIT09IFwicmFuZ2VcIiB8fCBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIDwgMilcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIChjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdKSA+PSAwICYmXG4gICAgICAgICAgICBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzFdKSA8PSAwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlTmF2aWdhdGlvbkN1cnJlbnRNb250aCgpIHtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgfHwgc2VsZi5pc01vYmlsZSB8fCAhc2VsZi5tb250aE5hdilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc2VsZi55ZWFyRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoeWVhckVsZW1lbnQsIGkpIHtcbiAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgc2VsZi5jdXJyZW50TW9udGgsIDEpO1xuICAgICAgICAgICAgZC5zZXRNb250aChzZWxmLmN1cnJlbnRNb250aCArIGkpO1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLnNob3dNb250aHMgPiAxIHx8XG4gICAgICAgICAgICAgICAgc2VsZi5jb25maWcubW9udGhTZWxlY3RvclR5cGUgPT09IFwic3RhdGljXCIpIHtcbiAgICAgICAgICAgICAgICBzZWxmLm1vbnRoRWxlbWVudHNbaV0udGV4dENvbnRlbnQgPVxuICAgICAgICAgICAgICAgICAgICBtb250aFRvU3RyKGQuZ2V0TW9udGgoKSwgc2VsZi5jb25maWcuc2hvcnRoYW5kQ3VycmVudE1vbnRoLCBzZWxmLmwxMG4pICsgXCIgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLm1vbnRoc0Ryb3Bkb3duQ29udGFpbmVyLnZhbHVlID0gZC5nZXRNb250aCgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5ZWFyRWxlbWVudC52YWx1ZSA9IGQuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2VsZi5faGlkZVByZXZNb250aEFycm93ID1cbiAgICAgICAgICAgIHNlbGYuY29uZmlnLm1pbkRhdGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIChzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKClcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmN1cnJlbnRNb250aCA8PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldE1vbnRoKClcbiAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmN1cnJlbnRZZWFyIDwgc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICAgICAgc2VsZi5faGlkZU5leHRNb250aEFycm93ID1cbiAgICAgICAgICAgIHNlbGYuY29uZmlnLm1heERhdGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIChzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKClcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmN1cnJlbnRNb250aCArIDEgPiBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldE1vbnRoKClcbiAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmN1cnJlbnRZZWFyID4gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0RGF0ZVN0cihzcGVjaWZpY0Zvcm1hdCkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gc3BlY2lmaWNGb3JtYXQgfHxcbiAgICAgICAgICAgIChzZWxmLmNvbmZpZy5hbHRJbnB1dCA/IHNlbGYuY29uZmlnLmFsdEZvcm1hdCA6IHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpO1xuICAgICAgICByZXR1cm4gc2VsZi5zZWxlY3RlZERhdGVzXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChkT2JqKSB7IHJldHVybiBzZWxmLmZvcm1hdERhdGUoZE9iaiwgZm9ybWF0KTsgfSlcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGQsIGksIGFycikge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLm1vZGUgIT09IFwicmFuZ2VcIiB8fFxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLmVuYWJsZVRpbWUgfHxcbiAgICAgICAgICAgICAgICBhcnIuaW5kZXhPZihkKSA9PT0gaTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKHNlbGYuY29uZmlnLm1vZGUgIT09IFwicmFuZ2VcIlxuICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5jb25qdW5jdGlvblxuICAgICAgICAgICAgOiBzZWxmLmwxMG4ucmFuZ2VTZXBhcmF0b3IpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVWYWx1ZSh0cmlnZ2VyQ2hhbmdlKSB7XG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlID09PSB2b2lkIDApIHsgdHJpZ2dlckNoYW5nZSA9IHRydWU7IH1cbiAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQgIT09IHVuZGVmaW5lZCAmJiBzZWxmLm1vYmlsZUZvcm1hdFN0cikge1xuICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC52YWx1ZSA9XG4gICAgICAgICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/IHNlbGYuZm9ybWF0RGF0ZShzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiwgc2VsZi5tb2JpbGVGb3JtYXRTdHIpXG4gICAgICAgICAgICAgICAgICAgIDogXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmlucHV0LnZhbHVlID0gZ2V0RGF0ZVN0cihzZWxmLmNvbmZpZy5kYXRlRm9ybWF0KTtcbiAgICAgICAgaWYgKHNlbGYuYWx0SW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC52YWx1ZSA9IGdldERhdGVTdHIoc2VsZi5jb25maWcuYWx0Rm9ybWF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJpZ2dlckNoYW5nZSAhPT0gZmFsc2UpXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblZhbHVlVXBkYXRlXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbk1vbnRoTmF2Q2xpY2soZSkge1xuICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChlKTtcbiAgICAgICAgdmFyIGlzUHJldk1vbnRoID0gc2VsZi5wcmV2TW9udGhOYXYuY29udGFpbnMoZXZlbnRUYXJnZXQpO1xuICAgICAgICB2YXIgaXNOZXh0TW9udGggPSBzZWxmLm5leHRNb250aE5hdi5jb250YWlucyhldmVudFRhcmdldCk7XG4gICAgICAgIGlmIChpc1ByZXZNb250aCB8fCBpc05leHRNb250aCkge1xuICAgICAgICAgICAgY2hhbmdlTW9udGgoaXNQcmV2TW9udGggPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlbGYueWVhckVsZW1lbnRzLmluZGV4T2YoZXZlbnRUYXJnZXQpID49IDApIHtcbiAgICAgICAgICAgIGV2ZW50VGFyZ2V0LnNlbGVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV2ZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImFycm93VXBcIikpIHtcbiAgICAgICAgICAgIHNlbGYuY2hhbmdlWWVhcihzZWxmLmN1cnJlbnRZZWFyICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYXJyb3dEb3duXCIpKSB7XG4gICAgICAgICAgICBzZWxmLmNoYW5nZVllYXIoc2VsZi5jdXJyZW50WWVhciAtIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRpbWVXcmFwcGVyKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgaXNLZXlEb3duID0gZS50eXBlID09PSBcImtleWRvd25cIiwgZXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChlKSwgaW5wdXQgPSBldmVudFRhcmdldDtcbiAgICAgICAgaWYgKHNlbGYuYW1QTSAhPT0gdW5kZWZpbmVkICYmIGV2ZW50VGFyZ2V0ID09PSBzZWxmLmFtUE0pIHtcbiAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9XG4gICAgICAgICAgICAgICAgc2VsZi5sMTBuLmFtUE1baW50KHNlbGYuYW1QTS50ZXh0Q29udGVudCA9PT0gc2VsZi5sMTBuLmFtUE1bMF0pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWluID0gcGFyc2VGbG9hdChpbnB1dC5nZXRBdHRyaWJ1dGUoXCJtaW5cIikpLCBtYXggPSBwYXJzZUZsb2F0KGlucHV0LmdldEF0dHJpYnV0ZShcIm1heFwiKSksIHN0ZXAgPSBwYXJzZUZsb2F0KGlucHV0LmdldEF0dHJpYnV0ZShcInN0ZXBcIikpLCBjdXJWYWx1ZSA9IHBhcnNlSW50KGlucHV0LnZhbHVlLCAxMCksIGRlbHRhID0gZS5kZWx0YSB8fFxuICAgICAgICAgICAgKGlzS2V5RG93biA/IChlLndoaWNoID09PSAzOCA/IDEgOiAtMSkgOiAwKTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VyVmFsdWUgKyBzdGVwICogZGVsdGE7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQudmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiYgaW5wdXQudmFsdWUubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB2YXIgaXNIb3VyRWxlbSA9IGlucHV0ID09PSBzZWxmLmhvdXJFbGVtZW50LCBpc01pbnV0ZUVsZW0gPSBpbnB1dCA9PT0gc2VsZi5taW51dGVFbGVtZW50O1xuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlIDwgbWluKSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICBtYXggK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50KCFpc0hvdXJFbGVtKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoaW50KGlzSG91ckVsZW0pICYmIGludCghc2VsZi5hbVBNKSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTWludXRlRWxlbSlcbiAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50TnVtSW5wdXQodW5kZWZpbmVkLCAtMSwgc2VsZi5ob3VyRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuZXdWYWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPT09IHNlbGYuaG91ckVsZW1lbnQgPyBuZXdWYWx1ZSAtIG1heCAtIGludCghc2VsZi5hbVBNKSA6IG1pbjtcbiAgICAgICAgICAgICAgICBpZiAoaXNNaW51dGVFbGVtKVxuICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnROdW1JbnB1dCh1bmRlZmluZWQsIDEsIHNlbGYuaG91ckVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYuYW1QTSAmJlxuICAgICAgICAgICAgICAgIGlzSG91ckVsZW0gJiZcbiAgICAgICAgICAgICAgICAoc3RlcCA9PT0gMVxuICAgICAgICAgICAgICAgICAgICA/IG5ld1ZhbHVlICsgY3VyVmFsdWUgPT09IDIzXG4gICAgICAgICAgICAgICAgICAgIDogTWF0aC5hYnMobmV3VmFsdWUgLSBjdXJWYWx1ZSkgPiBzdGVwKSkge1xuICAgICAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubDEwbi5hbVBNW2ludChzZWxmLmFtUE0udGV4dENvbnRlbnQgPT09IHNlbGYubDEwbi5hbVBNWzBdKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IHBhZChuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdCgpO1xuICAgIHJldHVybiBzZWxmO1xufVxuZnVuY3Rpb24gX2ZsYXRwaWNrcihub2RlTGlzdCwgY29uZmlnKSB7XG4gICAgdmFyIG5vZGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlXG4gICAgICAgIC5jYWxsKG5vZGVMaXN0KVxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7IH0pO1xuICAgIHZhciBpbnN0YW5jZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWZwLW9taXRcIikgIT09IG51bGwpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAobm9kZS5fZmxhdHBpY2tyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBub2RlLl9mbGF0cGlja3IuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIG5vZGUuX2ZsYXRwaWNrciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUuX2ZsYXRwaWNrciA9IEZsYXRwaWNrckluc3RhbmNlKG5vZGUsIGNvbmZpZyB8fCB7fSk7XG4gICAgICAgICAgICBpbnN0YW5jZXMucHVzaChub2RlLl9mbGF0cGlja3IpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZXMubGVuZ3RoID09PSAxID8gaW5zdGFuY2VzWzBdIDogaW5zdGFuY2VzO1xufVxuaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBIVE1MQ29sbGVjdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBOb2RlTGlzdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIEhUTUxDb2xsZWN0aW9uLnByb3RvdHlwZS5mbGF0cGlja3IgPSBOb2RlTGlzdC5wcm90b3R5cGUuZmxhdHBpY2tyID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcih0aGlzLCBjb25maWcpO1xuICAgIH07XG4gICAgSFRNTEVsZW1lbnQucHJvdG90eXBlLmZsYXRwaWNrciA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIF9mbGF0cGlja3IoW3RoaXNdLCBjb25maWcpO1xuICAgIH07XG59XG52YXIgZmxhdHBpY2tyID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBjb25maWcpIHtcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBfZmxhdHBpY2tyKHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSwgY29uZmlnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgICAgIHJldHVybiBfZmxhdHBpY2tyKFtzZWxlY3Rvcl0sIGNvbmZpZyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcihzZWxlY3RvciwgY29uZmlnKTtcbiAgICB9XG59O1xuZmxhdHBpY2tyLmRlZmF1bHRDb25maWcgPSB7fTtcbmZsYXRwaWNrci5sMTBucyA9IHtcbiAgICBlbjogX19hc3NpZ24oe30sIEVuZ2xpc2gpLFxuICAgIGRlZmF1bHQ6IF9fYXNzaWduKHt9LCBFbmdsaXNoKSxcbn07XG5mbGF0cGlja3IubG9jYWxpemUgPSBmdW5jdGlvbiAobDEwbikge1xuICAgIGZsYXRwaWNrci5sMTBucy5kZWZhdWx0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGZsYXRwaWNrci5sMTBucy5kZWZhdWx0KSwgbDEwbik7XG59O1xuZmxhdHBpY2tyLnNldERlZmF1bHRzID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnKSwgY29uZmlnKTtcbn07XG5mbGF0cGlja3IucGFyc2VEYXRlID0gY3JlYXRlRGF0ZVBhcnNlcih7fSk7XG5mbGF0cGlja3IuZm9ybWF0RGF0ZSA9IGNyZWF0ZURhdGVGb3JtYXR0ZXIoe30pO1xuZmxhdHBpY2tyLmNvbXBhcmVEYXRlcyA9IGNvbXBhcmVEYXRlcztcbmlmICh0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBqUXVlcnkuZm4gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBqUXVlcnkuZm4uZmxhdHBpY2tyID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcih0aGlzLCBjb25maWcpO1xuICAgIH07XG59XG5EYXRlLnByb3RvdHlwZS5mcF9pbmNyID0gZnVuY3Rpb24gKGRheXMpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy5nZXRGdWxsWWVhcigpLCB0aGlzLmdldE1vbnRoKCksIHRoaXMuZ2V0RGF0ZSgpICsgKHR5cGVvZiBkYXlzID09PSBcInN0cmluZ1wiID8gcGFyc2VJbnQoZGF5cywgMTApIDogZGF5cykpO1xufTtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgd2luZG93LmZsYXRwaWNrciA9IGZsYXRwaWNrcjtcbn1cbmV4cG9ydCBkZWZhdWx0IGZsYXRwaWNrcjtcbiIsIkBpbXBvcnQgJy4uLy4uLy4uL3RoZW1lLnNjc3MnO1xuQGltcG9ydCAnLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2ZsYXRwaWNrci9kaXN0L3RoZW1lcy9saWdodC5jc3MnO1xuXG52ZXJkb2NzLWZpZWxkLWRhdGUge1xuICBmb250LWZhbWlseTogJHZlcmRvY3MtcHJpbWFyeS1mb250O1xuICB3aWR0aDogNjRweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgZm9udC1zaXplOiAxMXB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxldHRlci1zcGFjaW5nOiAwLjNweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSBsZWZ0O1xuXG4gICYuZGlzYWJsZWQge1xuICAgIG9wYWNpdHk6IDAuNTtcbiAgfVxuXG4gIGlucHV0IHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODcpO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgIGZvbnQtc2l6ZTogMTFweDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkbGlnaHQtYm9yZGVyLWNvbG9yO1xuICAgIGFwcGVhcmFuY2U6IG5vbmU7XG5cbiAgICAmLmhpZGUge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cblxuICAmLnJlcXVpcmVkIHtcbiAgICBpbnB1dCB7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAkdmVyZG9jcy1yZWQtMTtcbiAgICB9XG4gIH1cblxuICAmLmZvY3VzZWQge1xuICAgIGFuaW1hdGlvbjogdmVyZG9jcy1maWVsZC1wdWxzZSAwLjc1cyAyO1xuICB9XG5cbiAgdmVyZG9jcy1idXR0b24tcGFuZWwge1xuICAgIHRvcDogLTNweDtcbiAgICBsZWZ0OiAtMnB4O1xuICAgIG9wYWNpdHk6IDAuNTtcbiAgICB6LWluZGV4OiAxMDAwO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjYpO1xuXG4gICAgJltkYXRhLWFjdGl2ZV0sXG4gICAgJjpob3ZlciB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cblxuICAgIC5pY29uIHtcbiAgICAgIHN2ZyB7XG4gICAgICAgIGZpbGw6ICMzMzMzMzM7XG4gICAgICB9XG5cbiAgICAgICY6aG92ZXIge1xuICAgICAgICBzdmcge1xuICAgICAgICAgIGZpbGw6ICMwMDAwMDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBmbGF0cGlja3IgZnJvbSAnZmxhdHBpY2tyJztcbmltcG9ydCB7SVRlbXBsYXRlRmllbGR9IGZyb20gJ0B2ZXJkb2NzL2pzLXNkay9UZW1wbGF0ZXMvVHlwZXMnO1xuaW1wb3J0IHtJRG9jdW1lbnRGaWVsZH0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL0VudmVsb3Blcy9UeXBlcyc7XG5pbXBvcnQge0NvbXBvbmVudCwgRXZlbnQsIEV2ZW50RW1pdHRlciwgaCwgSG9zdCwgTWV0aG9kLCBQcm9wLCBTdGF0ZX0gZnJvbSAnQHN0ZW5jaWwvY29yZSc7XG5pbXBvcnQge2dldEZpZWxkU2V0dGluZ3N9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7Z2V0UkdCQX0gZnJvbSAnQHZlcmRvY3MvanMtc2RrL1V0aWxzL0NvbG9ycyc7XG5pbXBvcnQge2Zvcm1hdH0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5jb25zdCBzZXR0aW5nc0ljb24gPVxuICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgaGVpZ2h0PVwiMjBcIiB3aWR0aD1cIjIwXCI+PHBhdGggZD1cIm03LjUgMTguNS0uMzEyLTIuNjY3cS0uMTg4LS4xMjUtLjM5Ni0uMjUtLjIwOS0uMTI1LS4zOTYtLjIyOWwtMi40NzkgMS4wNjMtMi41MjEtNC4zMzQgMi4xMjUtMS42MjVxLjAyMS0uMTA0LjAyMS0uMjI5di0uNDU4cTAtLjEyNS0uMDIxLS4yMjlMMS4zOTYgNy45MTdsMi41MjEtNC4zMTMgMi41IDEuMDQycS4xNjYtLjEwNC4zNzUtLjIyOS4yMDgtLjEyNS4zOTYtLjIyOUw3LjUgMS41aDVsLjMxMiAyLjY4OHEuMTg4LjEwNC4zOTYuMjI5LjIwOS4xMjUuMzk2LjIyOWwyLjQ3OS0xLjA0MiAyLjUyMSA0LjMxMy0yLjEyNSAxLjYyNXYuOTE2bDIuMTI1IDEuNjI1LTIuNTIxIDQuMzM0LTIuNS0xLjA2M3EtLjE2Ni4xMDQtLjM3NS4yMjktLjIwOC4xMjUtLjM5Ni4yNUwxMi41IDE4LjVabTIuNDc5LTUuNTIxcTEuMjI5IDAgMi4xMDQtLjg3NVQxMi45NTggMTBxMC0xLjIyOS0uODc1LTIuMTA0dC0yLjEwNC0uODc1cS0xLjIwOCAwLTIuMDk0Ljg3NVE3IDguNzcxIDcgMTB0Ljg4NSAyLjEwNHEuODg2Ljg3NSAyLjA5NC44NzVabTAtMS43NXEtLjUgMC0uODY0LS4zNjRROC43NSAxMC41IDguNzUgMTB0LjM2NS0uODY1cS4zNjQtLjM2NC44NjQtLjM2NHQuODY1LjM2NHEuMzY0LjM2NS4zNjQuODY1dC0uMzY0Ljg2NXEtLjM2NS4zNjQtLjg2NS4zNjRaTTEwLjAyMSAxMFptLS43OTIgNi41MjFoMS41NDJsLjI1LTIuMTQ2cS42MjUtLjE2NyAxLjE5OC0uNTEuNTczLS4zNDQgMS4wMzEtLjgyM2wyLjAyMS44NTQuNzcxLTEuMjcxLTEuNzcxLTEuMzU0cS4xMDQtLjI5Mi4xNTYtLjYxNS4wNTItLjMyMy4wNTItLjY1NiAwLS4yOTItLjA1Mi0uNjA0LS4wNTItLjMxMy0uMTM1LS42NDZsMS43Ny0xLjM3NS0uNzctMS4yNzEtMi4wMjEuODc1cS0uNDc5LS41LTEuMDQyLS44MzMtLjU2Mi0uMzM0LTEuMTg3LS41bC0uMjcxLTIuMTY3SDkuMjA4bC0uMjUgMi4xNjdxLS42MjUuMTY2LTEuMTg3LjUtLjU2My4zMzMtMS4wNDIuODEybC0yLS44NTQtLjc3MSAxLjI3MSAxLjczIDEuMzU0cS0uMDg0LjMzMy0uMTM2LjY1NlE1LjUgOS43MDggNS41IDEwdC4wNTIuNjA0cS4wNTIuMzEzLjEzNi42NjdsLTEuNzMgMS4zNTQuNzcxIDEuMjcxIDItLjgzNHEuNDc5LjQ1OSAxLjA0Mi43OTIuNTYyLjMzNCAxLjE4Ny41WlwiLz48L3N2Zz4nO1xuXG4vKipcbiAqIERpc3BsYXlzIGEgZGF0ZSBmaWVsZC4gV2hlbiB0YXBwZWQgb3IgY2xpY2tlZCwgdGhlIGlucHV0IGVsZW1lbnQgd2lsbCBkaXNwbGF5IGEgZGF0ZSBwaWNrZXIgY29tcG9uZW50LlxuICovXG5AQ29tcG9uZW50KHtcbiAgdGFnOiAndmVyZG9jcy1maWVsZC1kYXRlJyxcbiAgc3R5bGVVcmw6ICd2ZXJkb2NzLWZpZWxkLWRhdGUuc2NzcycsXG4gIHNoYWRvdzogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIFZlcmRvY3NGaWVsZERhdGUge1xuICBwcml2YXRlIGVsOiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBUaGUgZG9jdW1lbnQgb3IgdGVtcGxhdGUgZmllbGQgdG8gZGlzcGxheS5cbiAgICovXG4gIEBQcm9wKCkgZmllbGQ6IElEb2N1bWVudEZpZWxkIHwgSVRlbXBsYXRlRmllbGQgfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICogSWYgc2V0LCBvdmVycmlkZXMgdGhlIGZpZWxkJ3Mgc2V0dGluZ3Mgb2JqZWN0LiBQcmltYXJpbHkgdXNlZCB0byBzdXBwb3J0IFwicHJldmlld1wiIG1vZGVzIHdoZXJlIGFsbCBmaWVsZHMgYXJlIGRpc2FibGVkLlxuICAgKi9cbiAgQFByb3AoKSBkaXNhYmxlZD86IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogSWYgc2V0LCBhIHNldHRpbmdzIGljb24gd2lsbCBiZSBkaXNwbGF5ZWQgb24gaG92ZXIuIFRoZSBzZXR0aW5ncyBzaG93biBhbGxvdyB0aGUgZmllbGQncyByZWNpcGllbnQgYW5kIG90aGVyIHNldHRpbmdzIHRvIGJlXG4gICAqIGNoYW5nZWQsIHNvIGl0IHNob3VsZCB0eXBpY2FsbHkgb25seSBiZSBlbmFibGVkIGluIHRoZSBCdWlsZGVyLlxuICAgKi9cbiAgQFByb3AoKSBlZGl0YWJsZT86IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogSWYgc2V0LCB0aGUgZmllbGQgbWF5IGJlIGRyYWdnZWQgdG8gYSBuZXcgbG9jYXRpb24uIFRoaXMgc2hvdWxkIG9ubHkgYmUgZW5hYmxlZCBpbiB0aGUgQnVpbGRlciwgb3IgZm9yIHNlbGYtcGxhY2VkIGZpZWxkcy5cbiAgICovXG4gIEBQcm9wKCkgbW92ZWFibGU/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIElmIHNldCwgdGhlIGZpZWxkIGlzIGNvbnNpZGVyZWQgXCJkb25lXCIgYW5kIGlzIGRyYXduIGluIGEgZGlzcGxheS1maW5hbC12YWx1ZSBzdGF0ZS5cbiAgICovXG4gIEBQcm9wKCkgZG9uZT86IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogSWYgc2V0LCB0aGUgZmllbGQgd2lsbCBiZSBjb2xvcmVkIHVzaW5nIHRoaXMgaW5kZXggdmFsdWUgdG8gc2VsZWN0IHRoZSBiYWNrZ3JvdW5kIGNvbG9yLlxuICAgKi9cbiAgQFByb3AoKSByb2xlaW5kZXg/OiBudW1iZXIgPSAwO1xuXG4gIC8qKlxuICAgKiBFdmVudCBmaXJlZCBvbiBldmVyeSBjaGFyYWN0ZXIgZW50ZXJlZCBpbnRvIC8gZGVsZXRlZCBmcm9tIHRoZSBmaWVsZC5cbiAgICovXG4gIEBFdmVudCh7Y29tcG9zZWQ6IHRydWV9KSBzZXR0aW5nc1ByZXNzOiBFdmVudEVtaXR0ZXI7XG5cbiAgQFN0YXRlKCkgY29udGFpbmVySWQgPSBgdmVyZG9jcy1kYXRlLXBpY2tlci0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxMSl9YDtcblxuICBATWV0aG9kKCkgYXN5bmMgZm9jdXNGaWVsZCgpIHtcbiAgICB0aGlzLmVsLmZvY3VzKCk7XG4gIH1cblxuICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIGNvbnN0IHtyZXN1bHR9ID0gZ2V0RmllbGRTZXR0aW5ncyh0aGlzLmZpZWxkKTtcblxuICAgIGZsYXRwaWNrcignIycgKyB0aGlzLmNvbnRhaW5lcklkLCB7XG4gICAgICBwb3NpdGlvbkVsZW1lbnQ6IHRoaXMuZWwsXG4gICAgICBkYXRlRm9ybWF0OiAnRiBkLCBZJyxcbiAgICAgIGRlZmF1bHREYXRlOiByZXN1bHQsXG4gICAgICBvbkNoYW5nZTogc2VsZWN0ZWREYXRlID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ1NlbGVjdGVkJywgc2VsZWN0ZWREYXRlLCBkYXRlU3RyLCBpbnN0YW5jZSk7XG4gICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdpc28nLCBzZWxlY3RlZERhdGVbMF0udG9JU09TdHJpbmcoKSk7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IHdpbmRvdy5FdmVudCgnaW5wdXQnKTtcbiAgICAgICAgdGhpcy5lbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZURhdGUnLCAoZTogYW55KSA9PiB7XG4gICAgLy8gICBjb25zb2xlLmxvZygnY2hhbmdlRGF0ZScsIGUuZGV0YWlsLmRhdGUudG9JU09TdHJpbmcoKSk7XG4gICAgLy8gfSk7XG4gIH1cblxuICAvLyBOT1RFOiBXZSBkb24ndCB1c2UgYSBcImRhdGVcIiBmaWVsZCBoZXJlIGJlY2F1c2UgYnJvd3NlcnMgdmFyeSB3aWRlbHkgaW4gdGhlaXIgZm9ybWF0dGluZyBvZiBpdC5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0RmllbGRTZXR0aW5ncyh0aGlzLmZpZWxkKTtcbiAgICBjb25zdCBkaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQgPz8gc2V0dGluZ3MuZGlzYWJsZWQgPz8gZmFsc2U7XG4gICAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gdGhpcy5maWVsZFsncmdiYSddIHx8IGdldFJHQkEodGhpcy5yb2xlaW5kZXgpO1xuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgY29uc3QgZHQgPSBuZXcgRGF0ZShzZXR0aW5ncz8ucmVzdWx0KTtcbiAgICAgIGNvbnN0IGZvcm1hdHRlZCA9IGZvcm1hdChkdCwgJ01NTSBkLCB5Jyk7XG5cbiAgICAgIHJldHVybiA8SG9zdCBjbGFzcz17e2RvbmU6IHRoaXMuZG9uZX19Pntmb3JtYXR0ZWR9PC9Ib3N0PjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEhvc3QgY2xhc3M9e3tyZXF1aXJlZDogc2V0dGluZ3MucmVxdWlyZWQsIGRpc2FibGVkfX0gc3R5bGU9e3tiYWNrZ3JvdW5kQ29sb3J9fT5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCJcIiBpZD17dGhpcy5jb250YWluZXJJZH0gZGlzYWJsZWQ9e2Rpc2FibGVkfSBwbGFjZWhvbGRlcj17c2V0dGluZ3MucGxhY2Vob2xkZXJ9IHJlcXVpcmVkPXtzZXR0aW5ncy5yZXF1aXJlZH0gcmVmPXtlbCA9PiAodGhpcy5lbCA9IGVsKX0gLz5cblxuICAgICAgICB7dGhpcy5lZGl0YWJsZSAmJiAoXG4gICAgICAgICAgPHZlcmRvY3MtYnV0dG9uLXBhbmVsIGljb249e3NldHRpbmdzSWNvbn0+XG4gICAgICAgICAgICA8aDY+RmllbGQgU2V0dGluZ3M8L2g2PlxuICAgICAgICAgICAgPGZvcm0+XG4gICAgICAgICAgICAgIDx2ZXJkb2NzLXNlbGVjdC1pbnB1dFxuICAgICAgICAgICAgICAgIGxhYmVsPVwiUmVjaXBpZW50XCJcbiAgICAgICAgICAgICAgICBvcHRpb25zPXtbXG4gICAgICAgICAgICAgICAgICB7bGFiZWw6ICdCdXllcicsIHZhbHVlOiAnQnV5ZXInfSxcbiAgICAgICAgICAgICAgICAgIHtsYWJlbDogJ1NlbGxlcicsIHZhbHVlOiAnU2VsbGVyJ30sXG4gICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICA8dmVyZG9jcy10ZXh0LWlucHV0IGxhYmVsPVwiRmllbGQgTmFtZVwiIHZhbHVlPVwiXCIgcGxhY2Vob2xkZXI9XCJTdG9yZWQgZmllbGQgbmFtZS4uLlwiIG9uSW5wdXQ9e2UgPT4gY29uc29sZS5sb2coJ2lwdCcsIGUpfSAvPlxuICAgICAgICAgICAgICA8dmVyZG9jcy10ZXh0LWlucHV0IGxhYmVsPVwiUGxhY2Vob2xkZXJcIiB2YWx1ZT1cIlwiIHBsYWNlaG9sZGVyPVwiUGxhY2Vob2xkZXIgdGV4dC4uLlwiIG9uSW5wdXQ9e2UgPT4gY29uc29sZS5sb2coJ2lwdCcsIGUpfSAvPlxuICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIDwvdmVyZG9jcy1idXR0b24tcGFuZWw+XG4gICAgICAgICl9XG4gICAgICA8L0hvc3Q+XG4gICAgKTtcbiAgfVxufVxuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgaW5kZXggPSBJU19SSUdIVCA/IGxlbmd0aCAtIDEgOiAwO1xuICAgIHZhciBpID0gSVNfUklHSFQgPyAtMSA6IDE7XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA8IDIpIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGlmIChJU19SSUdIVCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICB0aHJvdyAkVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoO0lTX1JJR0hUID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiAgbGVmdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG4gIHJpZ2h0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIFNhZmFyaSA8IDEzIGRvZXMgbm90IHRocm93IGFuIGVycm9yIGluIHRoaXMgY2FzZVxudmFyIFNJTEVOVF9PTl9OT05fV1JJVEFCTEVfTEVOR1RIX1NFVCA9IERFU0NSSVBUT1JTICYmICFmdW5jdGlvbiAoKSB7XG4gIC8vIG1ha2VzIG5vIHNlbnNlIHdpdGhvdXQgcHJvcGVyIHN0cmljdCBtb2RlIHN1cHBvcnRcbiAgaWYgKHRoaXMgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWU7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFtdLCAnbGVuZ3RoJywgeyB3cml0YWJsZTogZmFsc2UgfSkubGVuZ3RoID0gMTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBUeXBlRXJyb3I7XG4gIH1cbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTSUxFTlRfT05fTk9OX1dSSVRBQkxFX0xFTkdUSF9TRVQgPyBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gIGlmIChpc0FycmF5KE8pICYmICFnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgJ2xlbmd0aCcpLndyaXRhYmxlKSB7XG4gICAgdGhyb3cgJFR5cGVFcnJvcignQ2Fubm90IHNldCByZWFkIG9ubHkgLmxlbmd0aCcpO1xuICB9IHJldHVybiBPLmxlbmd0aCA9IGxlbmd0aDtcbn0gOiBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gIHJldHVybiBPLmxlbmd0aCA9IGxlbmd0aDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBwYWRTdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkJykuc3RhcnQ7XG5cbnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7XG52YXIgJGlzRmluaXRlID0gaXNGaW5pdGU7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIG5hdGl2ZURhdGVUb0lTT1N0cmluZyA9IERhdGVQcm90b3R5cGUudG9JU09TdHJpbmc7XG52YXIgdGhpc1RpbWVWYWx1ZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VGltZSk7XG52YXIgZ2V0VVRDRGF0ZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDRGF0ZSk7XG52YXIgZ2V0VVRDRnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ0Z1bGxZZWFyKTtcbnZhciBnZXRVVENIb3VycyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDSG91cnMpO1xudmFyIGdldFVUQ01pbGxpc2Vjb25kcyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDTWlsbGlzZWNvbmRzKTtcbnZhciBnZXRVVENNaW51dGVzID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENNaW51dGVzKTtcbnZhciBnZXRVVENNb250aCA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDTW9udGgpO1xudmFyIGdldFVUQ1NlY29uZHMgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ1NlY29uZHMpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2lzb3N0cmluZ1xuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBmYWlscyBoZXJlOlxubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlRGF0ZVRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVEYXRlVG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoISRpc0Zpbml0ZSh0aGlzVGltZVZhbHVlKHRoaXMpKSkgdGhyb3cgJFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZGF0ZSA9IHRoaXM7XG4gIHZhciB5ZWFyID0gZ2V0VVRDRnVsbFllYXIoZGF0ZSk7XG4gIHZhciBtaWxsaXNlY29uZHMgPSBnZXRVVENNaWxsaXNlY29uZHMoZGF0ZSk7XG4gIHZhciBzaWduID0geWVhciA8IDAgPyAnLScgOiB5ZWFyID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gc2lnbiArIHBhZFN0YXJ0KGFicyh5ZWFyKSwgc2lnbiA/IDYgOiA0LCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZ2V0VVRDTW9udGgoZGF0ZSkgKyAxLCAyLCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZ2V0VVRDRGF0ZShkYXRlKSwgMiwgMCkgK1xuICAgICdUJyArIHBhZFN0YXJ0KGdldFVUQ0hvdXJzKGRhdGUpLCAyLCAwKSArXG4gICAgJzonICsgcGFkU3RhcnQoZ2V0VVRDTWludXRlcyhkYXRlKSwgMiwgMCkgK1xuICAgICc6JyArIHBhZFN0YXJ0KGdldFVUQ1NlY29uZHMoZGF0ZSksIDIsIDApICtcbiAgICAnLicgKyBwYWRTdGFydChtaWxsaXNlY29uZHMsIDMsIDApICtcbiAgICAnWic7XG59IDogbmF0aXZlRGF0ZVRvSVNPU3RyaW5nO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciAkcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgcmVwZWF0ID0gdW5jdXJyeVRoaXMoJHJlcGVhdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2VpbCA9IE1hdGguY2VpbDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBwYWRTdGFydCwgcGFkRW5kIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfRU5EKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIG1heExlbmd0aCwgZmlsbFN0cmluZykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICAgIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IHRvU3RyaW5nKGZpbGxTdHJpbmcpO1xuICAgIHZhciBmaWxsTGVuLCBzdHJpbmdGaWxsZXI7XG4gICAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gICAgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgICBzdHJpbmdGaWxsZXIgPSByZXBlYXQoZmlsbFN0ciwgY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ1NsaWNlKHN0cmluZ0ZpbGxlciwgMCwgZmlsbExlbik7XG4gICAgcmV0dXJuIElTX0VORCA/IFMgKyBzdHJpbmdGaWxsZXIgOiBzdHJpbmdGaWxsZXIgKyBTO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICR0cmltRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykuZW5kO1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUVuZCwgdHJpbVJpZ2h0IH1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNTdHJpbmcucHJvdG90eXBlLnRyaW1yaWdodFxubW9kdWxlLmV4cG9ydHMgPSBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltRW5kJykgPyBmdW5jdGlvbiB0cmltRW5kKCkge1xuICByZXR1cm4gJHRyaW1FbmQodGhpcyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltc3RhcnQtdHJpbWVuZCAtLSBzYWZlXG59IDogJycudHJpbUVuZDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2UnKTtcbi8vIENocm9tZSA4MC04MiBoYXMgYSBjcml0aWNhbCBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcbnZhciBDSFJPTUVfQlVHID0gIUlTX05PREUgJiYgQ0hST01FX1ZFUlNJT04gPiA3OSAmJiBDSFJPTUVfVkVSU0lPTiA8IDgzO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgbGVuZ3RoLCBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHNldEFycmF5TGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNldC1sZW5ndGgnKTtcbnZhciBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9lcy1ub3QtZXhjZWVkLXNhZmUtaW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWxldGUtcHJvcGVydHktb3ItdGhyb3cnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc3BsaWNlJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zcGxpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc3BsaWNlXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQgLyogLCAuLi5pdGVtcyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBhY3R1YWxTdGFydCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaW5zZXJ0Q291bnQsIGFjdHVhbERlbGV0ZUNvdW50LCBBLCBrLCBmcm9tLCB0bztcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAwKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFjdHVhbERlbGV0ZUNvdW50ID0gMDtcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMSkge1xuICAgICAgaW5zZXJ0Q291bnQgPSAwO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBsZW4gLSBhY3R1YWxTdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhcmd1bWVudHNMZW5ndGggLSAyO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBtaW4obWF4KHRvSW50ZWdlck9ySW5maW5pdHkoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuICAgIH1cbiAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobGVuICsgaW5zZXJ0Q291bnQgLSBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgZm9yIChrID0gMDsgayA8IGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgIGZyb20gPSBhY3R1YWxTdGFydCArIGs7XG4gICAgICBpZiAoZnJvbSBpbiBPKSBjcmVhdGVQcm9wZXJ0eShBLCBrLCBPW2Zyb21dKTtcbiAgICB9XG4gICAgQS5sZW5ndGggPSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICBpZiAoaW5zZXJ0Q291bnQgPCBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gYWN0dWFsU3RhcnQ7IGsgPCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50O1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlUHJvcGVydHlPclRocm93KE8sIHRvKTtcbiAgICAgIH1cbiAgICAgIGZvciAoayA9IGxlbjsgayA+IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7IGstLSkgZGVsZXRlUHJvcGVydHlPclRocm93KE8sIGsgLSAxKTtcbiAgICB9IGVsc2UgaWYgKGluc2VydENvdW50ID4gYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrID4gYWN0dWFsU3RhcnQ7IGstLSkge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMTtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQgLSAxO1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlUHJvcGVydHlPclRocm93KE8sIHRvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrID0gMDsgayA8IGluc2VydENvdW50OyBrKyspIHtcbiAgICAgIE9bayArIGFjdHVhbFN0YXJ0XSA9IGFyZ3VtZW50c1trICsgMl07XG4gICAgfVxuICAgIHNldEFycmF5TGVuZ3RoKE8sIGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2lzb3N0cmluZ1xuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyB9LCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLW1hdGNoYWxsIC0tIHNhZmUgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1jbGF1c2UnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3RvcicpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWdldC1mbGFncycpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIE1BVENIX0FMTCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2hBbGwnKTtcbnZhciBSRUdFWFBfU1RSSU5HID0gJ1JlZ0V4cCBTdHJpbmcnO1xudmFyIFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IgPSBSRUdFWFBfU1RSSU5HICsgJyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihSRUdFWFBfU1RSSU5HX0lURVJBVE9SKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIG5hdGl2ZU1hdGNoQWxsID0gdW5jdXJyeVRoaXMoJycubWF0Y2hBbGwpO1xuXG52YXIgV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYID0gISFuYXRpdmVNYXRjaEFsbCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVNYXRjaEFsbCgnYScsIC8uLyk7XG59KTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gUmVnRXhwU3RyaW5nSXRlcmF0b3IocmVnZXhwLCBzdHJpbmcsICRnbG9iYWwsIGZ1bGxVbmljb2RlKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IsXG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgZ2xvYmFsOiAkZ2xvYmFsLFxuICAgIHVuaWNvZGU6IGZ1bGxVbmljb2RlLFxuICAgIGRvbmU6IGZhbHNlXG4gIH0pO1xufSwgUkVHRVhQX1NUUklORywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIHZhciBSID0gc3RhdGUucmVnZXhwO1xuICB2YXIgUyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIG1hdGNoID0gcmVnRXhwRXhlYyhSLCBTKTtcbiAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgc3RhdGUuZG9uZSA9IHRydWU7XG4gICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxuICBpZiAoc3RhdGUuZ2xvYmFsKSB7XG4gICAgaWYgKHRvU3RyaW5nKG1hdGNoWzBdKSA9PT0gJycpIFIubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKFIubGFzdEluZGV4KSwgc3RhdGUudW5pY29kZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QobWF0Y2gsIGZhbHNlKTtcbiAgfVxuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QobWF0Y2gsIGZhbHNlKTtcbn0pO1xuXG52YXIgJG1hdGNoQWxsID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKFIsIFJlZ0V4cCk7XG4gIHZhciBmbGFncyA9IHRvU3RyaW5nKGdldFJlZ0V4cEZsYWdzKFIpKTtcbiAgdmFyIG1hdGNoZXIsICRnbG9iYWwsIGZ1bGxVbmljb2RlO1xuICBtYXRjaGVyID0gbmV3IEMoQyA9PT0gUmVnRXhwID8gUi5zb3VyY2UgOiBSLCBmbGFncyk7XG4gICRnbG9iYWwgPSAhIX5zdHJpbmdJbmRleE9mKGZsYWdzLCAnZycpO1xuICBmdWxsVW5pY29kZSA9ICEhfnN0cmluZ0luZGV4T2YoZmxhZ3MsICd1Jyk7XG4gIG1hdGNoZXIubGFzdEluZGV4ID0gdG9MZW5ndGgoUi5sYXN0SW5kZXgpO1xuICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihtYXRjaGVyLCBTLCAkZ2xvYmFsLCBmdWxsVW5pY29kZSk7XG59O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hhbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVggfSwge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBmbGFncywgUywgbWF0Y2hlciwgcng7XG4gICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChyZWdleHApKSB7XG4gICAgICBpZiAoaXNSZWdFeHAocmVnZXhwKSkge1xuICAgICAgICBmbGFncyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoZ2V0UmVnRXhwRmxhZ3MocmVnZXhwKSkpO1xuICAgICAgICBpZiAoIX5zdHJpbmdJbmRleE9mKGZsYWdzLCAnZycpKSB0aHJvdyAkVHlwZUVycm9yKCdgLm1hdGNoQWxsYCBkb2VzIG5vdCBhbGxvdyBub24tZ2xvYmFsIHJlZ2V4ZXMnKTtcbiAgICAgIH1cbiAgICAgIGlmIChXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgpIHJldHVybiBuYXRpdmVNYXRjaEFsbChPLCByZWdleHApO1xuICAgICAgbWF0Y2hlciA9IGdldE1ldGhvZChyZWdleHAsIE1BVENIX0FMTCk7XG4gICAgICBpZiAobWF0Y2hlciA9PT0gdW5kZWZpbmVkICYmIElTX1BVUkUgJiYgY2xhc3NvZihyZWdleHApID09ICdSZWdFeHAnKSBtYXRjaGVyID0gJG1hdGNoQWxsO1xuICAgICAgaWYgKG1hdGNoZXIpIHJldHVybiBjYWxsKG1hdGNoZXIsIHJlZ2V4cCwgTyk7XG4gICAgfSBlbHNlIGlmIChXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgpIHJldHVybiBuYXRpdmVNYXRjaEFsbChPLCByZWdleHApO1xuICAgIFMgPSB0b1N0cmluZyhPKTtcbiAgICByeCA9IG5ldyBSZWdFeHAocmVnZXhwLCAnZycpO1xuICAgIHJldHVybiBJU19QVVJFID8gY2FsbCgkbWF0Y2hBbGwsIHJ4LCBTKSA6IHJ4W01BVENIX0FMTF0oUyk7XG4gIH1cbn0pO1xuXG5JU19QVVJFIHx8IE1BVENIX0FMTCBpbiBSZWdFeHBQcm90b3R5cGUgfHwgZGVmaW5lQnVpbHRJbihSZWdFeHBQcm90b3R5cGUsIE1BVENIX0FMTCwgJG1hdGNoQWxsKTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIGxpbmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1yaWdodCcpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdHJpbUVuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1lbmQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbUVuZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtdHJpbXN0YXJ0LXRyaW1lbmQgLS0gc2FmZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBuYW1lOiAndHJpbUVuZCcsIGZvcmNlZDogJycudHJpbUVuZCAhPT0gdHJpbUVuZCB9LCB7XG4gIHRyaW1FbmQ6IHRyaW1FbmRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdHJpbUVuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1lbmQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbVJpZ2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltbGVmdC10cmltcmlnaHQgLS0gc2FmZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBuYW1lOiAndHJpbUVuZCcsIGZvcmNlZDogJycudHJpbVJpZ2h0ICE9PSB0cmltRW5kIH0sIHtcbiAgdHJpbVJpZ2h0OiB0cmltRW5kXG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=