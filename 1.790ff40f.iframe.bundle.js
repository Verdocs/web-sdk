/*! For license information please see 1.790ff40f.iframe.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"./node_modules/base64-js/index.js":function(module,exports,__webpack_require__){"use strict";exports.byteLength=function byteLength(b64){var lens=getLens(b64),validLen=lens[0],placeHoldersLen=lens[1];return 3*(validLen+placeHoldersLen)/4-placeHoldersLen},exports.toByteArray=function toByteArray(b64){var tmp,i,lens=getLens(b64),validLen=lens[0],placeHoldersLen=lens[1],arr=new Arr(function _byteLength(b64,validLen,placeHoldersLen){return 3*(validLen+placeHoldersLen)/4-placeHoldersLen}(0,validLen,placeHoldersLen)),curByte=0,len=placeHoldersLen>0?validLen-4:validLen;for(i=0;i<len;i+=4)tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)],arr[curByte++]=tmp>>16&255,arr[curByte++]=tmp>>8&255,arr[curByte++]=255&tmp;2===placeHoldersLen&&(tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4,arr[curByte++]=255&tmp);1===placeHoldersLen&&(tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2,arr[curByte++]=tmp>>8&255,arr[curByte++]=255&tmp);return arr},exports.fromByteArray=function fromByteArray(uint8){for(var tmp,len=uint8.length,extraBytes=len%3,parts=[],i=0,len2=len-extraBytes;i<len2;i+=16383)parts.push(encodeChunk(uint8,i,i+16383>len2?len2:i+16383));1===extraBytes?(tmp=uint8[len-1],parts.push(lookup[tmp>>2]+lookup[tmp<<4&63]+"==")):2===extraBytes&&(tmp=(uint8[len-2]<<8)+uint8[len-1],parts.push(lookup[tmp>>10]+lookup[tmp>>4&63]+lookup[tmp<<2&63]+"="));return parts.join("")};for(var lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,len=code.length;i<len;++i)lookup[i]=code[i],revLookup[code.charCodeAt(i)]=i;function getLens(b64){var len=b64.length;if(len%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var validLen=b64.indexOf("=");return-1===validLen&&(validLen=len),[validLen,validLen===len?0:4-validLen%4]}function encodeChunk(uint8,start,end){for(var tmp,num,output=[],i=start;i<end;i+=3)tmp=(uint8[i]<<16&16711680)+(uint8[i+1]<<8&65280)+(255&uint8[i+2]),output.push(lookup[(num=tmp)>>18&63]+lookup[num>>12&63]+lookup[num>>6&63]+lookup[63&num]);return output.join("")}revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63},"./node_modules/core-js/internals/array-buffer-native.js":function(module,exports){module.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},"./node_modules/core-js/internals/array-buffer.js":function(module,exports,__webpack_require__){"use strict";var global=__webpack_require__("./node_modules/core-js/internals/global.js"),uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),DESCRIPTORS=__webpack_require__("./node_modules/core-js/internals/descriptors.js"),NATIVE_ARRAY_BUFFER=__webpack_require__("./node_modules/core-js/internals/array-buffer-native.js"),FunctionName=__webpack_require__("./node_modules/core-js/internals/function-name.js"),createNonEnumerableProperty=__webpack_require__("./node_modules/core-js/internals/create-non-enumerable-property.js"),defineBuiltIns=__webpack_require__("./node_modules/core-js/internals/define-built-ins.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),anInstance=__webpack_require__("./node_modules/core-js/internals/an-instance.js"),toIntegerOrInfinity=__webpack_require__("./node_modules/core-js/internals/to-integer-or-infinity.js"),toLength=__webpack_require__("./node_modules/core-js/internals/to-length.js"),toIndex=__webpack_require__("./node_modules/core-js/internals/to-index.js"),IEEE754=__webpack_require__("./node_modules/core-js/internals/ieee754.js"),getPrototypeOf=__webpack_require__("./node_modules/core-js/internals/object-get-prototype-of.js"),setPrototypeOf=__webpack_require__("./node_modules/core-js/internals/object-set-prototype-of.js"),getOwnPropertyNames=__webpack_require__("./node_modules/core-js/internals/object-get-own-property-names.js").f,defineProperty=__webpack_require__("./node_modules/core-js/internals/object-define-property.js").f,arrayFill=__webpack_require__("./node_modules/core-js/internals/array-fill.js"),arraySlice=__webpack_require__("./node_modules/core-js/internals/array-slice-simple.js"),setToStringTag=__webpack_require__("./node_modules/core-js/internals/set-to-string-tag.js"),InternalStateModule=__webpack_require__("./node_modules/core-js/internals/internal-state.js"),PROPER_FUNCTION_NAME=FunctionName.PROPER,CONFIGURABLE_FUNCTION_NAME=FunctionName.CONFIGURABLE,getInternalState=InternalStateModule.get,setInternalState=InternalStateModule.set,NativeArrayBuffer=global.ArrayBuffer,$ArrayBuffer=NativeArrayBuffer,ArrayBufferPrototype=$ArrayBuffer&&$ArrayBuffer.prototype,$DataView=global.DataView,DataViewPrototype=$DataView&&$DataView.prototype,ObjectPrototype=Object.prototype,Array=global.Array,RangeError=global.RangeError,fill=uncurryThis(arrayFill),reverse=uncurryThis([].reverse),packIEEE754=IEEE754.pack,unpackIEEE754=IEEE754.unpack,packInt8=function(number){return[255&number]},packInt16=function(number){return[255&number,number>>8&255]},packInt32=function(number){return[255&number,number>>8&255,number>>16&255,number>>24&255]},unpackInt32=function(buffer){return buffer[3]<<24|buffer[2]<<16|buffer[1]<<8|buffer[0]},packFloat32=function(number){return packIEEE754(number,23,4)},packFloat64=function(number){return packIEEE754(number,52,8)},addGetter=function(Constructor,key){defineProperty(Constructor.prototype,key,{get:function(){return getInternalState(this)[key]}})},get=function(view,count,index,isLittleEndian){var intIndex=toIndex(index),store=getInternalState(view);if(intIndex+count>store.byteLength)throw RangeError("Wrong index");var bytes=getInternalState(store.buffer).bytes,start=intIndex+store.byteOffset,pack=arraySlice(bytes,start,start+count);return isLittleEndian?pack:reverse(pack)},set=function(view,count,index,conversion,value,isLittleEndian){var intIndex=toIndex(index),store=getInternalState(view);if(intIndex+count>store.byteLength)throw RangeError("Wrong index");for(var bytes=getInternalState(store.buffer).bytes,start=intIndex+store.byteOffset,pack=conversion(+value),i=0;i<count;i++)bytes[start+i]=pack[isLittleEndian?i:count-i-1]};if(NATIVE_ARRAY_BUFFER){var INCORRECT_ARRAY_BUFFER_NAME=PROPER_FUNCTION_NAME&&"ArrayBuffer"!==NativeArrayBuffer.name;if(fails((function(){NativeArrayBuffer(1)}))&&fails((function(){new NativeArrayBuffer(-1)}))&&!fails((function(){return new NativeArrayBuffer,new NativeArrayBuffer(1.5),new NativeArrayBuffer(NaN),INCORRECT_ARRAY_BUFFER_NAME&&!CONFIGURABLE_FUNCTION_NAME})))INCORRECT_ARRAY_BUFFER_NAME&&CONFIGURABLE_FUNCTION_NAME&&createNonEnumerableProperty(NativeArrayBuffer,"name","ArrayBuffer");else{($ArrayBuffer=function ArrayBuffer(length){return anInstance(this,ArrayBufferPrototype),new NativeArrayBuffer(toIndex(length))}).prototype=ArrayBufferPrototype;for(var key,keys=getOwnPropertyNames(NativeArrayBuffer),j=0;keys.length>j;)(key=keys[j++])in $ArrayBuffer||createNonEnumerableProperty($ArrayBuffer,key,NativeArrayBuffer[key]);ArrayBufferPrototype.constructor=$ArrayBuffer}setPrototypeOf&&getPrototypeOf(DataViewPrototype)!==ObjectPrototype&&setPrototypeOf(DataViewPrototype,ObjectPrototype);var testView=new $DataView(new $ArrayBuffer(2)),$setInt8=uncurryThis(DataViewPrototype.setInt8);testView.setInt8(0,2147483648),testView.setInt8(1,2147483649),!testView.getInt8(0)&&testView.getInt8(1)||defineBuiltIns(DataViewPrototype,{setInt8:function setInt8(byteOffset,value){$setInt8(this,byteOffset,value<<24>>24)},setUint8:function setUint8(byteOffset,value){$setInt8(this,byteOffset,value<<24>>24)}},{unsafe:!0})}else ArrayBufferPrototype=($ArrayBuffer=function ArrayBuffer(length){anInstance(this,ArrayBufferPrototype);var byteLength=toIndex(length);setInternalState(this,{bytes:fill(Array(byteLength),0),byteLength:byteLength}),DESCRIPTORS||(this.byteLength=byteLength)}).prototype,DataViewPrototype=($DataView=function DataView(buffer,byteOffset,byteLength){anInstance(this,DataViewPrototype),anInstance(buffer,ArrayBufferPrototype);var bufferLength=getInternalState(buffer).byteLength,offset=toIntegerOrInfinity(byteOffset);if(offset<0||offset>bufferLength)throw RangeError("Wrong offset");if(offset+(byteLength=void 0===byteLength?bufferLength-offset:toLength(byteLength))>bufferLength)throw RangeError("Wrong length");setInternalState(this,{buffer:buffer,byteLength:byteLength,byteOffset:offset}),DESCRIPTORS||(this.buffer=buffer,this.byteLength=byteLength,this.byteOffset=offset)}).prototype,DESCRIPTORS&&(addGetter($ArrayBuffer,"byteLength"),addGetter($DataView,"buffer"),addGetter($DataView,"byteLength"),addGetter($DataView,"byteOffset")),defineBuiltIns(DataViewPrototype,{getInt8:function getInt8(byteOffset){return get(this,1,byteOffset)[0]<<24>>24},getUint8:function getUint8(byteOffset){return get(this,1,byteOffset)[0]},getInt16:function getInt16(byteOffset){var bytes=get(this,2,byteOffset,arguments.length>1?arguments[1]:void 0);return(bytes[1]<<8|bytes[0])<<16>>16},getUint16:function getUint16(byteOffset){var bytes=get(this,2,byteOffset,arguments.length>1?arguments[1]:void 0);return bytes[1]<<8|bytes[0]},getInt32:function getInt32(byteOffset){return unpackInt32(get(this,4,byteOffset,arguments.length>1?arguments[1]:void 0))},getUint32:function getUint32(byteOffset){return unpackInt32(get(this,4,byteOffset,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function getFloat32(byteOffset){return unpackIEEE754(get(this,4,byteOffset,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function getFloat64(byteOffset){return unpackIEEE754(get(this,8,byteOffset,arguments.length>1?arguments[1]:void 0),52)},setInt8:function setInt8(byteOffset,value){set(this,1,byteOffset,packInt8,value)},setUint8:function setUint8(byteOffset,value){set(this,1,byteOffset,packInt8,value)},setInt16:function setInt16(byteOffset,value){set(this,2,byteOffset,packInt16,value,arguments.length>2?arguments[2]:void 0)},setUint16:function setUint16(byteOffset,value){set(this,2,byteOffset,packInt16,value,arguments.length>2?arguments[2]:void 0)},setInt32:function setInt32(byteOffset,value){set(this,4,byteOffset,packInt32,value,arguments.length>2?arguments[2]:void 0)},setUint32:function setUint32(byteOffset,value){set(this,4,byteOffset,packInt32,value,arguments.length>2?arguments[2]:void 0)},setFloat32:function setFloat32(byteOffset,value){set(this,4,byteOffset,packFloat32,value,arguments.length>2?arguments[2]:void 0)},setFloat64:function setFloat64(byteOffset,value){set(this,8,byteOffset,packFloat64,value,arguments.length>2?arguments[2]:void 0)}});setToStringTag($ArrayBuffer,"ArrayBuffer"),setToStringTag($DataView,"DataView"),module.exports={ArrayBuffer:$ArrayBuffer,DataView:$DataView}},"./node_modules/core-js/internals/date-to-iso-string.js":function(module,exports,__webpack_require__){"use strict";var uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),padStart=__webpack_require__("./node_modules/core-js/internals/string-pad.js").start,$RangeError=RangeError,abs=Math.abs,DatePrototype=Date.prototype,n$DateToISOString=DatePrototype.toISOString,getTime=uncurryThis(DatePrototype.getTime),getUTCDate=uncurryThis(DatePrototype.getUTCDate),getUTCFullYear=uncurryThis(DatePrototype.getUTCFullYear),getUTCHours=uncurryThis(DatePrototype.getUTCHours),getUTCMilliseconds=uncurryThis(DatePrototype.getUTCMilliseconds),getUTCMinutes=uncurryThis(DatePrototype.getUTCMinutes),getUTCMonth=uncurryThis(DatePrototype.getUTCMonth),getUTCSeconds=uncurryThis(DatePrototype.getUTCSeconds);module.exports=fails((function(){return"0385-07-25T07:06:39.999Z"!=n$DateToISOString.call(new Date(-50000000000001))}))||!fails((function(){n$DateToISOString.call(new Date(NaN))}))?function toISOString(){if(!isFinite(getTime(this)))throw $RangeError("Invalid time value");var year=getUTCFullYear(this),milliseconds=getUTCMilliseconds(this),sign=year<0?"-":year>9999?"+":"";return sign+padStart(abs(year),sign?6:4,0)+"-"+padStart(getUTCMonth(this)+1,2,0)+"-"+padStart(getUTCDate(this),2,0)+"T"+padStart(getUTCHours(this),2,0)+":"+padStart(getUTCMinutes(this),2,0)+":"+padStart(getUTCSeconds(this),2,0)+"."+padStart(milliseconds,3,0)+"Z"}:n$DateToISOString},"./node_modules/core-js/internals/ieee754.js":function(module,exports){var $Array=Array,abs=Math.abs,pow=Math.pow,floor=Math.floor,log=Math.log,LN2=Math.LN2;module.exports={pack:function(number,mantissaLength,bytes){var exponent,mantissa,c,buffer=$Array(bytes),exponentLength=8*bytes-mantissaLength-1,eMax=(1<<exponentLength)-1,eBias=eMax>>1,rt=23===mantissaLength?pow(2,-24)-pow(2,-77):0,sign=number<0||0===number&&1/number<0?1:0,index=0;for((number=abs(number))!=number||number===1/0?(mantissa=number!=number?1:0,exponent=eMax):(exponent=floor(log(number)/LN2),number*(c=pow(2,-exponent))<1&&(exponent--,c*=2),(number+=exponent+eBias>=1?rt/c:rt*pow(2,1-eBias))*c>=2&&(exponent++,c/=2),exponent+eBias>=eMax?(mantissa=0,exponent=eMax):exponent+eBias>=1?(mantissa=(number*c-1)*pow(2,mantissaLength),exponent+=eBias):(mantissa=number*pow(2,eBias-1)*pow(2,mantissaLength),exponent=0));mantissaLength>=8;)buffer[index++]=255&mantissa,mantissa/=256,mantissaLength-=8;for(exponent=exponent<<mantissaLength|mantissa,exponentLength+=mantissaLength;exponentLength>0;)buffer[index++]=255&exponent,exponent/=256,exponentLength-=8;return buffer[--index]|=128*sign,buffer},unpack:function(buffer,mantissaLength){var mantissa,bytes=buffer.length,exponentLength=8*bytes-mantissaLength-1,eMax=(1<<exponentLength)-1,eBias=eMax>>1,nBits=exponentLength-7,index=bytes-1,sign=buffer[index--],exponent=127&sign;for(sign>>=7;nBits>0;)exponent=256*exponent+buffer[index--],nBits-=8;for(mantissa=exponent&(1<<-nBits)-1,exponent>>=-nBits,nBits+=mantissaLength;nBits>0;)mantissa=256*mantissa+buffer[index--],nBits-=8;if(0===exponent)exponent=1-eBias;else{if(exponent===eMax)return mantissa?NaN:sign?-1/0:1/0;mantissa+=pow(2,mantissaLength),exponent-=eBias}return(sign?-1:1)*mantissa*pow(2,exponent-mantissaLength)}}},"./node_modules/core-js/internals/string-pad.js":function(module,exports,__webpack_require__){var uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),toLength=__webpack_require__("./node_modules/core-js/internals/to-length.js"),toString=__webpack_require__("./node_modules/core-js/internals/to-string.js"),$repeat=__webpack_require__("./node_modules/core-js/internals/string-repeat.js"),requireObjectCoercible=__webpack_require__("./node_modules/core-js/internals/require-object-coercible.js"),repeat=uncurryThis($repeat),stringSlice=uncurryThis("".slice),ceil=Math.ceil,createMethod=function(IS_END){return function($this,maxLength,fillString){var fillLen,stringFiller,S=toString(requireObjectCoercible($this)),intMaxLength=toLength(maxLength),stringLength=S.length,fillStr=void 0===fillString?" ":toString(fillString);return intMaxLength<=stringLength||""==fillStr?S:((stringFiller=repeat(fillStr,ceil((fillLen=intMaxLength-stringLength)/fillStr.length))).length>fillLen&&(stringFiller=stringSlice(stringFiller,0,fillLen)),IS_END?S+stringFiller:stringFiller+S)}};module.exports={start:createMethod(!1),end:createMethod(!0)}},"./node_modules/core-js/internals/to-index.js":function(module,exports,__webpack_require__){var toIntegerOrInfinity=__webpack_require__("./node_modules/core-js/internals/to-integer-or-infinity.js"),toLength=__webpack_require__("./node_modules/core-js/internals/to-length.js"),$RangeError=RangeError;module.exports=function(it){if(void 0===it)return 0;var number=toIntegerOrInfinity(it),length=toLength(number);if(number!==length)throw $RangeError("Wrong length or index");return length}},"./node_modules/core-js/modules/es.array-buffer.constructor.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),global=__webpack_require__("./node_modules/core-js/internals/global.js"),arrayBufferModule=__webpack_require__("./node_modules/core-js/internals/array-buffer.js"),setSpecies=__webpack_require__("./node_modules/core-js/internals/set-species.js"),ArrayBuffer=arrayBufferModule.ArrayBuffer;$({global:!0,constructor:!0,forced:global.ArrayBuffer!==ArrayBuffer},{ArrayBuffer:ArrayBuffer}),setSpecies("ArrayBuffer")},"./node_modules/core-js/modules/es.array-buffer.is-view.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),ArrayBufferViewCore=__webpack_require__("./node_modules/core-js/internals/array-buffer-view-core.js");$({target:"ArrayBuffer",stat:!0,forced:!ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS},{isView:ArrayBufferViewCore.isView})},"./node_modules/core-js/modules/es.array-buffer.slice.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),ArrayBufferModule=__webpack_require__("./node_modules/core-js/internals/array-buffer.js"),anObject=__webpack_require__("./node_modules/core-js/internals/an-object.js"),toAbsoluteIndex=__webpack_require__("./node_modules/core-js/internals/to-absolute-index.js"),toLength=__webpack_require__("./node_modules/core-js/internals/to-length.js"),speciesConstructor=__webpack_require__("./node_modules/core-js/internals/species-constructor.js"),ArrayBuffer=ArrayBufferModule.ArrayBuffer,DataView=ArrayBufferModule.DataView,DataViewPrototype=DataView.prototype,un$ArrayBufferSlice=uncurryThis(ArrayBuffer.prototype.slice),getUint8=uncurryThis(DataViewPrototype.getUint8),setUint8=uncurryThis(DataViewPrototype.setUint8);$({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:fails((function(){return!new ArrayBuffer(2).slice(1,void 0).byteLength}))},{slice:function slice(start,end){if(un$ArrayBufferSlice&&void 0===end)return un$ArrayBufferSlice(anObject(this),start);for(var length=anObject(this).byteLength,first=toAbsoluteIndex(start,length),fin=toAbsoluteIndex(void 0===end?length:end,length),result=new(speciesConstructor(this,ArrayBuffer))(toLength(fin-first)),viewSource=new DataView(this),viewTarget=new DataView(result),index=0;first<fin;)setUint8(viewTarget,index++,getUint8(viewSource,first++));return result}})},"./node_modules/core-js/modules/es.array.splice.js":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("./node_modules/core-js/internals/export.js"),toObject=__webpack_require__("./node_modules/core-js/internals/to-object.js"),toAbsoluteIndex=__webpack_require__("./node_modules/core-js/internals/to-absolute-index.js"),toIntegerOrInfinity=__webpack_require__("./node_modules/core-js/internals/to-integer-or-infinity.js"),lengthOfArrayLike=__webpack_require__("./node_modules/core-js/internals/length-of-array-like.js"),doesNotExceedSafeInteger=__webpack_require__("./node_modules/core-js/internals/does-not-exceed-safe-integer.js"),arraySpeciesCreate=__webpack_require__("./node_modules/core-js/internals/array-species-create.js"),createProperty=__webpack_require__("./node_modules/core-js/internals/create-property.js"),deletePropertyOrThrow=__webpack_require__("./node_modules/core-js/internals/delete-property-or-throw.js"),HAS_SPECIES_SUPPORT=__webpack_require__("./node_modules/core-js/internals/array-method-has-species-support.js")("splice"),max=Math.max,min=Math.min;$({target:"Array",proto:!0,forced:!HAS_SPECIES_SUPPORT},{splice:function splice(start,deleteCount){var insertCount,actualDeleteCount,A,k,from,to,O=toObject(this),len=lengthOfArrayLike(O),actualStart=toAbsoluteIndex(start,len),argumentsLength=arguments.length;for(0===argumentsLength?insertCount=actualDeleteCount=0:1===argumentsLength?(insertCount=0,actualDeleteCount=len-actualStart):(insertCount=argumentsLength-2,actualDeleteCount=min(max(toIntegerOrInfinity(deleteCount),0),len-actualStart)),doesNotExceedSafeInteger(len+insertCount-actualDeleteCount),A=arraySpeciesCreate(O,actualDeleteCount),k=0;k<actualDeleteCount;k++)(from=actualStart+k)in O&&createProperty(A,k,O[from]);if(A.length=actualDeleteCount,insertCount<actualDeleteCount){for(k=actualStart;k<len-actualDeleteCount;k++)to=k+insertCount,(from=k+actualDeleteCount)in O?O[to]=O[from]:deletePropertyOrThrow(O,to);for(k=len;k>len-actualDeleteCount+insertCount;k--)deletePropertyOrThrow(O,k-1)}else if(insertCount>actualDeleteCount)for(k=len-actualDeleteCount;k>actualStart;k--)to=k+insertCount-1,(from=k+actualDeleteCount-1)in O?O[to]=O[from]:deletePropertyOrThrow(O,to);for(k=0;k<insertCount;k++)O[k+actualStart]=arguments[k+2];return O.length=len-actualDeleteCount+insertCount,A}})},"./node_modules/core-js/modules/es.date.now.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),uncurryThis=__webpack_require__("./node_modules/core-js/internals/function-uncurry-this.js"),$Date=Date,getTime=uncurryThis($Date.prototype.getTime);$({target:"Date",stat:!0},{now:function now(){return getTime(new $Date)}})},"./node_modules/core-js/modules/es.date.to-iso-string.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),toISOString=__webpack_require__("./node_modules/core-js/internals/date-to-iso-string.js");$({target:"Date",proto:!0,forced:Date.prototype.toISOString!==toISOString},{toISOString:toISOString})},"./node_modules/core-js/modules/es.global-this.js":function(module,exports,__webpack_require__){__webpack_require__("./node_modules/core-js/internals/export.js")({global:!0},{globalThis:__webpack_require__("./node_modules/core-js/internals/global.js")})},"./node_modules/core-js/modules/es.object.get-own-property-names.js":function(module,exports,__webpack_require__){var $=__webpack_require__("./node_modules/core-js/internals/export.js"),fails=__webpack_require__("./node_modules/core-js/internals/fails.js"),getOwnPropertyNames=__webpack_require__("./node_modules/core-js/internals/object-get-own-property-names-external.js").f;$({target:"Object",stat:!0,forced:fails((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:getOwnPropertyNames})},"./node_modules/ieee754/index.js":function(module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m,eLen=8*nBytes-mLen-1,eMax=(1<<eLen)-1,eBias=eMax>>1,nBits=-7,i=isLE?nBytes-1:0,d=isLE?-1:1,s=buffer[offset+i];for(i+=d,e=s&(1<<-nBits)-1,s>>=-nBits,nBits+=eLen;nBits>0;e=256*e+buffer[offset+i],i+=d,nBits-=8);for(m=e&(1<<-nBits)-1,e>>=-nBits,nBits+=mLen;nBits>0;m=256*m+buffer[offset+i],i+=d,nBits-=8);if(0===e)e=1-eBias;else{if(e===eMax)return m?NaN:1/0*(s?-1:1);m+=Math.pow(2,mLen),e-=eBias}return(s?-1:1)*m*Math.pow(2,e-mLen)},exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c,eLen=8*nBytes-mLen-1,eMax=(1<<eLen)-1,eBias=eMax>>1,rt=23===mLen?Math.pow(2,-24)-Math.pow(2,-77):0,i=isLE?0:nBytes-1,d=isLE?1:-1,s=value<0||0===value&&1/value<0?1:0;for(value=Math.abs(value),isNaN(value)||value===1/0?(m=isNaN(value)?1:0,e=eMax):(e=Math.floor(Math.log(value)/Math.LN2),value*(c=Math.pow(2,-e))<1&&(e--,c*=2),(value+=e+eBias>=1?rt/c:rt*Math.pow(2,1-eBias))*c>=2&&(e++,c/=2),e+eBias>=eMax?(m=0,e=eMax):e+eBias>=1?(m=(value*c-1)*Math.pow(2,mLen),e+=eBias):(m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen),e=0));mLen>=8;buffer[offset+i]=255&m,i+=d,m/=256,mLen-=8);for(e=e<<mLen|m,eLen+=mLen;eLen>0;buffer[offset+i]=255&e,i+=d,e/=256,eLen-=8);buffer[offset+i-d]|=128*s}},"./node_modules/node-libs-browser/node_modules/buffer/index.js":function(module,exports,__webpack_require__){"use strict";(function(global){var base64=__webpack_require__("./node_modules/base64-js/index.js"),ieee754=__webpack_require__("./node_modules/ieee754/index.js"),isArray=__webpack_require__("./node_modules/node-libs-browser/node_modules/isarray/index.js");function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function createBuffer(that,length){if(kMaxLength()<length)throw new RangeError("Invalid typed array length");return Buffer.TYPED_ARRAY_SUPPORT?(that=new Uint8Array(length)).__proto__=Buffer.prototype:(null===that&&(that=new Buffer(length)),that.length=length),that}function Buffer(arg,encodingOrOffset,length){if(!(Buffer.TYPED_ARRAY_SUPPORT||this instanceof Buffer))return new Buffer(arg,encodingOrOffset,length);if("number"==typeof arg){if("string"==typeof encodingOrOffset)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe(this,arg)}return from(this,arg,encodingOrOffset,length)}function from(that,value,encodingOrOffset,length){if("number"==typeof value)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&value instanceof ArrayBuffer?function fromArrayBuffer(that,array,byteOffset,length){if(array.byteLength,byteOffset<0||array.byteLength<byteOffset)throw new RangeError("'offset' is out of bounds");if(array.byteLength<byteOffset+(length||0))throw new RangeError("'length' is out of bounds");array=void 0===byteOffset&&void 0===length?new Uint8Array(array):void 0===length?new Uint8Array(array,byteOffset):new Uint8Array(array,byteOffset,length);Buffer.TYPED_ARRAY_SUPPORT?(that=array).__proto__=Buffer.prototype:that=fromArrayLike(that,array);return that}(that,value,encodingOrOffset,length):"string"==typeof value?function fromString(that,string,encoding){"string"==typeof encoding&&""!==encoding||(encoding="utf8");if(!Buffer.isEncoding(encoding))throw new TypeError('"encoding" must be a valid string encoding');var length=0|byteLength(string,encoding),actual=(that=createBuffer(that,length)).write(string,encoding);actual!==length&&(that=that.slice(0,actual));return that}(that,value,encodingOrOffset):function fromObject(that,obj){if(Buffer.isBuffer(obj)){var len=0|checked(obj.length);return 0===(that=createBuffer(that,len)).length||obj.copy(that,0,0,len),that}if(obj){if("undefined"!=typeof ArrayBuffer&&obj.buffer instanceof ArrayBuffer||"length"in obj)return"number"!=typeof obj.length||function isnan(val){return val!=val}(obj.length)?createBuffer(that,0):fromArrayLike(that,obj);if("Buffer"===obj.type&&isArray(obj.data))return fromArrayLike(that,obj.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(that,value)}function assertSize(size){if("number"!=typeof size)throw new TypeError('"size" argument must be a number');if(size<0)throw new RangeError('"size" argument must not be negative')}function allocUnsafe(that,size){if(assertSize(size),that=createBuffer(that,size<0?0:0|checked(size)),!Buffer.TYPED_ARRAY_SUPPORT)for(var i=0;i<size;++i)that[i]=0;return that}function fromArrayLike(that,array){var length=array.length<0?0:0|checked(array.length);that=createBuffer(that,length);for(var i=0;i<length;i+=1)that[i]=255&array[i];return that}function checked(length){if(length>=kMaxLength())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+kMaxLength().toString(16)+" bytes");return 0|length}function byteLength(string,encoding){if(Buffer.isBuffer(string))return string.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(string)||string instanceof ArrayBuffer))return string.byteLength;"string"!=typeof string&&(string=""+string);var len=string.length;if(0===len)return 0;for(var loweredCase=!1;;)switch(encoding){case"ascii":case"latin1":case"binary":return len;case"utf8":case"utf-8":case void 0:return utf8ToBytes(string).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*len;case"hex":return len>>>1;case"base64":return base64ToBytes(string).length;default:if(loweredCase)return utf8ToBytes(string).length;encoding=(""+encoding).toLowerCase(),loweredCase=!0}}function slowToString(encoding,start,end){var loweredCase=!1;if((void 0===start||start<0)&&(start=0),start>this.length)return"";if((void 0===end||end>this.length)&&(end=this.length),end<=0)return"";if((end>>>=0)<=(start>>>=0))return"";for(encoding||(encoding="utf8");;)switch(encoding){case"hex":return hexSlice(this,start,end);case"utf8":case"utf-8":return utf8Slice(this,start,end);case"ascii":return asciiSlice(this,start,end);case"latin1":case"binary":return latin1Slice(this,start,end);case"base64":return base64Slice(this,start,end);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(encoding+"").toLowerCase(),loweredCase=!0}}function swap(b,n,m){var i=b[n];b[n]=b[m],b[m]=i}function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){if(0===buffer.length)return-1;if("string"==typeof byteOffset?(encoding=byteOffset,byteOffset=0):byteOffset>2147483647?byteOffset=2147483647:byteOffset<-2147483648&&(byteOffset=-2147483648),byteOffset=+byteOffset,isNaN(byteOffset)&&(byteOffset=dir?0:buffer.length-1),byteOffset<0&&(byteOffset=buffer.length+byteOffset),byteOffset>=buffer.length){if(dir)return-1;byteOffset=buffer.length-1}else if(byteOffset<0){if(!dir)return-1;byteOffset=0}if("string"==typeof val&&(val=Buffer.from(val,encoding)),Buffer.isBuffer(val))return 0===val.length?-1:arrayIndexOf(buffer,val,byteOffset,encoding,dir);if("number"==typeof val)return val&=255,Buffer.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?dir?Uint8Array.prototype.indexOf.call(buffer,val,byteOffset):Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset):arrayIndexOf(buffer,[val],byteOffset,encoding,dir);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var i,indexSize=1,arrLength=arr.length,valLength=val.length;if(void 0!==encoding&&("ucs2"===(encoding=String(encoding).toLowerCase())||"ucs-2"===encoding||"utf16le"===encoding||"utf-16le"===encoding)){if(arr.length<2||val.length<2)return-1;indexSize=2,arrLength/=2,valLength/=2,byteOffset/=2}function read(buf,i){return 1===indexSize?buf[i]:buf.readUInt16BE(i*indexSize)}if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++)if(read(arr,i)===read(val,-1===foundIndex?0:i-foundIndex)){if(-1===foundIndex&&(foundIndex=i),i-foundIndex+1===valLength)return foundIndex*indexSize}else-1!==foundIndex&&(i-=i-foundIndex),foundIndex=-1}else for(byteOffset+valLength>arrLength&&(byteOffset=arrLength-valLength),i=byteOffset;i>=0;i--){for(var found=!0,j=0;j<valLength;j++)if(read(arr,i+j)!==read(val,j)){found=!1;break}if(found)return i}return-1}function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;length?(length=Number(length))>remaining&&(length=remaining):length=remaining;var strLen=string.length;if(strLen%2!=0)throw new TypeError("Invalid hex string");length>strLen/2&&(length=strLen/2);for(var i=0;i<length;++i){var parsed=parseInt(string.substr(2*i,2),16);if(isNaN(parsed))return i;buf[offset+i]=parsed}return i}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length)}function asciiWrite(buf,string,offset,length){return blitBuffer(function asciiToBytes(str){for(var byteArray=[],i=0;i<str.length;++i)byteArray.push(255&str.charCodeAt(i));return byteArray}(string),buf,offset,length)}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length)}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length)}function ucs2Write(buf,string,offset,length){return blitBuffer(function utf16leToBytes(str,units){for(var c,hi,lo,byteArray=[],i=0;i<str.length&&!((units-=2)<0);++i)hi=(c=str.charCodeAt(i))>>8,lo=c%256,byteArray.push(lo),byteArray.push(hi);return byteArray}(string,buf.length-offset),buf,offset,length)}function base64Slice(buf,start,end){return 0===start&&end===buf.length?base64.fromByteArray(buf):base64.fromByteArray(buf.slice(start,end))}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);for(var res=[],i=start;i<end;){var secondByte,thirdByte,fourthByte,tempCodePoint,firstByte=buf[i],codePoint=null,bytesPerSequence=firstByte>239?4:firstByte>223?3:firstByte>191?2:1;if(i+bytesPerSequence<=end)switch(bytesPerSequence){case 1:firstByte<128&&(codePoint=firstByte);break;case 2:128==(192&(secondByte=buf[i+1]))&&(tempCodePoint=(31&firstByte)<<6|63&secondByte)>127&&(codePoint=tempCodePoint);break;case 3:secondByte=buf[i+1],thirdByte=buf[i+2],128==(192&secondByte)&&128==(192&thirdByte)&&(tempCodePoint=(15&firstByte)<<12|(63&secondByte)<<6|63&thirdByte)>2047&&(tempCodePoint<55296||tempCodePoint>57343)&&(codePoint=tempCodePoint);break;case 4:secondByte=buf[i+1],thirdByte=buf[i+2],fourthByte=buf[i+3],128==(192&secondByte)&&128==(192&thirdByte)&&128==(192&fourthByte)&&(tempCodePoint=(15&firstByte)<<18|(63&secondByte)<<12|(63&thirdByte)<<6|63&fourthByte)>65535&&tempCodePoint<1114112&&(codePoint=tempCodePoint)}null===codePoint?(codePoint=65533,bytesPerSequence=1):codePoint>65535&&(codePoint-=65536,res.push(codePoint>>>10&1023|55296),codePoint=56320|1023&codePoint),res.push(codePoint),i+=bytesPerSequence}return function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=4096)return String.fromCharCode.apply(String,codePoints);var res="",i=0;for(;i<len;)res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=4096));return res}(res)}exports.Buffer=Buffer,exports.SlowBuffer=function SlowBuffer(length){+length!=length&&(length=0);return Buffer.alloc(+length)},exports.INSPECT_MAX_BYTES=50,Buffer.TYPED_ARRAY_SUPPORT=void 0!==global.TYPED_ARRAY_SUPPORT?global.TYPED_ARRAY_SUPPORT:function typedArraySupport(){try{var arr=new Uint8Array(1);return arr.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===arr.foo()&&"function"==typeof arr.subarray&&0===arr.subarray(1,1).byteLength}catch(e){return!1}}(),exports.kMaxLength=kMaxLength(),Buffer.poolSize=8192,Buffer._augment=function(arr){return arr.__proto__=Buffer.prototype,arr},Buffer.from=function(value,encodingOrOffset,length){return from(null,value,encodingOrOffset,length)},Buffer.TYPED_ARRAY_SUPPORT&&(Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&Buffer[Symbol.species]===Buffer&&Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:!0})),Buffer.alloc=function(size,fill,encoding){return function alloc(that,size,fill,encoding){return assertSize(size),size<=0?createBuffer(that,size):void 0!==fill?"string"==typeof encoding?createBuffer(that,size).fill(fill,encoding):createBuffer(that,size).fill(fill):createBuffer(that,size)}(null,size,fill,encoding)},Buffer.allocUnsafe=function(size){return allocUnsafe(null,size)},Buffer.allocUnsafeSlow=function(size){return allocUnsafe(null,size)},Buffer.isBuffer=function isBuffer(b){return!(null==b||!b._isBuffer)},Buffer.compare=function compare(a,b){if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b))throw new TypeError("Arguments must be Buffers");if(a===b)return 0;for(var x=a.length,y=b.length,i=0,len=Math.min(x,y);i<len;++i)if(a[i]!==b[i]){x=a[i],y=b[i];break}return x<y?-1:y<x?1:0},Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function concat(list,length){if(!isArray(list))throw new TypeError('"list" argument must be an Array of Buffers');if(0===list.length)return Buffer.alloc(0);var i;if(void 0===length)for(length=0,i=0;i<list.length;++i)length+=list[i].length;var buffer=Buffer.allocUnsafe(length),pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(!Buffer.isBuffer(buf))throw new TypeError('"list" argument must be an Array of Buffers');buf.copy(buffer,pos),pos+=buf.length}return buffer},Buffer.byteLength=byteLength,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function swap16(){var len=this.length;if(len%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var i=0;i<len;i+=2)swap(this,i,i+1);return this},Buffer.prototype.swap32=function swap32(){var len=this.length;if(len%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var i=0;i<len;i+=4)swap(this,i,i+3),swap(this,i+1,i+2);return this},Buffer.prototype.swap64=function swap64(){var len=this.length;if(len%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var i=0;i<len;i+=8)swap(this,i,i+7),swap(this,i+1,i+6),swap(this,i+2,i+5),swap(this,i+3,i+4);return this},Buffer.prototype.toString=function toString(){var length=0|this.length;return 0===length?"":0===arguments.length?utf8Slice(this,0,length):slowToString.apply(this,arguments)},Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError("Argument must be a Buffer");return this===b||0===Buffer.compare(this,b)},Buffer.prototype.inspect=function inspect(){var str="",max=exports.INSPECT_MAX_BYTES;return this.length>0&&(str=this.toString("hex",0,max).match(/.{2}/g).join(" "),this.length>max&&(str+=" ... ")),"<Buffer "+str+">"},Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(!Buffer.isBuffer(target))throw new TypeError("Argument must be a Buffer");if(void 0===start&&(start=0),void 0===end&&(end=target?target.length:0),void 0===thisStart&&(thisStart=0),void 0===thisEnd&&(thisEnd=this.length),start<0||end>target.length||thisStart<0||thisEnd>this.length)throw new RangeError("out of range index");if(thisStart>=thisEnd&&start>=end)return 0;if(thisStart>=thisEnd)return-1;if(start>=end)return 1;if(this===target)return 0;for(var x=(thisEnd>>>=0)-(thisStart>>>=0),y=(end>>>=0)-(start>>>=0),len=Math.min(x,y),thisCopy=this.slice(thisStart,thisEnd),targetCopy=target.slice(start,end),i=0;i<len;++i)if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i],y=targetCopy[i];break}return x<y?-1:y<x?1:0},Buffer.prototype.includes=function includes(val,byteOffset,encoding){return-1!==this.indexOf(val,byteOffset,encoding)},Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,!0)},Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,!1)},Buffer.prototype.write=function write(string,offset,length,encoding){if(void 0===offset)encoding="utf8",length=this.length,offset=0;else if(void 0===length&&"string"==typeof offset)encoding=offset,length=this.length,offset=0;else{if(!isFinite(offset))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");offset|=0,isFinite(length)?(length|=0,void 0===encoding&&(encoding="utf8")):(encoding=length,length=void 0)}var remaining=this.length-offset;if((void 0===length||length>remaining)&&(length=remaining),string.length>0&&(length<0||offset<0)||offset>this.length)throw new RangeError("Attempt to write outside buffer bounds");encoding||(encoding="utf8");for(var loweredCase=!1;;)switch(encoding){case"hex":return hexWrite(this,string,offset,length);case"utf8":case"utf-8":return utf8Write(this,string,offset,length);case"ascii":return asciiWrite(this,string,offset,length);case"latin1":case"binary":return latin1Write(this,string,offset,length);case"base64":return base64Write(this,string,offset,length);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(""+encoding).toLowerCase(),loweredCase=!0}},Buffer.prototype.toJSON=function toJSON(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function asciiSlice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;i<end;++i)ret+=String.fromCharCode(127&buf[i]);return ret}function latin1Slice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;i<end;++i)ret+=String.fromCharCode(buf[i]);return ret}function hexSlice(buf,start,end){var len=buf.length;(!start||start<0)&&(start=0),(!end||end<0||end>len)&&(end=len);for(var out="",i=start;i<end;++i)out+=toHex(buf[i]);return out}function utf16leSlice(buf,start,end){for(var bytes=buf.slice(start,end),res="",i=0;i<bytes.length;i+=2)res+=String.fromCharCode(bytes[i]+256*bytes[i+1]);return res}function checkOffset(offset,ext,length){if(offset%1!=0||offset<0)throw new RangeError("offset is not uint");if(offset+ext>length)throw new RangeError("Trying to access beyond buffer length")}function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError("Index out of range")}function objectWriteUInt16(buf,value,offset,littleEndian){value<0&&(value=65535+value+1);for(var i=0,j=Math.min(buf.length-offset,2);i<j;++i)buf[offset+i]=(value&255<<8*(littleEndian?i:1-i))>>>8*(littleEndian?i:1-i)}function objectWriteUInt32(buf,value,offset,littleEndian){value<0&&(value=4294967295+value+1);for(var i=0,j=Math.min(buf.length-offset,4);i<j;++i)buf[offset+i]=value>>>8*(littleEndian?i:3-i)&255}function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError("Index out of range");if(offset<0)throw new RangeError("Index out of range")}function writeFloat(buf,value,offset,littleEndian,noAssert){return noAssert||checkIEEE754(buf,0,offset,4),ieee754.write(buf,value,offset,littleEndian,23,4),offset+4}function writeDouble(buf,value,offset,littleEndian,noAssert){return noAssert||checkIEEE754(buf,0,offset,8),ieee754.write(buf,value,offset,littleEndian,52,8),offset+8}Buffer.prototype.slice=function slice(start,end){var newBuf,len=this.length;if((start=~~start)<0?(start+=len)<0&&(start=0):start>len&&(start=len),(end=void 0===end?len:~~end)<0?(end+=len)<0&&(end=0):end>len&&(end=len),end<start&&(end=start),Buffer.TYPED_ARRAY_SUPPORT)(newBuf=this.subarray(start,end)).__proto__=Buffer.prototype;else{var sliceLen=end-start;newBuf=new Buffer(sliceLen,void 0);for(var i=0;i<sliceLen;++i)newBuf[i]=this[i+start]}return newBuf},Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset|=0,byteLength|=0,noAssert||checkOffset(offset,byteLength,this.length);for(var val=this[offset],mul=1,i=0;++i<byteLength&&(mul*=256);)val+=this[offset+i]*mul;return val},Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset|=0,byteLength|=0,noAssert||checkOffset(offset,byteLength,this.length);for(var val=this[offset+--byteLength],mul=1;byteLength>0&&(mul*=256);)val+=this[offset+--byteLength]*mul;return val},Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){return noAssert||checkOffset(offset,1,this.length),this[offset]},Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){return noAssert||checkOffset(offset,2,this.length),this[offset]|this[offset+1]<<8},Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){return noAssert||checkOffset(offset,2,this.length),this[offset]<<8|this[offset+1]},Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+16777216*this[offset+3]},Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),16777216*this[offset]+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3])},Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset|=0,byteLength|=0,noAssert||checkOffset(offset,byteLength,this.length);for(var val=this[offset],mul=1,i=0;++i<byteLength&&(mul*=256);)val+=this[offset+i]*mul;return val>=(mul*=128)&&(val-=Math.pow(2,8*byteLength)),val},Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset|=0,byteLength|=0,noAssert||checkOffset(offset,byteLength,this.length);for(var i=byteLength,mul=1,val=this[offset+--i];i>0&&(mul*=256);)val+=this[offset+--i]*mul;return val>=(mul*=128)&&(val-=Math.pow(2,8*byteLength)),val},Buffer.prototype.readInt8=function readInt8(offset,noAssert){return noAssert||checkOffset(offset,1,this.length),128&this[offset]?-1*(255-this[offset]+1):this[offset]},Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){noAssert||checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return 32768&val?4294901760|val:val},Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){noAssert||checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return 32768&val?4294901760|val:val},Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24},Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3]},Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),ieee754.read(this,offset,!0,23,4)},Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){return noAssert||checkOffset(offset,4,this.length),ieee754.read(this,offset,!1,23,4)},Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){return noAssert||checkOffset(offset,8,this.length),ieee754.read(this,offset,!0,52,8)},Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){return noAssert||checkOffset(offset,8,this.length),ieee754.read(this,offset,!1,52,8)},Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){(value=+value,offset|=0,byteLength|=0,noAssert)||checkInt(this,value,offset,byteLength,Math.pow(2,8*byteLength)-1,0);var mul=1,i=0;for(this[offset]=255&value;++i<byteLength&&(mul*=256);)this[offset+i]=value/mul&255;return offset+byteLength},Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){(value=+value,offset|=0,byteLength|=0,noAssert)||checkInt(this,value,offset,byteLength,Math.pow(2,8*byteLength)-1,0);var i=byteLength-1,mul=1;for(this[offset+i]=255&value;--i>=0&&(mul*=256);)this[offset+i]=value/mul&255;return offset+byteLength},Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,1,255,0),Buffer.TYPED_ARRAY_SUPPORT||(value=Math.floor(value)),this[offset]=255&value,offset+1},Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=255&value,this[offset+1]=value>>>8):objectWriteUInt16(this,value,offset,!0),offset+2},Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=value>>>8,this[offset+1]=255&value):objectWriteUInt16(this,value,offset,!1),offset+2},Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[offset+3]=value>>>24,this[offset+2]=value>>>16,this[offset+1]=value>>>8,this[offset]=255&value):objectWriteUInt32(this,value,offset,!0),offset+4},Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=value>>>24,this[offset+1]=value>>>16,this[offset+2]=value>>>8,this[offset+3]=255&value):objectWriteUInt32(this,value,offset,!1),offset+4},Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){if(value=+value,offset|=0,!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit)}var i=0,mul=1,sub=0;for(this[offset]=255&value;++i<byteLength&&(mul*=256);)value<0&&0===sub&&0!==this[offset+i-1]&&(sub=1),this[offset+i]=(value/mul>>0)-sub&255;return offset+byteLength},Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){if(value=+value,offset|=0,!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit)}var i=byteLength-1,mul=1,sub=0;for(this[offset+i]=255&value;--i>=0&&(mul*=256);)value<0&&0===sub&&0!==this[offset+i+1]&&(sub=1),this[offset+i]=(value/mul>>0)-sub&255;return offset+byteLength},Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,1,127,-128),Buffer.TYPED_ARRAY_SUPPORT||(value=Math.floor(value)),value<0&&(value=255+value+1),this[offset]=255&value,offset+1},Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=255&value,this[offset+1]=value>>>8):objectWriteUInt16(this,value,offset,!0),offset+2},Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=value>>>8,this[offset+1]=255&value):objectWriteUInt16(this,value,offset,!1),offset+2},Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,4,2147483647,-2147483648),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=255&value,this[offset+1]=value>>>8,this[offset+2]=value>>>16,this[offset+3]=value>>>24):objectWriteUInt32(this,value,offset,!0),offset+4},Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){return value=+value,offset|=0,noAssert||checkInt(this,value,offset,4,2147483647,-2147483648),value<0&&(value=4294967295+value+1),Buffer.TYPED_ARRAY_SUPPORT?(this[offset]=value>>>24,this[offset+1]=value>>>16,this[offset+2]=value>>>8,this[offset+3]=255&value):objectWriteUInt32(this,value,offset,!1),offset+4},Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,!0,noAssert)},Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,!1,noAssert)},Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,!0,noAssert)},Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,!1,noAssert)},Buffer.prototype.copy=function copy(target,targetStart,start,end){if(start||(start=0),end||0===end||(end=this.length),targetStart>=target.length&&(targetStart=target.length),targetStart||(targetStart=0),end>0&&end<start&&(end=start),end===start)return 0;if(0===target.length||0===this.length)return 0;if(targetStart<0)throw new RangeError("targetStart out of bounds");if(start<0||start>=this.length)throw new RangeError("sourceStart out of bounds");if(end<0)throw new RangeError("sourceEnd out of bounds");end>this.length&&(end=this.length),target.length-targetStart<end-start&&(end=target.length-targetStart+start);var i,len=end-start;if(this===target&&start<targetStart&&targetStart<end)for(i=len-1;i>=0;--i)target[i+targetStart]=this[i+start];else if(len<1e3||!Buffer.TYPED_ARRAY_SUPPORT)for(i=0;i<len;++i)target[i+targetStart]=this[i+start];else Uint8Array.prototype.set.call(target,this.subarray(start,start+len),targetStart);return len},Buffer.prototype.fill=function fill(val,start,end,encoding){if("string"==typeof val){if("string"==typeof start?(encoding=start,start=0,end=this.length):"string"==typeof end&&(encoding=end,end=this.length),1===val.length){var code=val.charCodeAt(0);code<256&&(val=code)}if(void 0!==encoding&&"string"!=typeof encoding)throw new TypeError("encoding must be a string");if("string"==typeof encoding&&!Buffer.isEncoding(encoding))throw new TypeError("Unknown encoding: "+encoding)}else"number"==typeof val&&(val&=255);if(start<0||this.length<start||this.length<end)throw new RangeError("Out of range index");if(end<=start)return this;var i;if(start>>>=0,end=void 0===end?this.length:end>>>0,val||(val=0),"number"==typeof val)for(i=start;i<end;++i)this[i]=val;else{var bytes=Buffer.isBuffer(val)?val:utf8ToBytes(new Buffer(val,encoding).toString()),len=bytes.length;for(i=0;i<end-start;++i)this[i+start]=bytes[i%len]}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function toHex(n){return n<16?"0"+n.toString(16):n.toString(16)}function utf8ToBytes(string,units){var codePoint;units=units||1/0;for(var length=string.length,leadSurrogate=null,bytes=[],i=0;i<length;++i){if((codePoint=string.charCodeAt(i))>55295&&codePoint<57344){if(!leadSurrogate){if(codePoint>56319){(units-=3)>-1&&bytes.push(239,191,189);continue}if(i+1===length){(units-=3)>-1&&bytes.push(239,191,189);continue}leadSurrogate=codePoint;continue}if(codePoint<56320){(units-=3)>-1&&bytes.push(239,191,189),leadSurrogate=codePoint;continue}codePoint=65536+(leadSurrogate-55296<<10|codePoint-56320)}else leadSurrogate&&(units-=3)>-1&&bytes.push(239,191,189);if(leadSurrogate=null,codePoint<128){if((units-=1)<0)break;bytes.push(codePoint)}else if(codePoint<2048){if((units-=2)<0)break;bytes.push(codePoint>>6|192,63&codePoint|128)}else if(codePoint<65536){if((units-=3)<0)break;bytes.push(codePoint>>12|224,codePoint>>6&63|128,63&codePoint|128)}else{if(!(codePoint<1114112))throw new Error("Invalid code point");if((units-=4)<0)break;bytes.push(codePoint>>18|240,codePoint>>12&63|128,codePoint>>6&63|128,63&codePoint|128)}}return bytes}function base64ToBytes(str){return base64.toByteArray(function base64clean(str){if((str=function stringtrim(str){return str.trim?str.trim():str.replace(/^\s+|\s+$/g,"")}(str).replace(INVALID_BASE64_RE,"")).length<2)return"";for(;str.length%4!=0;)str+="=";return str}(str))}function blitBuffer(src,dst,offset,length){for(var i=0;i<length&&!(i+offset>=dst.length||i>=src.length);++i)dst[i+offset]=src[i];return i}}).call(this,__webpack_require__("./node_modules/@storybook/builder-webpack4/node_modules/webpack/buildin/global.js"))},"./node_modules/node-libs-browser/node_modules/isarray/index.js":function(module,exports){var toString={}.toString;module.exports=Array.isArray||function(arr){return"[object Array]"==toString.call(arr)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWVlZTc1NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuaXMtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsImJ5dGVMZW5ndGgiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG9CeXRlQXJyYXkiLCJ0bXAiLCJpIiwiYXJyIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwibGVuIiwicmV2TG9va3VwIiwiY2hhckNvZGVBdCIsImZyb21CeXRlQXJyYXkiLCJ1aW50OCIsImxlbmd0aCIsImV4dHJhQnl0ZXMiLCJwYXJ0cyIsImxlbjIiLCJwdXNoIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJqb2luIiwiVWludDhBcnJheSIsIkFycmF5IiwiY29kZSIsIkVycm9yIiwiaW5kZXhPZiIsInN0YXJ0IiwiZW5kIiwibnVtIiwib3V0cHV0IiwibW9kdWxlIiwiQXJyYXlCdWZmZXIiLCJEYXRhVmlldyIsImdsb2JhbCIsInVuY3VycnlUaGlzIiwiREVTQ1JJUFRPUlMiLCJOQVRJVkVfQVJSQVlfQlVGRkVSIiwiRnVuY3Rpb25OYW1lIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZGVmaW5lQnVpbHRJbnMiLCJmYWlscyIsImFuSW5zdGFuY2UiLCJ0b0ludGVnZXJPckluZmluaXR5IiwidG9MZW5ndGgiLCJ0b0luZGV4IiwiSUVFRTc1NCIsImdldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZiIsImRlZmluZVByb3BlcnR5IiwiYXJyYXlGaWxsIiwiYXJyYXlTbGljZSIsInNldFRvU3RyaW5nVGFnIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsIlBST1BFUl9GVU5DVElPTl9OQU1FIiwiUFJPUEVSIiwiQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUiLCJDT05GSUdVUkFCTEUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZ2V0Iiwic2V0SW50ZXJuYWxTdGF0ZSIsInNldCIsIk5hdGl2ZUFycmF5QnVmZmVyIiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXJQcm90b3R5cGUiLCIkRGF0YVZpZXciLCJEYXRhVmlld1Byb3RvdHlwZSIsIk9iamVjdFByb3RvdHlwZSIsIk9iamVjdCIsInByb3RvdHlwZSIsIlJhbmdlRXJyb3IiLCJmaWxsIiwicmV2ZXJzZSIsInBhY2tJRUVFNzU0IiwicGFjayIsInVucGFja0lFRUU3NTQiLCJ1bnBhY2siLCJwYWNrSW50OCIsIm51bWJlciIsInBhY2tJbnQxNiIsInBhY2tJbnQzMiIsInVucGFja0ludDMyIiwiYnVmZmVyIiwicGFja0Zsb2F0MzIiLCJwYWNrRmxvYXQ2NCIsImFkZEdldHRlciIsIkNvbnN0cnVjdG9yIiwia2V5IiwidGhpcyIsInZpZXciLCJjb3VudCIsImluZGV4IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsInN0b3JlIiwiYnl0ZXMiLCJieXRlT2Zmc2V0IiwiY29udmVyc2lvbiIsInZhbHVlIiwiSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FIiwibmFtZSIsIk5hTiIsImtleXMiLCJqIiwiY29uc3RydWN0b3IiLCJ0ZXN0VmlldyIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsInVuc2FmZSIsImJ1ZmZlckxlbmd0aCIsIm9mZnNldCIsInVuZGVmaW5lZCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJhcmd1bWVudHMiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwicGFkU3RhcnQiLCIkUmFuZ2VFcnJvciIsImFicyIsIk1hdGgiLCJEYXRlUHJvdG90eXBlIiwiRGF0ZSIsIm4kRGF0ZVRvSVNPU3RyaW5nIiwidG9JU09TdHJpbmciLCJnZXRUaW1lIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENTZWNvbmRzIiwiY2FsbCIsImlzRmluaXRlIiwieWVhciIsIm1pbGxpc2Vjb25kcyIsInNpZ24iLCIkQXJyYXkiLCJwb3ciLCJmbG9vciIsImxvZyIsIkxOMiIsIm1hbnRpc3NhTGVuZ3RoIiwiZXhwb25lbnQiLCJtYW50aXNzYSIsImMiLCJleHBvbmVudExlbmd0aCIsImVNYXgiLCJlQmlhcyIsInJ0IiwiSW5maW5pdHkiLCJuQml0cyIsInRvU3RyaW5nIiwiJHJlcGVhdCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJyZXBlYXQiLCJzdHJpbmdTbGljZSIsInNsaWNlIiwiY2VpbCIsImNyZWF0ZU1ldGhvZCIsIklTX0VORCIsIiR0aGlzIiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJTIiwiaW50TWF4TGVuZ3RoIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsIml0IiwiJCIsImFycmF5QnVmZmVyTW9kdWxlIiwic2V0U3BlY2llcyIsImZvcmNlZCIsIkFycmF5QnVmZmVyVmlld0NvcmUiLCJ0YXJnZXQiLCJzdGF0IiwiTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyIsImlzVmlldyIsIkFycmF5QnVmZmVyTW9kdWxlIiwiYW5PYmplY3QiLCJ0b0Fic29sdXRlSW5kZXgiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJ1biRBcnJheUJ1ZmZlclNsaWNlIiwicHJvdG8iLCJmaXJzdCIsImZpbiIsInJlc3VsdCIsInZpZXdTb3VyY2UiLCJ2aWV3VGFyZ2V0IiwidG9PYmplY3QiLCJsZW5ndGhPZkFycmF5TGlrZSIsImRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciIsImFycmF5U3BlY2llc0NyZWF0ZSIsImNyZWF0ZVByb3BlcnR5IiwiZGVsZXRlUHJvcGVydHlPclRocm93IiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJtYXgiLCJtaW4iLCJzcGxpY2UiLCJkZWxldGVDb3VudCIsImluc2VydENvdW50IiwiYWN0dWFsRGVsZXRlQ291bnQiLCJBIiwiayIsImZyb20iLCJ0byIsIk8iLCJhY3R1YWxTdGFydCIsImFyZ3VtZW50c0xlbmd0aCIsIiREYXRlIiwibm93IiwiZ2xvYmFsVGhpcyIsInJlYWQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImUiLCJtIiwiZUxlbiIsImQiLCJzIiwid3JpdGUiLCJpc05hTiIsImJhc2U2NCIsImllZWU3NTQiLCJpc0FycmF5Iiwia01heExlbmd0aCIsIkJ1ZmZlciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiX19wcm90b19fIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiVHlwZUVycm9yIiwiZnJvbUFycmF5QnVmZmVyIiwiYXJyYXkiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbVN0cmluZyIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsImZyb21PYmplY3QiLCJvYmoiLCJpc0J1ZmZlciIsImNoZWNrZWQiLCJjb3B5IiwiaXNuYW4iLCJ2YWwiLCJ0eXBlIiwiZGF0YSIsImFzc2VydFNpemUiLCJzaXplIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYiIsIm4iLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwiYnVmIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYXNjaWlUb0J5dGVzIiwic3RyIiwiYnl0ZUFycmF5IiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInV0ZjE2bGVUb0J5dGVzIiwidW5pdHMiLCJoaSIsImxvIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsImNvZGVQb2ludHMiLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwidHlwZWRBcnJheVN1cHBvcnQiLCJmb28iLCJzdWJhcnJheSIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJTeW1ib2wiLCJzcGVjaWVzIiwiY29uZmlndXJhYmxlIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImEiLCJ4IiwieSIsImNvbmNhdCIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF0Y2giLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJ0b0pTT04iLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJJTlZBTElEX0JBU0U2NF9SRSIsImxlYWRTdXJyb2dhdGUiLCJiYXNlNjRjbGVhbiIsInN0cmluZ3RyaW0iLCJ0cmltIiwicmVwbGFjZSIsInNyYyIsImRzdCJdLCJtYXBwaW5ncyI6Ijt1SkFFQUEsUUFBUUMsV0F1Q1IsU0FBU0Es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VCxDLGtOQ3h2REEsSUFBSWtLLFNBQVcsQ0FBQyxFQUFFQSxTQUVsQnZJLE9BQU9wQyxRQUFVNEIsTUFBTTJOLFNBQVcsU0FBVTdPLEtBQzFDLE1BQTZCLGtCQUF0QmlLLFNBQVNwQixLQUFLN0ksSUFDdkIsQyIsImZpbGUiOiIxLjc5MGZmNDBmLmlmcmFtZS5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLXR5cGVkLWFycmF5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGF0YVZpZXcgIT0gJ3VuZGVmaW5lZCc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG52YXIgRnVuY3Rpb25OYW1lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lQnVpbHRJbnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWlucycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXgnKTtcbnZhciBJRUVFNzU0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llZWU3NTQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuUFJPUEVSO1xudmFyIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLkNPTkZJR1VSQUJMRTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCc7XG52YXIgTmF0aXZlQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkQXJyYXlCdWZmZXIgPSBOYXRpdmVBcnJheUJ1ZmZlcjtcbnZhciBBcnJheUJ1ZmZlclByb3RvdHlwZSA9ICRBcnJheUJ1ZmZlciAmJiAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBEYXRhVmlld1Byb3RvdHlwZSA9ICREYXRhVmlldyAmJiAkRGF0YVZpZXdbUFJPVE9UWVBFXTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBmaWxsID0gdW5jdXJyeVRoaXMoYXJyYXlGaWxsKTtcbnZhciByZXZlcnNlID0gdW5jdXJyeVRoaXMoW10ucmV2ZXJzZSk7XG5cbnZhciBwYWNrSUVFRTc1NCA9IElFRUU3NTQucGFjaztcbnZhciB1bnBhY2tJRUVFNzU0ID0gSUVFRTc1NC51bnBhY2s7XG5cbnZhciBwYWNrSW50OCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGXTtcbn07XG5cbnZhciBwYWNrSW50MTYgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRiwgbnVtYmVyID4+IDggJiAweEZGXTtcbn07XG5cbnZhciBwYWNrSW50MzIgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRiwgbnVtYmVyID4+IDggJiAweEZGLCBudW1iZXIgPj4gMTYgJiAweEZGLCBudW1iZXIgPj4gMjQgJiAweEZGXTtcbn07XG5cbnZhciB1bnBhY2tJbnQzMiA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlclszXSA8PCAyNCB8IGJ1ZmZlclsyXSA8PCAxNiB8IGJ1ZmZlclsxXSA8PCA4IHwgYnVmZmVyWzBdO1xufTtcblxudmFyIHBhY2tGbG9hdDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCAyMywgNCk7XG59O1xuXG52YXIgcGFja0Zsb2F0NjQgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChudW1iZXIsIDUyLCA4KTtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGtleSkge1xuICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvcltQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpW2tleV07IH0gfSk7XG59O1xuXG52YXIgZ2V0ID0gZnVuY3Rpb24gKHZpZXcsIGNvdW50LCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChpbmRleCk7XG4gIHZhciBzdG9yZSA9IGdldEludGVybmFsU3RhdGUodmlldyk7XG4gIGlmIChpbnRJbmRleCArIGNvdW50ID4gc3RvcmUuYnl0ZUxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBieXRlcyA9IGdldEludGVybmFsU3RhdGUoc3RvcmUuYnVmZmVyKS5ieXRlcztcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyBzdG9yZS5ieXRlT2Zmc2V0O1xuICB2YXIgcGFjayA9IGFycmF5U2xpY2UoYnl0ZXMsIHN0YXJ0LCBzdGFydCArIGNvdW50KTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHJldmVyc2UocGFjayk7XG59O1xuXG52YXIgc2V0ID0gZnVuY3Rpb24gKHZpZXcsIGNvdW50LCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgoaW5kZXgpO1xuICB2YXIgc3RvcmUgPSBnZXRJbnRlcm5hbFN0YXRlKHZpZXcpO1xuICBpZiAoaW50SW5kZXggKyBjb3VudCA+IHN0b3JlLmJ5dGVMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgYnl0ZXMgPSBnZXRJbnRlcm5hbFN0YXRlKHN0b3JlLmJ1ZmZlcikuYnl0ZXM7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgc3RvcmUuYnl0ZU9mZnNldDtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykgYnl0ZXNbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogY291bnQgLSBpIC0gMV07XG59O1xuXG5pZiAoIU5BVElWRV9BUlJBWV9CVUZGRVIpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBBcnJheUJ1ZmZlclByb3RvdHlwZSk7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICBieXRlczogZmlsbChBcnJheShieXRlTGVuZ3RoKSwgMCksXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoXG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykgdGhpcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBBcnJheUJ1ZmZlclByb3RvdHlwZSA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdO1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgRGF0YVZpZXdQcm90b3R5cGUpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCBBcnJheUJ1ZmZlclByb3RvdHlwZSk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGdldEludGVybmFsU3RhdGUoYnVmZmVyKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXJPckluZmluaXR5KGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICBieXRlT2Zmc2V0OiBvZmZzZXRcbiAgICB9KTtcbiAgICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gICAgICB0aGlzLmJ5dGVPZmZzZXQgPSBvZmZzZXQ7XG4gICAgfVxuICB9O1xuXG4gIERhdGFWaWV3UHJvdG90eXBlID0gJERhdGFWaWV3W1BST1RPVFlQRV07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgJ2J5dGVMZW5ndGgnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCAnYnVmZmVyJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J5dGVMZW5ndGgnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCAnYnl0ZU9mZnNldCcpO1xuICB9XG5cbiAgZGVmaW5lQnVpbHRJbnMoRGF0YVZpZXdQcm90b3R5cGUsIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0ludDMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0ludDMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpLCAyMyk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCksIDUyKTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSW50OCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0ludDgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJbnQxNiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0ludDE2LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0ludDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSW50MzIsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0Zsb2F0MzIsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Zsb2F0NjQsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHZhciBJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUgPSBQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBOYXRpdmVBcnJheUJ1ZmZlci5uYW1lICE9PSBBUlJBWV9CVUZGRVI7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBOYXRpdmVBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoLTEpO1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKCk7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKDEuNSk7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKE5hTik7XG4gICAgcmV0dXJuIElOQ09SUkVDVF9BUlJBWV9CVUZGRVJfTkFNRSAmJiAhQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUU7XG4gIH0pKSB7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsIEFycmF5QnVmZmVyUHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBuZXcgTmF0aXZlQXJyYXlCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuXG4gICAgJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBBcnJheUJ1ZmZlclByb3RvdHlwZTtcblxuICAgIGZvciAodmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZUFycmF5QnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJEFycmF5QnVmZmVyLCBrZXksIE5hdGl2ZUFycmF5QnVmZmVyW2tleV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIEFycmF5QnVmZmVyUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9IGVsc2UgaWYgKElOQ09SUkVDVF9BUlJBWV9CVUZGRVJfTkFNRSAmJiBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShOYXRpdmVBcnJheUJ1ZmZlciwgJ25hbWUnLCBBUlJBWV9CVUZGRVIpO1xuICB9XG5cbiAgLy8gV2ViS2l0IGJ1ZyAtIHRoZSBzYW1lIHBhcmVudCBwcm90b3R5cGUgZm9yIHR5cGVkIGFycmF5cyBhbmQgZGF0YSB2aWV3XG4gIGlmIChzZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihEYXRhVmlld1Byb3RvdHlwZSkgIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIHNldFByb3RvdHlwZU9mKERhdGFWaWV3UHJvdG90eXBlLCBPYmplY3RQcm90b3R5cGUpO1xuICB9XG5cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB0ZXN0VmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLnNldEludDgpO1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodGVzdFZpZXcuZ2V0SW50OCgwKSB8fCAhdGVzdFZpZXcuZ2V0SW50OCgxKSkgZGVmaW5lQnVpbHRJbnMoRGF0YVZpZXdQcm90b3R5cGUsIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4KHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuXG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyLFxuICBEYXRhVmlldzogJERhdGFWaWV3XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgcGFkU3RhcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLnN0YXJ0O1xuXG52YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIERhdGVQcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbnZhciBuJERhdGVUb0lTT1N0cmluZyA9IERhdGVQcm90b3R5cGUudG9JU09TdHJpbmc7XG52YXIgZ2V0VGltZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VGltZSk7XG52YXIgZ2V0VVRDRGF0ZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDRGF0ZSk7XG52YXIgZ2V0VVRDRnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ0Z1bGxZZWFyKTtcbnZhciBnZXRVVENIb3VycyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDSG91cnMpO1xudmFyIGdldFVUQ01pbGxpc2Vjb25kcyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDTWlsbGlzZWNvbmRzKTtcbnZhciBnZXRVVENNaW51dGVzID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENNaW51dGVzKTtcbnZhciBnZXRVVENNb250aCA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDTW9udGgpO1xudmFyIGdldFVUQ1NlY29uZHMgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ1NlY29uZHMpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2lzb3N0cmluZ1xuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBmYWlscyBoZXJlOlxubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbiREYXRlVG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG4kRGF0ZVRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lKHRoaXMpKSkgdGhyb3cgJFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZGF0ZSA9IHRoaXM7XG4gIHZhciB5ZWFyID0gZ2V0VVRDRnVsbFllYXIoZGF0ZSk7XG4gIHZhciBtaWxsaXNlY29uZHMgPSBnZXRVVENNaWxsaXNlY29uZHMoZGF0ZSk7XG4gIHZhciBzaWduID0geWVhciA8IDAgPyAnLScgOiB5ZWFyID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gc2lnbiArIHBhZFN0YXJ0KGFicyh5ZWFyKSwgc2lnbiA/IDYgOiA0LCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZ2V0VVRDTW9udGgoZGF0ZSkgKyAxLCAyLCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZ2V0VVRDRGF0ZShkYXRlKSwgMiwgMCkgK1xuICAgICdUJyArIHBhZFN0YXJ0KGdldFVUQ0hvdXJzKGRhdGUpLCAyLCAwKSArXG4gICAgJzonICsgcGFkU3RhcnQoZ2V0VVRDTWludXRlcyhkYXRlKSwgMiwgMCkgK1xuICAgICc6JyArIHBhZFN0YXJ0KGdldFVUQ1NlY29uZHMoZGF0ZSksIDIsIDApICtcbiAgICAnLicgKyBwYWRTdGFydChtaWxsaXNlY29uZHMsIDMsIDApICtcbiAgICAnWic7XG59IDogbiREYXRlVG9JU09TdHJpbmc7XG4iLCIvLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyICRBcnJheSA9IEFycmF5O1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIHBhY2sgPSBmdW5jdGlvbiAobnVtYmVyLCBtYW50aXNzYUxlbmd0aCwgYnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9ICRBcnJheShieXRlcyk7XG4gIHZhciBleHBvbmVudExlbmd0aCA9IGJ5dGVzICogOCAtIG1hbnRpc3NhTGVuZ3RoIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBleHBvbmVudExlbmd0aCkgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1hbnRpc3NhTGVuZ3RoID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgfHwgbnVtYmVyID09PSAwICYmIDEgLyBudW1iZXIgPCAwID8gMSA6IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBleHBvbmVudCwgbWFudGlzc2EsIGM7XG4gIG51bWJlciA9IGFicyhudW1iZXIpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICBpZiAobnVtYmVyICE9IG51bWJlciB8fCBudW1iZXIgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBtYW50aXNzYSA9IG51bWJlciAhPSBudW1iZXIgPyAxIDogMDtcbiAgICBleHBvbmVudCA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZXhwb25lbnQgPSBmbG9vcihsb2cobnVtYmVyKSAvIExOMik7XG4gICAgYyA9IHBvdygyLCAtZXhwb25lbnQpO1xuICAgIGlmIChudW1iZXIgKiBjIDwgMSkge1xuICAgICAgZXhwb25lbnQtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gMSkge1xuICAgICAgbnVtYmVyICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgbnVtYmVyICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmIChudW1iZXIgKiBjID49IDIpIHtcbiAgICAgIGV4cG9uZW50Kys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChleHBvbmVudCArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG1hbnRpc3NhID0gMDtcbiAgICAgIGV4cG9uZW50ID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gMSkge1xuICAgICAgbWFudGlzc2EgPSAobnVtYmVyICogYyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gZXhwb25lbnQgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbWFudGlzc2EgPSBudW1iZXIgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtYW50aXNzYUxlbmd0aCk7XG4gICAgICBleHBvbmVudCA9IDA7XG4gICAgfVxuICB9XG4gIHdoaWxlIChtYW50aXNzYUxlbmd0aCA+PSA4KSB7XG4gICAgYnVmZmVyW2luZGV4KytdID0gbWFudGlzc2EgJiAyNTU7XG4gICAgbWFudGlzc2EgLz0gMjU2O1xuICAgIG1hbnRpc3NhTGVuZ3RoIC09IDg7XG4gIH1cbiAgZXhwb25lbnQgPSBleHBvbmVudCA8PCBtYW50aXNzYUxlbmd0aCB8IG1hbnRpc3NhO1xuICBleHBvbmVudExlbmd0aCArPSBtYW50aXNzYUxlbmd0aDtcbiAgd2hpbGUgKGV4cG9uZW50TGVuZ3RoID4gMCkge1xuICAgIGJ1ZmZlcltpbmRleCsrXSA9IGV4cG9uZW50ICYgMjU1O1xuICAgIGV4cG9uZW50IC89IDI1NjtcbiAgICBleHBvbmVudExlbmd0aCAtPSA4O1xuICB9XG4gIGJ1ZmZlclstLWluZGV4XSB8PSBzaWduICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufTtcblxudmFyIHVucGFjayA9IGZ1bmN0aW9uIChidWZmZXIsIG1hbnRpc3NhTGVuZ3RoKSB7XG4gIHZhciBieXRlcyA9IGJ1ZmZlci5sZW5ndGg7XG4gIHZhciBleHBvbmVudExlbmd0aCA9IGJ5dGVzICogOCAtIG1hbnRpc3NhTGVuZ3RoIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBleHBvbmVudExlbmd0aCkgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGV4cG9uZW50TGVuZ3RoIC0gNztcbiAgdmFyIGluZGV4ID0gYnl0ZXMgLSAxO1xuICB2YXIgc2lnbiA9IGJ1ZmZlcltpbmRleC0tXTtcbiAgdmFyIGV4cG9uZW50ID0gc2lnbiAmIDEyNztcbiAgdmFyIG1hbnRpc3NhO1xuICBzaWduID4+PSA3O1xuICB3aGlsZSAobkJpdHMgPiAwKSB7XG4gICAgZXhwb25lbnQgPSBleHBvbmVudCAqIDI1NiArIGJ1ZmZlcltpbmRleC0tXTtcbiAgICBuQml0cyAtPSA4O1xuICB9XG4gIG1hbnRpc3NhID0gZXhwb25lbnQgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZXhwb25lbnQgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbWFudGlzc2FMZW5ndGg7XG4gIHdoaWxlIChuQml0cyA+IDApIHtcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICogMjU2ICsgYnVmZmVyW2luZGV4LS1dO1xuICAgIG5CaXRzIC09IDg7XG4gIH1cbiAgaWYgKGV4cG9uZW50ID09PSAwKSB7XG4gICAgZXhwb25lbnQgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZXhwb25lbnQgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbWFudGlzc2EgPyBOYU4gOiBzaWduID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbWFudGlzc2EgPSBtYW50aXNzYSArIHBvdygyLCBtYW50aXNzYUxlbmd0aCk7XG4gICAgZXhwb25lbnQgPSBleHBvbmVudCAtIGVCaWFzO1xuICB9IHJldHVybiAoc2lnbiA/IC0xIDogMSkgKiBtYW50aXNzYSAqIHBvdygyLCBleHBvbmVudCAtIG1hbnRpc3NhTGVuZ3RoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYWNrOiBwYWNrLFxuICB1bnBhY2s6IHVucGFja1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIHJlcGVhdCA9IHVuY3VycnlUaGlzKCRyZXBlYXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgcGFkU3RhcnQsIHBhZEVuZCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0VORCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiB0b1N0cmluZyhmaWxsU3RyaW5nKTtcbiAgICB2YXIgZmlsbExlbiwgc3RyaW5nRmlsbGVyO1xuICAgIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICAgIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gICAgc3RyaW5nRmlsbGVyID0gcmVwZWF0KGZpbGxTdHIsIGNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gICAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdTbGljZShzdHJpbmdGaWxsZXIsIDAsIGZpbGxMZW4pO1xuICAgIHJldHVybiBJU19FTkQgPyBTICsgc3RyaW5nRmlsbGVyIDogc3RyaW5nRmlsbGVyICsgUztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblxuLy8gYFRvSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXJPckluZmluaXR5KGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgJFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCBvciBpbmRleCcpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG5cbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIEFycmF5QnVmZmVyID0gYXJyYXlCdWZmZXJNb2R1bGVbQVJSQVlfQlVGRkVSXTtcbnZhciBOYXRpdmVBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xuXG4vLyBgQXJyYXlCdWZmZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLWNvbnN0cnVjdG9yXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBOYXRpdmVBcnJheUJ1ZmZlciAhPT0gQXJyYXlCdWZmZXIgfSwge1xuICBBcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXJcbn0pO1xuXG5zZXRTcGVjaWVzKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG5cbi8vIGBBcnJheUJ1ZmZlci5pc1ZpZXdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci5pc3ZpZXdcbiQoeyB0YXJnZXQ6ICdBcnJheUJ1ZmZlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfSwge1xuICBpc1ZpZXc6IEFycmF5QnVmZmVyVmlld0NvcmUuaXNWaWV3XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIEFycmF5QnVmZmVyID0gQXJyYXlCdWZmZXJNb2R1bGUuQXJyYXlCdWZmZXI7XG52YXIgRGF0YVZpZXcgPSBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlldztcbnZhciBEYXRhVmlld1Byb3RvdHlwZSA9IERhdGFWaWV3LnByb3RvdHlwZTtcbnZhciB1biRBcnJheUJ1ZmZlclNsaWNlID0gdW5jdXJyeVRoaXMoQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKTtcbnZhciBnZXRVaW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLmdldFVpbnQ4KTtcbnZhciBzZXRVaW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLnNldFVpbnQ4KTtcblxudmFyIElOQ09SUkVDVF9TTElDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSk7XG5cbi8vIGBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci5wcm90b3R5cGUuc2xpY2VcbiQoeyB0YXJnZXQ6ICdBcnJheUJ1ZmZlcicsIHByb3RvOiB0cnVlLCB1bnNhZmU6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX1NMSUNFIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAodW4kQXJyYXlCdWZmZXJTbGljZSAmJiBlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuJEFycmF5QnVmZmVyU2xpY2UoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTb3VyY2UgPSBuZXcgRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUYXJnZXQgPSBuZXcgRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgc2V0VWludDgodmlld1RhcmdldCwgaW5kZXgrKywgZ2V0VWludDgodmlld1NvdXJjZSwgZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZGVsZXRlUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdycpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzcGxpY2UnKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCAvKiAsIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGFjdHVhbFN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpbnNlcnRDb3VudCwgYWN0dWFsRGVsZXRlQ291bnQsIEEsIGssIGZyb20sIHRvO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICAgIGluc2VydENvdW50ID0gYWN0dWFsRGVsZXRlQ291bnQgPSAwO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAxKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IDA7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IGxlbiAtIGFjdHVhbFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFyZ3VtZW50c0xlbmd0aCAtIDI7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IG1pbihtYXgodG9JbnRlZ2VyT3JJbmZpbml0eShkZWxldGVDb3VudCksIDApLCBsZW4gLSBhY3R1YWxTdGFydCk7XG4gICAgfVxuICAgIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlcihsZW4gKyBpbnNlcnRDb3VudCAtIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBmb3IgKGsgPSAwOyBrIDwgYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgZnJvbSA9IGFjdHVhbFN0YXJ0ICsgaztcbiAgICAgIGlmIChmcm9tIGluIE8pIGNyZWF0ZVByb3BlcnR5KEEsIGssIE9bZnJvbV0pO1xuICAgIH1cbiAgICBBLmxlbmd0aCA9IGFjdHVhbERlbGV0ZUNvdW50O1xuICAgIGlmIChpbnNlcnRDb3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBhY3R1YWxTdGFydDsgayA8IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQ7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGVQcm9wZXJ0eU9yVGhyb3coTywgdG8pO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gbGVuOyBrID4gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDsgay0tKSBkZWxldGVQcm9wZXJ0eU9yVGhyb3coTywgayAtIDEpO1xuICAgIH0gZWxzZSBpZiAoaW5zZXJ0Q291bnQgPiBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsgPiBhY3R1YWxTdGFydDsgay0tKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQgLSAxO1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudCAtIDE7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGVQcm9wZXJ0eU9yVGhyb3coTywgdG8pO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSAwOyBrIDwgaW5zZXJ0Q291bnQ7IGsrKykge1xuICAgICAgT1trICsgYWN0dWFsU3RhcnRdID0gYXJndW1lbnRzW2sgKyAyXTtcbiAgICB9XG4gICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50O1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyICREYXRlID0gRGF0ZTtcbnZhciBnZXRUaW1lID0gdW5jdXJyeVRoaXMoJERhdGUucHJvdG90eXBlLmdldFRpbWUpO1xuXG4vLyBgRGF0ZS5ub3dgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLm5vd1xuJCh7IHRhcmdldDogJ0RhdGUnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbm93OiBmdW5jdGlvbiBub3coKSB7XG4gICAgcmV0dXJuIGdldFRpbWUobmV3ICREYXRlKCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2lzb3N0cmluZ1xuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyB9LCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGBnbG9iYWxUaGlzYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2xvYmFsdGhpc1xuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7XG4gIGdsb2JhbFRoaXM6IGdsb2JhbFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKS5mO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiAhT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXNcbn0pO1xuIiwiLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=