(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{"./dist/esm/verdocs-checkbox.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_checkbox",(function(){return VerdocsCheckbox}));__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var _index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./dist/esm/index-f78d163d.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}var VerdocsCheckbox=function(){function VerdocsCheckbox(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsCheckbox),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__.j)(this,hostRef),this.checked=!1,this.name="",this.value="",this.disabled=!1}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsCheckbox,[{key:"render",value:function render(){return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__.b,{class:{disabled:this.disabled}},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__.h)("input",{type:"checkbox",value:this.value,name:this.name,id:"verdocs-checkbox-"+this.name+"-"+this.value,checked:this.checked,disabled:this.disabled}))}}]),VerdocsCheckbox}();VerdocsCheckbox.style='verdocs-checkbox{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;width:20px;height:20px;display:block;font-size:11px;position:relative;background-color:transparent;-webkit-transform-origin:bottom left;transform-origin:bottom left;border-radius:100%}verdocs-checkbox.disabled{opacity:0.5}verdocs-checkbox.hide{display:none}verdocs-checkbox.focused{-webkit-animation:verdocs-field-pulse 0.75s 2;animation:verdocs-field-pulse 0.75s 2}verdocs-checkbox input[type=checkbox]{width:18px;height:18px;accent-color:#3f9d67}'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1jaGVja2JveC92ZXJkb2NzLWNoZWNrYm94LnNjc3MiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtY2hlY2tib3gvdmVyZG9jcy1jaGVja2JveC50c3giXSwibmFtZXMiOlsiVmVyZG9jc0NoZWNrYm94IiwicmVuZGVyIiwiaCIsIkhvc3QiLCJjbGFzcyIsImRpc2FibGVkIiwidGhpcyIsInR5cGUiLCJ2YWx1ZSIsIm5hbWUiLCJpZCIsImNoZWNrZWQiXSwibWFwcGluZ3MiOiJvckRBQUEsSUNhYUEsZ0JBQWUsVyw4UkFJQyxFLFVBS0osRyxXQUtDLEcsZUFLSyxDLENBNEI1QixPLHdTQWRELFNBQUFDLFNBQ0UsT0FDRUMsMERBQUNDLGtEQUFJLENBQUNDLE1BQU8sQ0FBQ0MsU0FBVUMsS0FBS0QsV0FDM0JILG1FQUNFSyxLQUFLLFdBQ0xDLE1BQU9GLEtBQUtFLE1BQ1pDLEtBQU1ILEtBQUtHLEtBQ1hDLEdBQUUsb0JBQXNCSixLQUFLRyxLQUFJLElBQUlILEtBQUtFLE1BQzFDRyxRQUFTTCxLQUFLSyxRQUNkTixTQUFVQyxLQUFLRCxXLEtBS3RCLGdCQS9DeUIsRyxzQkRiRCwwaUIiLCJmaWxlIjoiNDAuOWM3NGU2MzcuaWZyYW1lLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgJy4uLy4uLy4uL3RoZW1lLnNjc3MnO1xuXG52ZXJkb2NzLWNoZWNrYm94IHtcbiAgZm9udC1mYW1pbHk6ICR2ZXJkb2NzLXByaW1hcnktZm9udDtcbiAgd2lkdGg6IDIwcHg7XG4gIGhlaWdodDogMjBweDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tIGxlZnQ7XG4gIGJvcmRlci1yYWRpdXM6IDEwMCU7XG5cbiAgJi5kaXNhYmxlZCB7XG4gICAgb3BhY2l0eTogMC41O1xuICB9XG5cbiAgJi5oaWRlIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5cbiAgJi5mb2N1c2VkIHtcbiAgICBhbmltYXRpb246IHZlcmRvY3MtZmllbGQtcHVsc2UgMC43NXMgMjtcbiAgfVxuXG4gIGlucHV0W3R5cGU9J2NoZWNrYm94J10ge1xuICAgIHdpZHRoOiAxOHB4O1xuICAgIGhlaWdodDogMThweDtcbiAgICBhY2NlbnQtY29sb3I6ICR2ZXJkb2NzLWdyZWVuLWFjY2VudDtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIGgsIEhvc3QsIFByb3B9IGZyb20gJ0BzdGVuY2lsL2NvcmUnO1xuLy8gaW1wb3J0IHtDb21wb25lbnQsIGgsIEhvc3QsIFByb3AsIEV2ZW50LCBFdmVudEVtaXR0ZXJ9IGZyb20gJ0BzdGVuY2lsL2NvcmUnO1xuXG4vKipcbiAqIERpc3BsYXlzIGEgY2hlY2sgYm94LiBOb3RlIHRoYXQgdGhpcyBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgYHZlcmRvY3MtZmllbGQtY2hlY2tib3hgIGNvbXBvbmVudCwgd2hpY2ggaXMgZGVzaWduZWRcbiAqIHRvIGJlIHVzZWQgaW4gc2lnbmluZyBleHBlcmllbmNlcyBhbmQgY29udGFpbnMgc2V0dGluZ3MgdGhhdCBjb25uZWN0IHRvIHRlbXBsYXRlIGZpZWxkcy4gVGhpcyBpcyBqdXN0IGEgc2ltcGxlIGNoZWNrIGJveFxuICogZm9yIFVJIGRpc3BsYXlzIGUuZy4gZGlhbG9nIGJveGVzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgdGFnOiAndmVyZG9jcy1jaGVja2JveCcsXG4gIHN0eWxlVXJsOiAndmVyZG9jcy1jaGVja2JveC5zY3NzJyxcbiAgc2hhZG93OiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgVmVyZG9jc0NoZWNrYm94IHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHJhZGlvIGJ1dHRvbiBpcyBjdXJyZW50bHkgc2VsZWN0ZWQuXG4gICAqL1xuICBAUHJvcCgpIGNoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogSFRNTCBmb3JtIGZpZWxkIG5hbWUgZm9yIHRoZSBpbnB1dC5cbiAgICovXG4gIEBQcm9wKCkgbmFtZTogc3RyaW5nID0gJyc7XG5cbiAgLyoqXG4gICAqIFZhbHVlIHRvIHRyYWNrIHdpdGggdGhlIGlucHV0LlxuICAgKi9cbiAgQFByb3AoKSB2YWx1ZTogc3RyaW5nID0gJyc7XG5cbiAgLyoqXG4gICAqIElmIHNldCwgdGhlIGJ1dHRvbiB3aWxsIHN0aWxsIGJlIGRpc3BsYXllZCBidXQgbm90IHNlbGVjdGFibGUuXG4gICAqL1xuICBAUHJvcCgpIGRpc2FibGVkPzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBFdmVudCBmaXJlZCB3aGVuIHRoZSBpbnB1dCBmaWVsZCB2YWx1ZSBjaGFuZ2VzLiBOb3RlIHRoYXQgdGhpcyB3aWxsIG9ubHkgYmUgZmlyZWQgb24gYmx1ciwgdGFiLW91dCwgRU5URVIga2V5IHByZXNzLCBldGMuXG4gICAqIEl0IGlzIGdlbmVyYWxseSB0aGUgYmVzdCBldmVudCB0byBzdWJzY3JpYmUgdG8gdGhhbiBgaW5wdXRgIGZvciBtb3N0IGNhc2VzIEVYQ0VQVCBhdXRvY29tcGxldGUgZmllbGRzIHRoYXQgbmVlZCB0byBzZWUgZXZlcnlcbiAgICoga2V5cHJlc3MuXG4gICAqL1xuICAvLyBARXZlbnQoe2NvbXBvc2VkOiB0cnVlfSkgc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7dmFsdWU6IHN0cmluZ30+O1xuXG4gIC8vIGhhbmRsZUNoYW5nZShlOiBhbnkpIHtcbiAgLy8gICBjb25zb2xlLmxvZygnY2hhbmdlZCcsIGUudGFyZ2V0LmNoZWNrZWQpO1xuICAvLyAgIHRoaXMuc2VsZWN0ZWQuZW1pdCh7dmFsdWU6IHRoaXMudmFsdWV9KTtcbiAgLy8gfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEhvc3QgY2xhc3M9e3tkaXNhYmxlZDogdGhpcy5kaXNhYmxlZH19PlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgIHZhbHVlPXt0aGlzLnZhbHVlfVxuICAgICAgICAgIG5hbWU9e3RoaXMubmFtZX1cbiAgICAgICAgICBpZD17YHZlcmRvY3MtY2hlY2tib3gtJHt0aGlzLm5hbWV9LSR7dGhpcy52YWx1ZX1gfVxuICAgICAgICAgIGNoZWNrZWQ9e3RoaXMuY2hlY2tlZH1cbiAgICAgICAgICBkaXNhYmxlZD17dGhpcy5kaXNhYmxlZH1cbiAgICAgICAgICAvLyBvbkNoYW5nZT17ZSA9PiB0aGlzLmhhbmRsZUNoYW5nZShlKX1cbiAgICAgICAgLz5cbiAgICAgIDwvSG9zdD5cbiAgICApO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9