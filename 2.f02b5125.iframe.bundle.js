(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./dist/esm/VerdocsEndpoint-47652116.js":function(module,__webpack_exports__,__webpack_require__){"use strict";(function(Buffer,process){__webpack_require__.d(__webpack_exports__,"a",(function(){return VerdocsEndpoint})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getDocument})),__webpack_require__.d(__webpack_exports__,"c",(function(){return getDocumentFile})),__webpack_require__.d(__webpack_exports__,"d",(function(){return updateDocumentField})),__webpack_require__.d(__webpack_exports__,"e",(function(){return getSigningSession})),__webpack_require__.d(__webpack_exports__,"f",(function(){return updateRecipientStatus}));__webpack_require__("./node_modules/core-js/modules/es.string.replace.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.string.starts-with.js"),__webpack_require__("./node_modules/core-js/modules/es.promise.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.freeze.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.object.create.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.array-buffer.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.array-buffer.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.array-buffer.is-view.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-prototype-of.js"),__webpack_require__("./node_modules/core-js/modules/es.string.trim.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-names.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.uint8-array.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.copy-within.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.every.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.fill.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.find-index.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.last-index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reduce-right.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.reverse.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.set.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.some.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.sort.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.subarray.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.to-locale-string.js"),__webpack_require__("./node_modules/core-js/modules/es.typed-array.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-iso-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-properties.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.string.ends-with.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.date.now.js"),__webpack_require__("./node_modules/core-js/modules/es.string.search.js"),__webpack_require__("./node_modules/core-js/modules/web.timers.js"),__webpack_require__("./node_modules/core-js/modules/es.array.splice.js"),__webpack_require__("./node_modules/core-js/modules/es.global-this.js"),__webpack_require__("./node_modules/core-js/modules/es.map.js");var TemplatePermissions,TemplateSenderTypes,TemplateActions,SortOptions,b64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",b64re=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,decodeJWTBody=function decodeJWTBody(token){return JSON.parse(function AtoB(str){if(str=String(str).replace(/[\t\n\f\r ]+/g,""),!b64re.test(str))throw new TypeError("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");var bitmap;str+="==".slice(2-(3&str.length));for(var r1,r2,result="",i=0;i<str.length;)bitmap=b64.indexOf(str.charAt(i++))<<18|b64.indexOf(str.charAt(i++))<<12|(r1=b64.indexOf(str.charAt(i++)))<<6|(r2=b64.indexOf(str.charAt(i++))),result+=64===r1?String.fromCharCode(bitmap>>16&255):64===r2?String.fromCharCode(bitmap>>16&255,bitmap>>8&255):String.fromCharCode(bitmap>>16&255,bitmap>>8&255,255&bitmap);return result}((token||"").split(".")[1]||""))},decodeAccessTokenBody=function decodeAccessTokenBody(token){var decoded;try{if(null===(decoded=decodeJWTBody(token)))return null}catch(e){return null}return Object.keys(decoded).forEach((function(key){"string"==typeof key&&key.startsWith("https://verdocs.com/")&&(decoded[key.replace("https://verdocs.com/","")]=decoded[key],delete decoded[key])})),decoded},__awaiter$1=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator$1=function(thisArg,body){var f,y,t,g,_={label:0,sent:function sent(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},getSigningSession=function getSigningSession(endpoint,params){return __awaiter$1(void 0,void 0,void 0,(function(){return __generator$1(this,(function(_a){return[2,endpoint.api.get("/documents/".concat(params.documentId,"/recipients/").concat(encodeURIComponent(params.roleId),"/invitation/").concat(params.inviteCode)).then((function(r){var _a,_b,signerToken=(null===(_a=r.headers)||void 0===_a?void 0:_a.signer_token)||"",session=decodeAccessTokenBody(signerToken);return endpoint.setToken(null===(_b=r.headers)||void 0===_b?void 0:_b.signer_token),{recipient:r.data,session:session,signerToken:signerToken}}))]}))}))},getDocument=function getDocument(endpoint,documentId){return __awaiter$1(void 0,void 0,void 0,(function(){return __generator$1(this,(function(_a){return[2,endpoint.api.get("/documents/".concat(documentId)).then((function(r){return r.data}))]}))}))},recipientHasAction=function recipientHasAction(recipient){return!["submitted","canceled","declined"].includes(recipient.status)},getDocumentFile=function getDocumentFile(endpoint,documentId,envelopeDocumentId){return __awaiter$1(void 0,void 0,void 0,(function(){return __generator$1(this,(function(_a){return[2,endpoint.api.get("/documents/".concat(documentId,"/envelope_documents/").concat(envelopeDocumentId,"?file=true"),{responseType:"arraybuffer"}).then((function(r){return Buffer.from(r.data,"binary").toString("base64")}))]}))}))},updateDocumentField=function updateDocumentField(endpoint,documentId,fieldName,value){return __awaiter$1(void 0,void 0,void 0,(function(){return __generator$1(this,(function(_a){return[2,endpoint.api.put("/documents/".concat(documentId,"/fields/").concat(fieldName),value).then((function(r){return r.data}))]}))}))},Documents$1=Object.freeze({__proto__:null,getSummary:function getSummary(endpoint,page){return __awaiter$1(void 0,void 0,void 0,(function(){return __generator$1(this,(function(_a){return[2,endpoint.api.post("/documents/summary",{page:page}).then((function(r){return r.data}))]}))}))},searchDocuments:function searchDocuments(endpoint,params){return __awaiter$1(void 0,void 0,void 0,(function(){return __generator$1(this,(function(_a){return[2,endpoint.api.post("/documents/search",params).then((function(r){return r.data}))]}))}))},getSigningSession:getSigningSession,getDocumentRecipients:function getDocumentRecipients(endpoint,documentId){return __awaiter$1(void 0,void 0,void 0,(function(){return __generator$1(this,(function(_a){return[2,endpoint.api.get("/documents/".concat(documentId,"/recipients")).then((function(r){return r.data}))]}))}))},getDocument:getDocument,cancelDocument:function cancelDocument(endpoint,documentId){return __awaiter$1(void 0,void 0,void 0,(function(){return __generator$1(this,(function(_a){return[2,endpoint.api.put("/documents/".concat(documentId),{action:"cancel"}).then((function(r){return r.data}))]}))}))},recipientHasAction:recipientHasAction,getRecipientsWithActions:function getRecipientsWithActions(document){return((null==document?void 0:document.recipients)||[]).filter(recipientHasAction)},recipientCanAct:function recipientCanAct(recipient,recipientsWithActions){var _a;return recipient.sequence===(null===(_a=null==recipientsWithActions?void 0:recipientsWithActions[0])||void 0===_a?void 0:_a.sequence)},userCanAct:function userCanAct(email,recipientsWithActions){var _a,recipient=recipientsWithActions.find((function(r){return r.email===email}));return recipient&&recipient.sequence===(null===(_a=null==recipientsWithActions?void 0:recipientsWithActions[0])||void 0===_a?void 0:_a.sequence)},getDocumentFile:getDocumentFile,updateDocumentField:updateDocumentField,updateDocumentFieldSignature:function updateDocumentFieldSignature(endpoint,documentId,fieldName,signatureId){return __awaiter$1(void 0,void 0,void 0,(function(){return __generator$1(this,(function(_a){return[2,endpoint.api.put("/documents/".concat(documentId,"/fields/").concat(fieldName,"/signature/").concat(signatureId)).then((function(r){return r.data}))]}))}))}}),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)},__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=function(thisArg,body){var f,y,t,g,_={label:0,sent:function sent(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},updateRecipientStatus=function updateRecipientStatus(endpoint,documentId,roleName,action,params){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,endpoint.api.put("/documents/".concat(documentId,"/recipients/").concat(roleName),__assign({role_name:roleName,action:action},params||{})).then((function(r){return r.data}))]}))}))},Recipients=Object.freeze({__proto__:null,updateRecipientStatus:updateRecipientStatus}),Signatures=Object.freeze({__proto__:null,createSignature:function createSignature(endpoint,name,signature){var data=new FormData;return data.append("signature",signature,name),endpoint.api.post("/signatures",data).then((function(r){return r.data}))},getSignatures:function getSignatures(endpoint){return endpoint.api.get("/signatures").then((function(r){return r.data}))},getSignature:function getSignature(endpoint,signatureId){return endpoint.api.get("/signatures/".concat(signatureId)).then((function(r){return r.data}))},deleteSignature:function deleteSignature(endpoint,signatureId){return endpoint.api.delete("/signatures/".concat(signatureId)).then((function(r){return r.data}))}}),Initials=Object.freeze({__proto__:null,createInitials:function createInitials(endpoint,name,initials){var data=new FormData;return data.append("initial",initials,name),endpoint.api.post("/initials",data).then((function(r){return r.data}))}}),Types=Object.freeze({__proto__:null}),Documents=Object.freeze({__proto__:null,Documents:Documents$1,Recipients:Recipients,Signatures:Signatures,Initials:Initials,Types:Types});!function(TemplatePermissions){TemplatePermissions.TEMPLATE_CREATOR_CREATE_PUBLIC="template:creator:create:public",TemplatePermissions.TEMPLATE_CREATOR_CREATE_ORG="template:creator:create:org",TemplatePermissions.TEMPLATE_CREATOR_CREATE_PERSONAL="template:creator:create:personal",TemplatePermissions.TEMPLATE_CREATOR_DELETE="template:creator:delete",TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY="template:creator:visibility",TemplatePermissions.TEMPLATE_MEMBER_READ="template:member:read",TemplatePermissions.TEMPLATE_MEMBER_WRITE="template:member:write",TemplatePermissions.TEMPLATE_MEMBER_DELETE="template:member:delete",TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY="template:member:visibility"}(TemplatePermissions||(TemplatePermissions={})),function(TemplateSenderTypes){TemplateSenderTypes.CREATOR="creator",TemplateSenderTypes.ORGANIZATION_MEMBER="organization_member",TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR="organization_member_as_creator",TemplateSenderTypes.EVERYONE="everyone",TemplateSenderTypes.EVERYONE_AS_CREATOR="everyone_as_creator"}(TemplateSenderTypes||(TemplateSenderTypes={})),function(TemplateActions){TemplateActions.CREATE_PERSONAL="create_personal",TemplateActions.CREATE_ORG="create_org",TemplateActions.CREATE_PUBLIC="create_public",TemplateActions.READ="read",TemplateActions.WRITE="write",TemplateActions.DELETE="delete",TemplateActions.CHANGE_VISIBILITY_PERSONAL="change_visibility_personal",TemplateActions.CHANGE_VISIBILITY_ORG="change_visibility_org",TemplateActions.CHANGE_VISIBILITY_PUBLIC="change_visibility_public"}(TemplateActions||(TemplateActions={})),function(SortOptions){SortOptions.CREATED_AT="created_at",SortOptions.UPDATED_AT="updated_at",SortOptions.NAME="name",SortOptions.LAST_USED_AT="last_used_at",SortOptions.COUNTER="counter",SortOptions.STAR_COUNTER="star_counter"}(SortOptions||(SortOptions={}));var cache,bind=function bind(fn,thisArg){return function wrap(){for(var args=new Array(arguments.length),i=0;i<args.length;i++)args[i]=arguments[i];return fn.apply(thisArg,args)}},toString=Object.prototype.toString,kindOf=(cache=Object.create(null),function(thing){var str=toString.call(thing);return cache[str]||(cache[str]=str.slice(8,-1).toLowerCase())});function kindOfTest(type){return type=type.toLowerCase(),function isKindOf(thing){return kindOf(thing)===type}}function isArray(val){return Array.isArray(val)}function isUndefined(val){return void 0===val}var isArrayBuffer=kindOfTest("ArrayBuffer");function isObject(val){return null!==val&&"object"==typeof val}function isPlainObject(val){if("object"!==kindOf(val))return!1;var prototype=Object.getPrototypeOf(val);return null===prototype||prototype===Object.prototype}var isDate=kindOfTest("Date"),isFile=kindOfTest("File"),isBlob=kindOfTest("Blob"),isFileList=kindOfTest("FileList");function isFunction(val){return"[object Function]"===toString.call(val)}var isURLSearchParams=kindOfTest("URLSearchParams");function forEach(obj,fn){if(null!=obj)if("object"!=typeof obj&&(obj=[obj]),isArray(obj))for(var i=0,l=obj.length;i<l;i++)fn.call(null,obj[i],i,obj);else for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&fn.call(null,obj[key],key,obj)}var TypedArray,isTypedArray=(TypedArray="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(thing){return TypedArray&&thing instanceof TypedArray}),utils={isArray:isArray,isArrayBuffer:isArrayBuffer,isBuffer:function isBuffer(val){return null!==val&&!isUndefined(val)&&null!==val.constructor&&!isUndefined(val.constructor)&&"function"==typeof val.constructor.isBuffer&&val.constructor.isBuffer(val)},isFormData:function isFormData(thing){return thing&&("function"==typeof FormData&&thing instanceof FormData||"[object FormData]"===toString.call(thing)||isFunction(thing.toString)&&"[object FormData]"===thing.toString())},isArrayBufferView:function isArrayBufferView(val){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(val):val&&val.buffer&&isArrayBuffer(val.buffer)},isString:function isString(val){return"string"==typeof val},isNumber:function isNumber(val){return"number"==typeof val},isObject:isObject,isPlainObject:isPlainObject,isUndefined:isUndefined,isDate:isDate,isFile:isFile,isBlob:isBlob,isFunction:isFunction,isStream:function isStream(val){return isObject(val)&&isFunction(val.pipe)},isURLSearchParams:isURLSearchParams,isStandardBrowserEnv:function isStandardBrowserEnv(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:forEach,merge:function merge(){var result={};function assignValue(val,key){isPlainObject(result[key])&&isPlainObject(val)?result[key]=merge(result[key],val):isPlainObject(val)?result[key]=merge({},val):isArray(val)?result[key]=val.slice():result[key]=val}for(var i=0,l=arguments.length;i<l;i++)forEach(arguments[i],assignValue);return result},extend:function extend(a,b,thisArg){return forEach(b,(function assignValue(val,key){a[key]=thisArg&&"function"==typeof val?bind(val,thisArg):val})),a},trim:function trim(str){return str.trim?str.trim():str.replace(/^\s+|\s+$/g,"")},stripBOM:function stripBOM(content){return 65279===content.charCodeAt(0)&&(content=content.slice(1)),content},inherits:function inherits(constructor,superConstructor,props,descriptors){constructor.prototype=Object.create(superConstructor.prototype,descriptors),constructor.prototype.constructor=constructor,props&&Object.assign(constructor.prototype,props)},toFlatObject:function toFlatObject(sourceObj,destObj,filter){var props,i,prop,merged={};destObj=destObj||{};do{for(i=(props=Object.getOwnPropertyNames(sourceObj)).length;i-- >0;)merged[prop=props[i]]||(destObj[prop]=sourceObj[prop],merged[prop]=!0);sourceObj=Object.getPrototypeOf(sourceObj)}while(sourceObj&&(!filter||filter(sourceObj,destObj))&&sourceObj!==Object.prototype);return destObj},kindOf:kindOf,kindOfTest:kindOfTest,endsWith:function endsWith(str,searchString,position){str=String(str),(void 0===position||position>str.length)&&(position=str.length),position-=searchString.length;var lastIndex=str.indexOf(searchString,position);return-1!==lastIndex&&lastIndex===position},toArray:function toArray(thing){if(!thing)return null;var i=thing.length;if(isUndefined(i))return null;for(var arr=new Array(i);i-- >0;)arr[i]=thing[i];return arr},isTypedArray:isTypedArray,isFileList:isFileList};function encode(val){return encodeURIComponent(val).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var buildURL=function buildURL(url,params,paramsSerializer){if(!params)return url;var serializedParams;if(paramsSerializer)serializedParams=paramsSerializer(params);else if(utils.isURLSearchParams(params))serializedParams=params.toString();else{var parts=[];utils.forEach(params,(function serialize(val,key){null!=val&&(utils.isArray(val)?key+="[]":val=[val],utils.forEach(val,(function parseValue(v){utils.isDate(v)?v=v.toISOString():utils.isObject(v)&&(v=JSON.stringify(v)),parts.push(encode(key)+"="+encode(v))})))})),serializedParams=parts.join("&")}if(serializedParams){var hashmarkIndex=url.indexOf("#");-1!==hashmarkIndex&&(url=url.slice(0,hashmarkIndex)),url+=(-1===url.indexOf("?")?"?":"&")+serializedParams}return url};function InterceptorManager(){this.handlers=[]}InterceptorManager.prototype.use=function use(fulfilled,rejected,options){return this.handlers.push({fulfilled:fulfilled,rejected:rejected,synchronous:!!options&&options.synchronous,runWhen:options?options.runWhen:null}),this.handlers.length-1},InterceptorManager.prototype.eject=function eject(id){this.handlers[id]&&(this.handlers[id]=null)},InterceptorManager.prototype.forEach=function forEach(fn){utils.forEach(this.handlers,(function forEachHandler(h){null!==h&&fn(h)}))};var InterceptorManager_1=InterceptorManager,normalizeHeaderName=function normalizeHeaderName(headers,normalizedName){utils.forEach(headers,(function processHeader(value,name){name!==normalizedName&&name.toUpperCase()===normalizedName.toUpperCase()&&(headers[normalizedName]=value,delete headers[name])}))};function AxiosError(message,code,config,request,response){Error.call(this),this.message=message,this.name="AxiosError",code&&(this.code=code),config&&(this.config=config),request&&(this.request=request),response&&(this.response=response)}utils.inherits(AxiosError,Error,{toJSON:function toJSON(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var prototype=AxiosError.prototype,descriptors={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(code){descriptors[code]={value:code}})),Object.defineProperties(AxiosError,descriptors),Object.defineProperty(prototype,"isAxiosError",{value:!0}),AxiosError.from=function(error,code,config,request,response,customProps){var axiosError=Object.create(prototype);return utils.toFlatObject(error,axiosError,(function filter(obj){return obj!==Error.prototype})),AxiosError.call(axiosError,error.message,code,config,request,response),axiosError.name=error.name,customProps&&Object.assign(axiosError,customProps),axiosError};var AxiosError_1=AxiosError,transitional={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1};var toFormData_1=function toFormData(obj,formData){formData=formData||new FormData;var stack=[];function convertValue(value){return null===value?"":utils.isDate(value)?value.toISOString():utils.isArrayBuffer(value)||utils.isTypedArray(value)?"function"==typeof Blob?new Blob([value]):Buffer.from(value):value}return function build(data,parentKey){if(utils.isPlainObject(data)||utils.isArray(data)){if(-1!==stack.indexOf(data))throw Error("Circular reference detected in "+parentKey);stack.push(data),utils.forEach(data,(function each(value,key){if(!utils.isUndefined(value)){var arr,fullKey=parentKey?parentKey+"."+key:key;if(value&&!parentKey&&"object"==typeof value)if(utils.endsWith(key,"{}"))value=JSON.stringify(value);else if(utils.endsWith(key,"[]")&&(arr=utils.toArray(value)))return void arr.forEach((function(el){!utils.isUndefined(el)&&formData.append(fullKey,convertValue(el))}));build(value,fullKey)}})),stack.pop()}else formData.append(parentKey,convertValue(data))}(obj),formData},cookies=utils.isStandardBrowserEnv()?function standardBrowserEnv(){return{write:function write(name,value,expires,path,domain,secure){var cookie=[];cookie.push(name+"="+encodeURIComponent(value)),utils.isNumber(expires)&&cookie.push("expires="+new Date(expires).toGMTString()),utils.isString(path)&&cookie.push("path="+path),utils.isString(domain)&&cookie.push("domain="+domain),!0===secure&&cookie.push("secure"),document.cookie=cookie.join("; ")},read:function read(name){var match=document.cookie.match(new RegExp("(^|;\\s*)("+name+")=([^;]*)"));return match?decodeURIComponent(match[3]):null},remove:function remove(name){this.write(name,"",Date.now()-864e5)}}}():{write:function write(){},read:function read(){return null},remove:function remove(){}},buildFullPath=function buildFullPath(baseURL,requestedURL){return baseURL&&!function isAbsoluteURL(url){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(url)}(requestedURL)?function combineURLs(baseURL,relativeURL){return relativeURL?baseURL.replace(/\/+$/,"")+"/"+relativeURL.replace(/^\/+/,""):baseURL}(baseURL,requestedURL):requestedURL},ignoreDuplicateOf=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"],isURLSameOrigin=utils.isStandardBrowserEnv()?function standardBrowserEnv(){var originURL,msie=/(msie|trident)/i.test(navigator.userAgent),urlParsingNode=document.createElement("a");function resolveURL(url){var href=url;return msie&&(urlParsingNode.setAttribute("href",href),href=urlParsingNode.href),urlParsingNode.setAttribute("href",href),{href:urlParsingNode.href,protocol:urlParsingNode.protocol?urlParsingNode.protocol.replace(/:$/,""):"",host:urlParsingNode.host,search:urlParsingNode.search?urlParsingNode.search.replace(/^\?/,""):"",hash:urlParsingNode.hash?urlParsingNode.hash.replace(/^#/,""):"",hostname:urlParsingNode.hostname,port:urlParsingNode.port,pathname:"/"===urlParsingNode.pathname.charAt(0)?urlParsingNode.pathname:"/"+urlParsingNode.pathname}}return originURL=resolveURL(window.location.href),function isURLSameOrigin(requestURL){var parsed=utils.isString(requestURL)?resolveURL(requestURL):requestURL;return parsed.protocol===originURL.protocol&&parsed.host===originURL.host}}():function isURLSameOrigin(){return!0};function CanceledError(message){AxiosError_1.call(this,null==message?"canceled":message,AxiosError_1.ERR_CANCELED),this.name="CanceledError"}utils.inherits(CanceledError,AxiosError_1,{__CANCEL__:!0});var CanceledError_1=CanceledError,xhr=function xhrAdapter(config){return new Promise((function dispatchXhrRequest(resolve,reject){var onCanceled,requestData=config.data,requestHeaders=config.headers,responseType=config.responseType;function done(){config.cancelToken&&config.cancelToken.unsubscribe(onCanceled),config.signal&&config.signal.removeEventListener("abort",onCanceled)}utils.isFormData(requestData)&&utils.isStandardBrowserEnv()&&delete requestHeaders["Content-Type"];var request=new XMLHttpRequest;if(config.auth){var username=config.auth.username||"",password=config.auth.password?unescape(encodeURIComponent(config.auth.password)):"";requestHeaders.Authorization="Basic "+btoa(username+":"+password)}var fullPath=buildFullPath(config.baseURL,config.url);function onloadend(){if(request){var responseHeaders="getAllResponseHeaders"in request?function parseHeaders(headers){var key,val,i,parsed={};return headers?(utils.forEach(headers.split("\n"),(function parser(line){if(i=line.indexOf(":"),key=utils.trim(line.substr(0,i)).toLowerCase(),val=utils.trim(line.substr(i+1)),key){if(parsed[key]&&ignoreDuplicateOf.indexOf(key)>=0)return;parsed[key]="set-cookie"===key?(parsed[key]?parsed[key]:[]).concat([val]):parsed[key]?parsed[key]+", "+val:val}})),parsed):parsed}(request.getAllResponseHeaders()):null;!function settle(resolve,reject,response){var validateStatus=response.config.validateStatus;response.status&&validateStatus&&!validateStatus(response.status)?reject(new AxiosError_1("Request failed with status code "+response.status,[AxiosError_1.ERR_BAD_REQUEST,AxiosError_1.ERR_BAD_RESPONSE][Math.floor(response.status/100)-4],response.config,response.request,response)):resolve(response)}((function _resolve(value){resolve(value),done()}),(function _reject(err){reject(err),done()}),{data:responseType&&"text"!==responseType&&"json"!==responseType?request.response:request.responseText,status:request.status,statusText:request.statusText,headers:responseHeaders,config:config,request:request}),request=null}}if(request.open(config.method.toUpperCase(),buildURL(fullPath,config.params,config.paramsSerializer),!0),request.timeout=config.timeout,"onloadend"in request?request.onloadend=onloadend:request.onreadystatechange=function handleLoad(){request&&4===request.readyState&&(0!==request.status||request.responseURL&&0===request.responseURL.indexOf("file:"))&&setTimeout(onloadend)},request.onabort=function handleAbort(){request&&(reject(new AxiosError_1("Request aborted",AxiosError_1.ECONNABORTED,config,request)),request=null)},request.onerror=function handleError(){reject(new AxiosError_1("Network Error",AxiosError_1.ERR_NETWORK,config,request,request)),request=null},request.ontimeout=function handleTimeout(){var timeoutErrorMessage=config.timeout?"timeout of "+config.timeout+"ms exceeded":"timeout exceeded",transitional$1=config.transitional||transitional;config.timeoutErrorMessage&&(timeoutErrorMessage=config.timeoutErrorMessage),reject(new AxiosError_1(timeoutErrorMessage,transitional$1.clarifyTimeoutError?AxiosError_1.ETIMEDOUT:AxiosError_1.ECONNABORTED,config,request)),request=null},utils.isStandardBrowserEnv()){var xsrfValue=(config.withCredentials||isURLSameOrigin(fullPath))&&config.xsrfCookieName?cookies.read(config.xsrfCookieName):void 0;xsrfValue&&(requestHeaders[config.xsrfHeaderName]=xsrfValue)}"setRequestHeader"in request&&utils.forEach(requestHeaders,(function setRequestHeader(val,key){void 0===requestData&&"content-type"===key.toLowerCase()?delete requestHeaders[key]:request.setRequestHeader(key,val)})),utils.isUndefined(config.withCredentials)||(request.withCredentials=!!config.withCredentials),responseType&&"json"!==responseType&&(request.responseType=config.responseType),"function"==typeof config.onDownloadProgress&&request.addEventListener("progress",config.onDownloadProgress),"function"==typeof config.onUploadProgress&&request.upload&&request.upload.addEventListener("progress",config.onUploadProgress),(config.cancelToken||config.signal)&&(onCanceled=function onCanceled(cancel){request&&(reject(!cancel||cancel&&cancel.type?new CanceledError_1:cancel),request.abort(),request=null)},config.cancelToken&&config.cancelToken.subscribe(onCanceled),config.signal&&(config.signal.aborted?onCanceled():config.signal.addEventListener("abort",onCanceled))),requestData||(requestData=null);var protocol=function parseProtocol(url){var match=/^([-+\w]{1,25})(:?\/\/|:)/.exec(url);return match&&match[1]||""}(fullPath);protocol&&-1===["http","https","file"].indexOf(protocol)?reject(new AxiosError_1("Unsupported protocol "+protocol+":",AxiosError_1.ERR_BAD_REQUEST,config)):request.send(requestData)}))},DEFAULT_CONTENT_TYPE={"Content-Type":"application/x-www-form-urlencoded"};function setContentTypeIfUnset(headers,value){!utils.isUndefined(headers)&&utils.isUndefined(headers["Content-Type"])&&(headers["Content-Type"]=value)}var defaults={transitional:transitional,adapter:function getDefaultAdapter(){var adapter;return("undefined"!=typeof XMLHttpRequest||void 0!==process&&"[object process]"===Object.prototype.toString.call(process))&&(adapter=xhr),adapter}(),transformRequest:[function transformRequest(data,headers){if(normalizeHeaderName(headers,"Accept"),normalizeHeaderName(headers,"Content-Type"),utils.isFormData(data)||utils.isArrayBuffer(data)||utils.isBuffer(data)||utils.isStream(data)||utils.isFile(data)||utils.isBlob(data))return data;if(utils.isArrayBufferView(data))return data.buffer;if(utils.isURLSearchParams(data))return setContentTypeIfUnset(headers,"application/x-www-form-urlencoded;charset=utf-8"),data.toString();var isFileList,isObjectPayload=utils.isObject(data),contentType=headers&&headers["Content-Type"];if((isFileList=utils.isFileList(data))||isObjectPayload&&"multipart/form-data"===contentType){var _FormData=this.env&&this.env.FormData;return toFormData_1(isFileList?{"files[]":data}:data,_FormData&&new _FormData)}return isObjectPayload||"application/json"===contentType?(setContentTypeIfUnset(headers,"application/json"),function stringifySafely(rawValue,parser,encoder){if(utils.isString(rawValue))try{return(parser||JSON.parse)(rawValue),utils.trim(rawValue)}catch(e){if("SyntaxError"!==e.name)throw e}return(encoder||JSON.stringify)(rawValue)}(data)):data}],transformResponse:[function transformResponse(data){var transitional=this.transitional||defaults.transitional,silentJSONParsing=transitional&&transitional.silentJSONParsing,forcedJSONParsing=transitional&&transitional.forcedJSONParsing,strictJSONParsing=!silentJSONParsing&&"json"===this.responseType;if(strictJSONParsing||forcedJSONParsing&&utils.isString(data)&&data.length)try{return JSON.parse(data)}catch(e){if(strictJSONParsing){if("SyntaxError"===e.name)throw AxiosError_1.from(e,AxiosError_1.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return data}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:null},validateStatus:function validateStatus(status){return status>=200&&status<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};utils.forEach(["delete","get","head"],(function forEachMethodNoData(method){defaults.headers[method]={}})),utils.forEach(["post","put","patch"],(function forEachMethodWithData(method){defaults.headers[method]=utils.merge(DEFAULT_CONTENT_TYPE)}));var defaults_1=defaults,transformData=function transformData(data,headers,fns){var context=this||defaults_1;return utils.forEach(fns,(function transform(fn){data=fn.call(context,data,headers)})),data},isCancel=function isCancel(value){return!(!value||!value.__CANCEL__)};function throwIfCancellationRequested(config){if(config.cancelToken&&config.cancelToken.throwIfRequested(),config.signal&&config.signal.aborted)throw new CanceledError_1}var dispatchRequest=function dispatchRequest(config){return throwIfCancellationRequested(config),config.headers=config.headers||{},config.data=transformData.call(config,config.data,config.headers,config.transformRequest),config.headers=utils.merge(config.headers.common||{},config.headers[config.method]||{},config.headers),utils.forEach(["delete","get","head","post","put","patch","common"],(function cleanHeaderConfig(method){delete config.headers[method]})),(config.adapter||defaults_1.adapter)(config).then((function onAdapterResolution(response){return throwIfCancellationRequested(config),response.data=transformData.call(config,response.data,response.headers,config.transformResponse),response}),(function onAdapterRejection(reason){return isCancel(reason)||(throwIfCancellationRequested(config),reason&&reason.response&&(reason.response.data=transformData.call(config,reason.response.data,reason.response.headers,config.transformResponse))),Promise.reject(reason)}))},mergeConfig=function mergeConfig(config1,config2){config2=config2||{};var config={};function getMergedValue(target,source){return utils.isPlainObject(target)&&utils.isPlainObject(source)?utils.merge(target,source):utils.isPlainObject(source)?utils.merge({},source):utils.isArray(source)?source.slice():source}function mergeDeepProperties(prop){return utils.isUndefined(config2[prop])?utils.isUndefined(config1[prop])?void 0:getMergedValue(void 0,config1[prop]):getMergedValue(config1[prop],config2[prop])}function valueFromConfig2(prop){if(!utils.isUndefined(config2[prop]))return getMergedValue(void 0,config2[prop])}function defaultToConfig2(prop){return utils.isUndefined(config2[prop])?utils.isUndefined(config1[prop])?void 0:getMergedValue(void 0,config1[prop]):getMergedValue(void 0,config2[prop])}function mergeDirectKeys(prop){return prop in config2?getMergedValue(config1[prop],config2[prop]):prop in config1?getMergedValue(void 0,config1[prop]):void 0}var mergeMap={url:valueFromConfig2,method:valueFromConfig2,data:valueFromConfig2,baseURL:defaultToConfig2,transformRequest:defaultToConfig2,transformResponse:defaultToConfig2,paramsSerializer:defaultToConfig2,timeout:defaultToConfig2,timeoutMessage:defaultToConfig2,withCredentials:defaultToConfig2,adapter:defaultToConfig2,responseType:defaultToConfig2,xsrfCookieName:defaultToConfig2,xsrfHeaderName:defaultToConfig2,onUploadProgress:defaultToConfig2,onDownloadProgress:defaultToConfig2,decompress:defaultToConfig2,maxContentLength:defaultToConfig2,maxBodyLength:defaultToConfig2,beforeRedirect:defaultToConfig2,transport:defaultToConfig2,httpAgent:defaultToConfig2,httpsAgent:defaultToConfig2,cancelToken:defaultToConfig2,socketPath:defaultToConfig2,responseEncoding:defaultToConfig2,validateStatus:mergeDirectKeys};return utils.forEach(Object.keys(config1).concat(Object.keys(config2)),(function computeConfigValue(prop){var merge=mergeMap[prop]||mergeDeepProperties,configValue=merge(prop);utils.isUndefined(configValue)&&merge!==mergeDirectKeys||(config[prop]=configValue)})),config},data_version="0.27.2",VERSION=data_version,validators$1={};["object","boolean","number","function","string","symbol"].forEach((function(type,i){validators$1[type]=function validator(thing){return typeof thing===type||"a"+(i<1?"n ":" ")+type}}));var deprecatedWarnings={};validators$1.transitional=function transitional(validator,version,message){function formatMessage(opt,desc){return"[Axios v"+VERSION+"] Transitional option '"+opt+"'"+desc+(message?". "+message:"")}return function(value,opt,opts){if(!1===validator)throw new AxiosError_1(formatMessage(opt," has been removed"+(version?" in "+version:"")),AxiosError_1.ERR_DEPRECATED);return version&&!deprecatedWarnings[opt]&&(deprecatedWarnings[opt]=!0,console.warn(formatMessage(opt," has been deprecated since v"+version+" and will be removed in the near future"))),!validator||validator(value,opt,opts)}};var validator={assertOptions:function assertOptions(options,schema,allowUnknown){if("object"!=typeof options)throw new AxiosError_1("options must be an object",AxiosError_1.ERR_BAD_OPTION_VALUE);for(var keys=Object.keys(options),i=keys.length;i-- >0;){var opt=keys[i],validator=schema[opt];if(validator){var value=options[opt],result=void 0===value||validator(value,opt,options);if(!0!==result)throw new AxiosError_1("option "+opt+" must be "+result,AxiosError_1.ERR_BAD_OPTION_VALUE)}else if(!0!==allowUnknown)throw new AxiosError_1("Unknown option "+opt,AxiosError_1.ERR_BAD_OPTION)}},validators:validators$1},validators=validator.validators;function Axios(instanceConfig){this.defaults=instanceConfig,this.interceptors={request:new InterceptorManager_1,response:new InterceptorManager_1}}Axios.prototype.request=function request(configOrUrl,config){"string"==typeof configOrUrl?(config=config||{}).url=configOrUrl:config=configOrUrl||{},(config=mergeConfig(this.defaults,config)).method?config.method=config.method.toLowerCase():this.defaults.method?config.method=this.defaults.method.toLowerCase():config.method="get";var transitional=config.transitional;void 0!==transitional&&validator.assertOptions(transitional,{silentJSONParsing:validators.transitional(validators.boolean),forcedJSONParsing:validators.transitional(validators.boolean),clarifyTimeoutError:validators.transitional(validators.boolean)},!1);var requestInterceptorChain=[],synchronousRequestInterceptors=!0;this.interceptors.request.forEach((function unshiftRequestInterceptors(interceptor){"function"==typeof interceptor.runWhen&&!1===interceptor.runWhen(config)||(synchronousRequestInterceptors=synchronousRequestInterceptors&&interceptor.synchronous,requestInterceptorChain.unshift(interceptor.fulfilled,interceptor.rejected))}));var promise,responseInterceptorChain=[];if(this.interceptors.response.forEach((function pushResponseInterceptors(interceptor){responseInterceptorChain.push(interceptor.fulfilled,interceptor.rejected)})),!synchronousRequestInterceptors){var chain=[dispatchRequest,void 0];for(Array.prototype.unshift.apply(chain,requestInterceptorChain),chain=chain.concat(responseInterceptorChain),promise=Promise.resolve(config);chain.length;)promise=promise.then(chain.shift(),chain.shift());return promise}for(var newConfig=config;requestInterceptorChain.length;){var onFulfilled=requestInterceptorChain.shift(),onRejected=requestInterceptorChain.shift();try{newConfig=onFulfilled(newConfig)}catch(error){onRejected(error);break}}try{promise=dispatchRequest(newConfig)}catch(error){return Promise.reject(error)}for(;responseInterceptorChain.length;)promise=promise.then(responseInterceptorChain.shift(),responseInterceptorChain.shift());return promise},Axios.prototype.getUri=function getUri(config){config=mergeConfig(this.defaults,config);var fullPath=buildFullPath(config.baseURL,config.url);return buildURL(fullPath,config.params,config.paramsSerializer)},utils.forEach(["delete","get","head","options"],(function forEachMethodNoData(method){Axios.prototype[method]=function(url,config){return this.request(mergeConfig(config||{},{method:method,url:url,data:(config||{}).data}))}})),utils.forEach(["post","put","patch"],(function forEachMethodWithData(method){function generateHTTPMethod(isForm){return function httpMethod(url,data,config){return this.request(mergeConfig(config||{},{method:method,headers:isForm?{"Content-Type":"multipart/form-data"}:{},url:url,data:data}))}}Axios.prototype[method]=generateHTTPMethod(),Axios.prototype[method+"Form"]=generateHTTPMethod(!0)}));var Axios_1=Axios;function CancelToken(executor){if("function"!=typeof executor)throw new TypeError("executor must be a function.");var resolvePromise;this.promise=new Promise((function promiseExecutor(resolve){resolvePromise=resolve}));var token=this;this.promise.then((function(cancel){if(token._listeners){var i,l=token._listeners.length;for(i=0;i<l;i++)token._listeners[i](cancel);token._listeners=null}})),this.promise.then=function(onfulfilled){var _resolve,promise=new Promise((function(resolve){token.subscribe(resolve),_resolve=resolve})).then(onfulfilled);return promise.cancel=function reject(){token.unsubscribe(_resolve)},promise},executor((function cancel(message){token.reason||(token.reason=new CanceledError_1(message),resolvePromise(token.reason))}))}CancelToken.prototype.throwIfRequested=function throwIfRequested(){if(this.reason)throw this.reason},CancelToken.prototype.subscribe=function subscribe(listener){this.reason?listener(this.reason):this._listeners?this._listeners.push(listener):this._listeners=[listener]},CancelToken.prototype.unsubscribe=function unsubscribe(listener){if(this._listeners){var index=this._listeners.indexOf(listener);-1!==index&&this._listeners.splice(index,1)}},CancelToken.source=function source(){var cancel;return{token:new CancelToken((function executor(c){cancel=c})),cancel:cancel}};var CancelToken_1=CancelToken;var axios$1=function createInstance(defaultConfig){var context=new Axios_1(defaultConfig),instance=bind(Axios_1.prototype.request,context);return utils.extend(instance,Axios_1.prototype,context),utils.extend(instance,context),instance.create=function create(instanceConfig){return createInstance(mergeConfig(defaultConfig,instanceConfig))},instance}(defaults_1);axios$1.Axios=Axios_1,axios$1.CanceledError=CanceledError_1,axios$1.CancelToken=CancelToken_1,axios$1.isCancel=isCancel,axios$1.VERSION=data_version,axios$1.toFormData=toFormData_1,axios$1.AxiosError=AxiosError_1,axios$1.Cancel=axios$1.CanceledError,axios$1.all=function all(promises){return Promise.all(promises)},axios$1.spread=function spread(callback){return function wrap(arr){return callback.apply(null,arr)}},axios$1.isAxiosError=function isAxiosError(payload){return utils.isObject(payload)&&!0===payload.isAxiosError};var axios_1=axios$1,_default=axios$1;axios_1.default=_default;var axios=axios_1,naiveFallback=function naiveFallback(){if("object"==typeof self&&self)return self;if("object"==typeof window&&window)return window;throw new Error("Unable to resolve global `this`")},globalThis_1=function(){if(this)return this;if("object"==typeof globalThis&&globalThis)return globalThis;try{Object.defineProperty(Object.prototype,"__global__",{get:function get(){return this},configurable:!0})}catch(error){return naiveFallback()}try{return __global__||naiveFallback()}finally{delete Object.prototype.__global__}}(),ENDPOINT_KEY=Symbol.for("verdocs-default-endpoint"),requestLogger=function requestLogger(r){return console.debug("[JS-SDK] ".concat(r.method.toUpperCase()," ").concat(r.baseURL).concat(r.url),r.data?JSON.stringify(r.data):""),r},VerdocsEndpoint=function(){function VerdocsEndpoint(options){this.environment="verdocs",this.sessionType="user",this.baseURL="https://api.verdocs.com",this.clientID="not-set",this.timeout=3e3,this.token=null,this.nextListenerId=0,this.sessionListeners=new Map,this.requestLoggerId=null,this.session=null,this.Documents=Documents,this.baseURL=(null==options?void 0:options.baseURL)||"https://api.verdocs.com",this.timeout=(null==options?void 0:options.timeout)||3e3,this.environment=(null==options?void 0:options.environment)||"verdocs",this.sessionType=(null==options?void 0:options.sessionType)||"user",this.clientID=(null==options?void 0:options.clientID)||"not-set",this.api=axios.create({baseURL:this.baseURL,timeout:this.timeout})}return VerdocsEndpoint.prototype.setDefault=function(){globalThis_1[ENDPOINT_KEY]=this},VerdocsEndpoint.getDefault=function(){return globalThis_1[ENDPOINT_KEY]?window.console.debug("[JS SDK] Re-using existing endpoint",globalThis_1[ENDPOINT_KEY]):(globalThis_1[ENDPOINT_KEY]=new VerdocsEndpoint,window.console.debug("[JS_SDK] Created default endpoint",globalThis_1[ENDPOINT_KEY])),globalThis_1[ENDPOINT_KEY]},VerdocsEndpoint.prototype.getEnvironment=function(){return this.environment},VerdocsEndpoint.prototype.getSessionType=function(){return this.sessionType},VerdocsEndpoint.prototype.getBaseURL=function(){return this.baseURL},VerdocsEndpoint.prototype.getClientID=function(){return this.clientID},VerdocsEndpoint.prototype.getTimeout=function(){return this.timeout},VerdocsEndpoint.prototype.getSession=function(){return this.session},VerdocsEndpoint.prototype.setEnvironment=function(environment){return this.environment=environment,this},VerdocsEndpoint.prototype.setSessionType=function(sessionType){return this.sessionType=sessionType,this},VerdocsEndpoint.prototype.setBaseURL=function(url){return this.api.defaults.baseURL=url,this},VerdocsEndpoint.prototype.setClientID=function(clientID){return this.clientID=clientID,this.api.defaults.headers.common["X-Client-ID"]=clientID,this},VerdocsEndpoint.prototype.setTimeout=function(timeout){return this.timeout=timeout,this.api.defaults.timeout=timeout,this},VerdocsEndpoint.prototype.logRequests=function(enable){return enable&&null===this.requestLoggerId?this.requestLoggerId=this.api.interceptors.request.use(requestLogger):enable||null===this.requestLoggerId||this.api.interceptors.request.eject(this.requestLoggerId),this},VerdocsEndpoint.prototype.setToken=function(token){if(!token)return this.clearSession();var session=decodeAccessTokenBody(token);return null===session||session.exp&&1e3*session.exp<(new Date).getTime()?this.clearSession():(this.token=token,this.session=session,this.api.defaults.headers.common.Authorization="Bearer ".concat(token),localStorage.setItem(this.sessionStorageKey(),token),this.notifySessionListeners(),this)},VerdocsEndpoint.prototype.getToken=function(){return this.token},VerdocsEndpoint.prototype.sessionStorageKey=function(){return"verdocs-session-".concat(this.getSessionType(),"-").concat(this.getEnvironment())},VerdocsEndpoint.prototype.clearSession=function(){return localStorage.removeItem(this.sessionStorageKey()),delete this.api.defaults.headers.common.Authorization,this.session=null,this.token=null,this.notifySessionListeners(),this},VerdocsEndpoint.prototype.notifySessionListeners=function(){var _this=this;this.sessionListeners.forEach((function(listener){try{listener(_this,_this.session)}catch(e){}}))},VerdocsEndpoint.prototype.onSessionChanged=function(listener){var _this=this;this.nextListenerId++;var listenerSymbol=Symbol.for(""+this.nextListenerId);return this.sessionListeners.set(listenerSymbol,listener),function(){_this.sessionListeners.delete(listenerSymbol)}},VerdocsEndpoint.prototype.loadSession=function(){var token=localStorage.getItem(this.sessionStorageKey());return token?this.setToken(token):this.clearSession()},VerdocsEndpoint}()}).call(this,__webpack_require__("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer,__webpack_require__("./node_modules/process/browser.js"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,