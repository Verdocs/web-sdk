(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{"./dist/esm/verdocs-checkbox.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_checkbox",(function(){return VerdocsCheckbox}));__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var _index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./dist/esm/index-f78d163d.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}var VerdocsCheckbox=function(){function VerdocsCheckbox(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsCheckbox),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__.j)(this,hostRef),this.checked=!1,this.name="",this.label="",this.value="",this.theme="light",this.disabled=!1}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsCheckbox,[{key:"render",value:function render(){var _class;return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__.b,{class:(_class={disabled:this.disabled},_class[this.theme]=!0,_class)},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__.h)("label",null,Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__.h)("input",{type:"checkbox",value:this.value,name:this.name,checked:this.checked,disabled:this.disabled}),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_8__.h)("span",null,this.label)))}}]),VerdocsCheckbox}();VerdocsCheckbox.style='@charset "UTF-8";verdocs-checkbox{font-family:"Inter", -apple-system, "Segoe UI", "Roboto", "Helvetica Neue", sans-serif;line-height:18px}verdocs-checkbox label>input[type=checkbox]{display:none}verdocs-checkbox label>input[type=checkbox]+*::before{content:"";width:1rem;height:1rem;-ms-flex-negative:0;flex-shrink:0;line-height:18px;border-radius:2px;border-style:solid;margin-right:0.5rem;border-width:0.1rem;display:inline-block;vertical-align:bottom;border-color:#aeb4bf}verdocs-checkbox label>input[type=checkbox]:checked+*{color:#55bc81}verdocs-checkbox label>input[type=checkbox]:checked+*::before{content:"âœ“";color:white;text-align:center;background:#55bc81;border-color:#55bc81}verdocs-checkbox.dark label>input[type=checkbox]+*::before{border-color:#ffffff}verdocs-checkbox.dark label>input[type=checkbox]:checked+*::before{background:#55bc81;border-color:#55bc81}'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvdmVyZG9jcy1jaGVja2JveC92ZXJkb2NzLWNoZWNrYm94LnNjc3MiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL2NvbnRyb2xzL3ZlcmRvY3MtY2hlY2tib3gvdmVyZG9jcy1jaGVja2JveC50c3giXSwibmFtZXMiOlsiVmVyZG9jc0NoZWNrYm94IiwicmVuZGVyIiwiaCIsIkhvc3QiLCJjbGFzcyIsImRpc2FibGVkIiwidGhpcyIsInRoZW1lIiwidHlwZSIsInZhbHVlIiwibmFtZSIsImNoZWNrZWQiLCJsYWJlbCJdLCJtYXBwaW5ncyI6Im9yREFBQSxJQ3dCYUEsZ0JBQWUsVyw4UkFJQyxFLFVBS0osRyxXQU1DLEcsV0FPQSxHLFdBS1UsUSxlQUtMLEMsQ0FXNUIsTyx3U0FURCxTQUFBQyxTQUFNLFdBQ0osT0FDRUMsMERBQUNDLGtEQUFJLENBQUNDLE9BQUEsUUFBUUMsU0FBVUMsS0FBS0QsVUFBUSxPQUFHQyxLQUFLQyxRQUFRLEVBQUksU0FDdkRMLHVFQUNFQSxtRUFBT00sS0FBSyxXQUFXQyxNQUFPSCxLQUFLRyxNQUFPQyxLQUFNSixLQUFLSSxLQUFNQyxRQUFTTCxLQUFLSyxRQUFTTixTQUFVQyxLQUFLRCxXQUNqR0gsc0VBQU9JLEtBQUtNLFEsS0FJbkIsZ0JBM0N5QixHLHNCRHhCRCw0MkIiLCJmaWxlIjoiNDEuYzk3YTljNzIuaWZyYW1lLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgJy4uLy4uLy4uL3RoZW1lLnNjc3MnO1xuXG4vLyBZb3VyIHBlcmlvZGljIHJlbWluZGVyIHRoYXQgaXQncyAyMDIyIGFuZCB5b3Ugc3RpbGwgY2FuJ3Qgc3R5bGUgSFRNTCBjaGVja2JveGVzXG52ZXJkb2NzLWNoZWNrYm94IHtcbiAgZm9udC1mYW1pbHk6ICR2ZXJkb2NzLXByaW1hcnktZm9udDtcbiAgbGluZS1oZWlnaHQ6IDE4cHg7XG5cbiAgbGFiZWwgPiBpbnB1dFt0eXBlPSdjaGVja2JveCddIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5cbiAgbGFiZWwgPiBpbnB1dFt0eXBlPSdjaGVja2JveCddICsgKjo6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnJztcbiAgICB3aWR0aDogMXJlbTtcbiAgICBoZWlnaHQ6IDFyZW07XG4gICAgZmxleC1zaHJpbms6IDA7XG4gICAgbGluZS1oZWlnaHQ6IDE4cHg7XG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgbWFyZ2luLXJpZ2h0OiAwLjVyZW07XG4gICAgYm9yZGVyLXdpZHRoOiAwLjFyZW07XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XG4gICAgYm9yZGVyLWNvbG9yOiAkdmVyZG9jcy1ncmV5LTI7XG4gIH1cblxuICBsYWJlbCA+IGlucHV0W3R5cGU9J2NoZWNrYm94J106Y2hlY2tlZCArICoge1xuICAgIGNvbG9yOiAkdmVyZG9jcy1ncmVlbjtcbiAgfVxuXG4gIGxhYmVsID4gaW5wdXRbdHlwZT0nY2hlY2tib3gnXTpjaGVja2VkICsgKjo6YmVmb3JlIHtcbiAgICBjb250ZW50OiAn4pyTJztcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGJhY2tncm91bmQ6ICR2ZXJkb2NzLWdyZWVuO1xuICAgIGJvcmRlci1jb2xvcjogJHZlcmRvY3MtZ3JlZW47XG4gIH1cblxuICAmLmRhcmsge1xuICAgIGxhYmVsID4gaW5wdXRbdHlwZT0nY2hlY2tib3gnXSArICo6OmJlZm9yZSB7XG4gICAgICBib3JkZXItY29sb3I6ICR2ZXJkb2NzLWdyZXktNDtcbiAgICB9XG5cbiAgICBsYWJlbCA+IGlucHV0W3R5cGU9J2NoZWNrYm94J106Y2hlY2tlZCArICo6OmJlZm9yZSB7XG4gICAgICBiYWNrZ3JvdW5kOiAkdmVyZG9jcy1ncmVlbjtcbiAgICAgIGJvcmRlci1jb2xvcjogJHZlcmRvY3MtZ3JlZW47XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgaCwgSG9zdCwgUHJvcH0gZnJvbSAnQHN0ZW5jaWwvY29yZSc7XG5cbi8qKlxuICogRGlzcGxheXMgYSBjaGVjayBib3guIE5vdGUgdGhhdCB0aGlzIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBgdmVyZG9jcy1maWVsZC1jaGVja2JveGAgY29tcG9uZW50LCB3aGljaCBpcyBkZXNpZ25lZFxuICogdG8gYmUgdXNlZCBpbiBzaWduaW5nIGV4cGVyaWVuY2VzIGFuZCBjb250YWlucyBzZXR0aW5ncyB0aGF0IGNvbm5lY3QgdG8gdGVtcGxhdGUgZmllbGRzLiBUaGlzIGlzIGp1c3QgYSBzaW1wbGUgY2hlY2tcbiAqIGJveCBmb3IgVUkgZGlzcGxheXMgZS5nLiBkaWFsb2cgYm94ZXMuXG4gKlxuICogVGhpcyBjb250cm9sIGVuY2Fwc3VsYXRlcyBhIHN0YW5kYXJkIEhUTUwgY2hlY2tib3guIFRvIHN1YnNjcmliZSB0byBjaGFuZ2UgZXZlbnRzLCBjb25uZWN0IGFuIGBvbkNoYW5nZWBcbiAqIGhhbmRsZXIuIFNhbXBsZSB1c2FnZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8dmVyZG9jcy1jaGVja2JveFxuICogICAgdmFsdWU9XCJvblwiXG4gKiAgICBuYW1lPVwidGhpbmdFbmFibGVkXCJcbiAqICAgIGNoZWNrZWQ9e3RoaXMudGhpbmdFbmFibGVkfVxuICogICAgb25JbnB1dD17KGU6IGFueSkgPT4gKHRoaXMudGhpbmdFbmFibGVkID0gZS50YXJnZXQuY2hlY2tlZCl9XG4gKiAvPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICB0YWc6ICd2ZXJkb2NzLWNoZWNrYm94JyxcbiAgc3R5bGVVcmw6ICd2ZXJkb2NzLWNoZWNrYm94LnNjc3MnLFxuICBzaGFkb3c6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBWZXJkb2NzQ2hlY2tib3gge1xuICAvKipcbiAgICogV2hldGhlciB0aGUgcmFkaW8gYnV0dG9uIGlzIGN1cnJlbnRseSBzZWxlY3RlZC5cbiAgICovXG4gIEBQcm9wKCkgY2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBIVE1MIGZvcm0gZmllbGQgbmFtZSBmb3IgdGhlIGlucHV0LlxuICAgKi9cbiAgQFByb3AoKSBuYW1lOiBzdHJpbmcgPSAnJztcblxuICAvKipcbiAgICogTGFiZWwgdG8gZGlzcGxheS4gTGVhdmUgYmxhbmsgZm9yIG5vIGxhYmVsLiBUaGUgbGFiZWwgd2lsbCBiZSBkaXNwbGF5ZWQgdG8gdGhlIHJpZ2h0IG9mIHRoZSBjaGVja2JveCwgYnV0IG1heSBiZVxuICAgKiByZXBvc2l0aW9uZWQgd2l0aCBDU1MuXG4gICAqL1xuICBAUHJvcCgpIGxhYmVsOiBzdHJpbmcgPSAnJztcblxuICAvKipcbiAgICogVmFsdWUgdG8gdHJhY2sgd2l0aCB0aGUgaW5wdXQuIFZhbHVlIGlzIG5vdCB1c2VkIGludGVybmFsbHkgYnkgdGhpcyBjb21wb25lbnQgYnV0IGlzIHNvbWV0aW1lcyB1c2VmdWwgdG8gc2V0XG4gICAqIGJlY2F1c2UgaXQgY2FuIGJlIHJldHJpZXZlZCBpbiBldmVudCBoYW5kbGVycyB2aWEgZS50YXJnZXQudmFsdWUuIFRoaXMgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgd2hpY2hcbiAgICogY2hlY2tib3ggd2FzIGNsaWNrZWQgaW4gYSBjaGVja2JveCBncm91cC5cbiAgICovXG4gIEBQcm9wKCkgdmFsdWU6IHN0cmluZyA9ICcnO1xuXG4gIC8qKlxuICAgKiBTdHlsZSBvZiBjaGVja2JveCB0byByZW5kZXIuIFVzZSAnZGFyaycgd2hlbiByZW5kZXJpbmcgb24gYSBkYXJrIGJhY2tncm91bmQuXG4gICAqL1xuICBAUHJvcCgpIHRoZW1lOiAnbGlnaHQnIHwgJ2RhcmsnID0gJ2xpZ2h0JztcblxuICAvKipcbiAgICogSWYgc2V0LCB0aGUgYnV0dG9uIHdpbGwgc3RpbGwgYmUgZGlzcGxheWVkIGJ1dCBub3Qgc2VsZWN0YWJsZS5cbiAgICovXG4gIEBQcm9wKCkgZGlzYWJsZWQ/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8SG9zdCBjbGFzcz17e2Rpc2FibGVkOiB0aGlzLmRpc2FibGVkLCBbdGhpcy50aGVtZV06IHRydWV9fT5cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT17dGhpcy52YWx1ZX0gbmFtZT17dGhpcy5uYW1lfSBjaGVja2VkPXt0aGlzLmNoZWNrZWR9IGRpc2FibGVkPXt0aGlzLmRpc2FibGVkfSAvPlxuICAgICAgICAgIDxzcGFuPnt0aGlzLmxhYmVsfTwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvSG9zdD5cbiAgICApO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9