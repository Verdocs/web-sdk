(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{"./dist/esm/verdocs-initial-dialog.entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"verdocs_initial_dialog",(function(){return VerdocsInitialDialog}));__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var _index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./dist/esm/index-f78d163d.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,(arg=descriptor.key,key=void 0,"symbol"==typeof(key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string"))?key:String(key)),descriptor)}var arg,key}var VerdocsInitialDialog=function(){function VerdocsInitialDialog(hostRef){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,VerdocsInitialDialog),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.j)(this,hostRef),this.next=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.e)(this,"next",7),this.cancel=Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.e)(this,"cancel",7),this.initials="",this.fontLoaded=!1,this.enteredInitials="",this.mode="type"}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}(VerdocsInitialDialog,[{key:"componentWillLoad",value:function componentWillLoad(){var _this=this;this.enteredInitials=this.initials.toUpperCase(),new FontFace("Dancing Script","url(https://fonts.gstatic.com/s/dancingscript/v19/If2cXTr6YS-zF4S-kcSWSVi_sxjsohD9F50Ruu7BMSo3Sup6hNX6plRP.woff)").load().then((function(font){document.fonts.add(font),_this.fontLoaded=!0}))}},{key:"componentDidLoad",value:function componentDidLoad(){this.redrawSignature()}},{key:"componentDidUpdate",value:function componentDidUpdate(){this.redrawSignature()}},{key:"redrawSignature",value:function redrawSignature(){if(this.canvasElement){var canvasWidth=this.canvasElement.width,context=this.canvasElement.getContext("2d");context.clearRect(0,0,this.canvasElement.width,this.canvasElement.height);var fontSize=100;do{fontSize-=2,context.font=fontSize+"px Dancing Script"}while(context.measureText(this.enteredInitials).width>canvasWidth-32);context.textAlign="center",context.textBaseline="middle",context.font=fontSize+"px Dancing Script",context.fillText(this.enteredInitials,this.canvasElement.width/2,this.canvasElement.height/2)}}},{key:"handleNameChange",value:function handleNameChange(e){this.enteredInitials=e.target.value}},{key:"handleCancel",value:function handleCancel(e){e.stopPropagation(),e.preventDefault(),this.cancel.emit()}},{key:"handleAdopt",value:function handleAdopt(e){e.stopPropagation(),e.preventDefault();var data=this.canvasElement.toDataURL("image/png");this.next.emit(data)}},{key:"render",value:function render(){var _this2=this;return Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.b,{onClick:function onClick(e){return _this2.handleCancel(e)}},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("div",{class:"dialog"},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("div",{class:"heading"},"Create Your Initial"),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("div",{class:"content"},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("verdocs-text-input",{placeholder:"Initials...",label:"Initials",value:this.enteredInitials,onInput:function onInput(e){return _this2.handleNameChange(e)}}),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("div",{class:"as-shown"},"As shown on driver's license or govt. ID card."),this.fontLoaded?Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("canvas",{ref:function ref(el){return _this2.canvasElement=el}}):Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("div",{style:{display:"none"}}),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("div",{class:"disclaimer"},"By clicking Adopt, I agree that the signature will be the electronic representation of my signature for all purposes when I (or my agent) use them on documents, including legally binding contracts â€” just the same as a pen-and-paper signature or initial."),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("div",{class:"buttons"},Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("verdocs-button",{label:"CANCEL",variant:"outline",onClick:function onClick(e){return _this2.handleCancel(e)}}),Object(_index_f78d163d_js__WEBPACK_IMPORTED_MODULE_7__.h)("verdocs-button",{label:"Adopt & Sign",onClick:function onClick(e){return _this2.handleAdopt(e)}})))))}}]),VerdocsInitialDialog}();VerdocsInitialDialog.style='verdocs-initial-dialog{font-family:"Barlow", sans-serif;-webkit-box-sizing:border-box;box-sizing:border-box;position:fixed;z-index:10000;top:0;left:0;right:0;bottom:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;background:#0000007f}verdocs-initial-dialog .dialog{width:100%;max-width:340px;border-radius:4px;overflow:hidden;-webkit-box-shadow:3px 3px 5px 1px rgba(40, 40, 40, 0.4);box-shadow:3px 3px 5px 1px rgba(40, 40, 40, 0.4);background:#f9f9f9}verdocs-initial-dialog .heading{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;padding:20px 20px 0 20px;line-height:28px;font-size:20px;font-weight:500}verdocs-initial-dialog .content{font-size:14px;padding:20px}verdocs-initial-dialog .buttons{display:-ms-flexbox;display:flex;margin:20px 0 0 0;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:end;justify-content:flex-end;-ms-flex-align:center;align-items:center}verdocs-initial-dialog .buttons verdocs-button{margin-left:16px}verdocs-initial-dialog canvas{background:#fff;-webkit-box-sizing:border-box;box-sizing:border-box;margin:0 auto;width:300px;height:79px;max-width:100%;-webkit-box-shadow:0 0 6px 0 #0000001f;box-shadow:0 0 6px 0 #0000001f}verdocs-initial-dialog .disclaimer{text-align:justify;padding:8px 0;font-size:11px;line-height:14px;color:rgba(0, 0, 0, 0.54)}verdocs-initial-dialog .as-shown{font-size:11px;margin:4px 0 20px 4px;color:rgba(0, 0, 0, 0.54)}verdocs-initial-dialog .tabs{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row}verdocs-initial-dialog .tabs .tab{padding:8px 15px;cursor:pointer}verdocs-initial-dialog .tabs .tab.active{border-bottom:2px solid #cccccc}verdocs-initial-dialog .tabs .tab:hover{color:#55bc81}'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,